<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2023-07-31T11:10:23.368Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EdDSA</title>
    <link href="https://kdevkr.github.io/eddsa/"/>
    <id>https://kdevkr.github.io/eddsa/</id>
    <published>2023-07-31T09:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://datatracker.ietf.org/doc/html/rfc8032">EdDSA(Edwards-curve Digital Signature Algorithm)</a>는 <code>Edwards-Curve</code> 곡선에 의한 전자 서명 알고리즘을 의미한다. 과거에 <a href="/ed25519">ED25519</a>에 대해서 정리한 것과 같이 ECDSA와 혼동이 될 수 있다. <a href="https://datatracker.ietf.org/doc/html/rfc8410">RFC8410</a>에서는 Internet X.509 Public Key Infrastructure 에서 Ed25519과 같은 Algorithm Identifiers에 대한 표준을 설명하고 있다.</p><h4 id="Curve25519-and-Curve448-Algorithm-Identifiers"><a href="#Curve25519-and-Curve448-Algorithm-Identifiers" class="headerlink" title="Curve25519 and Curve448 Algorithm Identifiers"></a>Curve25519 and Curve448 Algorithm Identifiers</h4><p>BouncyCastle의 <code>ECNamedCurveTable.getNames()</code>에는 기본적인 EC 곡선이 포함되어있고 <code>curve25519</code>는 CustomNamedCurves에 포함되어 있고 CustomBamedCurvse로 제공받은 X9ECParameters를 아래와 같이 ECParameterSpec으로 변경할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AlgorithmParameterSpec</span> <span class="token function">curve25519Spec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// NOTE: Ed25519 not contains in ECNamedCurveTable.getNames()</span>    <span class="token class-name">X9ECParameters</span> ecP <span class="token operator">=</span> <span class="token class-name">CustomNamedCurves</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"curve25519"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ECParameterSpec</span><span class="token punctuation">(</span>ecP<span class="token punctuation">.</span><span class="token function">getCurve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ecP<span class="token punctuation">.</span><span class="token function">getG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ecP<span class="token punctuation">.</span><span class="token function">getN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ecP<span class="token punctuation">.</span><span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ecP<span class="token punctuation">.</span><span class="token function">getSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Ed25519-키-페어-생성"><a href="#Ed25519-키-페어-생성" class="headerlink" title="Ed25519 키 페어 생성"></a>Ed25519 키 페어 생성</h4><p><code>Ed25519KeyPairGenerator</code>와 함께 <code>ECKeyGenerationParameters</code>를 사용하면 Ed25519 키 페어를 생성할 수 있다. 그런데 이미 Ed25519KeyGenerationParameters를 제공하고 있으므로 굳이 ECParameterSpec를 사용하는 코드를 작성할 필요가 없어진다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token class-name">TestKeyPairUsingECParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ECParameterSpec</span> curve25519Spec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ECParameterSpec</span><span class="token punctuation">)</span> <span class="token function">curve25519Spec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ECDomainParameters</span> ecParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ECDomainParameters</span><span class="token punctuation">(</span>curve25519Spec<span class="token punctuation">.</span><span class="token function">getCurve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curve25519Spec<span class="token punctuation">.</span><span class="token function">getG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curve25519Spec<span class="token punctuation">.</span><span class="token function">getN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curve25519Spec<span class="token punctuation">.</span><span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ECKeyGenerationParameters</span> ecKeyGenerationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ECKeyGenerationParameters</span><span class="token punctuation">(</span>ecParams<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ed25519KeyPairGenerator</span> keyPairGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ed25519KeyPairGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    keyPairGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>ecKeyGenerationParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AsymmetricCipherKeyPair</span> keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token class-name">TestKeyPairUsingEd25519Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Ed25519KeyPairGenerator</span> keyPairGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ed25519KeyPairGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    keyPairGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Ed25519KeyGenerationParameters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AsymmetricCipherKeyPair</span> keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Ed25519PrivateKeyParameters를-PrivateKey로-변환"><a href="#Ed25519PrivateKeyParameters를-PrivateKey로-변환" class="headerlink" title="Ed25519PrivateKeyParameters를 PrivateKey로 변환"></a>Ed25519PrivateKeyParameters를 PrivateKey로 변환</h4><p>클라이언트의 X.509 인증서를 만드는 경우 서명을 위한 PrivateKey가 필요한데 직접적으로 변환할 수가 없으므로 <code>KeyFactorySpi.Ed25519</code>와 <code>PrivateKeyInfoFactory</code>를 사용해서 Ed25519PrivateKeyParameters로 되어있는 비밀키를 PrivateKey 클래스로 변경해야 한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// NOTE: AsymmetricCipherKeyPair keyPair</span><span class="token class-name">Ed25519PrivateKeyParameters</span> privateKeyP <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Ed25519PrivateKeyParameters</span><span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">KeyFactorySpi<span class="token punctuation">.</span>Ed25519</span> keyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyFactorySpi<span class="token punctuation">.</span>Ed25519</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span><span class="token class-name">PrivateKeyInfoFactory</span><span class="token punctuation">.</span><span class="token function">createPrivateKeyInfo</span><span class="token punctuation">(</span>privateKeyP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="공개키를-SubjectPublicKeyInfoFactory로-변환"><a href="#공개키를-SubjectPublicKeyInfoFactory로-변환" class="headerlink" title="공개키를 SubjectPublicKeyInfoFactory로 변환"></a>공개키를 SubjectPublicKeyInfoFactory로 변환</h4><p>Ed25519PublicKeyParameters로 되어있는 공개키를 SubjectPublicKeyInfo로 변환하는 것은 <code>SubjectPublicKeyInfoFactory</code> 클래스에서 제공하고 있다. 앞서 비밀키처럼 KeyFactorySpi.Ed25519를 사용해서 PublicKey로 변환할 필요는 없을 것 같다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// NOTE: AsymmetricCipherKeyPair keyPair</span><span class="token class-name">Ed25519PublicKeyParameters</span> publicKeyP <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Ed25519PublicKeyParameters</span><span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubjectPublicKeyInfo</span> publicKeyInfo <span class="token operator">=</span> <span class="token class-name">SubjectPublicKeyInfoFactory</span><span class="token punctuation">.</span><span class="token function">createSubjectPublicKeyInfo</span><span class="token punctuation">(</span>publicKeyP<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="EdDSA-Signatures"><a href="#EdDSA-Signatures" class="headerlink" title="EdDSA Signatures"></a>EdDSA Signatures</h4><p>Curve25519와 Curve448를 사용한 EdDSA는 각각 <code>Ed25519</code>와 <code>Ed448</code> 이라는 서명 알고리즘으로 표현한다. 앞서, PrivateKey와 SubjectPublickKeyInfo로 변환한 상태이므로 X.509 인증서를 만드는 것은 어렵지 않을 것이다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">X500Name</span> issuer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X500Name</span><span class="token punctuation">(</span><span class="token string">"CN=Mambo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> serialNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> now <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> notBefore <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> notAfter <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">YEARS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContentSigner</span> contentSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaContentSignerBuilder</span><span class="token punctuation">(</span><span class="token string">"Ed25519"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span><span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X509CertificateHolder</span> certificateHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaX509v3CertificateBuilder</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span> serialNumber<span class="token punctuation">,</span> notBefore<span class="token punctuation">,</span> notAfter<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> publicKeyInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>contentSigner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X509Certificate</span> certificate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaX509CertificateConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span><span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCertificate</span><span class="token punctuation">(</span>certificateHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>certificate<span class="token punctuation">.</span><span class="token function">checkValidity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>더 자세한 코드는 <a href="https://github.com/kdevkr/spring-boot-security/blob/main/src/test/java/com/example/demo/x509/EdDSATest.java">EdDSATest.java</a>에서 확인할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8032&quot;&gt;EdDSA(Edwards-curve Digital Signature Algorithm)&lt;/a&gt;는 &lt;code&gt;Edwards-Curve&lt;/code&gt; </summary>
      
    
    
    
    
    <category term="Ed25519" scheme="https://kdevkr.github.io/tags/Ed25519/"/>
    
    <category term="RFC8410" scheme="https://kdevkr.github.io/tags/RFC8410/"/>
    
  </entry>
  
  <entry>
    <title>BouncyCastle Java로 X.509 인증서 만들기</title>
    <link href="https://kdevkr.github.io/bouncycastle-java/"/>
    <id>https://kdevkr.github.io/bouncycastle-java/</id>
    <published>2023-07-30T05:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<p>자바에서 암호화 또는 전자서명을 위한 기능을 JCA를 통해 제공하기는 하지만 실질적으로는 <a href="https://github.com/bcgit/bc-java">Bouncy Castle</a>이라는 암호 관련 라이브러리를 활용한다. 본 글에서는 BouncyCastle에서 제공하는 여러 클래스들을 활용해서 사설 루트 인증서를 만들고 그것을 기반으로 클라이언트를 위한 X.509 인증서를 발급하기 위한 방법을 정리하고자 한다. 이렇게 만들어지는 X.509 인증서는 보안 레벨이 높은 시스템에서 Mutual TLS 인증을 수행할 수 있다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.bouncycastle:bcprov-jdk18on:1.75'</span>    implementation <span class="token string">'org.bouncycastle:bcpkix-jdk18on:1.75'</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>X.509 인증서에 대한 표준은 <a href="https://datatracker.ietf.org/doc/html/rfc5280">RFC5280</a>로 정의되어 있고 ASN.1 표기를 따르며 지금은 X.509 v3을 사용하고 있다.</p></blockquote><h4 id="BouncyCastleProvider"><a href="#BouncyCastleProvider" class="headerlink" title="BouncyCastleProvider"></a>BouncyCastleProvider</h4><p>BouncyCastle 자바 라이브러리를 클래스 패스에 추가했더라도 BouncyCastleProvider를 JCE Provider로 추가해야한다. <code>$JAVA_HOME/lib/security/java.security</code>에 명시해도 되지만 애플리케이션을 구성하는 클래스에서 런타임 시점에 BouncyCastleProvider를 보안 프로바이더에 추가해도 된다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Security</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>jce<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span><span class="token class-name">BouncyCastleProvider</span></span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Security</span><span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Self-signed-CA-인증서-발급하기"><a href="#Self-signed-CA-인증서-발급하기" class="headerlink" title="Self signed CA 인증서 발급하기"></a>Self signed CA 인증서 발급하기</h4><p>일반적으로 X.509 인증서를 발급하는 경우 openssl 명령어를 사용해서 키 페어를 생성하고 그것을 기반으로 CSR과 X.509 인증서를 생성할 것이다. Bouncy Castle 자바 라이브러리르를 통해 만드려는 경우 Deprecated 선언된 X509V3CertificateGenerator를 사용해도 무방할 것 같지만 X509v3CertificateBuilder를 사용해서 X509Certificate를 만들어보려고 한다.</p><blockquote><p>X509V3CertificateGenerator에 대해서 Deprecated 처리한 사유는 딱히 알 수 없는 것 같다. </p></blockquote><p>JcaX509v3CertificateBuilder와 JcaContentSignerBuilder를 사용해서 X509CertificateHolder를 생성하고 JcaX509CertificateConverter를 이용하여 X509Certificate로 변환할 수 있다. 대략적인 코드는 아래와 같으니 참고해보도록 하자.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> securityProvider <span class="token operator">=</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_NAME</span><span class="token punctuation">;</span><span class="token class-name">JcaX509ExtensionUtils</span> x509ExtensionUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaX509ExtensionUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JcaX509CertificateConverter</span> x509CertificateConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaX509CertificateConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>securityProvider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> signatureAlgorithm <span class="token operator">=</span> <span class="token string">"sha256WithRSA"</span><span class="token punctuation">;</span><span class="token class-name">KeyPairGenerator</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">,</span> securityProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">KeyPair</span> rootKeyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X500Name</span> issuer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X500NameBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addRDN</span><span class="token punctuation">(</span><span class="token class-name">BCStyle</span><span class="token punctuation">.</span><span class="token constant">CN</span><span class="token punctuation">,</span> <span class="token string">"Mambo Org"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> serialNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> now <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> notBefore <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> notAfter <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">YEARS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubjectPublicKeyInfo</span> publicKeyInfo <span class="token operator">=</span> <span class="token class-name">SubjectPublicKeyInfo</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rootKeyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X509CertificateHolder</span> rootCertHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaX509v3CertificateBuilder</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span> serialNumber<span class="token punctuation">,</span> notBefore<span class="token punctuation">,</span> notAfter<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> publicKeyInfo<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addExtension</span><span class="token punctuation">(</span><span class="token class-name">Extension</span><span class="token punctuation">.</span>basicConstraints<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicConstraints</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addExtension</span><span class="token punctuation">(</span><span class="token class-name">Extension</span><span class="token punctuation">.</span>subjectKeyIdentifier<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> x509ExtensionUtils<span class="token punctuation">.</span><span class="token function">createSubjectKeyIdentifier</span><span class="token punctuation">(</span>rootKeyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JcaContentSignerBuilder</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>rootKeyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X509Certificate</span> rootCert <span class="token operator">=</span> x509CertificateConverter<span class="token punctuation">.</span><span class="token function">getCertificate</span><span class="token punctuation">(</span>rootCertHolder<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="X500Name"><a href="#X500Name" class="headerlink" title="X500Name"></a>X500Name</h5><p>자바에서 기본적으로 제공하는 X500Principal 대신에 BouncyCastle의 X500Name 클래스로 FQDN, 발급자와 소유자와 같은 주체(Subject) 정보를 기입할 수 있다. 또한, RDN(Relative Distinguished Names) 라고도 하는데 X500NameBuilder에서는 addRDN 이라는 함수를 제공한다. 더 자세한 내용은 <a href="https://knowledge.digicert.com/generalinformation/INFO1745.html">What is a Distinguished Name (DN)?</a>를 참고해보자.</p><h5 id="SubjectPublickeyInfo"><a href="#SubjectPublickeyInfo" class="headerlink" title="SubjectPublickeyInfo"></a>SubjectPublickeyInfo</h5><p>X.509 인증서에 포함되는 SubjectPublickeyInfo에 대한 클래스로 DER 인코딩된 공개키를 의미한다. </p><h5 id="BasicConstraints"><a href="#BasicConstraints" class="headerlink" title="BasicConstraints"></a>BasicConstraints</h5><p>다른 인증서를 발급할 권한이 있는지를 나타내는 것으로 CA 인증서라는 것을 의미로 부여할 수 있다.</p><h4 id="X-509-클라이언트-인증서-발급하기"><a href="#X-509-클라이언트-인증서-발급하기" class="headerlink" title="X.509 클라이언트 인증서 발급하기"></a>X.509 클라이언트 인증서 발급하기</h4><p>앞서 루트 CA 인증서 발급을 이해하였다면 CA 인증서를 만드는데 사용된 비밀키를 사용해서 클라이언트를 위한 X.509 인증서를 만드는 것을 알아보도록 하자. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">KeyPair</span> clientKeyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X500Name</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X500NameBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addRDN</span><span class="token punctuation">(</span><span class="token class-name">BCStyle</span><span class="token punctuation">.</span><span class="token constant">CN</span><span class="token punctuation">,</span> <span class="token string">"Mambo"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> clientSN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> clientNow <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> clientNotBefore <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>clientNow<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> clientNotAfter <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>clientNow<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">YEARS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubjectPublicKeyInfo</span> clientPublicKeyInfo <span class="token operator">=</span> <span class="token class-name">SubjectPublicKeyInfo</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>clientKeyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X509CertificateHolder</span> clientCertHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaX509v3CertificateBuilder</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span> clientSN<span class="token punctuation">,</span> clientNotBefore<span class="token punctuation">,</span> clientNotAfter<span class="token punctuation">,</span> client<span class="token punctuation">,</span> clientPublicKeyInfo<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addExtension</span><span class="token punctuation">(</span><span class="token class-name">Extension</span><span class="token punctuation">.</span>basicConstraints<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicConstraints</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addExtension</span><span class="token punctuation">(</span><span class="token class-name">Extension</span><span class="token punctuation">.</span>authorityKeyIdentifier<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> x509ExtensionUtils<span class="token punctuation">.</span><span class="token function">createAuthorityKeyIdentifier</span><span class="token punctuation">(</span>rootCert<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addExtension</span><span class="token punctuation">(</span><span class="token class-name">Extension</span><span class="token punctuation">.</span>subjectKeyIdentifier<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> x509ExtensionUtils<span class="token punctuation">.</span><span class="token function">createSubjectKeyIdentifier</span><span class="token punctuation">(</span>clientKeyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addExtension</span><span class="token punctuation">(</span><span class="token class-name">Extension</span><span class="token punctuation">.</span>keyUsage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">KeyUsage</span><span class="token punctuation">(</span><span class="token class-name">KeyUsage</span><span class="token punctuation">.</span>digitalSignature<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JcaContentSignerBuilder</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>rootKeyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">X509Certificate</span> clientCert <span class="token operator">=</span> x509CertificateConverter<span class="token punctuation">.</span><span class="token function">getCertificate</span><span class="token punctuation">(</span>clientCertHolder<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>BasicConstraints로 CA가 아니며 AuthorityKeyIdentifier로 발급자의 공개키를 식별할 수 있도록 하였다. 그리고 KeyUsage로 클라이언트에게 발급한 X.509 인증서가 전자서명 용도임을 확장(Extension)에 명시했다.</p><h4 id="X509Certificate-인증서-검증하기"><a href="#X509Certificate-인증서-검증하기" class="headerlink" title="X509Certificate 인증서 검증하기"></a>X509Certificate 인증서 검증하기</h4><p>클라이언트가 요청 시 포함해서 전달한 X.509 인증서가 애플리케이션 혹은 시스템에서 발급한 것인지를 검증하는 과정이 필요하다. <code>java.security.cert.X509Certificate</code> 클래스에는 기본적으로 구현된 verify 함수를 제공하고 있기 때문에 아래와 같이 간단하게 루트 인증서의 공개키를 기반으로 클라이언트 인증서를 검증할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java">clientCert<span class="token punctuation">.</span><span class="token function">checkValidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clientCert<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>rootCert<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> securityProvider<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="X-509-인증서-및-키-페어-저장하기"><a href="#X-509-인증서-및-키-페어-저장하기" class="headerlink" title="X.509 인증서 및 키 페어 저장하기"></a>X.509 인증서 및 키 페어 저장하기</h4><p>일반적으로 X.509 인증서에 포함되는 공개키는 X509EncodedSpec에 따라 바이너리 형태의 DER로 인코딩되어 포함된다. 그러나 X.509 인증서와 키 페어를 교환할 때에는 PEM 파일 형식을 많이 사용하는 편으로 BouncyCastle 자바 라이브러리에 포함된  PemWriter와 PemObject를 활용해서 X.509 인증서와 비밀키를 PEM 파일로 저장할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PemUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PemUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPem</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encoded<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">StringWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">PemWriter</span> pemWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaPEMWriter</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pemWriter<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PemObject</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> encoded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pemWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPem</span><span class="token punctuation">(</span><span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">,</span> <span class="token string">"private key is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">toPem</span><span class="token punctuation">(</span><span class="token string">"PRIVATE KEY"</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toPem</span><span class="token punctuation">(</span><span class="token class-name">X509Certificate</span> certificate<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">CertificateEncodingException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>certificate<span class="token punctuation">,</span> <span class="token string">"certificate is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">toPem</span><span class="token punctuation">(</span><span class="token string">"CERTIFICATE"</span><span class="token punctuation">,</span> certificate<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> rootCertPem <span class="token operator">=</span> <span class="token class-name">PemUtil</span><span class="token punctuation">.</span><span class="token function">toPem</span><span class="token punctuation">(</span>rootCert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ca.pem</span><span class="token class-name">String</span> clientCertPem <span class="token operator">=</span> <span class="token class-name">PemUtil</span><span class="token punctuation">.</span><span class="token function">toPem</span><span class="token punctuation">(</span>clientCert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//client.pem</span><span class="token class-name">String</span> clientPrivateKeyPem <span class="token operator">=</span> <span class="token class-name">PemUtil</span><span class="token punctuation">.</span><span class="token function">toPem</span><span class="token punctuation">(</span>clientKeyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//client.key</span></code></pre><blockquote><p>PEM 형식으로 Base64로 구성된 문자열을 파일로 저장하는 방법은 본 글에서 다루지 않는다.</p></blockquote><h4 id="X-509-인증서-및-키-페어-불러오기"><a href="#X-509-인증서-및-키-페어-불러오기" class="headerlink" title="X.509 인증서 및 키 페어 불러오기"></a>X.509 인증서 및 키 페어 불러오기</h4><p>클라이언트의 X.509 인증서는 요청에 포함되어 HttpServletRequest로 부터 가져올 수 있지만 클라이언트 인증서 검증을 위한 CA 인증서와 비밀키는 별도의 파일이나 문자열로부터 불러와야한다. 공개키와 비밀키에 대해서는 JcaPEMKeyConverter를 사용해서 가져올 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PemUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PemUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PemObject</span> <span class="token function">loadPem</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encoded<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">StringReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">PEMParser</span> pemParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PEMParser</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> pemParser<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">loadObject</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encoded<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">StringReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">PEMParser</span> pemParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PEMParser</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> pemParser<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">X509Certificate</span> <span class="token function">loadCertificate</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encoded<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">CertificateException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PemObject</span> obj <span class="token operator">=</span> <span class="token function">loadPem</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CertificateFactory</span> factory <span class="token operator">=</span> <span class="token class-name">CertificateFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">X509Certificate</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">generateCertificate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">loadPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encoded<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">loadObject</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JcaPEMKeyConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaPEMKeyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span><span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SubjectPublicKeyInfo</span> publicKeyInfo <span class="token operator">=</span> <span class="token class-name">SubjectPublicKeyInfo</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> converter<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>publicKeyInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">loadPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encoded<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">loadObject</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JcaPEMKeyConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JcaPEMKeyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span><span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrivateKeyInfo</span> privateKeyInfo <span class="token operator">=</span> <span class="token class-name">PrivateKeyInfo</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> converter<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>privateKeyInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>본 글에서 다룬 예제 코드에 대한 보다 자세한 것은 <a href="https://github.com/kdevkr/spring-boot-security/blob/main/src/test/java/com/example/demo/x509/X509Test.java">X509Test.java</a>를 통해 확인할 수 있다.</p><h4 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h4><ul><li><a href="https://www.baeldung.com/java-bouncy-castle">Introduction to BouncyCastle with Java</a>  </li><li><a href="https://www.baeldung.com/java-read-pem-file-keys">How to Read PEM File to Get Public and Private Keys</a>  </li><li><a href="https://www.baeldung.com/java-rsa">RSA in Java</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자바에서 암호화 또는 전자서명을 위한 기능을 JCA를 통해 제공하기는 하지만 실질적으로는 &lt;a href=&quot;https://github.com/bcgit/bc-java&quot;&gt;Bouncy Castle&lt;/a&gt;이라는 암호 관련 라이브러리를 활용한다. 본 글에</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 백엔드 개발자가 CORS를 테스트 하는 방법</title>
    <link href="https://kdevkr.github.io/spring-cors/"/>
    <id>https://kdevkr.github.io/spring-cors/</id>
    <published>2023-07-22T12:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/spring-cors/01.png"></p><p>위와 같은 짤의 내용처럼 프론트엔드 개발자에게 고통을 주는 것은 CORS 이다. 그런데 CORS는 브라우저에서의 정책임에도 불구하고 프론트엔드 개발자가 대응할 수 있는 부분은 없으며 브라우저에서의 CORS 매커니즘을 이해하고 서버 백엔드 개발자가 처리해야할 부분이다. MDN의 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request">Preflight Request</a> 문서에서 다루는 내용처럼 대부분의 CORS 문제는 프론트엔드 애플리케이션에서의 XHR 요청에 의해 프리플라이트 요청(Preflight Request)에 의한 CORS 위배 응답을 받고 브라우저에서 제한하기 때문에 발생한다.</p><h4 id="프리플라이트-요청"><a href="#프리플라이트-요청" class="headerlink" title="프리플라이트 요청"></a>프리플라이트 요청</h4><p>프리플라이트 요청은 <code>Origin</code> 헤더와 <code>Access-Control-Request-Method</code> 헤더 그리고 <code>OPTIONS</code> 메소드를 사용하여 수행된다. </p><pre class="language-text" data-language="text"><div class="caption"><span>HTTP</span></div><code class="language-text">OPTIONS /resource/fooAccess-Control-Request-Method: DELETE Access-Control-Request-Headers: origin, x-requested-with Origin: https://foo.bar.org </code></pre><p>참고로, 스프링 프레임워크에서 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java">CorsUtils</a>에 의해 프리플라이트 요청을 구분하는 조건은 아래와 같이 구현되어있다.</p><pre class="language-java" data-language="java"><div class="caption"><span>Java</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CorsUtils</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ORIGIN</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_REQUEST_METHOD</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="스프링-CORS-디버그"><a href="#스프링-CORS-디버그" class="headerlink" title="스프링 CORS 디버그"></a>스프링 CORS 디버그</h4><p>CORS 요청에 대한 검증은 CorsFilter에서 기본적으로 사용되도록 구현된 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java">DefaultCorsProcessor</a>에 의해 수행된다. CORS 요청에 의해 위배되는 상황에 대해서 원인을 로그로 출력해보려는 경우 DefaultCorsProcessor에 대한 로그 레벨을 TRACE 또는 DEBUG로 지정하면 된다. 개발 환경에서는 CorsFilter 또는 DefaultCorsProcessor의 코드 라인에 중단점을 걸어서 확인할 수 있겠지만 운영 환경에서는 로그 레벨로 체크할 수 있을 것이다.</p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">logging.level</span><span class="token punctuation">:</span>  <span class="token key atrule">org.springframework.web.cors.DefaultCorsProcessor</span><span class="token punctuation">:</span> TRACE</code></pre><p><img data-src="/images/posts/spring-cors/03.gif" alt="CORS의 프리플라이트 요청을 이해한 백엔드 개발자"></p><h4 id="스프링-MockMvc로-CORS-테스트"><a href="#스프링-MockMvc로-CORS-테스트" class="headerlink" title="스프링 MockMvc로 CORS 테스트"></a>스프링 MockMvc로 CORS 테스트</h4><p>스프링 프레임워크를 사용중이며 <strong>CorsConfiguration</strong> 설정을 해두었다면 아래와 같이 <strong>MockMvc</strong>를 활용한 테스트 코드를 작성할 수 있다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Preflight request"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token class-name">TestPreflightRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowedOrigins <span class="token operator">=</span> corsConfiguration<span class="token punctuation">.</span><span class="token function">getAllowedOrigins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allowedOrigins <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            allowedOrigins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowedMethods <span class="token operator">=</span> corsConfiguration<span class="token punctuation">.</span><span class="token function">getAllowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allowedMethods <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            allowedMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">,</span> allowedOrigins<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Method"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stringValues</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> allowedOrigins<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> allowedMethods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="cURL로-테스트하는-방법"><a href="#cURL로-테스트하는-방법" class="headerlink" title="cURL로 테스트하는 방법"></a>cURL로 테스트하는 방법</h4><p>포스트맨 도구로 HTTP 요청을 수행한 것처럼 cURL로도 프리플라이트 요청을 수행해볼 수 있다. 포스트맨과는 다르게 OPTIONS를 직접적으로 사용해야한다. DefaultCorsProcessor에 의해 CORS에 위배된 상황이 있다면 <code>Invalid CORS request</code>이라는 응답과 함께 403 상태 코드가 확인 될 것이다.</p><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> curl <span class="token operator">-</span>X OPTIONS <span class="token string">'http://localhost:5000'</span> <span class="token operator">-</span>H <span class="token string">'Origin: http://localhost'</span> <span class="token operator">-</span>H <span class="token string">'Access-Control-Request-Method: GET'</span> <span class="token operator">-</span>v<span class="token operator">*</span>   Trying 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:5000<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">*</span> Connected to localhost <span class="token punctuation">(</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token punctuation">)</span> port 5000 <span class="token punctuation">(</span><span class="token comment">#0)</span>> OPTIONS <span class="token operator">/</span> HTTP/1<span class="token punctuation">.</span>1> Host: localhost:5000> User-Agent: curl/8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1> Accept: <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>> Origin: http:<span class="token operator">/</span><span class="token operator">/</span>localhost> Access-Control-<span class="token function">Request-Method</span>: GET>&lt; HTTP/1<span class="token punctuation">.</span>1 403 Forbidden&lt; Expires: 0&lt; Cache-Control: no-cache<span class="token punctuation">,</span> no-store<span class="token punctuation">,</span> max-age=0<span class="token punctuation">,</span> must-revalidate&lt; X-XSS-Protection: 0&lt; Pragma: no-cache&lt; X-Frame-Options: DENY&lt; Date: Sat<span class="token punctuation">,</span> 22 Jul 2023 12:56:00 GMT&lt; Connection: keep-alive&lt; Vary: Origin&lt; Vary: Access-Control-<span class="token function">Request-Method</span>&lt; Vary: Access-Control-<span class="token function">Request-Headers</span>&lt; X-Content-<span class="token function">Type</span><span class="token operator">-</span>Options: nosniff&lt; Transfer-Encoding: chunked&lt;Invalid CORS request* Connection <span class="token comment">#0 to host localhost left intact</span></code></pre><h4 id="Postman으로-테스트하는-방법"><a href="#Postman으로-테스트하는-방법" class="headerlink" title="Postman으로 테스트하는 방법"></a>Postman으로 테스트하는 방법</h4><p>HTTP 요청을 수행해볼 수 있는 포스트맨에서 프리플라이트 요청을 수행하기 위해서는 Origin 헤더를 포함하면 된다. 포스트맨에서 알아서 OPTIONS를 수행하므로 간단하게 테스트해볼 수 있다.</p><p><img data-src="/images/posts/spring-cors/02.png"></p><p>만약, CORS는 프론트엔드 영역에서 해결해야할 문제라고 생각하고 있는 개발자가 있다면 CORS에 대해서 다시 학습하길 바란다.<br>프론트엔드 개발자가 CORS의 고통에서 벗어날 수 있도록 백엔드 개발자는 책임을 다해야 할 것이다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/spring-cors/01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 짤의 내용처럼 프론트엔드 개발자에게 고통을 주는 것은 CORS 이다. 그런데 CORS는 브라우저에서의 정책임에도 불구하고 프론트엔드 </summary>
      
    
    
    
    
    <category term="CORS" scheme="https://kdevkr.github.io/tags/CORS/"/>
    
    <category term="Preflight Request" scheme="https://kdevkr.github.io/tags/Preflight-Request/"/>
    
  </entry>
  
  <entry>
    <title>스프링 시큐리티 데이터 JDBC</title>
    <link href="https://kdevkr.github.io/spring-security-data-jdbc-integration/"/>
    <id>https://kdevkr.github.io/spring-security-data-jdbc-integration/</id>
    <published>2023-07-13T11:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>전체 예제 코드는 <a href="https://github.com/kdevkr/spring-boot-security/">kdevkr&#x2F;spring-boot-security</a>에서 확인할 수 있다.</p></blockquote><p><a href="https://docs.spring.io/spring-security/reference/servlet/integrations/data.html">Spring Data Integration</a>를 참고하면 스프링 시큐리티와 스프링 데이터 모듈을 통합할 수 있다.<br>우선 아래와 같이 클래스패스에 <code>org.springframework.security:spring-security-data</code> 의존성을 추가하도록 하자.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-data-jdbc'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-jdbc'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-security'</span>    implementation <span class="token string">'org.springframework.security:spring-security-data'</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">SecurityEvaluationContextExtension</span> <span class="token function">securityEvaluationContextExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecurityEvaluationContextExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>구성 클래스에서 <strong>SecurityEvaluationContextExtension</strong>를 빈으로 등록하면 @PreAuthorize와 같은 메소드 기반 표현식과 비슷하게 <strong>@Query</strong> 내에서 스프링 시큐리티에 대한 SpEL을 사용할 수 있다. 하지만, 스프링 시큐리티 공식 문서와 <a href="https://github.com/spring-projects/spring-security-samples/tree/main/servlet/java-configuration/data">Spring Data에 대한 예제 코드</a>와 같이 시도해보면 아래와 같은 <code>오류</code>가 발생한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>InvalidDataAccessApiUsageException</span><span class="token operator">:</span> <span class="token constant">SQL</span> <span class="token punctuation">[</span><span class="token constant">SELECT</span> u<span class="token punctuation">.</span>username <span class="token constant">FROM</span> users u where u<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token operator">?</span>__$synthetic$__1<span class="token punctuation">]</span><span class="token operator">:</span> given <span class="token number">1</span> parameters but expected <span class="token number">0</span></code></pre><p>위와 같은 오류가 발생하는 이유는 Spring Data JDBC는 내부적으로 <strong>N</strong>amedParameterJdbcTemplate**를 사용하기 때문에 <code>?</code>와 같은 JPQL 또는 Native 쿼리 방식과는 차이가 있으므로 <code>?</code>이 아닌 <code>:</code>로 표현해야한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT u.username FROM users u where u.username = :#&#123; principal?.username &#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;전체 예제 코드는 &lt;a href=&quot;https://github.com/kdevkr/spring-boot-security/&quot;&gt;kdevkr&amp;#x2F;spring-boot-security&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    
    <category term="Spring Security" scheme="https://kdevkr.github.io/tags/Spring-Security/"/>
    
    <category term="Spring Data JDBC" scheme="https://kdevkr.github.io/tags/Spring-Data-JDBC/"/>
    
  </entry>
  
  <entry>
    <title>스스로 리뷰하는 습관을 가지자</title>
    <link href="https://kdevkr.github.io/review-yourself/"/>
    <id>https://kdevkr.github.io/review-yourself/</id>
    <published>2023-07-09T01:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p>신입 웹 개발자들의 이력서나 인터뷰 과정에서 회사 내에 코드 리뷰 문화가 있는지 물어보는 사람이 많은 것 같다. 어떤 사람은 자신이 작성한 코드가 효율적인지 평가받고 싶은 니즈이고 어떤 사람은 팀 프로젝트를 진행하면서 처음의 목표와는 다르게 짧은 기간에 결과물을 만들어내기 위해 리뷰 과정을 생략할 수 밖에 없었던 경험을 코드 리뷰 문화가 정착된 조직에서 경험하고자 하는 것 같다. 솔직하게 이야기하자면 회사 내에 코드 리뷰 문화는 없으며 내가 속한 팀에 한해서만 주니어 개발자들의 요청에 의해서 코드 리뷰 과정을 도입하여 프로젝트 업무를 수행하고 있다. 아무래도 팀장이라는 직무를 수행하고 있기에 내심 원했던 것을 팀에서 요청했을 지 모를 일이다. 아무튼 코드 리뷰 과정을 수행한다고 해서 현실적으로 빠르게 업무를 수행하고 생각보다 많은 것들을 처리해야하므로 모두가 만족할만한 상세한 코드 리뷰는 없다고 말할 수 있다.</p><p>인터넷에서 코드 리뷰에 대한 글들을 살펴보니 생각보다 많은 조직에서 개발자들이 코드 리뷰에 대한 오해를 했었고 현재의 팀에서도 코드 리뷰에 대한 작은 오해들을 조금씩 해소에 나가고 있다고 생각한다. 코드 리뷰 과정에서 가장 큰 오해는 경험이 많은 개발자의 의견이 정답이라고 가정하는 것이며 작은 오해는 코드 리뷰를 통해 모든 것을 체크해야한다고 생각한다는 것이다. 앞서 이야기했듯이 빠르게 많은 업무를 처리해야하므로 코드 리뷰에 많은 시간을 소비하기엔 어려운게 현실이다. 그렇다면 최소한 대부분의 개발자들이 기본으로 생각하는 사소한 관점에 대해서 스스로 리뷰하는 과정과 습관이 필요해진다는 의미로 생각할 수 있다.</p><p>그렇다면, 개발자가 스스로 리뷰할 수 있는 방법은 무엇이 있을지 같이 생각해보자.</p><h4 id="깃-커밋-과정에서-불필요한-반영사항을-다시-한번-체크하기"><a href="#깃-커밋-과정에서-불필요한-반영사항을-다시-한번-체크하기" class="headerlink" title="깃 커밋 과정에서 불필요한 반영사항을 다시 한번 체크하기"></a>깃 커밋 과정에서 불필요한 반영사항을 다시 한번 체크하기</h4><p>사소한 실수로 인해 깃 커밋 과정에서 풀 리퀘스트에 대한 내용과 상관없는 변경사항이 나도 모르게 포함될 수 있다. 코드 리뷰를 수행하는 리뷰어 입장에서는 요구사항과 상관없는 변경사항으로 인해 그로 인해 발생할 수 있는 영향도 체크까지 해야하는 불필요한 상황이 발생할 수 있다. 코드 리뷰 과정의 목적 중에 하나는 작업자가 고려하거나 체크하지 못한 부분을 크로스 체크하기 위함이 있지만 그러한 과정을 줄이려는 노력은 반드시 필요하다.</p><h4 id="코딩-컨벤션에-맞는-포맷팅을-수행하기"><a href="#코딩-컨벤션에-맞는-포맷팅을-수행하기" class="headerlink" title="코딩 컨벤션에 맞는 포맷팅을 수행하기"></a>코딩 컨벤션에 맞는 포맷팅을 수행하기</h4><p>인텔리제이와 이클립스를 포함한 많은 개발도구에서는 문서에 대한 포맷팅 기능을 포함하고 있다. CheckStyle, Prettier, ESLint와 같은 플러그인과 통합하여 프로젝트마다 정해진 방식으로 포맷팅을 유지할 수 있고 코드 가독성을 유지하여 리뷰어가 더 쉽게 코드 변경사항을 체크할 수 있도록 제공할 수 있다. 어떤 개발자들은 포맷팅에 대해서 관심이 없어 무시하는 경향이 있는데 굳이 클린 코드라는 관점이 아니라도 사소한 포맷팅 습관으로도 코드 가독성은 엄청나게 높아진다.</p><h4 id="SonarLint로-코드-품질을-리뷰하기"><a href="#SonarLint로-코드-품질을-리뷰하기" class="headerlink" title="SonarLint로 코드 품질을 리뷰하기"></a>SonarLint로 코드 품질을 리뷰하기</h4><p>SonarLint와 같은 정적 품질을 수행할 수 있는 도구를 통해 스스로 작성한 코드 품질에 대해서 살펴보고 리뷰할 수 있다. 클린 아키텍처와 클린 코드가 개발자 관점에서 도움이 되는 지식은 맞으나 사소한 것들도 체크하지 못하는 상황에서 좋은 코드를 작성하는 것에만 관심이 있다면 그것이 정말로 옳은 방향인지 다시 생각해보자. 스스로 <code>Standard outputs should not be used directly to log anything</code> 이라는 <a href="https://refactoring.guru/refactoring/smells">코드 스멜</a>을 아는가?</p><p>신입 또는 주니어 개발자에게 기본적으로 요구되는 필수 역량에서 기본이라는 의미는 어쩌면 어떤 지식의 깊은 이해로 인해 잊어버리는 사소한 것들을 말하는게 아닐까 싶다. 스스로 리뷰하는 습관을 가져서 생각보다 잊어버리기 쉬운 사소한 것들을 체크해보도록 하자. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;신입 웹 개발자들의 이력서나 인터뷰 과정에서 회사 내에 코드 리뷰 문화가 있는지 물어보는 사람이 많은 것 같다. 어떤 사람은 자신이 작성한 코드가 효율적인지 평가받고 싶은 니즈이고 어떤 사람은 팀 프로젝트를 진행하면서 처음의 목표와는 다르게 짧은</summary>
      
    
    
    
    
    <category term="Code Review" scheme="https://kdevkr.github.io/tags/Code-Review/"/>
    
    <category term="PR" scheme="https://kdevkr.github.io/tags/PR/"/>
    
  </entry>
  
  <entry>
    <title>프로덕션 코드에서의 자바 표준 출력</title>
    <link href="https://kdevkr.github.io/system-out-in-prod/"/>
    <id>https://kdevkr.github.io/system-out-in-prod/</id>
    <published>2023-07-05T14:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://okky.kr/articles/1456477">https://okky.kr/articles/1456477</a> 에서 경험 많으신 개발자께서 사소하고 쓰잘데기 없다는 의견이 있어서 작성해본다.</p></blockquote><p>주관적인 관점에서 테스트 코드가 아닌 프로덕션 애플리케이션 코드에서 로깅 라이브러리를 활용할 수 있음에도 표준 출력을 사용하는 것은 탈락이라는 의견을 전달하였다고 했다. (실제로는 이력서가 많지 않아서 상세하게 보고 검토하는 기준 중에 하나일 뿐이다.) 그러자, 경험 많은 개발자께서 주관적인 관점은 이해하나 <code>쓰잘데기 없는 것</code>을 기준으로 잡느냐는 의견을 달으셨다. </p><ul><li><a href="https://stackoverflow.com/a/8601972">Do not use System.out.println in server side code</a></li><li><a href="https://softwareengineering.stackexchange.com/a/161215">Why is using System.out.println() so bad?</a></li><li><a href="https://hudi.blog/do-not-use-system-out-println-for-logging/">로깅을 System.out.println() 로 하면 안되는 이유</a></li></ul><p>위의 링크들은 내가 바라보는 기준이 정말 잘못되었는가를 되돌아보기 위해 찾아본 것들이다. 오래전부터 프로덕션 코드에 표준 출력을 사용하는 것은 <code>코드 스멜</code>에 해당되며 나와 동일하게 개발 또는 테스트를 위한 코드에서 표준 출력을 사용하는 것은 무방하다는 입장이다. 특히나, 요즘에 인텔리제이 같은 IDE에서 많이 설치하여 사용하는 SonarLint 플러그인에서도 <a href="https://rules.sonarsource.com/java/RSPEC-106/">java:s106</a>이라는 규칙으로 <code>Major 레벨의 코드 스멜</code>로 검출해준다.</p><p><img data-src="/images/posts/system-out-in-prod/01.png"></p><p>경험 많은 개발자분께서 이야기하는 어떠한 방식으로든 무언가를 확인하는 것은 상관없고 그 코드가 애플리케이션 배포에 포함되도 신경쓰지 않는다는 의견이다. 그렇다면 이 분께서 일하는 환경에서 만들어진 시스템에는 표준 출력으로 사용한 디버그 코드가 남아있을 수 있다는 이야기이며 그것으로 인해 발생하는 여러가지 문제들(표준 출력에 의한 성능이나 보안적인 정보 노출 등)에 대해서는 책임지지 않는다는 의미로 해석할 수 있다.</p><blockquote><p>만약, 실행중인 애플리케이션에 표준 출력에 의한 문제가 발생했다고 다시 빌드하여 배포가 필요하다고 무책임하게 말한다면 어떻게 받아들일까?<br>서비스 중인 애플리케이션을 중단하고 배포하는 것이 그렇게 쉬운일인가?</p></blockquote><p>아무래도 지금의 내 기준이 경험이 많이 쌓여도 <code>변할 가능성은 거의 없을 것</code> 같다. 현재 맡고 있는 개발팀의 개발자 한분은 국비지원 교육을 받고 채용이 되신 분이었으나 이전 회사에서의 팀장들과는 다르다고 오히려 특이하신 분이라 더 성장할 수 있는데 도움을 주시는 것 같다라고 좋은 의견을 주었다. 아무리 신입 개발자라고 하더라도 동료 개발자라는 입장을 고수하는게 내 스타일로 생각되며 신입 개발자는 아무것도 몰라도 되는 사람들이 아니라고 생각된다. <code>누구나 쉽게 개발자로 일할 수 있는</code> 시대가 되었기에 <code>사소한 것들도 오히려 중요하게 생각</code>해야한다.</p><p><img data-src="/images/posts/system-out-in-prod/02.png" alt="개발 도구가 친절하게 알려주는 자바 네이밍 컨벤션도 무시할거야?"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://okky.kr/articles/1456477&quot;&gt;https://okky.kr/articles/1456477&lt;/a&gt; 에서 경험 많으신 개발자께서 사소하고 쓰잘데기 없다는 의견이 있어서 작성해본다.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mapstruct (Feat. Gradle)</title>
    <link href="https://kdevkr.github.io/mapstruct/"/>
    <id>https://kdevkr.github.io/mapstruct/</id>
    <published>2023-07-02T06:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p>자바 진영에서 오브젝트 간 변환을 위해서 사용할 수 있는 오브젝트 매핑 라이브러리에는 ModelMapper와 MapStruct가 있다. 현재 시스템에서는 일반적으로 사용하는 ModelMapper로도 충분했기 때문에 MapStruct를 굳이 도입하여 사용하지는 않았다. 오브젝트 변환이 반복적으로 많이 이루어지는 케이스가 있을때 리플렉션으로 인한 단점을 보완하기 위해서 직접적으로 오브젝트 변환을 수행하도록 하는 코드를 작성하거나 빌드 과정에서 매퍼에 대한 인터페이스 구현체를 만드는 <a href="https://mapstruct.org/">Mapstruct</a>가 요구되기 때문에 도입하게 된다. 현재 시스템에서 특정 데이터를 조회하는 과정에서 꽤나 많은 변환이 이루어질 수 있는 가능성이 발생했기 때문에 (예를 들어 약 2~300명의 개별 통계 데이터를 한번에 조회) 도입을 고려하게 되었다.</p><h4 id="Mapstruct에-대해-알아보기"><a href="#Mapstruct에-대해-알아보기" class="headerlink" title="Mapstruct에 대해 알아보기"></a>Mapstruct에 대해 알아보기</h4><ul><li><a href="https://meetup.nhncloud.com/posts/213">Object Mapping 어디까지 해봤니?</a></li><li><a href="https://medium.com/naver-cloud-platform/%EA%B8%B0%EC%88%A0-%EC%BB%A8%ED%85%90%EC%B8%A0-%EB%AC%B8%EC%9E%90-%EC%95%8C%EB%A6%BC-%EB%B0%9C%EC%86%A1-%EC%84%9C%EB%B9%84%EC%8A%A4-sens%EC%9D%98-mapstruct-%EC%A0%81%EC%9A%A9%EA%B8%B0-8fd2bc2bc33b">편리한 객체 간 매핑을 위한 MapStruct 적용기 (feat. SENS)</a></li><li><a href="https://www.baeldung.com/java-performance-mapping-frameworks">Performance of Java Mapping Frameworks</a></li></ul><blockquote><p>※ MapStruct에 대한 예제는 <a href="https://github.com/mapstruct/mapstruct-examples">github.com&#x2F;mapstruct&#x2F;mapsturct-examples</a>에서 확인할 수 있다.</p></blockquote><h4 id="개별-디펜던시-추가"><a href="#개별-디펜던시-추가" class="headerlink" title="개별 디펜던시 추가"></a>개별 디펜던시 추가</h4><p>Mapstruct를 적용하는 방법에 대한 글에서 살펴보면 디펜던시 순서를 중요하게 정의해야한다고 되어있지만 상관없어진지 오래되었다. 아무튼 Lombok 그래들 플러그인을 사용하고 있을 경우에도 <code>lombok-mapstruct-binding</code>를 아래와 같이 나열하면 된다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">plugins <span class="token punctuation">&#123;</span>    id <span class="token string">'io.freefair.lombok'</span> version <span class="token string">'8.0.1'</span><span class="token punctuation">&#125;</span>ext <span class="token punctuation">&#123;</span>    mapstructVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"1.5.5.Final"</span></span>    lombokVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"1.18.26"</span></span>    lombokMapstructBindingVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"0.2.0"</span></span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token interpolation-string"><span class="token string">"org.mapstruct:mapstruct:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">mapstructVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    annotationProcessor <span class="token interpolation-string"><span class="token string">"org.mapstruct:mapstruct-processor:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">mapstructVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"org.projectlombok:lombok-mapstruct-binding:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">lombokMapstructBindingVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span></code></pre><h4 id="Gradle-플러그인을-이용하는-방법-Recommanded"><a href="#Gradle-플러그인을-이용하는-방법-Recommanded" class="headerlink" title="Gradle 플러그인을 이용하는 방법 (Recommanded)"></a>Gradle 플러그인을 이용하는 방법 (Recommanded)</h4><p><a href="https://plugins.gradle.org/plugin/io.freefair.lombok">io.freefair.lombok</a> 그래들 플러그인을 사용하고 있는 경우라면 위의 개별적으로 디펜던시를 나열하기보다는 <a href="https://github.com/AkaZver/mapstruct-plugin">Gradle Mapstruct Plugin</a>을 사용하는 게 더 간단하기 때문에 롬복과 동일하게 그래들 플러그인 방식을 추천한다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">plugins <span class="token punctuation">&#123;</span>    id <span class="token string">'io.freefair.lombok'</span> version <span class="token string">'8.0.1'</span>    id <span class="token string">'com.github.akazver.mapstruct'</span> version <span class="token string">'1.0.5'</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>Plugin will add mapstruct with mapstruct-processor by default<br>If you are using lombok it will add lombok-mapstruct-binding, if spring - mapstruct-spring-extensions</p></blockquote><h4 id="깃에서-src-main-generated-디렉토리-무시하기-Intellij-IDEA"><a href="#깃에서-src-main-generated-디렉토리-무시하기-Intellij-IDEA" class="headerlink" title="깃에서 src/main/generated 디렉토리 무시하기 (Intellij IDEA)"></a>깃에서 <code>src/main/generated</code> 디렉토리 무시하기 (Intellij IDEA)</h4><p>기본적으로 그래들 빌드 과정에서 <code>build/generated/sources/annotationProcessor</code> 경로에 인터페이스 구현체가 만들어지고 <code>build/classes</code> 경로로 복사된다. 하지만, 인텔리제이에서 Gradle이 아닌 <code>Intellij IDEA</code>로 선택하여 구동되도록 변경하는 경우에는 <code>src/main/generated</code> 경로에 만들어지게 되므로 <code>.gitignore</code> 파일에 빌드 과정에서 MapStruct에 의해 만들어지는 인터페이스 구현체를 제외하는 것이 필요하다.</p><pre class="language-ignore" data-language="ignore"><div class="caption"><span>.gitignore</span></div><code class="language-ignore"><span class="token entry string">src<span class="token punctuation">/</span>main<span class="token punctuation">/</span>generated<span class="token punctuation">/</span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자바 진영에서 오브젝트 간 변환을 위해서 사용할 수 있는 오브젝트 매핑 라이브러리에는 ModelMapper와 MapStruct가 있다. 현재 시스템에서는 일반적으로 사용하는 ModelMapper로도 충분했기 때문에 MapStruct를 굳이 도입하</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Real JWT (Feat. 쿠키 세션)</title>
    <link href="https://kdevkr.github.io/real-jwt/"/>
    <id>https://kdevkr.github.io/real-jwt/</id>
    <published>2023-06-27T11:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>신입 개발자의 포트폴리오의 기본 스택으로 포함되는 것 중의 하나는 JWT를 활용한 토큰 기반 인증 이라고 할 수 있다. 이미 수 많은 기업에서는 마이크로서비스 아키텍처와 쿠버네티스 도입을 시도하다가 포기한 경우가 많을 것이다. 심지어 마이크로서비스 아키텍처를 고려하다가 오히려 모놀리식 아키텍처로 전환하는 사례도 찾을 수 있다.</p></blockquote><p>오늘은 JWT 토큰을 사용하여 사용자 인증을 유지하는 것에 대해서 이야기 해보고자 한다. 미리 말하자면, 실무에서 JWT 토큰을 사용해본 경험이 없으며 크지 않은 시스템을 개발하고 있는 테크 리더로써의 생각이다. </p><h4 id="과연-쿠키-세션보다-효율적인가-🤔"><a href="#과연-쿠키-세션보다-효율적인가-🤔" class="headerlink" title="과연 쿠키 세션보다 효율적인가 🤔"></a>과연 쿠키 세션보다 효율적인가 🤔</h4><p>사용자 인증에 JWT를 도입하는 경우를 보면 대부분 세션에 대한 비효율성을 이야기한다. 시스템의 규모와 트래픽이 많아지는 경우 세션을 조회하는 과정에서 과부하를 일으킬 가능성이 있어보이는 건 사실이고 세션 클러스터링을 수행한다하더라도 중앙화 되어버리는 구조로 인해 관리 포인트가 늘어날 순 있다. 서버가 세션 유지를 위해 담당하는 부하 뿐만 아니라 고려해야할 것은 인프라에 대한 비용일지 모른다. <a href="https://gameanalytics.com/blog/reduce-costs-https-api-aws/">AWS 환경에서 HTTPS API 비용을 줄이는 방법</a>도 공유되는 것처럼 작은 패킷의 차이도 생각보다 많은 비용이 늘어날 수 있다는 이야기다.</p><p>JWT의 가장 큰 단점은 JSON으로 구성된 문자열을 Base64 인코딩하여 구성한다는 것이다. 그리고 보안적인 관점이 높을수록 키 길이가 긴 RSA 또는 ECC 키로 구성된 공개키 기반의 서명을 하게 될 것이다. 그리고 올바른 키로 서명할 수 있도록 JWK도 제공하게 될 것이다. 아무튼 보안으로 인해 키 길이가 길어질수록 Base64 인코딩 특징으로 인해 HTTP 통신 패킷의 사이즈가 기하급수적으로 커질 수 있다는 말이다. 그리고 이것은 요청과 응답 페이로드 크기로 인해 막대한 트래픽 비용이 발생할 수 있다는 것과 동일하다.</p><h4 id="보안-지식을-이해할-수-있는가-😵"><a href="#보안-지식을-이해할-수-있는가-😵" class="headerlink" title="보안 지식을 이해할 수 있는가 😵"></a>보안 지식을 이해할 수 있는가 😵</h4><p>JWT에 대한 상세 구현은 개발자의 역량에 있기에 여러가지 보안 지식이나 관점이 필요하다. 브라우저와 서버 간 통신을 위해서는 반드시 HTTPS 연결을 통해 패킷을 안전하게 보호해야한다. 기본적인 암호화 통신은 토큰을 안전하게 보호할 수 있는 최소한의 방어이기 때문이다. 언어마다 개발자들을 위한 JWT 관련 라이브러리들이 있지만 그것을 활용해서 제대로 활용하려면 보안 지식을 이해하고 있어야 한다. HS256과 RS256의 차이를 알기 위해서는 공개키 기반 암호화에 대한 기본 지식이 필요하다. 개인적인 견해로는 신입 개발자 뿐만 아니라 주니어 개발자들이 HTTPS를 이해하는 것조차도 쉽지 않다고 생각한다.</p><p>개발자 커뮤니티인 오키 사이트를 보더라도 HTTPS를 사용하고 있지만 JWT로 구성된 액세스 토큰과 리프래시 토큰을 쿠키로 관리함에도 Secure 와 SameSite 속성을 제대로 적용하지 않음을 볼 수 있다. 이것은 시스템 보안 가이드라인에 따라서 위배된 애플리케이션이라고 검출되어 조치 대상이 될 수 있는 중요한 부분이다.</p><blockquote><p>실제로 신입 개발자 인터뷰를 진행하다보면 토큰 기반 인증을 구현하더라도 세션에 대한 이해와 경험이 부족하다고 느껴질 만큼 제대로 된 답변을 하지 못하는 경우가 상당하다. 심지어 OAuth 소셜 로그인을 별도로 사용했음에도 불구하고 토큰은 JWT만 있다고 말하는 케이스도 있었다.</p></blockquote><p>이러한 부분들을 통해 엄청 높은 실력의 역량을 보유한 신입이 아니고서야 거의 모든 신입 웹 개발자들은 전통적인 세션에 대한 경험을 쌓고 세션에 대한 문제점을 이해하는 것이 더 중요하지 않을까 생각해본다. 개인적으로는 세션을 활용한 프로젝트를 포트폴리오로써 보고싶다. JWT를 활용한 토큰 기반 인증이 넘쳐나는 포트폴리오들 속에서 오히려 경쟁력이 있어보이는 것은 가장 단순한 세션을 사용한 것이 아닐까?…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;신입 개발자의 포트폴리오의 기본 스택으로 포함되는 것 중의 하나는 JWT를 활용한 토큰 기반 인증 이라고 할 수 있다. 이미 수 많은 기업에서는 마이크로서비스 아키텍처와 쿠버네티스 도입을 시도하다가 포기한 경우가 많을 것이</summary>
      
    
    
    
    
    <category term="JWT" scheme="https://kdevkr.github.io/tags/JWT/"/>
    
    <category term="Session" scheme="https://kdevkr.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="https://kdevkr.github.io/threadlocal/"/>
    <id>https://kdevkr.github.io/threadlocal/</id>
    <published>2023-06-25T07:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>스프링 시큐리티의 SecurityContextHolder를 사용하셨던데 ThreadLocal에 대해서 이야기해보세요.</p></blockquote><p>스프링 애플리케이션에서 내부적으로 많이 사용되는 클래스 중 하나는 <strong>ThreadLocal</strong> 이라는 자바 기본 클래스라고 할 수 있다. 신입 웹 개발자들에 대한 인터뷰를 진행하다보면 스프링 프레임워크와 스프링 시큐리티를 사용했음에도 불구하고 내부적으로 어떤 동작을 하는지 모르거나 ThreadLocal 이라는 자바 언어에서의 기본 지식에 대해서 들어보지 못한 경우가 많다. 대부분 유명한 김영한님의 강의를 수강했다고 이력서에 기재했기 때문에 이 ThreadLocal에 대한 부분을 다루지 않았다고 생각했는데 찾아보니 <a href="https://www.youtube.com/watch?v=ljrgXkzagaU">ThreadLocal</a>이라는 부분에 대해서도 언급하고 있기에 수강자들이 일부 내용을 스스로 생략하고 넘어갔을 것 같다.</p><h4 id="XXXContextHolder"><a href="#XXXContextHolder" class="headerlink" title="XXXContextHolder"></a>XXXContextHolder</h4><p>⁕ org.springframework.web.context.request.RequestContextHolder<br>⁕ org.springframework.context.i18n.LocaleContextHolder<br>⁕ org.springframework.security.core.context.SecurityContextHolder  </p><p>위와 같이 ContextHolder로 끝나도록 이름이 정의된 클래스는 내부적으로 ThreadLocal을 사용하도록 구현되어있는 대표적인 스프링 프레임워크의 클래스이다. 인텔리제이 IDEA를 통해서 위 클래스들을 사용하는 다른 클래스를 따라가보면 어떻게 활용하고 있는지를 이해할 수 있는데 <strong>RequestContextHolder와 LocaleContextHolder</strong>의 생성과 삭제는 RequestContextFilter에서 수행하고 있으며 <strong>SecurityContextHolder</strong>는 SecurityContextHolderFilter에서 관리하고 있음을 찾을 수 있다.</p><blockquote><p>이와 같이 일반적인 자바 개발자들도 ThreadLocal과 Filter를 구현하여 동일한 스레드 내에서는 언제든지 정보를 가져올 수 있는 패턴을 만들 수 있다는 이야기이다. ThreadLocal 자체가 스레드 내에 정보 공유를 위한 지역 변수이기 때문이다.</p></blockquote><h4 id="RequestContextFilter"><a href="#RequestContextFilter" class="headerlink" title="RequestContextFilter"></a>RequestContextFilter</h4><p>RequestContextFilter에서는 HttpServletRequest의 로케일 정보와 ServletRequestAttributes를 ThreadLocal에 저장하도록 구현되어있다. 다른 필터를 거치고 난 후 반드시 ThreadLocal에 있는 정보들을 제거하도록 되어있는 부분이 중요하다. RequestContextHolder에 저장되는 클래스는 ServletRequestAttributes 이며 이전에 공유한 <a href="/redis-memory-usage-issue/">레디스 장애 회고</a>에서도 내부 구현을 살펴본 클래스에 해당한다.</p><h4 id="SecurityContextHolderFilter"><a href="#SecurityContextHolderFilter" class="headerlink" title="SecurityContextHolderFilter"></a>SecurityContextHolderFilter</h4><p>스프링 시큐리티 5.7+ 부터는 SecurityContextPersistenceFilter가 아닌 SecurityContextHolderFilter로 대체되어 사용된다. SecurityContextPersistenceFilter로 처리되던 것이 SecurityContextHolderFilter 에서는 어떠한 방식으로 구현되었는지 비교해보아도 좋은 학습이 될 것 같다. Supplier 인터페이스를 활용하여 SecurityContext를 지연되어 처리하는 방식으로 변경하였다.</p><p>많은 회사에서 신입 개발자에게 바라는 역량 중 기본 지식에 대한 이야기는 사용하는 기술에 대해서 내부적으로 사용되는 기본 개념이 있는지 찾아보는 편인가를 말하는게 아닐까? 비록 신입 웹 개발자로 일하기 위해서 실무 기술에 대한 역량을 배우고 어필하는 건 어쩔 수 없는 상향 평준화된 부분이 있지만 기본적인 지식과 관련된 지식은 없는지 찾아보고 지속적인 학습에 대한 어필도 필요할 것이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;스프링 시큐리티의 SecurityContextHolder를 사용하셨던데 ThreadLocal에 대해서 이야기해보세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;스프링 애플리케이션에서 내부적으로 많이 사용되는 클래스 중 하나는 </summary>
      
    
    
    
    
    <category term="Java" scheme="https://kdevkr.github.io/tags/Java/"/>
    
    <category term="ThreadLocal" scheme="https://kdevkr.github.io/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트 로깅 레벨 선언 (Feat. Yaml)</title>
    <link href="https://kdevkr.github.io/spring-boot-logging-level/"/>
    <id>https://kdevkr.github.io/spring-boot-logging-level/</id>
    <published>2023-06-25T05:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-properties" data-language="properties"><div class="caption"><span>application.properties</span></div><code class="language-properties"><span class="token key attr-name">logging.level.org.springframework.security.web.FilterChainProxy</span><span class="token punctuation">=</span><span class="token value attr-value">TRACE</span></code></pre><p>스프링 부트 애플리케이션에서 logging.level 하위에 패키지와 클래스 명을 선언하면 로깅 레벨을 쉽게 조정할 수 있고 스프링 부트 프로젝트를 만들면 기본으로 사용되는 프로퍼티(.properties) 파일에는 위와 같이 작성해야 한다. 그러나, 아무래도 프로퍼티 파일의 여러가지 문제점으로 인해 application.yml 파일로 변경하여 사용할 것이다. Yaml은 계층으로 키를 관리하기 때문에 인텔리제이 IDEA에서 <code>org.springframework.security.web.FilterChainProxy</code>를 그대로 복사하여 붙여넣기를 시도하는 경우 아래와 같이 자동으로 키를 만들어주게 된다.</p><blockquote><p>패키지 명을 입력하면 다음 디렉토리를 자동으로 알려주기는 하나 해당 디렉토리에서 존재하는 클래스까지는 알려주지 않으므로 FilterChainProxy의 클래스 위치를 찾아서 상단에 기재된 패키지 명을 복사하는게 더 빠르고 편리하다.</p></blockquote><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org</span><span class="token punctuation">:</span>      <span class="token key atrule">springframework</span><span class="token punctuation">:</span>        <span class="token key atrule">security</span><span class="token punctuation">:</span>          <span class="token key atrule">web</span><span class="token punctuation">:</span>            <span class="token key atrule">FilterChainProxy</span><span class="token punctuation">:</span></code></pre><p>위와 같이 만들어지는게 잘못된 것은 아니지만 가독성이나 유지 관리 면에서는 너무 길어지므로 비효율적이라 생각한다. 여기서 logging.level 하위 계층을 표현하는 경우에 작은 따옴표(<code>&#39;</code>)를 활용하면 한줄로 표현할 수 있다. </p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">'org.springframework.security.web.FilterChainProxy'</span><span class="token punctuation">:</span> TRACE</code></pre><blockquote><p>작은 따옴표로 하나의 키로 표현할 수 있게 되지만 맨 뒤에 콜론은 자동으로 붙여주지 않으므로 옆으로 이동하여 콜론을 포함한 로그 레벨을 입력해야한다. 개인적으로는 콜론까지 입력하는 부분은 그렇게 불편한 부분은 아니라고 생각된다.</p></blockquote><h4 id="로그-그룹-Optional"><a href="#로그-그룹-Optional" class="headerlink" title="로그 그룹 (Optional)"></a>로그 그룹 (Optional)</h4><p>스프링 부트 2.1+ 부터는 로그 레벨 뿐만 아니라 특정 클래스들에 대한 로그 레벨을 한번에 관리할 수 있는 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#logging-groups">로그 그룹</a>을 지원하고 Yaml 문법을 활용하여 작은 따옴표가 없어도 표현할 수 있다.</p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">study</span><span class="token punctuation">:</span> TRACE  <span class="token key atrule">group</span><span class="token punctuation">:</span>    <span class="token key atrule">study</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> org.springframework.web      <span class="token punctuation">-</span> org.springframework.jdbc.core      <span class="token punctuation">-</span> org.springframework.security.web.FilterChainProxy</code></pre><p>로그 그룹을 사용한다면 굳이 작은 따옴표가 필요하지 않지만 일반적으로 로그 레벨 조정은 세부적인 클래스 단위로 변경하는 경우가 많기 때문에 많이 활용되진 않는다. 이와 같이 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging">스프링 부트 공식 문서의 Logging 항목</a>에서도 다루지 않는 내용이기 때문에 생략된 정보가 없는지는 별도로 찾아보는 행위도 간혹 필요하다. 본 글에서 공유한 내용은 그저 Yaml 파일에 대한 기본 문법을 활용한 것이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-properties&quot; data-language=&quot;properties&quot;&gt;&lt;div class=&quot;caption&quot;&gt;&lt;span&gt;application.properties&lt;/span&gt;&lt;/div&gt;&lt;code class=&quot;langu</summary>
      
    
    
    
    
    <category term="Logging" scheme="https://kdevkr.github.io/tags/Logging/"/>
    
    <category term="Yaml" scheme="https://kdevkr.github.io/tags/Yaml/"/>
    
  </entry>
  
  <entry>
    <title>젠킨스 에이전트 (Feat. 빌드 환경)</title>
    <link href="https://kdevkr.github.io/jenkins-agent/"/>
    <id>https://kdevkr.github.io/jenkins-agent/</id>
    <published>2023-06-23T14:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<p>현재 회사의 개발 조직에서는 하나의 모놀리식 프로젝트를 다양한 환경을 위해서 빌드 및 배포하고 있다. 그리고 빌드와 배포를 위해서 하나의 마스터로 동작하는 젠킨스 서버를 구성하여 사용하고 있고 하나의 서버에서 빌드를 수행해도 무방할 만큼 서비스 규모가 크거나 시스템에 대한 배포가 자주 수행되진 않기에 단일 빌드 서버로 운용해도 충분하다고 볼 수 있다. 개인적으로는 인터넷에 공유된 글들을 통해 대부분의 회사에서는 프로덕션을 위한 빌드 환경을 위해 다양한 CI&#x2F;CD 도구들을 활용하기도 하고 젠킨스 서버에 대해 컨트롤러(마스터)와 에이전트(슬레이브)로 구성되는 클러스터(분산 빌드 환경)으로 구성한다는 것을 알고 있었다. </p><p>컨트롤러와 에이전트로 동작하는 빌드 환경을 만들어야하는 요구사항이 필요하게 된 건 분산 빌드의 목적보다는 젠킨스 서버가 Amazon Linux 2 AMI 이미지로 실행된 EC2 서버에 설치되었기 때문에 <a href="https://okky.kr/articles/1451364">Node.js 18 LTS 버전을 지원하지 않는 제약사항</a>이 발생했기 때문이다. 일부 환경에 대해서 인수 테스트를 통한 품질 강화를 위해서 Jest를 도입하게 되면서 Node.js 12 또는 14 LTS에 의존했던 것을 Node.js 18 LTS로 호환성 버전을 올리고자 했기 때문이다. (Node.js 16 또는 18 LTS 버전을 호환성 범위로 체크했다.)</p><blockquote><p>Node.js 14도 호환성 버전 후보에 있으나 ARM 아키텍처로 동작하는 M1 또는 M2 맥 환경에서 Node.js 14 LTS는 공식 빌드가 포함되어있지 않기 때문에 <a href="https://devzilla.io/using-nodejs-14-with-mac-silicon-m1">Using NodeJs 14 with Mac Silicon (M1)</a>와 같은 정보들을 참고해서 터미널이 AMD 64 아키텍처로 동작하도록 변경해서 사용해야 하는 불편함에 의해 제외시켰다.</p></blockquote><p>젠킨스 서버를 Amzon Linux 2023 또는 Ubuntu 20.24 이상의 EC2 서버로 이관하는 방법도 있지만 젠킨스 서버를 <a href="https://endoflife.date/amazon-linux">지원 종료되는 AL1</a>에서 Amazon Linux 2로 이관한 지 얼마되지 않았기 때문에 인프라 엔지니어에게 요청하는 것은 비효율적이다라는 생각이 들었기 때문이다. 굳이 젠킨스 서버를 새로운 EC2 서버로 재구성하거나 컨테이너 기반으로 실행하지 않아도 분산 빌드 환경으로 제공하는 에이전트(노드나 클라우드) 기능으로 별도의 서버나 컨테이너에서 빌드를 수행하는 것을 지원하기 때문에 클러스터 구성을 시도하고자 한다.</p><blockquote><p>젠킨스 분산 빌드 환경을 구성해보는 것은 좋은 경험이었다고 생각되나 별도의 서버에서 프로젝트 빌드를 수행할 수 있도록 설정하기 까지 생각보다 어려웠다. 이러한 이유로 빌드에 성공하기까지의 과정에서 발생한 문제들을 기록해보고자 한다.</p></blockquote><h4 id="젠킨스-관리-gt-Nodes-and-Clouds"><a href="#젠킨스-관리-gt-Nodes-and-Clouds" class="headerlink" title="젠킨스 관리 &gt; Nodes and Clouds"></a>젠킨스 관리 &gt; Nodes and Clouds</h4><p><img data-src="/../images/posts/jenkins-agent/01.png"></p><p>분산 빌드 환경의 젠킨스 클러스터를 구성하는 것은 젠킨스 관리에서 Nodes and Clouds 메뉴를 통해 수행할 수 있다. 에이전트를 등록하는 방식에 따라 노드는 리눅스 서버 또는 VM 머신에서 빌드를 수행하고 클라우드는 도커 컨테이너 또는 쿠버네티스와 같은 환경으로 빌드를 수행하는 것이라고 생각하면 된다. 젠킨스 서버가 EC2에 설치되어있다고 하더라도 EC2에 도커 엔진과 컨테이너가 설치되어있다면 도커 엔진의 유닉스 도메인 소켓을 통해 클라우드 에이전트를 등록할 수 있다.</p><p>노드 에이전트를 등록하는 방법에는 젠킨스 서버에서 SSH와 같은 방식으로 연결을 관리하는 것과 별도의 윈도우나 리눅스 서버와 같은 곳에서 실행된 노드 에이전트가 젠킨스 서버에 특정 포트를 사용하여 연결을 요구하는 방식으로 나누어진다. 젠킨스 서버에 Elastic IP가 할당되어있으므로 굳이 VPC 간 연결을 수행할 수 있도록 작업을 하지 않더라도 노드 에이전트에서 젠킨스 서버에 TCP 연결을 수행할 수 있도록 인바운드 규칙만 설정하면 되는 간단한 방식이라 후자를 선택했다. 노드 에이전트가 실행될 서버는 오류 트래킹 시스템이 구동되는 서버로 미달 프로비저닝 상태로 보고된 EC2(Amazon Linux 2023으로 실행된 유일한 EC2)를 노드로 추가하기로 했다.</p><h5 id="Launch-method-→-Launch-agent-by-connecting-it-to-the-controller"><a href="#Launch-method-→-Launch-agent-by-connecting-it-to-the-controller" class="headerlink" title="Launch method → Launch agent by connecting it to the controller"></a>Launch method → Launch agent by connecting it to the controller</h5><p><img data-src="/../images/posts/jenkins-agent/02.png"></p><p>자바로 실행되는 노드 에이전트에서 컨트롤러(마스터)에 연결하는 방식으로 노드 에이전트에서 젠킨스 서버에 연결할 수 있는 TCP 포트를 요구하므로 젠킨스 관리 &gt; Security 메뉴의 Agents 항목에서 TCP port for inbound agents에 대한 설정을 Fixed로 선택하여 50000번 포트로 입력했다. 젠킨스 서버에서 노드를 추가하면 젠킨스 서버로 부터 자바 에이전트 파일을 다운로드할 수 있는 여러가지 명령어를 제공해준다. 노드 에이전트를 설치하려는 환경에 맞게 복사해서 호출하면 된다.</p><p><img data-src="/../images/posts/jenkins-agent/03.png"></p><blockquote><p>젠킨스 서버에 자바 에이전트가 연결할 수 있도록 보안 그룹에 TCP 50000번 포트를 인바운드 규칙으로 추가해야 한다. 또한, 일반적으로 노드 에이전트를 연결하는 포트가 50000번을 사용하는 것으로 알려져 있기에 보안적인 관점을 두어야한다면 별도의 포트를 지정하는 것을 추천한다.</p></blockquote><h5 id="Usage-→-Only-build-jobs-with-label-expressions-matching-this-node"><a href="#Usage-→-Only-build-jobs-with-label-expressions-matching-this-node" class="headerlink" title="Usage → Only build jobs with label expressions matching this node"></a>Usage → Only build jobs with label expressions matching this node</h5><p><img data-src="/../images/posts/jenkins-agent/04.png"></p><p>노드 에이전트를 추가하는 이유는 분산 빌드의 목적이 아닌 Node.js 18 LTS를 사용하여 프론트엔드 애플리케이션 코드를 빌드하여 배포할 수 있는 환경을 만들고자 함에 있으므로 기존에 동작하던 프로젝트들은 그대로 젠킨스 서버에서 수행할 수 있도록 특정 프로젝트에서 별도로 라벨을 지정하여야만 해당 노드를 통해 빌드를 수행할 수 있도록 하였다. 젠킨스 서버에 노드 에이전트를 추가하는 과정에서도 일부 프로젝트가 빌드될 가능성이 있으므로 잘못된 환경에서 빌드되어 배포되는 것을 막고자하는 최소한의 조치이다.</p><h4 id="Clouds-gt-Docker-Cloud-details"><a href="#Clouds-gt-Docker-Cloud-details" class="headerlink" title="Clouds &gt; Docker Cloud details"></a>Clouds &gt; Docker Cloud details</h4><p>노드가 아닌 도커 컨테이너 환경에서 빌드를 수행하고자 하는 경우 클라우드를 통해 도커 에이전트를 등록하면 된다. 앞서 언급했듯이 젠킨스 서버 내에 설치한 도커 엔진에 연결하고자 하는 경우 유닉스 도메인 소켓 방식의 unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock을 지정하면 되며 별도의 서버의 도커 엔진에 연결하고자 하는 경우에는 해당 서버에서 도커 엔진을 실행할 때 TCP 연결을 수행할 수 있도록 아래와 같이 서비스를 수정하고 다시 실행해야한다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /lib/systemd/system/docker.service<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375 <span class="token parameter variable">-H</span> unix:///var/run/docker.sock<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> restart<span class="token function">curl</span> http://localhost:2375/version</code></pre><blockquote><p>만약, 리눅스 서버가 아닌 윈도우 또는 맥 환경의 도커 데스크탑에서는 TCP 연결을 활성화할 방법이 없을 수 있으니 별도의 방법을 찾아보아야 한다. 맥의 경우 <a href="https://github.com/docker/for-mac/issues/1156#issuecomment-273764881">socat을 통해 TCP와 유닉스 도메인 소켓을 연결하는 우회 방법</a>이 있는 것 같다.</p></blockquote><h5 id="도커-에이전트-이미지-Optional"><a href="#도커-에이전트-이미지-Optional" class="headerlink" title="도커 에이전트 이미지 (Optional)"></a>도커 에이전트 이미지 (Optional)</h5><p>처음에는 도커 에이전트를 추가하고나서 에이전트 템플릿을 등록하는 과정에서 에이전트 이미지를 <a href="https://github.com/jenkinsci/docker-agent">jenkins&#x2F;agent</a>를 사용하도록 했으나 실제로 프로젝트를 빌드하려는 과정에서 일부 패키지가 없어서 오류가 발생함에 따라 jenkins&#x2F;agent:jdk17를 베이스로 하여 별도의 에이전트 이미지를 만들어서 사용해야했다.</p><pre class="language-docker" data-language="docker"><div class="caption"><span>Dockerfile</span></div><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> jenkins/agent:jdk17</span><span class="token instruction"><span class="token keyword">USER</span> root</span><span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\</span> &amp;&amp; apt-get install build-essential python3 -y</span><span class="token instruction"><span class="token keyword">USER</span> jenkins</span></code></pre><blockquote><p>위 이미지는 사용중인 라이브러리에 따라 g++ 또는 python3 를 찾을 수 없다는 오류가 발생하여 추가한 것으로 조직에서 사용하는 도커 허브 계정의 퍼블릭 리파지토리에 올렸으며 프라이빗 환경이라면 Registry Authentication 설정이 요구된다.</p></blockquote><h4 id="젠킨스-관리-gt-Security-gt-Git-Host-Key-Verification-configuration"><a href="#젠킨스-관리-gt-Security-gt-Git-Host-Key-Verification-configuration" class="headerlink" title="젠킨스 관리 &gt; Security &gt; Git Host Key Verification configuration"></a>젠킨스 관리 &gt; Security &gt; Git Host Key Verification configuration</h4><p><img data-src="/../images/posts/jenkins-agent/05.png"></p><p>프로젝트에서 빌드할 소스코드를 가져오기 위해 깃을 사용하는 경우 <a href="https://plugins.jenkins.io/git-client/#plugin-content-ssh-host-key-verification">SSH Host Key verification</a>의 Host Key Verification Strategy가 Known hosts file이 기본값인 관계로 슬레이브 노드 에이전트나 클라우드로 추가한 도커 에이전트에서 빌드를 수행하는 경우 <code>No ECDSA host key is known for github.com and you have requested strict checking. Host key verification failed.</code> 와 같은 오류가 발생할 수 있다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-remote <span class="token parameter variable">-h</span> git@github.com:<span class="token punctuation">[</span>user<span class="token punctuation">]</span>/<span class="token punctuation">[</span>project<span class="token punctuation">]</span>.git HEAD</code></pre><p>노드 머신이나 도커 에이전트로 실행되는 컨테이너에 ~&#x2F;.ssh&#x2F;known_hosts 파일이 없기 때문이며 위와 같이 깃허브 호스트에 대한 지문을 최소한 한번이라도 추가하여 known_hosts 파일을 만드는 것이 요구될 수 있다. 만약, 도커 에이전트에서 도커 컨테이너를 만드는 경우 위 명령어를 수행할 수 없기에 도커 에이전트로 연결되는 서버에서 위 명령어를 수행한 후 마운트 옵션을 통해 known_hosts 파일을 전달하도록 설정하는 것도 방법이다.</p><h5 id="Container-settings-gt-Mounts"><a href="#Container-settings-gt-Mounts" class="headerlink" title="Container settings &gt; Mounts"></a>Container settings &gt; Mounts</h5><p><img data-src="/../images/posts/jenkins-agent/06.png"></p><p>위와 같이 Docker Agent Templates를 등록하는 설정에서 Container settings &gt; Mounts 옵션을 통해 위 명령어로 만들어진 known_hosts 파일을 공유할 수 있도록 <code>type=bind,src=/home/ec2-user/.ssh,dst=/home/jenkins/.ssh</code>와 같은 방식으로 입력하면 된다.</p><p>젠킨스 서버의 분산 빌드 환경 구성에 대한 튜토리얼은 아니기 때문에 생략한 정보가 많을 수 있지만 일부의 내용만으로도 도움이 되기를 바래본다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 회사의 개발 조직에서는 하나의 모놀리식 프로젝트를 다양한 환경을 위해서 빌드 및 배포하고 있다. 그리고 빌드와 배포를 위해서 하나의 마스터로 동작하는 젠킨스 서버를 구성하여 사용하고 있고 하나의 서버에서 빌드를 수행해도 무방할 만큼 서비스 </summary>
      
    
    
    
    
    <category term="Node" scheme="https://kdevkr.github.io/tags/Node/"/>
    
    <category term="Cloud" scheme="https://kdevkr.github.io/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>공공데이터포털 오픈 API는 웹 개발자를 괴롭혀 (Feat. XML)</title>
    <link href="https://kdevkr.github.io/data-go-openapi/"/>
    <id>https://kdevkr.github.io/data-go-openapi/</id>
    <published>2023-05-28T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<p>공공데이터포털의 오픈 API는 많은 웹 서비스나 시스템에서 활용할 수 있는 데이터를 제공하고 있어서 웹 개발자들에게 필수적으로 연동을 요구하는 인터페이스이다. 많은 기업에서 오픈 API를 활용해야하기 때문에 수 많은 웹 개발자가 오픈 API에 대한 연동 오류 때문에 힘들어했다. 지금은 인증키 문제를 해결하고자 URL 인코딩된 키와 원본을 구별해서 제공하기 때문에 OpenAPI 활용 자체는 어려움이 없다고 생각이 된다. 만약, 스프링 프레임워크를 사용하고 있는 개발자라면 인코딩되지 않은 인증키(Decoding)을 복사하여 사용하면 된다. </p><p><img data-src="/images/posts/data-go-openapi/01.png"></p><p>하지만, 공공데이터포털의 오픈 API가 웹 개발자들을 괴롭히는 문제는 생각보다 많은데 함께 알아보도록 하자.</p><h4 id="간헐적-SERVICE-KEY-IS-NOT-REGISTERED-ERROR-오류"><a href="#간헐적-SERVICE-KEY-IS-NOT-REGISTERED-ERROR-오류" class="headerlink" title="간헐적 SERVICE_KEY_IS_NOT_REGISTERED_ERROR 오류"></a>간헐적 SERVICE_KEY_IS_NOT_REGISTERED_ERROR 오류</h4><p><img data-src="/images/posts/data-go-openapi/02.png"></p><p>공공데이터 포털의 자주하는 질문 중 서비스 오류에 대한 내용으로 <code>SERVICE_KEY_IS_NOT_REGISTERED_ERROR</code> 오류에 대한 원인을 간단하게 소개하고 있다. 잘못된 인증키를 넣어서 호출하였거나 인증 기관 서버로 동기화되지 않아서 발생한다고 되어있다. 해당 인증키를 사용하여 정상적으로 OpenAPI를 호출할 수 있었음에도 불구하고 몇 초 만에 인증키가 올바르지 않다는 오류가 간헐적으로 발생하기도 한다.</p><h4 id="통일되지-않은-오픈-API-참고-문서"><a href="#통일되지-않은-오픈-API-참고-문서" class="headerlink" title="통일되지 않은 오픈 API 참고 문서"></a>통일되지 않은 오픈 API 참고 문서</h4><p>오픈 API에 대한 참고 문서의 형식을 강제하지 않는 결과로 많은 <code>기업에서 사용하지 않는 확장자인 .hwp로 작성되어 공유</code>되는 경우가 많다. 그로 인해 웹 개발자들은 한글 문서를 사용하지 않음에도 불구하고 한글 문서를 열 수 있는 뷰어를 설치해야만 한다. 공공데이터포털의 오픈 API 중에는 <code>Swagger UI 기반의 OpenAPI 명세서를 제공</code>하기도 한다.</p><p><img data-src="/images/posts/data-go-openapi/03.png"></p><h4 id="해외-아이피-요청-제한"><a href="#해외-아이피-요청-제한" class="headerlink" title="해외 아이피 요청 제한"></a>해외 아이피 요청 제한</h4><p>공공데이터포털에서 제공하는 모든 오픈 API에 해당하는 문제는 아니지만 오픈 API 중 보안 상 국내 아이피 대역이 아닌 해외 아이피에서 호출하는 것이 웹 방화벽으로 막혀져있는 경우도 있다. 대표적으로 <a href="https://www.data.go.kr/data/15056640/openapi.do">한국전력거래소에서 제공하는 오픈 API</a>로 참고 문서에 나와있지 않은 내용이지만 공공데이터포털의 게이트웨이 방식이 아닌 KPX에서 관리하는 서버로 요청되기 때문에 AWS와 같은 클라우드 환경에서 호출할 수 없고 <code>국내 서비스로 우회</code>하거나 사용중인 아이피 대역을 전달하여 <code>방화벽 해제 신청</code>을 해야한다. </p><h4 id="게이트웨이-방식-오픈-API"><a href="#게이트웨이-방식-오픈-API" class="headerlink" title="게이트웨이 방식 오픈 API"></a>게이트웨이 방식 오픈 API</h4><p><img data-src="/images/posts/data-go-openapi/04.png"></p><p>공공데이터포털의 게이트방식 오픈 API는 엔드포인트가 <code>apis.data.go.kr</code>와 같이 구성되며 위에서 확인할 수 있듯이 게이트웨이에서 문제가 발생하면 오픈 API가 JSON 타입의 응답 결과를 지원하더라도 <code>XML로만 출력된다는 제약사항</code>이 있다. 이러한 제약사항을 고려하지 않고 응답결과를 JSON으로 오해하고 코드를 작성한다면 아래와 같이 오류가 발생할 수 있다. 심지어 HTTP 상태 코드가 200으로 응답되지만 <code>응답 결과에 오류에 대한 내용으로 제공한다는 점</code>으로 인해 HTTP 상태 코드를 통해서 1차적으로 구분할 수 없고 응답 바디를 무조건 확인해서 정상적인 호출인지 아닌지를 구별해야한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Unexpected</span> exception thrown<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">net<span class="token punctuation">.</span>minidev<span class="token punctuation">.</span>json<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span>ParseException</span><span class="token operator">:</span> <span class="token class-name">Unexpected</span> token <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OpenAPI_ServiceResponse</span><span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>cmmMsgHeader<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>errMsg<span class="token punctuation">></span></span><span class="token constant">SERVICE</span> <span class="token constant">ERROR</span><span class="token operator">&lt;</span><span class="token operator">/</span>errMsg<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>returnAuthMsg<span class="token punctuation">></span></span><span class="token constant">SERVICE_KEY_IS_NOT_REGISTERED_ERROR</span><span class="token operator">&lt;</span><span class="token operator">/</span>returnAuthMsg<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>returnReasonCode<span class="token punctuation">></span></span><span class="token number">30</span><span class="token operator">&lt;</span><span class="token operator">/</span>returnReasonCode<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>cmmMsgHeader<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">OpenAPI_ServiceResponse</span><span class="token operator">></span> at position <span class="token number">229.</span></code></pre><p>따라서, 공공데이터포털에 대한 연동을 하는 경우 웹 개발자는 아래에 대해 고려 또는 대응을 해야한다.</p><ol><li>게이트웨이 방식 API 확인</li><li>API 호출 제한 제약 확인</li><li>JSON 과 XML 처리 모두 고려</li><li>간헐적 인증키 오류 케이스 대응 (API 점검 포함)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;공공데이터포털의 오픈 API는 많은 웹 서비스나 시스템에서 활용할 수 있는 데이터를 제공하고 있어서 웹 개발자들에게 필수적으로 연동을 요구하는 인터페이스이다. 많은 기업에서 오픈 API를 활용해야하기 때문에 수 많은 웹 개발자가 오픈 API에 대</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>서버 타임존을 바꾸지 말자 (Feat. 글로벌)</title>
    <link href="https://kdevkr.github.io/don&#39;t-change-server-timezone/"/>
    <id>https://kdevkr.github.io/don&#39;t-change-server-timezone/</id>
    <published>2023-05-26T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash">ubuntu@ubuntu:~$ timedatectl               Local time: Wed <span class="token number">2023</span>-05-24 <span class="token number">17</span>:21:45 UTC           Universal time: Wed <span class="token number">2023</span>-05-24 <span class="token number">17</span>:21:45 UTC                 RTC time: Wed <span class="token number">2023</span>-05-24 02:16:41                    Time zone: Etc/UTC <span class="token punctuation">(</span>UTC, +0000<span class="token punctuation">)</span>       System clock synchronized: no                                       NTP service: active                               RTC <span class="token keyword">in</span> <span class="token builtin class-name">local</span> TZ: no</code></pre><p>기본적으로 서버와 데이터베이스의 타임존은 UTC를 사용한다. 그러다보니 국내 사용자들을 대상으로 하는 서비스를 제공하는 회사들의 경우 <a href="https://jojoldu.tistory.com/513">서버 타임존을 한국 시간(Asia&#x2F;Seoul, +09:00)로 변경해서 사용</a>하기도 한다. 서비스 도메인 그리고 환경을 이해하고 있어야만 올바른 행위로 생각해야하는데 간혹 애플리케이션의 타임존이 한국시간이라 데이터베이스의 타임존과의 차이로 인한 문제를 해결하려고 데이터베이스에 대한 타임존을 한국시간으로 변경하는 방법에 대해 배경 설명없이 블로그에 공유하는 분들이 꽤나 많다.</p><p>결론적으로 이야기하자면 백엔드 개발자는 시간 정보에 타임존을 적용하는 것을 프레젠테이션 계층인 클라이언트 영역에 위임하는 것이 좋다. 그러니까 사용자는 서버에 저장된 데이터에 상관없이 본인의 시간대를 기준으로 정확한 시간이 표시되어야 하는게 요구하는 바이기 때문이다. 간혹 신입 개발자 뿐만 아니라 어느정도 경험이 있는 경력 개발자들도 국내에서만 일하다보니 고정된 관점을 가지게 되는게 아닌가 싶다. 아무튼 프론트엔드 개발자는 단순히 서버에서 제공하는 데이터를 그대로 표시하고자 하는 직무가 아니며 서버에서 정제되어 제공된 데이터를 사용자에게 적합한 데이터로 변환하여 표시하는 작업도 요구된다. 그리고 그 변환 작업 중 하나가 바로 시간 정보에 사용자의 타임존을 더해서 표시해주는 것이다.</p><p>다음은 오키 커뮤니티 사이트에서 개발자 도구의 네트워크 기능으로 확인한 배너 정보이다. </p><p><img data-src="/images/posts/don't-change-server-timezone/01.png"></p><p>배너의 시작날짜(startDate)와 마감날짜(endDate)가 보이는데 2023-06-02T00:00:00는 아마도 한국 시간을 의미할 것이다. 그렇다면 한국 사람이 아닌 해외에서 접속한 사람이 오키 커뮤니티 사이트에 접속했다면 배너가 정상적으로 표시될 수 있을까? 일반적으로 시간에 대한 데이털르 주고받을 때는 타임존이 표현된 문자열이나 UTC Timestamp(밀리초)와 같은 숫자로 변환된 형태로 구성하는 편이다. 이와 비교해서 아래는 아마존 웹 서비스에서 내려주고 있는 시간값이고 <strong>UTC 타임존이라는 것을 알 수 있도록 +0000을 포함</strong>해주고 있다.</p><p><img data-src="/images/posts/don't-change-server-timezone/02.png"></p><p>오키 프로덕트팀의 개발자들이 잘못되었다고는 볼 수 없지만 (아마도 로컬 타임존이 전달되어 변환해주었을 것) 글로벌 서비스를 준비하는 회사에서 일하고자 하는 개발자나 글로벌 서비스로 전환하려는 회사에 있다면 시간과 타임존에 대해서는 생각보다 중요하게 생각해야한다. 웹 개발자로써 애플리케이션에서 사용되는 타임존은 UTC라는 관점을 가지도록 하자.</p><p>비록 애플리케이션 서버나 데이터베이스에 저장된 시간을 보더라도 한국 시간으로 쉽게 변환하여 인지하지 못할지라도…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;div class=&quot;caption&quot;&gt;&lt;span&gt;Terminal&lt;/span&gt;&lt;/div&gt;&lt;code class=&quot;language-bash&quot;&gt;ubuntu@ubuntu:~$</summary>
      
    
    
    
    
    <category term="Timezone" scheme="https://kdevkr.github.io/tags/Timezone/"/>
    
    <category term="UTC" scheme="https://kdevkr.github.io/tags/UTC/"/>
    
  </entry>
  
  <entry>
    <title>cURL</title>
    <link href="https://kdevkr.github.io/curl/"/>
    <id>https://kdevkr.github.io/curl/</id>
    <published>2023-05-20T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://curl.se/">cURL</a>은 리눅스와 맥 터미널에서 HTTP 요청을 수행해보기 위해서 많이 사용된다. 윈도우에서도 <a href="https://curl.se/windows/microsoft.html">마이크로소프트에서 제공하는 컬 프로그램</a>이 내장되어있다. 그래서 명령 프롬프트(cmd)로 curl 명령어를 수행해보면 아래와 같이 정상적으로 사용할 수 있음을 알 수 있다. 하지만, 윈도우 터미널에서는 명령 프롬프트가 아니라 파워쉘(Powershll)을 사용하고 있으므로 <strong>Invoke-WebRequest</strong> 으로 호출되어 기본적으로 알던 명령어가 수행되지 않는다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>명령 프롬프트</span></div><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Mambo<span class="token operator">></span>curl <span class="token parameter variable">-V</span><span class="token function">curl</span> <span class="token number">8.0</span>.1 <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span> libcurl/8.0.1 Schannel WinIDNRelease-Date: <span class="token number">2023</span>-03-20Protocols: dict <span class="token function">file</span> <span class="token function">ftp</span> ftps http https imap imaps pop3 pop3s smtp smtps telnet tftpFeatures: AsynchDNS HSTS HTTPS-proxy IDN IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI threadsafe Unicode UnixSockets</code></pre><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> curlcmdlet <span class="token function">Invoke-WebRequest</span><span class="token punctuation">(</span>명령 파이프라인 위치 1<span class="token punctuation">)</span>다음 매개 변수에 대한 값을 제공하십시오<span class="token punctuation">.</span> Uri: okky<span class="token punctuation">.</span>krStatusCode        : 200StatusDescription : OKContent           : &lt;<span class="token operator">!</span>DOCTYPE html>&lt;html lang=<span class="token string">"ko"</span> <span class="token keyword">class</span>=<span class="token string">"js-focus-visible h-full"</span>>&lt;head>&lt;meta charSet=<span class="token string">"utf-8"</span><span class="token operator">/</span>>&lt;title>                    OKKY <span class="token operator">-</span> All That Developer&lt;<span class="token operator">/</span>title>&lt;meta name=<span class="token string">"robots"</span> content=<span class="token string">"index,follow"</span><span class="token operator">/</span>>&lt;meta name=<span class="token string">"descriptio                    n"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>RawContent        : HTTP/1<span class="token punctuation">.</span>1 200 OK                    Transfer-Encoding: chunked                    Connection: keep-alive                    Vary: Accept-Encoding                    Cache-Control: private<span class="token punctuation">,</span> no-cache<span class="token punctuation">,</span> no-store<span class="token punctuation">,</span> max-age=0<span class="token punctuation">,</span> must-revalidate                    Content-<span class="token function">Type</span>: text/html<span class="token punctuation">;</span> charset=utf<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Forms             : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Headers           : <span class="token punctuation">&#123;</span><span class="token namespace">[Transfer-Encoding, chunked]</span><span class="token punctuation">,</span> <span class="token namespace">[Connection, keep-alive]</span><span class="token punctuation">,</span> <span class="token namespace">[Vary, Accept-Encoding]</span><span class="token punctuation">,</span> <span class="token namespace">[Cache-Control, p                    rivate, no-cache, no-store, max-age=0, must-revalidate]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>Images            : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>InputFields       : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Links             : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>ParsedHtml        : mshtml<span class="token punctuation">.</span>HTMLDocumentClassRawContentLength  : 22832</code></pre><p>cURL의 <a href="https://curl.se/windows/microsoft.html">curl shipped by Microsoft</a> 문서를 참고해보면 Powershell Alias에 대한 문제로 인해 curl.exe 로 프로그램을 지정하여 명령어를 수행하도록 안내한다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Mambo<span class="token operator">></span> curl.exe <span class="token parameter variable">-V</span><span class="token function">curl</span> <span class="token number">8.0</span>.1 <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span> libcurl/8.0.1 Schannel WinIDNRelease-Date: <span class="token number">2023</span>-03-20Protocols: dict <span class="token function">file</span> <span class="token function">ftp</span> ftps http https imap imaps pop3 pop3s smtp smtps telnet tftpFeatures: AsynchDNS HSTS HTTPS-proxy IDN IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI threadsafe Unicode UnixSockets</code></pre><h4 id="파워쉘-Alias-제거하기"><a href="#파워쉘-Alias-제거하기" class="headerlink" title="파워쉘 Alias 제거하기"></a>파워쉘 Alias 제거하기</h4><p>Remove-Item 명령어로 Alias를 제거할 수 있으며 명령어를 실행하고나서 상태를 유지할 수 있도록 현재 프로파일을 메모장으로 열어 curl에 대한 Alias를 삭제할 수 있도록 코드를 작성하여 저장하도록 하자. 이제는 굳이 curl.exe 라는 프로그램을 지정해서 호출할 필요가 없어진다.</p><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> <span class="token function">remove-item</span> alias:\curl<span class="token function">PS</span> C:\Users\Mambo> curl <span class="token operator">-</span>Vcurl 8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span> libcurl/8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 Schannel WinIDNRelease-Date: 2023-03-20Protocols: dict file ftp ftps http https imap imaps pop3 pop3s smtp smtps telnet tftpFeatures: AsynchDNS HSTS HTTPS-proxy IDN IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI threadsafe Unicode UnixSocketsnotepad <span class="token variable">$profile</span><span class="token comment"># 메모장 상단에 입력</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path alias:curl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">Remove-Item</span> alias:curl <span class="token punctuation">&#125;</span></code></pre><h4 id="팁-리눅스에서-cURL-명령어-출력이-개행되지-않을-경우"><a href="#팁-리눅스에서-cURL-명령어-출력이-개행되지-않을-경우" class="headerlink" title="[팁] 리눅스에서 cURL 명령어 출력이 개행되지 않을 경우"></a>[팁] 리눅스에서 cURL 명령어 출력이 개행되지 않을 경우</h4><p>간혹 리눅스에서 cURL 명령어를 수행하면 출력 결과가 개행되지 않아서 다음 명령어를 호출할 때 불편함을 느낄 수 있다. <a href="https://stackoverflow.com/questions/12849584/automatically-add-newline-at-end-of-curl-response-body/14614203#14614203">https://stackoverflow.com/a/14614203</a>에 나와있는 것처럼 사용자 디렉토리에 .curlrc 파일을 만들어서 개행이 동작하도록 작성해두면 된다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash"><span class="token function">vi</span> ~/.curlrc<span class="token parameter variable">-w</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;cURL&lt;/a&gt;은 리눅스와 맥 터미널에서 HTTP 요청을 수행해보기 위해서 많이 사용된다. 윈도우에서도 &lt;a href=&quot;https://curl.se/windows/microsoft.html&quot;&gt;마이크</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sentry</title>
    <link href="https://kdevkr.github.io/sentry/"/>
    <id>https://kdevkr.github.io/sentry/</id>
    <published>2023-05-18T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p>Sentry는 오류 또는 예외를 추적하기 위한 도구로 회사에서 시스템을 구성하는 언어인 자바, 파이썬, Vue 등 다양한 언어 플랫폼과의 연동을 지원한다. Sentry를 도입하게 되는 이유는 개발자가 테스트하는 과정에서 발견되지 않고 QA 엔지니어가 테스트하는 과정 혹은 고객 테스트 환경에서 마지막으로 검수하는 과정에서 발견되지 않은 취약점을 알아채기 위함이다. 그동안 경험했던 대부분의 품질 이슈는 명확하지 않은 요구사항과 부족한 리뷰 과정으로 인해서 인프라 구성과 사용자의 동작에 따라 발생하는 상황이 대부분이었다고 생각한다.</p><ul><li><a href="https://docs.sentry.io/platforms/java/guides/spring-boot/">Platforms &gt; Java &gt; Spring Boot</a></li><li><a href="https://docs.sentry.io/platforms/javascript/guides/vue/">Platforms &gt; Browser JavaScript &gt; Vue</a></li><li><a href="https://docs.sentry.io/platforms/python/guides/flask/">Platforms &gt; Python &gt; Flask</a></li></ul><blockquote><p>시스템의 데이터를 분석하고 예측하는 기능의 경우 별도의 파이썬 애플리케이션을 담당하는 팀에서 관리하고 있으므로 Sentry를 도입하진 않고 있다.</p></blockquote><h2 id="Self-Hosted-Sentry"><a href="#Self-Hosted-Sentry" class="headerlink" title="Self-Hosted Sentry"></a>Self-Hosted Sentry</h2><p><a href="https://develop.sentry.dev/self-hosted/">Self-Hosted Sentry</a>에서 제공하는 설치 스크립트를 사용하여 On-Premise 환경에서 Sentry를 구성하고 실행하였다. 설치 스크립트와 도커 컴포즈 문서를 제공하기 때문에 실행 자체는 간단한데 생각보다 많은 컨테이너가 구동되는 부분이 있다. 인프라 비용을 아끼고자 리소스 자원 사용률이 저조한 인스턴스에 실행한 상태인데 별도의 인스턴스로 분리하는 것을 고려하고 있다.</p><blockquote><p>Keep in mind that all this setup uses single-nodes for all services, including Kafka. For larger loads, you’d need a beefy machine with lots of RAM and disk storage. To scale up even further, you are very likely to use clusters with a more complex tool, such as Kubernetes. Due to self-hosted installations’ very custom nature, we do not offer any recommendations or guidance around scaling up.</p></blockquote><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>시스템을 구성하는 애플리케이션에서 <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/">Spring Boot</a>를 사용하고 있다면 sentry-spring-boot-starter를 추가하여 자동 구성을 사용할 수 있다. </p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">'io.sentry:sentry-bom:6.19.0'</span><span class="token punctuation">)</span>implementation <span class="token string">'io.sentry:sentry-spring-boot-starter'</span></code></pre><blockquote><p>When you are using multiple Sentry dependencies, you can avoid specifying the version of each dependency with a <a href="https://docs.sentry.io/platforms/java/configuration/bill-of-materials/">BOM or Bill Of Materials</a>.</p></blockquote><p>개발자가 체크하지 않은 예외는 기본적으로 수집되며 @ExceptionHandler를 선언한 예외 처리 함수에서 Sentry 서버로 예외 정보를 전달하도록 코드를 구현하면 된다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>sentry<span class="token punctuation">.</span></span><span class="token class-name">Sentry</span></span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"This is a test."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Sentry</span><span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="예외-수집-정보-커스터마이징"><a href="#예외-수집-정보-커스터마이징" class="headerlink" title="예외 수집 정보 커스터마이징"></a>예외 수집 정보 커스터마이징</h3><p><a href="https://docs.sentry.io/platforms/java/guides/spring-boot/advanced-usage/">Advanced Usage</a> 문서에 따르면 이벤트를 처리하거나 Sentry에 수집된 오류를 보내기 직전에 조작할 수 있는 콜백을 제공하고 있다. 노출되면 안되는 정보는 명시적으로 제거할 수 있으며 수집하지 않을 예외 클래스에 대해서는 <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/configuration/#ignored-exceptions-for-type">Ignored Exceptions For Type</a>을 지정하여 제외시킬 수 있다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sentry.ignored-exceptions-for-type</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> org.springframework.security.access.AccessDeniedException  <span class="token punctuation">-</span> org.springframework.security.authentication.BadCredentialsException</code></pre><p>특정 예외 클래스 이외에 일부 에러 이벤트를 필터링하고자 한다면 SentryOptions.BeforeSendCallback 인터페이스를 구현한 클래스를 빈으로 등록하여 처리할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBeforeSendCallback</span> <span class="token keyword">implements</span> <span class="token class-name">SentryOptions<span class="token punctuation">.</span>BeforeSendCallback</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SentryEvent</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SentryEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">Hint</span> hint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Example: Never send server name in events</span>        event<span class="token punctuation">.</span><span class="token function">setServerName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> event<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="사용자-정보-수집하기"><a href="#사용자-정보-수집하기" class="headerlink" title="사용자 정보 수집하기"></a>사용자 정보 수집하기</h3><p>Spring MVC 모듈을 사용하고 있다면 <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/record-user/">Record User Information</a> 문서를 참고하여 사용자 이름(Principal#name)과 IP 주소를 수집하도록 활성화 할 수 있다. 만약, 스프링 시큐리티를 사용하여 인증 체계를 구현하였다면 UserDetails의 Username이 오류와 함께 기록된다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sentry.send-default-pii</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="비동기-함수-처리"><a href="#비동기-함수-처리" class="headerlink" title="비동기 함수 처리"></a>비동기 함수 처리</h3><p>Sentry’s SDK for Java는 스코프와 컨텍스트를 ThreadLocal에 저장하도록 구현되어있다. <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/async/">Async Methods</a> 문서에 따르면 Sentry Context에서 비동기 함수에 올바르게 접근하기 위해서는 ThreadPoolTaskExecutor 내에 SentryTaskDecorator를 적용해야 한다고 설명한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentryConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SentryTaskDecorator</span> <span class="token function">sentryTaskDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentryTaskDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncMethodConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SentryTaskDecorator</span> sentryTaskDecorator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AsyncMethodConfiguration</span><span class="token punctuation">(</span><span class="token class-name">SentryTaskDecorator</span> sentryTaskDecorator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sentryTaskDecorator <span class="token operator">=</span> sentryTaskDecorator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setTaskDecorator</span><span class="token punctuation">(</span>sentryTaskDecorator<span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="메모리-누수"><a href="#메모리-누수" class="headerlink" title="메모리 누수"></a>메모리 누수</h3><p><img data-src="/images/posts/sentry/01.png"></p><p>TransactionPerfomanceCollector에 의한 메모리 누수 문제가 있었으며 6.13.0 그리고 6.13.1 에서 OOM 문제가 해결되었다.</p><ul><li>6.13.0 - Prevent OOM by disabling TransactionPerformanceCollector for now (<a href="https://github.com/getsentry/sentry-java/pull/2498">#2498</a>)</li><li>6.13.1 - Fix transaction performance collector oom (<a href="https://github.com/getsentry/sentry-java/pull/2505">#2505</a>)</li></ul><p>이외에도 지속적으로 성능 개선과 여러가지 문제가 해결되고 있으니 주기적으로 Sentry 서버를 업그레이드해야할 필요성이 있어보인다.</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p><a href="https://docs.sentry.io/platforms/javascript/guides/vue/">Sentry for Vue</a>를 참고하여 Vue 애플리케이션에서 발생하는 오류들도 수집할 수 있다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @sentry/vue</code></pre><pre class="language-javascript" data-language="javascript"><div class="caption"><span>sentry.js</span></div><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Sentry <span class="token keyword">from</span> <span class="token string">'@sentry/vue'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">router</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        Vue<span class="token punctuation">,</span>        <span class="token literal-property property">dsn</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_DSN</span><span class="token punctuation">,</span>        <span class="token literal-property property">envinroment</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">,</span>        <span class="token literal-property property">release</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_RELEASE</span>        <span class="token literal-property property">integrations</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token keyword">new</span> <span class="token class-name">Sentry<span class="token punctuation">.</span>BrowserTracing</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">routingInstrumentation</span><span class="token operator">:</span> Sentry<span class="token punctuation">.</span><span class="token function">vueRouterInstrumentation</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">tracingOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">trackComponents</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">attachProps</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">logErrors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">tracesSampleRate</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>process.env.SENTRY_DSN와 process.env.SENTRY_RELEASE는 빌드하는 과정에서 주입되도록 구현해야하며 process.env.SENTRY_RELEASE는 SourceMap을 업로드하는 과정에서 등록하는 릴리즈 버전과 동일해야한다.</p></blockquote><h3 id="API-오류-시-요청과-응답-정보-수집하기"><a href="#API-오류-시-요청과-응답-정보-수집하기" class="headerlink" title="API 오류 시 요청과 응답 정보 수집하기"></a>API 오류 시 요청과 응답 정보 수집하기</h3><p>Browser JavaScript SDK에서도 기본적인 스크립트 오류는 자동으로 수집되며 Axios와 같은 HTTP 클라이언트 요청 라이브러리를 사용한다면 아래와 같이 API 요청 과정에서 오류가 발생한다면 Sentry로 수집되도록 작성해야한다. </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>config        Sentry<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token string">'Request'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            url<span class="token punctuation">,</span>            params<span class="token punctuation">,</span>            data        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> status<span class="token punctuation">,</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>config        Sentry<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token string">'Response'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            status<span class="token punctuation">,</span>            data        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        Sentry<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="인증-사용자-정보-수집하기"><a href="#인증-사용자-정보-수집하기" class="headerlink" title="인증 사용자 정보 수집하기"></a>인증 사용자 정보 수집하기</h3><p><a href="https://docs.sentry.io/platforms/javascript/enriching-events/identify-user/">Identify Users</a> 문서를 참고하면 사용자 이름과 아이피 주소를 수집할 수 있도록 구성할 수 있다. 기본적으로는 아이피 주소가 수집되는데 인증된 사용자라면 사용자 식별 아이디나 이름을 가져올 수 있으므로 아래와 같이 보다 정확한 정보를 수집할 수 있다.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Sentry<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span> window<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>userId<span class="token punctuation">,</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> window<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>userName<span class="token punctuation">,</span>  <span class="token literal-property property">ip_address</span><span class="token operator">:</span> <span class="token string">'&#123;&#123;auto&#125;&#125;'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><blockquote><p>If the user’s ip_address is set to ““, Sentry will infer the IP address from the connection between your app and Sentry’s server.</p></blockquote><h3 id="스택-트레이스-추적하기"><a href="#스택-트레이스-추적하기" class="headerlink" title="스택 트레이스 추적하기"></a>스택 트레이스 추적하기</h3><p>일반적으로 Vue와 같은 애플리케이션은 빌드되어 배포되는 경우에 번들을 최소화하는 과정을 거치게 되므로 오류가 Sentry에 수집되더라도 스택 트레이스를 통해 원인이 되는 코드 라인을 제대로 찾아가기 힘들 가능성이 있다. 브라우저가 아닌 Sentry 에서 만큼은 스택 트레이스를 깔끔하게 볼 수 있도록 SourceMap을 지원하고 있다. 다음은 Webpack을 번들러로써 사용하고 있을때 사용할 수 있는 플러그인을 설치하는 예시를 보여준다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @sentry/webpack-plugin</code></pre><pre class="language-javascript" data-language="javascript"><div class="caption"><span>webpack.config.prd.js</span></div><code class="language-javascript"><span class="token keyword">const</span> SentryWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@sentry/webpack-plugin"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">SentryWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">org</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_ORG</span><span class="token punctuation">,</span>      <span class="token literal-property property">project</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_PROJECT</span><span class="token punctuation">,</span>      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>      <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"webpack.config.js"</span><span class="token punctuation">,</span> <span class="token string">"webpack.config.prod.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">authToken</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_AUTH_TOKEN</span><span class="token punctuation">,</span>      <span class="token literal-property property">release</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_RELEASE</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>SENTRY_RELEASE는 빌드와 런타임 시점의 값을 동일하게 사용해야 Sentry에서 제대로 추적할 수 있음에 주의해야한다. 런타임 구성 시 사용하는 DSN가 아니라 <a href="https://docs.sentry.io/api/auth/#auth-tokens">Sentry 사용자에 대한 토큰</a>을 발급해야하며 프로젝트 정보도 포함해야한다.</p><h2 id="끝마치며"><a href="#끝마치며" class="headerlink" title="끝마치며"></a>끝마치며</h2><p>카카오페이에서 공유한 <a href="https://tech.kakaopay.com/post/frontend-sentry-monitoring/">Sentry로 우아하게 프론트엔드 에러 추적하기</a>와 라인에서 공유한 <a href="https://engineering.linecorp.com/ko/blog/log-collection-system-sentry-on-premise">Sentry로 사내 에러 로그 수집 시스템 구축하기</a>를 참고하여 Sentry 활용에 대해 더 자세히 알아갈 수 있다. 개인적으로 도입은 쉬워보이지만 원하는 방식대로 커스터마이징 하기에는 생각보다 어려운 것 같다. 서버 애플리케이션과 다르게 프론트엔드 애플리케이션에서는 Data Source Name (DSN)가 브라우저에 노출되므로 보안 관점에서는 테스트 환경에만 도입해야할 것으로 생각된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sentry는 오류 또는 예외를 추적하기 위한 도구로 회사에서 시스템을 구성하는 언어인 자바, 파이썬, Vue 등 다양한 언어 플랫폼과의 연동을 지원한다. Sentry를 도입하게 되는 이유는 개발자가 테스트하는 과정에서 발견되지 않고 QA 엔지니</summary>
      
    
    
    
    
    <category term="sentry-java" scheme="https://kdevkr.github.io/tags/sentry-java/"/>
    
    <category term="sentry-javascript" scheme="https://kdevkr.github.io/tags/sentry-javascript/"/>
    
  </entry>
  
  <entry>
    <title>SSH 터널링</title>
    <link href="https://kdevkr.github.io/ssh-tunneling/"/>
    <id>https://kdevkr.github.io/ssh-tunneling/</id>
    <published>2023-05-10T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p>기본적으로는 운영 환경의 Amazon Aurora PostgreSQL에는 로컬 호스트에서 접근하지 않는다. 그러나, 스테이징이나 테스트 환경에서 동작하는 데이터베이스에는 원인 검토를 위해 로컬 호스트에서 애플리케이션을 실행하고 디버그해야할 필요성이 요구되기도 한다. 일반적으로 데이터베이스는 외부에서 접근할 수 없는 프라이빗 서브넷에 위치하도록 인프라를 구성한다. 따라서, 데이터베이스에 접근하기 위해서는 퍼블릭 서브넷에 위치하는 배스천 호스트를 통해 Amazon Aurora PostgreSQL에 접근할 수 있는 호스트로 이동한 후 접근하게 된다.</p><p><img data-src="/images/posts/ssh-tunneling/01.png"></p><p>창천향로님이 작성해두신 <a href="https://jojoldu.tistory.com/623">DataGrip 에서 SSH 터널링으로 DB 접근하기</a>를 참고하면 SSH Configuration을 설정해두고 데이터베이스 연결 시 SSH Tunnel 을 구성하여 RDS 엔드포인트로 연결할 수 있다. 이와 같이 데이터베이스 관리를 위해서 SSH 터널링으로 접속하여 데이터베이스 상태나 데이터 그리고 SQL을 수행해볼 수 있다. 하지만, 데이터베이스 도구로써 연결하는 것이므로 애플리케이션에서는 다른 방식으로 SSH 터널링을 수행해야한다.</p><p>회사에서는 상용 SSH 클라이언트인 SecureCRT를 사용하고 있다. 배스천 호스트에 대한 연결 세션을 생성해놓고 Amazon Aurora PostgreSQL에 접속할 수 있는 호스트로 연결하기 위해 <a href="https://documentation.help/SecureCRT/GO_Firewall.htm">Firewall</a>을 배스천 호스트 세션으로 선택할 수 있다. </p><p><img data-src="/images/posts/ssh-tunneling/02.png"></p><p>인스턴스 연결 세션은 배스천 호스트를 Firewall로써 선택해두었기에 프록시 연결을 수행할 수 있다. 위와 같이 인스턴스 연결에 성공하였다면 RDS 엔드포인트에 대해 포트포워딩을 설정하면 된다. 포트포워딩 시에는 Dynamic forwarding using SOCKS 4 or 5을 선택하면 RDS 엔드포인트를 지정할 수 없으므로 Destnation host is different from the SSH Server를 체크하고 RDS 엔드포인트 주소를 입력하자.</p><p><img data-src="/images/posts/ssh-tunneling/03.png"></p><p>이제 인텔리제이나 DataGrip으로 로컬 호스트 주소를 사용하여 Amazon Aurora PostgreSQL에 연결할 수 있다. </p><p><img data-src="/images/posts/ssh-tunneling/04.png"></p><p>일반적으로 개발 환경에 대한 데이터베이스는 퍼블릭 서브넷에 구성하고 일부 IP 대역에 대해서는 다이렉트 접속이 가능하도록 하기도 하므로 이와 같은 SSH 터널링은 필요하지 않을 수 있다. 퍼블릭 서브넷에 위치하지 않고 다이렉트 연결이 불가능한 인프라 구성이라면 SSH 터널링을 통해 로컬 호스트에서 RDS 엔드포인트에 연결할 수 있으므로 로컬 개발 환경에서 애플리케이션을 실행하는 경우에도 스테이징이나 테스트 환경에서 운영중인 데이터베이스에 연결하여 디버그할 수 있게 된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;기본적으로는 운영 환경의 Amazon Aurora PostgreSQL에는 로컬 호스트에서 접근하지 않는다. 그러나, 스테이징이나 테스트 환경에서 동작하는 데이터베이스에는 원인 검토를 위해 로컬 호스트에서 애플리케이션을 실행하고 디버그해야할 필요성</summary>
      
    
    
    
    
    <category term="SSH" scheme="https://kdevkr.github.io/tags/SSH/"/>
    
    <category term="SecurtCRT Firewall" scheme="https://kdevkr.github.io/tags/SecurtCRT-Firewall/"/>
    
  </entry>
  
  <entry>
    <title>OPENSSH-RSA 개인키를 RSA 개인키로 변경하기</title>
    <link href="https://kdevkr.github.io/convert-openssh-private-to-rsa/"/>
    <id>https://kdevkr.github.io/convert-openssh-private-to-rsa/</id>
    <published>2023-04-22T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.368Z</updated>
    
    <content type="html"><![CDATA[<p>OpenSSL 라이브러리를 통해 SSH 접속을 위한 키 페어를 발급하는 경우에 기본적으로 RSA 형식의 키 페어가 생성되어도 실제로는 OPENSSH PRIVATE KEY로 저장되게 된다. RSA PRIVATE KEY로 저장되기 위해서는 -m 옵션으로 PEM을 지정해야 한다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ----- OPENSSH PRIVATE KEY -----</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-C</span> <span class="token string">"mambo"</span> <span class="token parameter variable">-N</span> <span class="token string">""</span><span class="token comment"># ----- RSA PRIVATE KEY -----</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-C</span> <span class="token string">"mambo"</span> <span class="token parameter variable">-N</span> <span class="token string">""</span></code></pre><p>일본 고객으로부터 자체적으로 구축한 서버에 접속하기 위한 계정과 개인키 PEM 파일을 받아보니 OPENSSH 형식으로 저장되어있음을 확인하였다. 그러나, SecureCRT를 사용해서 서버에 처음으로 연결하려고 했을때 키 형식이 올바르지 않다는 오류가 발생하며 접속에 실패하였다.</p><pre class="language-pem" data-language="pem"><code class="language-pem">-----BEGIN RSA PRIVATE KEY-----[KEY CONTENT]-----END RSA PRIVATE KEY-----</code></pre><p>OPENSSH PRIVATE KEY로 저장되어있는 것을 RSA PRIVATE KEY로 변경하고 시도해보니 정상적으로 연결이 되었으며 자세한 원인은 모르겠으나 2FA 인증을 설정하고 나서는 OPENSSH PRIVATE KEY로 저장되어있는 PEM 파일로도 연결이 정상적으로 연결을 할 수 있는 상황이 되었다.</p><h4 id="OpenSSH-개인키를-RSA-개인키로-변환"><a href="#OpenSSH-개인키를-RSA-개인키로-변환" class="headerlink" title="OpenSSH 개인키를 RSA 개인키로 변환"></a>OpenSSH 개인키를 RSA 개인키로 변환</h4><p>아무튼, RSA PEM 형식으로 다시 만들어달라고 요청하기에는 시간이 많이 소요될 수 있으므로 OPENSSH 형식으로 되어있는 RSA 개인키를 RSA PEM 형식으로 변환해보도록 하자.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-C</span> <span class="token string">"mambo"</span> <span class="token parameter variable">-N</span> <span class="token string">""</span> <span class="token parameter variable">-f</span> openssh.pem<span class="token comment"># cat ~/.ssh/id_rsa</span>-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcnNhAAAAAwEAAQAAAQEAw4o9aOfBCkCzsuz3hMJT/v058pMki16Ft56tim4r5mJRbBd0EQPJ3gm1FiJmp0fqrnJo+H3o4hBH0LlCbeXiXHloPnTi1JZTSzWat1ItcBG+xezx8BdmtKqdTyPWfYL9ujLse5AAXkvVHhYHJ7koV72X9whH94Tci4zAEHRypKbuz+9lj5P94u1n/nYAt2PTJmdP/Y+62qFiSGhKEh/Jed5TVvIrabOi+qcHQ0VmcXkTGiOTXLTmHMbce26dqsGRRb4YPf1alXECX28b8QpbarlXHPeGJyQ5d8dxEhsOz60LDoUEy/ytn0gIrP0+Ro2aS9N73JVdTXKuFFQRyHMP0QAAA8DEFEvUxBRL1AAAAAdzc2gtcnNhAAABAQDDij1o58EKQLOy7PeEwlP+/TnykySLXoW3nq2KbivmYlFsF3QRA8neCbUWImanR+qucmj4fejiEEfQuUJt5eJceWg+dOLUllNLNZq3Ui1wEb7F7PHwF2a0qp1PI9Z9gv26Mux7kABeS9UeFgcnuShXvZf3CEf3hNyLjMAQdHKkpu7P72WPk/3i7Wf+dgC3Y9MmZ0/9j7raoWJIaEoSH8l53lNW8itps6L6pwdDRWZxeRMaI5NctOYcxtx7bp2qwZFFvhg9/VqVcQJfbxvxCltquVcc94YnJDl3x3ESGw7PrQsOhQTL/K2fSAis/T5GjZpL03vclV1Ncq4UVBHIcw/RAAAAAwEAAQAAAQA50f/UrGrtkDJS3zVVwWy7AsAG1bHBsGKT6EzimS9MAZiYANtmSJuBl5c/g06demuPx+74Q6sAZdYGhzF4c7iapZ/IkCGewRDCNYiZWqhq8iRaPHVSDGlnVOgNRcif9oL2cyZwZyVkvMG5EsRs35hpUXvFJWK6c0QP07/bXcOkod+XlvWXwJ9hkwoakC3kKYSLsdil3rKqTapaNg3edcJb0/0Nx4gW24hO1m0hevoN0rJuzoMf/uK0hwazyZbE4H1q39StWrFrGz+zp6yHkC3Els6W+ExOHUeTEaE+ya8FR9MOcmrECgePxDFBnlPVumk0SIJ+NRQjH3ArpNvp1ZrdAAAAgQCc4jOZ9zBOpeP4ZyT2OFY7E9J8jA/nlsoI164TuJYK1fiv5WH2x3SN95vt1s8R9cUzznA2IWbCRs4Nei34STlTReBkpfWyg3Skp3FcYIyR2lpQX/7utfPd3X8KpUYR01E1RPgequyyixDtJjguVsrimoz81vF9y7Q0/ueO3iBmSgAAAIEA6nFTFA9oOzQyM3zgQgt8J9lW8/XjFIF3LZRhu0e0xlsmv54OsGag17zAOR5cfj7hUzQcGTWJRSHv95gDLJmSgourNRUlPZcZ8AdZCGD8GEwXr1dh2d7Qk3UT2jwDKS0IFNM6UX67CKSdYK/YFLAv3gtPEgrZ43ec1W6zlHUWmusAAACBANWFKfE3Ky1ubomZIovLa0XUs2h9rSUMDX3Su+Es/0x+qHP0bq2JKWTzVWoa0NgfnPAVJo/Fd8NVhIMs1od6iBO3Kgz7A2Esg5sOtkK06nwSYMcfXMyuf+7fj0v0nBtjVH6EdOrU0muH4vvtxiYcw2N4cI+5Fnns05+DCtL4o9kzAAAABW1hbWJvAQIDBAU<span class="token operator">=</span>-----END OPENSSH PRIVATE KEY-----</code></pre><p>OPENSSH PRIVATE KEY로 저장되어있음을 확인하였으니 아래의 명령어들을 실행하여 변환되는지 확인해보면 된다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># [1] OpenSSH</span><span class="token function">sudo</span> ssh-keygen <span class="token parameter variable">-p</span> <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-f</span> openssh.pem<span class="token comment"># [2] OpenSSL</span>openssl rsa <span class="token parameter variable">-in</span> openssh.pem <span class="token parameter variable">-outform</span> pem <span class="token operator">></span> openssh-rsa.pem<span class="token comment"># [3] Putty</span>puttygen openssh.pem <span class="token parameter variable">-O</span> private-openssh <span class="token parameter variable">-o</span> openssh-rsa.pem</code></pre><h4 id="1-OpenSSH"><a href="#1-OpenSSH" class="headerlink" title="[1] OpenSSH"></a>[1] OpenSSH</h4><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell">ssh-keygen <span class="token operator">-</span>p <span class="token operator">-</span>m PEM <span class="token operator">-</span>f openssh<span class="token punctuation">.</span>pemFailed to load key openssh<span class="token punctuation">.</span>pem: invalid format</code></pre><p>첫번째 OpenSSH 명령어를 이용하는 방법은 가상 환경에 실행한 우분투 리눅스에서는 정상적으로 변환된 반면에 윈도우 터미널에서는 알 수 없는 형식이라는 오류 메시지와 함께 실패하였다.</p><h4 id="2-OpenSSL-💥"><a href="#2-OpenSSL-💥" class="headerlink" title="[2] OpenSSL 💥"></a>[2] OpenSSL 💥</h4><pre class="language-bash" data-language="bash"><code class="language-bash">openssl rsa <span class="token parameter variable">-in</span> openssh.pem <span class="token parameter variable">-outform</span> pem <span class="token operator">></span> openssh-rsa.pemunable to load Private Key<span class="token number">140038194394432</span>:error:0909006C:PEM routines:get_name:no start line:<span class="token punctuation">..</span>/crypto/pem/pem_lib.c:745:Expecting: ANY PRIVATE KEY</code></pre><p>두번째 OpenSSL 라이브러리를 이용하는 방법은 ChatGTP에서 알려준 것인데 OpenSSH는 OpenSSL 라이브러리를 활용하기는 하나 OpenSSH 프로그램에서 인식하는 형식이므로 변환하는 과정에서 오류가 발생하였다.</p><h4 id="3-Putty-🍀"><a href="#3-Putty-🍀" class="headerlink" title="[3] Putty 🍀"></a>[3] Putty 🍀</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># [Mac] brew install putty</span><span class="token comment"># [Ubuntu] apt install putty-tools</span>puttygen openssh.pem <span class="token parameter variable">-O</span> private-openssh <span class="token parameter variable">-o</span> openssh-rsa.pem</code></pre><p>세번째 방법은 PuTTYgen을 이용하는 것으로 윈도우 환경에서는 커맨드라인 옵션을 인식하지 못한 관계로 PuTTYgen(PuTTY Key Generator)을 실행한 후 Conversions 메뉴의 Import Key로 불러온 후 Export OpenSSH Key로 저장하면 RSA PRIVATE KEY로 변환할 수 있었으며 우분투 리눅스에서는 커맨드라인으로 별다른 문제없이 변환할 수 있다.</p><p><img data-src="/images/posts/convert-openssh-private-to-rsa/01.png" alt="Conversions &gt; Import Key"></p><p><img data-src="/images/posts/convert-openssh-private-to-rsa/02.png" alt="Conversions &gt; Export OpenSSH Key"></p><p>개인적으로는 오래된 내용이지만 한번 하고나서는 더이상 다루지 않는 정보이기에 잊어버릴 것 같아 기록으로 남기고자 공유한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenSSL 라이브러리를 통해 SSH 접속을 위한 키 페어를 발급하는 경우에 기본적으로 RSA 형식의 키 페어가 생성되어도 실제로는 OPENSSH PRIVATE KEY로 저장되게 된다. RSA PRIVATE KEY로 저장되기 위해서는 -m 옵션</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 프로젝트를 만들고나서</title>
    <link href="https://kdevkr.github.io/spring-boot-project/"/>
    <id>https://kdevkr.github.io/spring-boot-project/</id>
    <published>2023-03-25T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 이니셜라이저를 통해서 스프링 부트 기반의 프로젝트 폴더를 구성하더라도 회사마다 혹은 개발자마다 너무나도 당연하게 하는 것들이 조금씩 있기 마련이다. 스프링 부트 프로젝트를 만들고나서 너무나도 당연하게 습과적으로 매번 하는 것들에 대해서 정리해보고자 한다. </p><h4 id="1-Properties가-아닌-YAML-방식으로-변경하기"><a href="#1-Properties가-아닌-YAML-방식으로-변경하기" class="headerlink" title="1. Properties가 아닌 YAML 방식으로 변경하기"></a>1. Properties가 아닌 YAML 방식으로 변경하기</h4><p>스프링 이니셜라이저를 통해서 만들어진 기본적인 프로젝트 폴더에는 application.properties 파일이 존재한다. 스프링 부트에서는 Java Properties, YAML 그리고 환경 변수를 통해서 애플리케이션 프로퍼티 속성 값을 적용하여 활용할 수 있게 지원한다. 하지만, ISO-8859-1 인코딩으로 강제되는 자바 프로퍼티 파일에는 한계가 있고 대부분의 애플리케이션에서 UTF-8을 사용하는 편이므로 YAML 방식으로 변경하는 것이 편리하다.</p><blockquote><p>It is recommended to stick with one format for your entire application. If you have configuration files with both .properties and .yml format in the same location, .properties takes precedence.</p></blockquote><p>위와 같이 공식 문서에 나와있는 것처럼 프로퍼티와 야믈 파일을 동시에 사용하는 경우 자바 프로퍼티 파일을 우선하여 적용하므로 주의하자.</p><h4 id="2-스프링-부트-기본-배너-옵션-끄기"><a href="#2-스프링-부트-기본-배너-옵션-끄기" class="headerlink" title="2. 스프링 부트 기본 배너 옵션 끄기"></a>2. 스프링 부트 기본 배너 옵션 끄기</h4><p>두번째로 하는 일은 스프링 부트에서 제공하여 콘솔에 표시되는 기본 배너 로그를 비활성화하는 것이다. 대부분의 애플리케이션에서 스프링 배너를 통해서 버전을 확인할 필요성은 굉장히 적으며 중요시 해야하는 것은 빌드 정보일 뿐이기에 불필요하다.</p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">spring.main.banner-mode</span><span class="token punctuation">:</span> off</code></pre><h4 id="3-그래들-롬복-패키지-구성을-롬복-플러그인으로-변경하기"><a href="#3-그래들-롬복-패키지-구성을-롬복-플러그인으로-변경하기" class="headerlink" title="3. 그래들 롬복 패키지 구성을 롬복 플러그인으로 변경하기"></a>3. 그래들 롬복 패키지 구성을 롬복 플러그인으로 변경하기</h4><p>그래들 기반으로 스프링 부트 프로젝트를 만드는 경우 그래들 롬복 플러그인이 아닌 직접 패키지를 디펜던시에 지정하는 방식으로 되어있다. <a href="https://plugins.gradle.org/plugin/io.freefair.lombok">io.freefair.lombok</a>을 플러그인으로 등록하여 사용하는 것이 더 효율적이다.</p><pre class="language-gradle" data-language="gradle"><div class="caption"><span>build.gradle</span></div><code class="language-gradle"><span class="token keyword">plugins</span> <span class="token punctuation">&#123;</span>    id <span class="token string">'io.freefair.lombok'</span> version <span class="token string">'8.0.1'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4-기본-톰캣-컨테이너를-언더토우로-대체하기"><a href="#4-기본-톰캣-컨테이너를-언더토우로-대체하기" class="headerlink" title="4. 기본 톰캣 컨테이너를 언더토우로 대체하기"></a>4. 기본 톰캣 컨테이너를 언더토우로 대체하기</h4><p>스프링 부트 프로젝트에서 기본적으로 의존하는 임베디드 톰캣도 준수한 성능을 보여주지만 자바를 사용하여 NIO 기반으로 작성된 경량의 웹 서버 애플리케이션인 언더토우를 사용하고 있다. 웹 스타터 모듈에는 톰캣에 대한 의존성이 포함되어있으므로 아래와 같이 톰캣에 대한 모듈은 제외되도록 하자.</p><pre class="language-gradle" data-language="gradle"><div class="caption"><span>build.gradle</span></div><code class="language-gradle">configurations<span class="token punctuation">.</span>configureEach <span class="token punctuation">&#123;</span>    exclude group<span class="token punctuation">:</span> <span class="token string">'org.springframework.boot'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'spring-boot-starter-tomcat'</span><span class="token punctuation">&#125;</span><span class="token keyword">dependencies</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">implementation</span> <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    <span class="token keyword">implementation</span> <span class="token string">'org.springframework.boot:spring-boot-starter-undertow'</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>스프링 프레임워크 6.1 에서는 JDK 21과 Virtual Threads를 우선적으로 톰캣에서 지원할 예정인 것 같아 언더토우가 아닌 톰캣을 선택해야할 경우가 될 가능성도 보인다. 관련 프로젝트: <a href="https://github.com/mp911de/spring-boot-virtual-threads-experiment">mp911de&#x2F;spring-boot-virtual-threads-experiment</a></p></blockquote><h4 id="5-인텔리제이-IDEA의-빌드-및-실행-옵션-변경하기"><a href="#5-인텔리제이-IDEA의-빌드-및-실행-옵션-변경하기" class="headerlink" title="5. 인텔리제이 IDEA의 빌드 및 실행 옵션 변경하기"></a>5. 인텔리제이 IDEA의 빌드 및 실행 옵션 변경하기</h4><p>마지막으로 인텔리제이 IDEA를 통해서 스프링 부트 프로젝트를 빌드하고 실행하는 경우 컴파일러와 그래들에 대한 옵션을 변경하는 것이 더 효율적으로 프로젝트를 개발하고 실행하는 환경이 되므로 적용하는 편이다.</p><ul><li>Build, Execution, Deployment &gt; Build Tools &gt; Gradle &gt; Build and run using Intellij IDEA</li><li>Build, Execution, Deployment &gt; Build Tools &gt; Compiler &gt; Build project automatically</li></ul><p>기본 Gradle이 아닌 Intellij IDEA로 빌드 및 실행을 하도록 설정한다면 프로젝트 루트 폴더에 out 이라는 이름의 폴더에 현재 실행중인 애플리케이션에 대한 클래스 파일과 정적 리소스 파일들이 이동되어 어떠한 문제가 발생했을 때 곧바로 살펴볼 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;스프링 이니셜라이저를 통해서 스프링 부트 기반의 프로젝트 폴더를 구성하더라도 회사마다 혹은 개발자마다 너무나도 당연하게 하는 것들이 조금씩 있기 마련이다. 스프링 부트 프로젝트를 만들고나서 너무나도 당연하게 습과적으로 매번 하는 것들에 대해서 정</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 빌드 정보</title>
    <link href="https://kdevkr.github.io/spring-boot-build-info/"/>
    <id>https://kdevkr.github.io/spring-boot-build-info/</id>
    <published>2023-03-20T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글에 대한 관련 코드는 <a href="https://github.com/kdevkr/spring-demo">https://github.com/kdevkr/spring-demo</a> 에서 참고할 수 있습니다.</p></blockquote><p>스프링 부트 프로젝트에서 빌드 정보를 가져오기 위해서는 그래들이나 메이븐 플러그인에 따라 아래와 같이 buildInfo()가 동작하도록 구성해야한다. 이렇게 구성하면 빌드 단계에서 클래스패스에 META-INF&#x2F;build.properties라는 파일에 빌드 정보가 포함된다.</p><pre class="language-gradle" data-language="gradle"><div class="caption"><span>build.gradle</span></div><code class="language-gradle">springBoot <span class="token punctuation">&#123;</span>    <span class="token function">buildInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>클래스패스에 추가된 build-info.properties의 내용은 ProjectInfoAutoConfiguration 클래스에 의해서 BuildProperties 클래스가 빈으로 등록되게 된다. 그래서 우리는 아래와 같이 BuildProperties를 기반으로 빌드 정보를 제공하는 API를 작성할 수 있다.</p><pre class="language-java" data-language="java"><div class="caption"><span>BuildController.java</span></div><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuildController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BuildProperties</span> buildProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BuildController</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">BuildProperties</span> buildProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildProperties <span class="token operator">=</span> buildProperties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"build-info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BuildProperties</span> <span class="token function">buildInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> buildProperties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>하지만, 그래들 명령어에 의해 빌드된 애플리케이션 파일으로 실행된 것이 아니라 인텔리제이와 같은 IDE로 구동하는 경우라면 BuildProperties가 등록되지 않으므로 오류가 발생한다. 클래스패스에 있는 빌드 정보를 먼저 사용할 수 있도록 @AutoConfiguration을 통해 자동 구성 클래스를 만들고 ProjectInfoAutoConfiguration가 동작한 이후에 수행하도록 하면 된다.</p><pre class="language-java" data-language="java"><div class="caption"><span>BuildConfiguration.java</span></div><code class="language-java"><span class="token comment">//@Import(ProjectInfoAutoConfiguration.class)</span><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>after <span class="token operator">=</span> <span class="token class-name">ProjectInfoAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuildConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">BuildProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">BuildProperties</span> <span class="token function">buildProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_INSTANT</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"artifact"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span> <span class="token string">"kr.kdev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BuildProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>위 코드에서 @AutoConfiguration는 스프링 부트 2.7 에서 추가된 어노테이션이므로 이전 버전이라면 @Import를 통해 수동으로 동작하도록 해야한다.</p></blockquote><p>그러면 이제 개발 환경에서는 ProjectInfoAutoConfiguration에 의해 BuildProperties가 등록되지 않더라도 코드로 정의된 BuildProperties가 등록되어 오류가 발생하지 않는다. 빌드된 애플리케이션에서는 빌드 정보 API가 등록되므로 아래와 같이 빌드 정보를 확인할 수 있다.</p><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token comment"># java -jar '-Dspring.profiles.active=prod' .\demo-1.0.0.jar</span><span class="token comment"># /build-info</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span>:<span class="token string">"demo"</span><span class="token punctuation">,</span><span class="token string">"version"</span>:<span class="token string">"local"</span><span class="token punctuation">,</span><span class="token string">"time"</span>:<span class="token string">"2023-03-22T13:13:58.186Z"</span><span class="token punctuation">,</span><span class="token string">"artifact"</span>:<span class="token string">"demo"</span><span class="token punctuation">,</span><span class="token string">"group"</span>:<span class="token string">"kr.kdev"</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에 대한 관련 코드는 &lt;a href=&quot;https://github.com/kdevkr/spring-demo&quot;&gt;https://github.com/kdevkr/spring-demo&lt;/a&gt; 에서 참고할 수 있습니다.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 언더토우</title>
    <link href="https://kdevkr.github.io/spring-boot-undertow/"/>
    <id>https://kdevkr.github.io/spring-boot-undertow/</id>
    <published>2023-03-15T15:00:00.000Z</published>
    <updated>2023-07-31T11:10:23.372Z</updated>
    
    <content type="html"><![CDATA[<p>인텔리제이 또는 <a href="https://start.spring.io/">스프링 이니셜라이저</a>를 통해 스프링 부트 프로젝트를 간단하게 생성할 수 있다. 스프링 이니셜라이저를 통해 만들고자 하는 프로젝트에서 필요한 모듈을 쉽게 선택할 수 있게 지원하지만 세부적인 모듈의 선택은 지원하지 않기 때문에 만들어진 프로젝트를 수정해야할 필요성이 생길 수 있다. 아파치 톰캣은 기본적으로 지원하는 기본 컨테이너로써 충분히 입증된 기술이지만 현재 조직과 같이 일부 실무 프로젝트에서는 언더토우를 사용하는 편이다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">configurations<span class="token punctuation">.</span>configureEach <span class="token punctuation">&#123;</span>    exclude group<span class="token punctuation">:</span> <span class="token string">'org.springframework.boot'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'spring-boot-starter-tomcat'</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-websocket'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-undertow'</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>위 예시에서 spring-boot-starter-websocket 모듈에 의해 spring-boot-starter-web은 명시할 필요가 없다.</p></blockquote><h4 id="WebSocketDeploymentInfo-경고-로그-없애기"><a href="#WebSocketDeploymentInfo-경고-로그-없애기" class="headerlink" title="WebSocketDeploymentInfo 경고 로그 없애기"></a>WebSocketDeploymentInfo 경고 로그 없애기</h4><p>spring-boot-starter-websocket 모듈을 추가하면 아래처럼 WebSocketDeploymentInfo가 설정되지 않아 기본 버퍼 풀이 사용된다는 경고 로그가 출력된다. 로그 레벨 조정을 통해 무시해도 되지만 WebServerFactoryCustomizer를 통해서 WebSocketDeploymentInfo가 등록되도록 구현할 수 있다.</p><pre class="language-none"><code class="language-none">2023-03-16T21:49:43.249+09:00  WARN 35488 --- [main] io.undertow.websockets.jsr : UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used</code></pre><pre class="language-java" data-language="java"><div class="caption"><span>UndertowWebsocketCustomizer</span></div><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UndertowWebsocketCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UndertowServletWebServerFactory</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerProperties<span class="token punctuation">.</span>Undertow</span> undertow<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UndertowWebsocketCustomizer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>undertow <span class="token operator">=</span> serverProperties<span class="token punctuation">.</span><span class="token function">getUndertow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">UndertowServletWebServerFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        factory<span class="token punctuation">.</span><span class="token function">addDeploymentInfoCustomizers</span><span class="token punctuation">(</span>deploymentInfo <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> direct <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getDirectBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getDirectBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">;</span>            <span class="token class-name">WebSocketDeploymentInfo</span> webSocketDeploymentInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketDeploymentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webSocketDeploymentInfo<span class="token punctuation">.</span><span class="token function">setBuffers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultByteBufferPool</span><span class="token punctuation">(</span>direct<span class="token punctuation">,</span> bufferSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deploymentInfo<span class="token punctuation">.</span><span class="token function">addServletContextAttribute</span><span class="token punctuation">(</span><span class="token string">"io.undertow.websockets.jsr.WebSocketDeploymentInfo"</span><span class="token punctuation">,</span> webSocketDeploymentInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="HTTPS-포트로-리다이렉트"><a href="#HTTPS-포트로-리다이렉트" class="headerlink" title="HTTPS 포트로 리다이렉트"></a>HTTPS 포트로 리다이렉트</h4><p>이제는 AWS ELB와 같은 로드밸런서 또는 엔진엑스와 같은 웹 서버들을 통해서 리버스 프록시를 구성하므로 애플리케이션이 HTTP&#x2F;2를 지원하도록 구동하지 않는 편이지만 TLS 오프로드가 필요하다면 아래와 같이 HTTP로 연결되었을때 HTTPS로 연결되도록 구성할 수 있다.</p><pre class="language-java" data-language="java"><div class="caption"><span>UndertowHttp2Customizer</span></div><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UndertowHttp2Customizer</span>    <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UndertowServletWebServerFactory</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> httpPort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UndertowHttp2Customizer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">,</span>                                   <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties <span class="token operator">=</span> serverProperties<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpPort <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"server.http-port"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">UndertowServletWebServerFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        factory<span class="token punctuation">.</span><span class="token function">addBuilderCustomizers</span><span class="token punctuation">(</span>builder <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">addHttpListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpPort<span class="token punctuation">,</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addDeploymentInfoCustomizers</span><span class="token punctuation">(</span>deploymentInfo <span class="token operator">-></span> deploymentInfo<span class="token punctuation">.</span><span class="token function">addSecurityConstraint</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addWebResourceCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebResourceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addUrlPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setTransportGuaranteeType</span><span class="token punctuation">(</span><span class="token class-name">TransportGuaranteeType</span><span class="token punctuation">.</span><span class="token constant">CONFIDENTIAL</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setEmptyRoleSemantic</span><span class="token punctuation">(</span><span class="token class-name">SecurityInfo<span class="token punctuation">.</span>EmptyRoleSemantic</span><span class="token punctuation">.</span><span class="token constant">PERMIT</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setConfidentialPortManager</span><span class="token punctuation">(</span>exchange <span class="token operator">-></span> serverProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;인텔리제이 또는 &lt;a href=&quot;https://start.spring.io/&quot;&gt;스프링 이니셜라이저&lt;/a&gt;를 통해 스프링 부트 프로젝트를 간단하게 생성할 수 있다. 스프링 이니셜라이저를 통해 만들고자 하는 프로젝트에서 필요한 모듈을 쉽게 선택할 수</summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
    <category term="Undertow" scheme="https://kdevkr.github.io/tags/Undertow/"/>
    
  </entry>
  
</feed>
