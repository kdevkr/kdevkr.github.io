<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2022-10-06T15:47:20.886Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>개발자로 일하기 쉬운 이유</title>
    <link href="https://kdevkr.github.io/easy-work-developer/"/>
    <id>https://kdevkr.github.io/easy-work-developer/</id>
    <published>2022-10-06T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.886Z</updated>
    
    <content type="html"><![CDATA[<p>지난번에 개발자로 일하기 어려운 이유에 대해서 끄적여보았다. 그래서 이번에는 개발자 일하기 쉬운 이유에 대해서도 이야기를 해보려고 한다. 일단 나는 대규모 시스템을 다루는 개발자가 아니므로 누군가에게는 물경력이니까 쉬운거지라고 바라볼 수 있다는 건 미리 감안하길 바란다.</p><p>최근에 조직 내에서 사용중인 (그지같은) 시계열 데이터베이스 시스템에 대해 일부 환경에서 평상시에 다른 환경에서는 발생하지 않았던 문제가 나타났다고 고객이 피드백을 주었고 이에 대한 원인을 찾기 위해서 국내 개발자 커뮤니티인 오키에도 질문도 해보고 소켓 관련 정보를 찾아보았다. 리눅스 커널 파라미터 조정에 대한 글들을 보게되면 이름이 잘 알려진 기업에서 일하는 개발자인 경우가 많았다. 아무튼 원인을 찾기 위해 검색된 정보들을 토대로 각 환경의 리눅스 커널 옵션에 대해서 확인해보았다. </p><h4 id="참고한-글-목록"><a href="#참고한-글-목록" class="headerlink" title="참고한 글 목록"></a>참고한 글 목록</h4><ul><li><a href="https://www.lesstif.com/lpt/linux-kernel-tuning-for-network-server-87949594.html">웹 서버등 네트워크 서버를 위한 리눅스 커널 튜닝</a></li><li><a href="https://meetup.toast.com/posts/53">리눅스 서버의 TCP 네트워크 성능을 결정짓는 커널 파라미터 이야기</a></li><li><a href="https://couplewith.tistory.com/entry/%EA%BF%80%ED%8C%81-%EA%B3%A0%EC%84%B1%EB%8A%A5-Nginx%EB%A5%BC%EC%9C%84%ED%95%9C-%ED%8A%9C%EB%8B%9D-3-TCP-%EA%B4%80%EB%A0%A8-%EC%B2%98%EB%A6%AC%EB%9F%89-%EB%8A%98%EB%A6%AC%EA%B8%B0-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%BB%A4%EB%84%90%ED%8A%9C%EB%8B%9D">고성능 Nginx를 위한 튜닝 - TCP 관련 처리량 늘리기</a></li></ul><blockquote><p>시스템 규모가 커질수록 로우 레벨의 지식이 필요하다고 생각된다.</p></blockquote><p>그런데, 리눅스 서버의 기본 커널 버전이 향상된 부분인지 클라우드 서비스에서 제공하는 AMI 이미지에 클라우드 엔지니어가 이미 최적화된 옵션을 지정해두었는지는 모르겠으나 위 글들에서 말하는 파라미터들에 대한 값은 이미 적당한 수치로 적용되어있음을 확인했다. 그렇다, 결국 내가 건드려볼 수 있는 부분은 없었다. 이와 같이 때로는 어떤 기술에 대한 <a href="https://www.digitalocean.com/community/tools/nginx">최적화된 설정값이 적용된 예시</a>를 안내해주기도 하는 것을 보면 지금의 개발자들은 일하기 쉬운 환경에 있지 않나 생각해본다. 예전과 다르게 서버 자원의 스펙 조차도 기본적으로 4G 만큼의 메모리를 가지는 경우가 많고 주로 사용되는 언어들이 GC를 지원하므로 굳이 메모리에 대해 큰 고민을 하기보다는 비즈니스 문제를 어떻게 풀어낼 것인가를 고민하면 되는 경우가 많다. 실제로 비즈니스 문제에 대해 요구사항이 명확할 때는 굉장히 간단하고 빠르게 해결되는 경우도 있다.</p><h4 id="기술-스택"><a href="#기술-스택" class="headerlink" title="기술 스택"></a>기술 스택</h4><p>실제로는 생각보다 잘 알려지지 않은 기술들도 많지만 대부분의 시스템들에 필수적으로 도입되는 몇가지 기술 스택이 존재하기도 한다. 예를 들어, PostgreSQL과 같은 관계형 데이터베이스와 로그 저장소로 활용되는 엘라스틱서치(Elasticsearch) 그리고 캐시 및 세션 저장소로 활용되는 레디스(Redis) 그리고 리버스 프록시를 위한 엔진엑스와 같은 기술을 말한다. 이외에도 시스템 규모에 따라 추가되거나 대체되는 솔루션이 있겠지만 이와 같이 주로 사용되는 기술에 대한 레퍼런스는 인터넷에 개발자들이 잘 정리해서 공유해주고 있다.</p><p><img data-src="/images/posts/easy-work-developer/01.gif" alt="개발자로 일하기 참 쉽죠?!"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;지난번에 개발자로 일하기 어려운 이유에 대해서 끄적여보았다. 그래서 이번에는 개발자 일하기 쉬운 이유에 대해서도 이야기를 해보려고 한다. 일단 나는 대규모 시스템을 다루는 개발자가 아니므로 누군가에게는 물경력이니까 쉬운거지라고 바라볼 수 있다는 </summary>
      
    
    
    
    
    <category term="Developer" scheme="https://kdevkr.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>개발자로 일하기 어려운 이유</title>
    <link href="https://kdevkr.github.io/hard-work-developer/"/>
    <id>https://kdevkr.github.io/hard-work-developer/</id>
    <published>2022-09-30T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.886Z</updated>
    
    <content type="html"><![CDATA[<p>개인적으로 (대규모 시스템을 다루지 않는) 개발자로써 요구사항에 대해서 처리하는 것은 그다지 어렵지 않음을 느낀다. 그럼에도 불구하고 개발자로써 일하기 어려운 이유에 대해서 개인적인 경험을 토대로 적어보고자 한다. </p><h4 id="비즈니스-도메인-그리고-나라별-분야-정책으로-요구사항이-명확하지-않다"><a href="#비즈니스-도메인-그리고-나라별-분야-정책으로-요구사항이-명확하지-않다" class="headerlink" title="비즈니스 도메인 그리고 나라별 분야 정책으로 요구사항이 명확하지 않다."></a>비즈니스 도메인 그리고 나라별 분야 정책으로 요구사항이 명확하지 않다.</h4><p>IT 시스템은 생각보다 많은 비즈니스 도메인에서 활용될 수 있기 때문에 도메인 분야에 대한 지식을 알고 있는 것도 상당히 중요한 부분이라고 생각된다. 그리고 해당 분야마다 국내 또는 해외 나라마다 정책이 약간씩 다를 수 있고 개념적으로만 존재한다거나 확실한 기준이 정해지기 이전일 수도 있다. 실제로 현재 조직의 비즈니스는 에너지 분야인데 신재생에너지 뿐만 아니라 다양한 에너지들에 대한 정책이 만들어지고 변경되고 있으며 심지어는 <a href="https://www.youtube.com/watch?v=Wkgi4vmMC3g">가상발전소</a>라는 개념은 꽤 오래전부터 언급되어왔지만 아직까지도 사업적인 표준은 정해진 바가 없다.</p><p>요구사항이 명확하지 않는 경우가 생각보다 많음으로 인해서 요구사항을 제대로 파악할 수 없는 상태로 검토되거나 개발 산출물이 제대로 작성될 수 없고 시간이 지남에 따라서 기존에 작성된 문서들의 내용이 현재 기준과 전혀 달라지는 상황이 발생하기도 한다. 그래서 결국 고객과 조직 내에서는 <strong>그때는 맞고 지금은 틀리다</strong> 라는 이야기가 종종 오가기도 한다. 경우에 따라서는 요구사항에 대한 작업을 진행할 때 고려되지 않은 부분에 대해서 일단 개발 일정을 지키기 위해서 그러지 않는다는 가정을 한다거나 그럴리 없다는 가정을 하고 진행하기도 한다. 그리고 작업 과정에서 알려진 이슈(Known Issues)들은 추후 개선 사항 또는 버그로 피드백 되어버리기도 하는 경우도 생기기 마련이다.</p><p>소프트웨어적인 관점에서는 요구사항에 대한 변경에 대해서 하드웨어로 만들어지는 제품보다는 그나마 유연하다는 장점이 있다고 말하지만 소프트웨어 개발자 입장에서는 그 작은 변화로 인해서 시스템에 어떠한 영향을 미치는지를 전반적으로 체크하기는 쉽지 않다. 물론, 조직 내 개발자들이 개발 산출물을 작성하고 제대로 관리하지 않는게 주 원인으로 바라볼 수 있지만 일해온 경험 상 다른 회사와 연계하여 진행하는 일부 프로젝트에서도 전달되는 문서들이 정확하지 않고 최신화가 안되어있는 것을 볼때면 생각보다 많은 곳이 시스템에 대한 히스토리를 잘 기록하지 않을 것으로 생각된다.</p><blockquote><p>개발 산출물을 제대로 작성하고 관리하면서 일하는 조직의 개발자들이 얼마나 대단한 것인지를 다시 한번 깨닫는다. </p></blockquote><h4 id="개발자-마인드와-비즈니스적인-관점은-다르다"><a href="#개발자-마인드와-비즈니스적인-관점은-다르다" class="headerlink" title="개발자 마인드와 비즈니스적인 관점은 다르다."></a>개발자 마인드와 비즈니스적인 관점은 다르다.</h4><p>시스템에 대한 히스토리를 아느냐 모르냐에 따라서 요구사항에 대한 검토와 작업이 잘못된 방향으로 흘러가기도 한다. 그리고 정확하지 않은 개발과 테스트를 통해서 잦은 배포를 하게되면 시스템에 대한 많은 사이드 이펙트가 발생할 수 밖에 없는 구조가 될 수 밖에 없다. 그래서 명확하지 않은 것을 토대로 작업했고 문제를 해결하는 사람들인 개발자들은 문제가 있다면 원인을 확인하고 개선하면 된다는 마인드를 가지게 되지만 사업적인 관점에서 제품은 기능에 대한 안정성을 유지해야할 의무가 있다고 바라볼 수 밖에 없다. 실제로 개발자로써 일하고 있지만 일상 생활에서 사용하는 서비스를 고객 입장이 되었을때는 서비스에 문제가 발생했을때도 (어느정도 이해가 되지만) 빠르게 조치되기를 요구하게 된다.</p><blockquote><p>따라서, 많은 사람들이 이용하는 네이버와 카카오톡에 대해서 개발자로써 바라볼때는 약간의 문제가 가끔씩 발생하지만 시스템에 대한 기능을 안정적으로 제공하는 것을 유지하는 부분에 대단함을 느낀다.</p></blockquote><h4 id="전체-프로젝트-일정-중-개발과-테스트-기간은-한정적이다"><a href="#전체-프로젝트-일정-중-개발과-테스트-기간은-한정적이다" class="headerlink" title="전체 프로젝트 일정 중 개발과 테스트 기간은 한정적이다."></a>전체 프로젝트 일정 중 개발과 테스트 기간은 한정적이다.</h4><p>아무리 야근을 지양하는 회사라고해도 야근할 수 없을 정도로 프로젝트 일정이 진행되지 않을때도 있다. 일반적으로 프로젝트를 진행할 때에는 이미 진행하고 있는 프로젝트의 일정을 고려해서 (턴키 또는 맨먼스 방식으로) 앞으로 조직이 해야할 신규 프로젝트에 대해 계약 및 일정을 산정하게 된다. 그러나, 어떠한 사업적인 사유로 인해서 초기에 이야기되었던 프로젝트 일정이 연기되는 경우가 상당히 많은데 그 프로젝트에 한해서는 일정이 연기가 되더라도 프로젝트가 종료되는 시점은 동일하게 유지하게 될때도 있으며 연기된 프로젝트가 급하게 다시 진행되는 부분으로 인해서 개발자가 여러개의 프로젝트에 대한 요구사항을 처리해야하는 상황이 발생하기도 한다.</p><p>아무리 개발자의 능력이 좋아도 요구사항을 파악하고 작업을 하는 시간은 한정적이므로 동시에 진행되는 모든 프로젝트를 완벽하게 처리할 수 없으며 결국은 정해진 기간 내에 완료해야하는 부분으로 인해서 조금씩 야근을 하게 되는 상황이 만들어질 수 밖에 없다. 개발자 입장에서는 안타까운 일이며 조직에서는 인건비를 고려하여 프로젝트를 완수하도록 요구할 수 밖에 없기도 하다.</p><blockquote><p>물론 이것을 지속적으로 이용하는 회사들은 당연히 잘못된 나쁜 회사이다. 이러한 사유가 발생하더라도 조직 내 개발자 뿐만 아니라 힘들게 프로젝트를 수행한 인원들에게 별도의 보상은 당연히 이루어져야 한다.</p></blockquote><h4 id="보안은-중요하지만-보안의-수준은-프로젝트마다-다르다"><a href="#보안은-중요하지만-보안의-수준은-프로젝트마다-다르다" class="headerlink" title="보안은 중요하지만 보안의 수준은 프로젝트마다 다르다."></a>보안은 중요하지만 보안의 수준은 프로젝트마다 다르다.</h4><p>IT 분야의 모든 회사는 보안을 중요시할텐데 회사마다 최소한 적용해야할 보안 수준은 다르다. 일반적으로 회사의 규모가 클수록 보안 레벨이 높을 수 밖에 없는데 <strong>보안 수준이 높을 수록 직원들에게 불편함을 제공</strong>할 수 밖에 없다. 그래서 불편함으로 인해 더 보안적이지 않은 방식으로 직원 또는 개발자들이 업무를 진행하기도 하는 것을 경험했다. </p><p>예를 들어, 모 대기업 계열사의 환경에 접속하기 위해서는 특정 아이피 대역을 통해서 가상 데스크톱 포털을 이용하도록 제한되어있는데 불구하고 외부 계정으로 발급된 것으로 접속해보면 사내 대외비 문서들을 열람할 수 있도록 오픈되어있기도 했다. 그리고 정말 특이했던 경험은 어느 공기업이었는데 보안 상 사내 컴퓨터에 USB 인가가 불가능하지만 USB 방식으로 연결하는 외장 CD 리더기는 가능해서 프로젝트 결과물을 제공해야할 때 인터넷이 아닌 CD에 구워서 전달하도록 요청받기도 했다.</p><p>시스템에 대한 보안 요구사항 뿐만 아니라 인프라 환경에서의 보안 수준도 달라질 수 있다. 자체적으로 서비스하는 제품이라면 배포 자동화 프로세스를 구축할 수 있도록 허용할텐데 비즈니스 분야에 따라서는 고객 환경의 인프라에 시스템을 배포하고 운영해야하는 경우에는 해당 환경의 보안 레벨에 따른 방식을 채택해야한다. 결국 배포 자동화 프로세스를 구축할 수 없고 단계별로 수동 프로세스(명령어)를 실행해야한다거나 심지어는 실 운용 환경은 고객이 직접 배포를 수행하기도 한다.</p><blockquote><p>사실 보안에 관련해서는 보안 수준이 높은 고객임에도 불구하고 시스템에서 요구하는 기능에 대해서는 보안적인 관점을 전혀 고려하지 않고 요구하는 경우도 있다. 개발자로써 이러한 부분을 바라볼때에는 도저히 이해할 수 없는 부분이기도 하다.</p></blockquote><p>네카라쿠배와 같은 서비스 회사에서도 내부적으로 개발자에게 어떠한 어려움이 있을지는 모르겠다. 모든 개발자가 해당 회사에서만 일하는 것은 아니므로 그들이 일하고 있는 방식 조차도 반드시 이상적인 것은 아니고 그곳은 계속해서 더 일하기 좋은 문화를 추구하고자 하는 사람들이 모이는 조직일 것이라 생각한다. 일반적이지 않은 분야와 작은 규모 그리고 이상적이지 않은 방식으로 일하는 우물 안 개발자의 경험이므로 본 글에서 말하는 <strong>개발자로 일하기 어려운 이유가 모든 개발자들에게 일반화할 수 없음</strong> 을 다시한번 말하며 마치도록 하겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;개인적으로 (대규모 시스템을 다루지 않는) 개발자로써 요구사항에 대해서 처리하는 것은 그다지 어렵지 않음을 느낀다. 그럼에도 불구하고 개발자로써 일하기 어려운 이유에 대해서 개인적인 경험을 토대로 적어보고자 한다. &lt;/p&gt;
&lt;h4 id=&quot;비즈니스</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>나는 좋은 동료 혹은 선배 개발자가 아니다.</title>
    <link href="https://kdevkr.github.io/onboarding/"/>
    <id>https://kdevkr.github.io/onboarding/</id>
    <published>2022-09-19T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p><strong>커리어 스킬</strong>과 <strong>이펙티브 엔지니어</strong>라는 책을 읽고 제목처럼 나는 좋은 동료 혹은 선배 개발자가 아니라는 생각이 들었다.</p><p>스프린트 단위로 할당된 작업을 처리하기 바쁘던 일정 문제로 인해서 조직에서 같이 일하게 된 새로운 동료들인 신입 개발자들이 어떻게 일하고 있는지에 대해서 크게 신경쓰지 않았기 때문이다. 기존에 일하던 개발자들이 바쁘게 일하는 모습으로 인해서 신입 개발자들이 스스로 너무 많은 고민을 해버린 결과 오히려 이상한 방향으로 작업한다던가 스스로 함정에 빠져서 힘들어하는 것을 최근에야 알게 되었다.</p><blockquote><p>나는 신입 개발자들이 그러한 고민을 할때마다 처음부터 너무 깊게 생각하지 마세요, 생각했던 방식에 문제가 있다면 다시 고치면 된다며 처음부터 완벽할 수 없다는 이야기를 해주었다. 사실 개발자 입장에서는 문제가 있다면 다시 고치면 된다는 마인드이지만 고객과 사업 관점에서는 버그가 발생한다는 건 제품의 신뢰를 잃게 되는 중요한 부분이기도 하다. 그럼에도 우리는 모든 상황을 예상할 수 없고 늘 고려하지 않은 부분에서 예기치 않은 문제가 발생한다.</p></blockquote><p>스프린트 단위 작업을 트래킹하기 위해서 이슈 단위로 브랜치를 만들고 PR을 요청하여 머지하는 방식을 채택한 결과 신입 개발자들이 스스로 코드 스타일에 대해서 큰 고민을 하지 않아서 작성된 코드가 일관되지 않은 문제를 보인다거나 개발 도구를 사용함에 있어서 어떠한 문제가 있는데도 불구하고 기존 개발자들에게 도움을 요청하지 않고 이상하다고만 생각하는 경우도 있었다. 특이한 케이스를 하나 공유하자면, 웹팩에 의한 ESLint와 Prettier가 동작하여 일부 코드를 자동으로 변환하여 주도록 해두었지만 유닉스 시스템과 윈도우의 개행 방식의 문제로 인해서 CRLF인 상태로 개발하고 저장하는 경우에 하단에 너무 많은 빈 줄이 생기는 증상이 있었는데, 신입 개발자들이 이상함을 느꼈다면 기존 개발자들에게 현상을 공유하고 도움을 요청할 수 있어야했지만 다들 바빠보이는 모습으로 인해서 마치 본인이 잘못한 것처럼 인지하고 빈 줄이 생긴채로 커밋을 하고있는 것을 보았다. </p><blockquote><p>나는 PR에 대한 커밋의 그 부분을 보고나서 많은 빈 줄이 커밋되는 이유에 대해서 물었고 작업을 하고 저장하는 순간 빈 줄이 많이 생긴다는 이야기를 듣고 나는 여러가지를 확인해본 결과 프로젝트 소스 파일을 클론할 때 적용된 파일 개행 형식으로 인해서 발생함을 확인했고 이미 정해진 개행 방식을 파일마다 변경하는 것은 비효율적이니 에디터의 End of Line에 대한 설정을 LF로 설정하고 작업하는 것으로 가이드를 주었다.</p></blockquote><p>또한, 아직은 개발 도구에 대한 경험이 부족하고 디버그 요령이 없었기에 생각보다 비효율적으로 작업하고 있다던가 심지어는 크롬 개발자 도구를 제대로 활용하지 못하는 경우도 보게 되었다. 개발된 시스템이 실제로 배포되는 다양한 환경의 인프라 구성이 약간은 다르다거나 각 환경마다 제공되어야하는 기능이 다른 부분으로 인해서 기능 플래그를 위해 여러가지 프로파일을 구분하는 것을 이해하지 못한 상태로 할당받은 작업을 해오기도 하였다. 런타임 환경의 프로파일 개념이 없었기에 여러가지 프로젝트를 동시에 작업해야하게 되면서 프로젝트마다 적용되어야하는 프로파일 유무를 확인하지 않고 애플리케이션이 실행되지 않는다고 도움을 요청하기도 하였다.</p><blockquote><p>사실 조직 차원에서 신입 개발자들을 위한 제대로 된 온보딩 시스템이 없는 것이 문제이며 동료 개발자인 나와 그리고 조직의 개발자들이 그러한 경험이 없기 때문에 자신들이 아는 것을 공유한다거나 신경쓰지 않아서 발생한 문제이다. 신입 개발자들은 당장 일할 수 있는 인력이 아니라고 말하면서도 그래도 어느정도는 알 것이라고 가정하게 되는 부분도 반드시 있을 것이다.</p></blockquote><p>일하기 좋은 문화를 추구하는 잘 알려진 기업들처럼 좋은 온보딩 시스템이 없어서 미안하지만 어쨌든 나는 좋은 동료 혹은 선배 개발자가 아닐지는 몰라도 그들에게 도움이 될만한 링크들을 모아서 공유해야겠다 생각한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;커리어 스킬&lt;/strong&gt;과 &lt;strong&gt;이펙티브 엔지니어&lt;/strong&gt;라는 책을 읽고 제목처럼 나는 좋은 동료 혹은 선배 개발자가 아니라는 생각이 들었다.&lt;/p&gt;
&lt;p&gt;스프린트 단위로 할당된 작업을 처리하기 바쁘던 일정 문제</summary>
      
    
    
    
    
    <category term="커리어 스킬" scheme="https://kdevkr.github.io/tags/%EC%BB%A4%EB%A6%AC%EC%96%B4-%EC%8A%A4%ED%82%AC/"/>
    
    <category term="이펙티브 엔지니어" scheme="https://kdevkr.github.io/tags/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>최적화된 도커 이미지</title>
    <link href="https://kdevkr.github.io/optimize-dockerfile/"/>
    <id>https://kdevkr.github.io/optimize-dockerfile/</id>
    <published>2022-09-16T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서는 애플리케이션을 <a href="/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment/">아마존 웹 서비스의 Elastic Beanstalk Java SE 플랫폼 환경을 활용해서 배포</a>하고 있어서 도커 이미지를 만들어볼 기회가 없는데 그럼에도 도커 이미지를 직접 만들어보면 생각보다 이미지의 크기나 빌드 시간이 오래걸려서 당황하게 된다.</p><ul><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Best practices for writing Dockerfiles</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-docker-images-for-production">How To Optimize Docker Images for Production</a></li><li><a href="https://medium.com/the-agile-crafter/docker-image-optimization-from-1-16gb-to-22-4mb-53fdb4c53311">Docker Image Optimization: from 1.16GB to 22.4MB</a></li><li><a href="https://jonnung.dev/docker/2020/04/08/optimizing-docker-images/">도커 이미지 잘 만드는 방법</a></li><li><a href="https://docs.docker.com/language/">Language-specific getting started guides</a></li><li><a href="https://github.com/GoogleCloudPlatform/golang-samples/blob/main/run/helloworld/Dockerfile">GoogleCloudPlatform&#x2F;golang-samples</a></li></ul><p>많은 글에서 다루는 도커 빌드 이미지를 최적화하는 방향에 대해서 정리해보자면 다음과 같다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">첫째, 애플리케이션 언어에 적합한 경량의 베이스 이미지를 사용하라.둘째, 애플리케이션 실행 및 운용에 필요한 필수 패키지만 설치하라.셋째, COPY 그리고 RUN 등의 레이어를 만드는 명령어를 최소화하라.넷째, 멀티 스테이지로 빌드와 런타임 환경의 이미지를 분리하라.</code></pre><h4 id="오픈소스-솔루션으로-확인하는-Dockerfile-예시"><a href="#오픈소스-솔루션으로-확인하는-Dockerfile-예시" class="headerlink" title="오픈소스 솔루션으로 확인하는 Dockerfile 예시"></a>오픈소스 솔루션으로 확인하는 Dockerfile 예시</h4><ul><li><a href="https://github.com/prometheus/prometheus/blob/main/Dockerfile">promethues&#x2F;Dockerfile</a></li><li><a href="https://github.com/grafana/grafana/blob/main/Dockerfile">grafana&#x2F;Dockerfile</a></li><li><a href="https://github.com/louislam/uptime-kuma/tree/master/docker">uptime-kuma&#x2F;docker</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;회사에서는 애플리케이션을 &lt;a href=&quot;/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment/&quot;&gt;아마존 웹 서비스의 Elastic Beanstalk Java S</summary>
      
    
    
    
    
    <category term="도커 이미지" scheme="https://kdevkr.github.io/tags/%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80/"/>
    
    <category term="최적화" scheme="https://kdevkr.github.io/tags/%EC%B5%9C%EC%A0%81%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Test Driven Development</title>
    <link href="https://kdevkr.github.io/test-driven-development/"/>
    <id>https://kdevkr.github.io/test-driven-development/</id>
    <published>2022-09-13T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>시작하기에 앞서 TDD(Test Driven Development)에 대해서는 아래의 글들을 참고하는 것이 좋다고 생각된다. 왜냐하면 이 글은 TDD에 대해서 정리한다거나 좋은지 나쁜지에 대해서 다루지 않기 때문이다.</p><ul><li><a href="https://www.youtube.com/watch?v=mNPpfB8JSIU">[마틴 파울러] 리팩토링의 중요성 feat.테스트 코드를 짜는 이유(한글 자막)</a></li><li><a href="https://medium.com/@minhyeok4dev/1500%EA%B0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B0-%EB%82%98%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%96%BB%EC%97%88%EB%82%98-62b9facd53d8">1500개 테스트를 작성하며 나는 무엇을 얻었나</a></li><li><a href="https://medium.com/@sryu99/product-manager-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC-%EB%B3%B8-tdd-3ae25512c5d7">Product Manager 관점에서 바라 본 TDD</a></li></ul><p>현재 조직은 스프린트 단위의 개발 일정과 배포와 함께 이제는 고객과 협의하여 인수테스트를 진행하기로 하였고 그와 동시에 개발팀에서는 TDD라는 개발 방법론을 조금씩 도입하기로 결정했다. 다만, 이것은 개발자 일원 중 하나인 나의 의견이 반영된 부분이 아니며 조직 내 각 팀장급 동료들이 결정한 사항이다. 그렇다면 이 조직에서는 왜 TDD라는 개발 방식을 고려하였을까를 생각해보고자 한다.</p><p>오래전에 컴퓨터 공학과에서 배웠던 소프트웨어 공학 관점의 개발 프로세스를 다시 살펴보면 기획 및 요구사항 분석을 통해서 만들어지는 요구사항 명세서를 기반으로 결정된 사항을 토대로 시스템을 설계하며 정의된 인터페이스에 따라 세부 기능을 개발하고 테스트하는 과정을 거치면서 하나의 제품을 만드는 것이라고 설명한다.</p><p>실제로 어떠한 시스템을 개발하는데 있어서 요구사항이 명확하게 분석되어 제대로 된 작업 기준이 도출되면 요구사항에 대한 기능을 구현하는데에는 생각보다 어려움이 없을 것이다. 개발자가 어떠한 작업 방향을 결정했느냐에 따라서 약간의 결과물은 달라질 수 있겠지만 최소한 요구사항이 분석된 부분 만큼은 정해진대로 동작한다는 것을 보장한다.</p><p><img data-src="/images/posts/test-driven-development/IMG_3970.jpg"></p><p>그런데, IT 분야에서 일하다보면 모든 회사와 많은 프로젝트들이 제대로 된 개발 산출물과 명확한 요구사항을 토대로 일하는 것은 쉽지 않다. 도메인 시장마다 그 깊이는 다르겠지만 요구사항을 명확하지 못하도록 만드는 나라마다의 정책 그리고 당장 정해질 수 없는 기준이 있다거나 개념적으로만 생각되어 미래를 준비하는 것들도 그 중의 하나이다. </p><blockquote><p>유튜브와 일하기 좋은 문화를 가지고 있다는 회사들이 말하는 이상적으로 일하는 방식을 갖추기엔 생각보다 어렵다. 모든 도메인 시장이 동일하게 일할 수 있는 사업적인 구조가 아닌 것도 그 이유이다.</p></blockquote><p>일하기 좋은 문화를 추구한다며 많은 스타트업과 네카라쿠배와 같은 서비스 회사들에서 대외적으로 어떤 고민을 했고 지금 어떠한 방식으로 일한다고 공유하는 것을 볼 수 있지만 그들조차도 내부적으로는 많이 포장된 부분이 있을 것이고 그러한 문화를 유지하고자 때로는 어떠한 희생을 감수할 지도 모른다. 그럼에도 그러한 회사들을 많은 사람들이 선호하는 이유는 일하고 있는 방식을 더 나은 방식으로 개선하고자 노력하는 부분이지 않을까 생각한다.</p><p>현재 조직은 대외적으로는 중소기업 소속에서 외부 투자를 받아서 별도의 법인으로 분리되어서 새로운 회사가 되었지만 내부적으로는 일하는 공간이나 방식이 변경된 부분은 없는데 많은 중소기업들이 일하는 방식을 바꾸기 어려운 이유는 그렇게 일하는 것이 이미 익숙해져있다거나 비용적인 면으로 볼때 감수할 만큼 여유롭지 않기 때문이라고 느껴진다. </p><p>회사마다 만드는 시스템의 규모도 다르고 규모와 기능에 따른 설계 방식도 다르며 심지어는 사용되는 언어와 기술, 개발된 애플리케이션을 배포하는 방법도 다양하기 때문에 모든 회사가 동일한 기술 트렌드를 따라간다거나 데브옵스를 수행하는 팀을 만들지 않는다. 더 나아가서는 꽤 많은 회사가 클라우드 서비스를 활용하고 있겠지만 굳이 사용하지 않는다고해서 그 회사가 좋지 않은 방식으로 일한다고 단정 지을 순 없다.</p><p>회사의 도메인 시장의 특성 상 시스템에 대한 기능 추가 또는 수정해야하는 요구사항을 전달받아도 대부분 두루뭉술하게 큰 틀로만 서술되어있거나 고객이 생각하는 바 또는 원하는 것을 제대로 문서화하지 않아서 요구사항에 대해서 자세하게 분석할 수 없는 상태로 개발 일정을 결정한다거나 그럴리 없다고 단정한다던가 설마 그러겠어라고 가정한 상태로 피드백이 되기도 한다.</p><p>요구사항이 명확하지 않다보니 “오늘도 개발자가 안된다고 말했다”라는 것과 같이 일단 방어적인 자세를 취하기도 하는데 대부분의 요건이 전달될 때에는 고객과 사업팀의 협의하에 이미 정해진 기한이 있는 상태에서 검토를 요청하는 히스토리도 가끔씩 발생한다. 이미 고객이 스스로 필요하다고 정해놓은 기한을 전달할 수 밖에 없는 사업팀의 어려움도 있을테지만 개발자 입장에서는 진행중인 스프린트 단위의 작업을 고려하여 원하는 기한에는 불가능하다는 피드백을 줄 수 밖에 없는 경우도 존재한다.</p><blockquote><p>하지만, 고객이 있어야만 조직이 유지될 수 있기 때문에 울며겨자먹기로 긴급한 요구사항으로써 다른 작업을 중지하고 우선적으로 처리하기도 한다. 그리고 그것이 점차 반복되어진다는 것도 문제로 볼 수 있다.</p></blockquote><p>이렇게 흘러가게 되는 이유는 조직에서는 개발중인 시스템을 플랫폼으로써 성장하고 싶은 목표가 있다고는 하지만 현재 위치 상 도메인 시장의 주요 고객들에게 솔루션 형태로 계약되어 각 고객 환경에 시스템을 구축하여 이용할 수 있도록 제공하고 있고 요구사항에 대한 비용을 산정하여 추가적인 금액을 받으면서 일하기 때문이지 않을까 생각한다.</p><p><img data-src="/images/posts/test-driven-development/7c884b6e7580dbef56b86c796b549922.gif"></p><p>아무튼 현재 조직이 어떻게 일하는지 그리고 이상적으로 일할 수 없는지를 약간이나마 설명이 되었다면 이제는 조직의 개발자로써 바라볼 때 TDD를 결정한 이유에 대해서 생각해볼 필요가 있다. 불명확한 요구사항이 대부분이며 개발자가 작업해야할 방향이나 기준도 애매하고 심지어는 제품 품질을 높이기 위한 QA 직무를 수행하는 동료조차도 테스트해야할 기준을 잡기도 힘들다는 문제가 지속적으로 발생해왔다.</p><p>명확하지 않은 요구사항을 검토한 개발자와 실제로 스프린트 단위로 작업하기로 결정한 개발자가 다르기도 하며 대부분의 요구사항에 대한 처리에 대해 완료했다는 것은 개발자 스스로에게 맞기는 부분도 일부 존재한다. 애초에 현재 조직에서 일하는 방식의 문제점이라고 생각한다면 명확하지 않음으로부터 시작된다고 볼 수 있다. 제대로 되지 않은 요구사항 분석으로 인하여 동작했던 시스템의 기능들에서 오류가 발생하는 사이드 이펙트가 발생하고 그것이 반복될 수록 고객에게는 제품의 신뢰성을 잃게 되는 과정이 되는 것이다.</p><blockquote><p>지난 달 발생한 <a href="https://www.youtube.com/watch?v=uJ1KqQ0I2u8">1,600만 명이 쓰는 알약 오류 사태</a>도 변경사항으로 인해 심각한 버그가 발생한 케이스이다.</p></blockquote><p>사실 개발자와 조직에서 문서와 테스트의 중요성을 모르는 직원은 없다고 생각된다. 그럼에도 불구하고 테스트를 제대로 수행할 수 있도록 일할 수 있는 환경은 아니기 때문에 시스템의 변경사항으로 인해서 발생하는 문제를 대부분 파악하기란 쉽지 않은 상태이다. 테스트 주도 개발에 대해서 찾아보고 이해한 바로는 요구사항의 분석을 다시한번 미리 수행함으로써 설계 또는 작업 방향에 대한 오류를 검출하고 작업에 대한 기준을 개발자가 확인하면서 진행할 수 있다는 것 그리고 요구사항이 명확하지 않더라도 최소한 개발자가 생각하는 실패의 기준을 알 수 있으며 완료된 작업에 대해서는 어떠한 기준에서 테스트 해야하는지 정리할 수 있는 장점이 있다고 보여진다.</p><p>아직 테스트 주도 개발을 경험하지 못했던 개발자로써 드는 생각은 개발자가 테스트 코드를 작성한다는 것에 대해 모든 것을 테스트 코드로 커버할 수 없다는 부분도 있다는 것을 고려해야한다는 점이다. 현재 그리고 앞으로 만들어지는 시스템들은 거의 단일 애플리케이션으로만 동작하지 않으며 여러가지 외부 솔루션이나 협의된 API를 통해서 유기적으로 통신하여 시스템을 구성하기 때문에 외부 의존성이 없는 테스트 코드를 작성하기란 쉽지 않을 것이라는 점이다.</p><p>실제로 현재 조직의 시스템이 제공하는 대부분의 주요 기능은 <a href="https://code.kx.com/q/">KDB+라는 상용 시계열 데이터베이스</a>에 의존되어 구현되어있는 상태이므로 고객마다 다른 시계열 데이터를 예상하면서 테스트 환경을 준비하기가 어렵다는 부분이 존재한다. 따라서, 개발팀에서 테스트 주도 개발을 도입한다고해서 모든 요건에 대해서 테스트 코드를 작성해야할 것 같다고 부담을 가질 필요는 없다는 입장이다. 그리고 이 개발 방식을 채택한다고해서 요구사항으로 인한 변경사항이 시스템에 어떠한 영향을 미치는지 완벽히 검출할 수 있다는 관점을 가져서는 안되며 <a href="https://www.youtube.com/watch?v=NkiHu9zGYKU">아마존 웹 서비스의 개발 문화와 프로세스</a>를 보더라도 마치 체계적으로 애자일 문화를 수행하는 것처럼 보이지만 실제 아마존 웹 서비스를 이용하다보면 꽤나 많은 버그가 내재되어있음을 발견할 수 있다.</p><p>제품 품질이 좋아지지 않는 이유의 가장 큰 원인은 명확하지 않은 요구사항으로부터 시작되는 것이므로 테스트 주도 개발을 통해 테스트 코드를 먼저 만드는 것이 생각보다는 어려운 시도일지 모르겠지만 개발자 입장에서도 제품 품질을 높이려는 노력은 반드시 필요한 부분이라고 생각한다.</p><p><img data-src="/images/posts/test-driven-development/SE-2eb6c828-cc8b-4e51-a2f1-148593277123.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;시작하기에 앞서 TDD(Test Driven Development)에 대해서는 아래의 글들을 참고하는 것이 좋다고 생각된다. 왜냐하면 이 글은 TDD에 대해서 정리한다거나 좋은지 나쁜지에 대해서 다루지 않기 때문이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a</summary>
      
    
    
    
    
    <category term="TDD" scheme="https://kdevkr.github.io/tags/TDD/"/>
    
    <category term="ATDD" scheme="https://kdevkr.github.io/tags/ATDD/"/>
    
  </entry>
  
  <entry>
    <title>MQTT Connection Lost</title>
    <link href="https://kdevkr.github.io/mqtt-connection-lost/"/>
    <id>https://kdevkr.github.io/mqtt-connection-lost/</id>
    <published>2022-09-09T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>CommsReceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CommsReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">750</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataInputStream</span><span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token class-name">DataInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">267</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>wire<span class="token punctuation">.</span></span>MqttInputStream</span><span class="token punctuation">.</span><span class="token function">readMqttWireMessage</span><span class="token punctuation">(</span><span class="token class-name">MqttInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>CommsReceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CommsReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1</span> more</code></pre><p>위 스택트레이스는 Paho Java Client를 사용하여 Mosquitto 브로커에 연결하고 난 후 어떠한 사유에 의해 연결이 해지되었을 때 발생하는 오류입니다. 조직 내 동료 개발자가 Mosquitto에 연결하고 나서 5분이 지나는 시점에 연결이 해지되는 증상이 있다며 이 문제를 경험했는지 도움을 요청하였으나 이전에 <a href="/spring-boot-integration-mqtt/">스프링 부트 MQTT 클라이언트 메시지 채널 구성하기</a> 또는 <a href="/connecting-with-mqtt-using-aws-iot-device-sdk/">AWS IoT Device SDK Java로 MQTT 연결하기</a>에서처럼 Paho Java Client 라이브러리를 사용하면서 연결이 해지되는 것을 경험해보지는 못했었습니다.</p><h2 id="MQTT-over-Websocket"><a href="#MQTT-over-Websocket" class="headerlink" title="MQTT over Websocket"></a>MQTT over Websocket</h2><p>조직 내 동료 개발자의 도움 요청으로 인해 리눅스 서버에 설치된 Mosquitto 버전은 2.0.14 이며 Paho Java Client 라이브러리는 1.2.5를 사용하고 있는 것으로 알게 되었습니다. 그리고 Mosquitto 연결 시에는 Websocket 프로토콜을 사용하고 있었습니다. </p><table><thead><tr><th>JDK</th><th>Paho Java Client</th><th>Mosquitto</th><th>EOF</th></tr></thead><tbody><tr><td>Java 1.8.0_144</td><td>1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 1.8.0_345</td><td>1.1.0 ~ 1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.1.0 ~ 1.2.5</td><td>2.0.14</td><td>💥</td></tr></tbody></table><p>JDK와 라이브러리 버전을 변경해가면서 테스트 해본 결과 일반적인 TCP 방식으로 연결 시에는 Mosquitto 버전과 상관없이 정상적으로 연결을 유지함을 보였으나 웹소켓 연결에 대해서는 리눅스 서버에 설치된 Mosquitto 2.0.14 브로커에 대해 일정 시간이 지나 연결이 해지됨을 확인할 수 있었습니다.</p><h3 id="Mosquitto-Version"><a href="#Mosquitto-Version" class="headerlink" title="Mosquitto Version"></a>Mosquitto Version</h3><p>위 문제가 발생했던 리눅스 서버에 Mosquitto 브로커는 도커 이미지로 구동된 상태라고 하였습니다. 그래서 로컬 컴퓨터 환경에서도 도커 컨테이너를 실행하여 간단하게 여러개의 버전을 테스트할 수 있으므로 도커 이미지를 변경하면서 웹 소켓 연결이 일정 시간 이후에 해지되는 증상이 나타나는지 체크해보았습니다. 테스트 버전은 <a href="https://mosquitto.org/blog/categories/releases/">Mosquitto Posts about Releases</a>에 따라 시도해보았으며 2.0.9와 2.0.11가 릴리즈될 때 1.6.x 마이너 버전도 패치되었기에 포함했습니다.</p><table><thead><tr><th>JDK</th><th>Paho Java Client</th><th>Mosquitto</th><th>EOF</th></tr></thead><tbody><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.15</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.13</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.12</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.11</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.10</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.9</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.15</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.14</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.9</td><td>OK</td></tr></tbody></table><blockquote><p>우분투 LTS 버전에 따른 Mosquitto 패키지 지원 버전은 다음의 링크에서 확인할 수 있습니다.<br><a href="https://packages.ubuntu.com/search?keywords=mosquitto">https://packages.ubuntu.com/search?keywords=mosquitto</a></p></blockquote><p>Mosquitto 버전별 테스트 결과 2021-06-08 자로 릴리즈된 2.0.11과 1.6.15 에서부터 웹소켓 연결이 해지되는 증상을 보였습니다. 동료 개발자에게는 Paho Java Client의 AutomaticReconnect 옵션과 MqttCallbackExtended 인터페이스로 연결 해지로 인해 재연결을 시도하고 나서 토픽을 다시 구독하는 방향으로 임시 조치해야할 것 같다고 전달한 상태이며 Mosquitto 브로커 버전을 다운그레이드 해야하는지에 대해서는 조직 내에서 검토하고 결정해야할 것 같습니다.</p><h2 id="테스트-환경"><a href="#테스트-환경" class="headerlink" title="테스트 환경"></a>테스트 환경</h2><p>처음에는 우분투 VM 이미지로 테스트하였으나 다양한 버전을 테스트해보기 위해서 도커 컨테이너 환경을 구성했습니다. </p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mosquitto</span><span class="token punctuation">:</span>    <span class="token comment"># image: eclipse-mosquitto:1.6.15 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:1.6.14 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.9 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.10 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.11 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.12 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.13 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.14 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.15 # EOF</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> eclipse<span class="token punctuation">-</span>mosquitto<span class="token punctuation">:</span>2.0.10    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mosquitto    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"1883:1883"</span>      <span class="token punctuation">-</span> <span class="token string">"9001:9001"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mosquitto.conf<span class="token punctuation">:</span>/mosquitto/config/mosquitto.conf      <span class="token punctuation">-</span> ./mosquitto.log<span class="token punctuation">:</span>/mosquitto/log/mosquitto.log      <span class="token punctuation">-</span> mosquitto<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/mosquitto/data      <span class="token punctuation">-</span> ./passwd<span class="token punctuation">:</span>/mosquitto/config/passwd<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  mosquitto<span class="token punctuation">-</span>data<span class="token punctuation">:</span></code></pre><h3 id="mosquitto-conf"><a href="#mosquitto-conf" class="headerlink" title="mosquitto.conf"></a>mosquitto.conf</h3><pre class="language-conf" data-language="conf"><code class="language-conf">persistence truepersistence_location &#x2F;mosquitto&#x2F;data&#x2F;log_dest file &#x2F;mosquitto&#x2F;log&#x2F;mosquitto.logport 1883listener 9001protocol websocketsallow_anonymous falsepassword_file &#x2F;mosquitto&#x2F;config&#x2F;passwdset_tcp_nodelay truesocket_domain ipv4log_type allwebsockets_log_level 8</code></pre><details>  <summary>테스트 로그</summary>  <h4 id="mosquitto-log"><a href="#mosquitto-log" class="headerlink" title="mosquitto.log"></a>mosquitto.log</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1662725110</span>: New client connected from <span class="token number">192.168</span>.0.2:3326 as paho1668189895026200 <span class="token punctuation">(</span>p2, c1, k60, u<span class="token string">'mambo'</span><span class="token punctuation">)</span>.<span class="token number">1662725110</span>: No will message specified.<span class="token number">1662725110</span>: Sending CONNACK to paho1668189895026200 <span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1662725110</span>: Received SUBSCRIBE from paho1668189895026200<span class="token number">1662725110</span>:     <span class="token variable">$SYS</span>/broker/version <span class="token punctuation">(</span>QoS <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1662725110</span>: paho1668189895026200 <span class="token number">0</span> <span class="token variable">$SYS</span>/broker/version<span class="token number">1662725110</span>: Sending SUBACK to paho1668189895026200<span class="token number">1662725110</span>: Sending PUBLISH to paho1668189895026200 <span class="token punctuation">(</span>d0, q0, r1, m0, <span class="token string">'$SYS/broker/version'</span>, <span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">24</span> bytes<span class="token punctuation">))</span><span class="token number">1662725110</span>: Received SUBSCRIBE from paho1668189895026200<span class="token number">1662725110</span>:     test/<span class="token comment"># (QoS 0)</span><span class="token number">1662725110</span>: paho1668189895026200 <span class="token number">0</span> test/<span class="token comment">#</span><span class="token number">1662725110</span>: Sending SUBACK to paho1668189895026200<span class="token number">1662725170</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725170</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725230</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725230</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725290</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725290</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725350</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725350</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725410</span>: Client paho1668189895026200 closed its connection.</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1662727428</span>: lws_validity_cb: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: scheduling validity check<span class="token number">1662727428</span>: rops_handle_POLLOUT_ws: issuing <span class="token function">ping</span> on wsi <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: ws mqtt h2: <span class="token number">0</span><span class="token number">1662727428</span>: lws_issue_raw: ssl_capable_write <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> says <span class="token number">2</span><span class="token number">1662727428</span>: lws_issue_raw: ssl_capable_write <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> says <span class="token number">6</span><span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: caller: close_and_handled<span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: end LRS_FLUSHING_BEFORE_CLOSE<span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token function">shutdown</span> conn: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span> <span class="token punctuation">(</span>sk <span class="token number">12</span>, state 0x11e<span class="token punctuation">)</span><span class="token number">1662727428</span>: __lws_close_free_wsi: real just_kill_connection: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span> <span class="token punctuation">(</span>sockfd <span class="token number">12</span><span class="token punctuation">)</span><span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: <span class="token assign-left variable">cce</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">1662727428</span>: Client paho1670208425870800 closed its connection.</code></pre><h4 id="Paho-Java-Client-log"><a href="#Paho-Java-Client-log" class="headerlink" title="Paho Java Client log"></a>Paho Java Client log</h4><pre class="language-bash" data-language="bash"><code class="language-bash">FINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:09 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: Stopping due to IOExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: Stopping due to IOExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTINGSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTINGSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: notify workAvailable and <span class="token function">wait</span> <span class="token keyword">for</span> runSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: notify workAvailable and <span class="token function">wait</span> <span class="token keyword">for</span> runSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback runFINE: paho1622771147525800: notify spaceAvailableSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback runFINE: paho1622771147525800: notify spaceAvailableSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore quiesceFINE: paho1622771147525800: <span class="token assign-left variable">resp</span><span class="token operator">=</span>Client is currently disconnecting <span class="token punctuation">(</span><span class="token number">32102</span><span class="token punctuation">)</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore quiesceFINE: paho1622771147525800: <span class="token assign-left variable">resp</span><span class="token operator">=</span>Client is currently disconnecting <span class="token punctuation">(</span><span class="token number">32102</span><span class="token punctuation">)</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms handleOldTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms handleOldTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState resolveOldTokensFINE: paho1622771147525800: reason Connection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState resolveOldTokensFINE: paho1622771147525800: reason Connection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore getOutstandingTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore getOutstandingTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState disconnectedFINE: paho1622771147525800: disconnectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState disconnectedFINE: paho1622771147525800: disconnectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState clearStateFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState clearStateFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore <span class="token function">clear</span>FINE: paho1622771147525800: <span class="token operator">></span> <span class="token number">0</span> tokensSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore <span class="token function">clear</span>FINE: paho1622771147525800: <span class="token operator">></span> <span class="token number">0</span> tokensSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stopping senderSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stopping senderSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState notifyQueueLockFINE: paho1622771147525800: notifying queueLock holdersSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState notifyQueueLockFINE: paho1622771147525800: notifying queueLock holdersSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: new work or <span class="token function">ping</span> arrived Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.TimerPingSender stopFINE: paho1622771147525800: stopSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: new work or <span class="token function">ping</span> arrived Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: no outstanding flows and not connectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: no outstanding flows and not connectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.TimerPingSender stopFINE: paho1622771147525800: stopSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: get message returned null, stopping<span class="token punctuation">&#125;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: get message returned null, stopping<span class="token punctuation">&#125;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTEDSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTEDSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback connectionLostFINE: paho1622771147525800: call connectionLostSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback connectionLostFINE: paho1622771147525800: call connectionLostConnection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionat org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run<span class="token punctuation">(</span>CommsReceiver.java:197<span class="token punctuation">)</span>at java.base/java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:829<span class="token punctuation">)</span>Caused by: java.io.EOFExceptionat java.base/java.io.DataInputStream.readByte<span class="token punctuation">(</span>DataInputStream.java:272<span class="token punctuation">)</span>at org.eclipse.paho.client.mqttv3.internal.wire.MqttInputStream.readMqttWireMessage<span class="token punctuation">(</span>MqttInputStream.java:92<span class="token punctuation">)</span>at org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run<span class="token punctuation">(</span>CommsReceiver.java:137<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">1</span> <span class="token function">more</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: <span class="token operator">&lt;</span></code></pre></details><h2 id="이슈-링크"><a href="#이슈-링크" class="headerlink" title="이슈 링크"></a>이슈 링크</h2><ul><li><a href="https://github.com/eclipse/mosquitto/issues/2631">Websocket connection lost with paho java client #2631</a></li><li><a href="https://github.com/eclipse/paho.mqtt.java/issues/960">Websocket connection lost with mosquitto 1.6.15 and 2.0.11+ #960</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Connection&lt;/span&gt; lost &lt;span clas</summary>
      
    
    
    
    
    <category term="Mosquitto" scheme="https://kdevkr.github.io/tags/Mosquitto/"/>
    
    <category term="Paho Java Client" scheme="https://kdevkr.github.io/tags/Paho-Java-Client/"/>
    
  </entry>
  
  <entry>
    <title>Spring JDBC</title>
    <link href="https://kdevkr.github.io/spring-jdbc/"/>
    <id>https://kdevkr.github.io/spring-jdbc/</id>
    <published>2022-09-05T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Security OAuth2 학습을 위한 샘플 프로젝트를 만들면서 사용하게될 각 모듈에서 필요한 데이터베이스 스키마를 적용하기 위해서 Spring JDBC를 사용한 부분에 대해서 정리해보고자 합니다. 일반적으로 데이터 액세스에 대해서는 Mybatis 또는 JPA 이라는 기술을 도입하는 경우가 많을텐데 스프링 JDBC 만으로도 충분히 데이터베이스 액세스가 가능하며 Spring Session 이나 Spring Security 에서도 JDBC 기반으로 관련 기능을 제공하고 있습니다.</p><h2 id="Data-Access-with-JDBC"><a href="#Data-Access-with-JDBC" class="headerlink" title="Data Access with JDBC"></a>Data Access with JDBC</h2><p>Spring JDBC는 다양한 방식으로 데이터베이스에 대한 액세스 방법을 제공하며 스프링 세션이나 스프링 시큐리티와 함께 JDBC 기반으로 관련된 기능을 구현하기 위해서는 반드시 Spring JDBC가 포함되어야 합니다. 아마도 대부분의 애플리케이션에서는 관계형 데이터베이스에 대한 접근이 필수적이므로 다음과 같은 JDBC 모듈을 반드시 포함하고 있을 것 입니다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'org.springframework.boot:spring-boot-starter-jdbc'</span></code></pre><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>스프링 부트에서는 JdbcTemplateAutoConfiguration를 통해서 JdbcTemplate와 NamedParameterJdbcTemplate를 자동으로 빈으로 구성하는 것을 확인할 수 있는데요. JdbcTemplate 뿐만 아니라 NamedParameterJdbcTemplate를 함께 구성하는 이유는 Spring Data JDBC와 같은 모듈에서 내부적으로 사용하도록 되어있기 때문이라고 생각됩니다.</p><h3 id="JdbcUserDetailsManager"><a href="#JdbcUserDetailsManager" class="headerlink" title="JdbcUserDetailsManager"></a>JdbcUserDetailsManager</h3><p>스프링 시큐리티에서 JdbcUserDetailsManager는 JDBC 기반의 사용자 인증 구현을 위해서 JdbcDaoSupport를 확장하며 내부적으로 JdbcTemplate과 RowMapper를 사용하는 것으로 작성되어 있습니다. </p><h3 id="JdbcIndexedSessionRepository"><a href="#JdbcIndexedSessionRepository" class="headerlink" title="JdbcIndexedSessionRepository"></a>JdbcIndexedSessionRepository</h3><p>스프링 세션에서의 JdbcHttpSessionConfiguration는 JdbcTemplate를 통해서 JdbcIndexedSessionRepository를 빈으로 등록하게 됩니다. JdbcIndexedSessionRepository는 내부적으로 JdbcOperations를 사용하여 SQL를 수행하는데 세션에 대한 애트리뷰트를 저장할때 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#jdbc-advanced-jdbc">JDBC Batch Operations</a>를 활용하는 것으로 보입니다.</p><blockquote><p>JdbcTemplate는 JdbcOperatrions 구현체입니다.</p></blockquote><h2 id="Stored-Function-with-JDBC"><a href="#Stored-Function-with-JDBC" class="headerlink" title="Stored Function with JDBC"></a>Stored Function with JDBC</h2><p>현재 조직에서는 일반적으로 사용되는 Mybatis 또는 JPA를 도입하지 않고 스토어드 함수(프로시저와 비슷한)를 작성해놓고 스프링 JDBC를 통해서 호출하는 방식으로 구현하고 있습니다. 레거시 시스템을 경험하지 않았거나 Mybatis 또는 JPA라는 기술만을 접한 개발자들은 궁금할 수 있는 부분이기도 할 것 같습니다. 우선 아래와 같은 함수가 PostgreSQL 데이터베이스에 정의되어있다고 가정하겠습니다.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> users$find_by_username<span class="token punctuation">(</span>v_username <span class="token keyword">VARCHAR</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> REFCURSOR <span class="token keyword">AS</span>$$<span class="token keyword">DECLARE</span>    rtn_cursor REFCURSOR :<span class="token operator">=</span> <span class="token string">'rtn_cursor'</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    <span class="token keyword">OPEN</span> rtn_cursor <span class="token keyword">FOR</span>        <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> enabled <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">=</span> v_username<span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> rtn_cursor<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>$$ <span class="token keyword">LANGUAGE</span> plpgsql<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">select</span> users$find_by_username<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">FETCH</span> <span class="token keyword">ALL</span> <span class="token operator">IN</span> <span class="token string">"rtn_cursor"</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><h3 id="StoredProcedure"><a href="#StoredProcedure" class="headerlink" title="StoredProcedure"></a>StoredProcedure</h3><p>스프링 JDBC의 GenericStoredProcedure는 RDBMS에서 지원하는 스토어드 프로시저를 호출할 수 있도록 구현된 클래스입니다. 아래와 같이 스토어드 함수명을 지정하여 파라미터와 함께 전달하면 프로시저 호출 결과를 가져올 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using GenericStoredProcedure"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithStoredProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setResultsMapCaseInsensitive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">GenericStoredProcedure</span> storedProcedure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericStoredProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">declareParameter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlOutParameter</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>REF_CURSOR<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">declareParameter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> inParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> results <span class="token operator">=</span> storedProcedure<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>inParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> cursors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> cursor <span class="token operator">:</span> cursors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="SimpleJdbcXXXX"><a href="#SimpleJdbcXXXX" class="headerlink" title="SimpleJdbcXXXX"></a>SimpleJdbcXXXX</h3><p>SimpleJdbcInsert와 SimpleJdbcCall은 JdbcTemplate를 사용하여 몇가지 상황에 대해 효율적으로 처리할 수 있는 방법을 제공합니다. 예를 들어, 한번에 많은 생성 작업이 필요한 경우에 SimpleJdbcInsert를 사용할 수 있고 스토어드 프로시저(Stored Procedure) 또는 스토어드 함수(Stored Function)를 호출하고자 하는 경우에도 SimpleJdbcCall을 사용할 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using SimpleJdbcCall"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithSimpleJdbcCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    <span class="token class-name">MapSqlParameterSource</span> sqlParameterSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapSqlParameterSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlParameterSource<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJdbcCall</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withFunctionName</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withoutProcedureColumnMetaDataAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">declareParameters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">returningResultSet</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlParameterSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>GenericStoredProcedure와 비교해서 조금은 코드가 간결함을 확인할 수 있습니다.</p></blockquote><h3 id="JdbcTemplate-1"><a href="#JdbcTemplate-1" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>스프링 JDBC에서 제공하는 클래스가 아니더라도 스토어드 프로시저를 호출할 수 있습니다. JdbcTemplate에서 커넥션을 가져온 후 prepareCall을 사용해서 직접 호출한 결과를 RowMapper로 변환할 수 있습니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using connection"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CallableStatement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&#123;call %s(?)&#125;"</span><span class="token punctuation">,</span> functionName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PgResultSet</span> pgResultSet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PgResultSet</span><span class="token punctuation">)</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">RowMapperResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowMapperResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> extractor<span class="token punctuation">.</span><span class="token function">extractData</span><span class="token punctuation">(</span>pgResultSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>DataClassRowMapper 또는 BeanPropertyRowMapper를 사용해서 더 범용적인 코드를 작성할 수도 있습니다.</p></blockquote><p><a href="https://qr.ae/pvkBiH">저장 프로시저를 사용하는 것에 대한 장점</a>도 존재하기 때문에 애플리케이션에서 저장 프로시저를 호출할 수 있는 방법을 알고 있는 것도 중요합니다. Spring JDBC에 대해서 다루기 때문에 소개하지는 않았지만 JPA 기술 스펙에서도 NamedStoredProcedureQuery와 같이 프로시저를 호출할 수 있도록 지원하고 있습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#jdbc">Spring Docs - Data Access with JDBC</a></li><li><a href="https://www.baeldung.com/jdbc-batch-processing">Batch Processing in JDBC</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Security OAuth2 학습을 위한 샘플 프로젝트를 만들면서 사용하게될 각 모듈에서 필요한 데이터베이스 스키마를 적용하기 위해서 Spring JDBC를 사용한 부분에 대해서 정리해보고자 합니다. 일반적으로 데이터 액세스에 대해서</summary>
      
    
    
    
    
    <category term="JDBC" scheme="https://kdevkr.github.io/tags/JDBC/"/>
    
    <category term="RowMapper" scheme="https://kdevkr.github.io/tags/RowMapper/"/>
    
  </entry>
  
  <entry>
    <title>모드버스 TCP</title>
    <link href="https://kdevkr.github.io/modbus-tcp/"/>
    <id>https://kdevkr.github.io/modbus-tcp/</id>
    <published>2022-09-04T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>대부분의 IoT 디바이스의 통신에는 MQTT 메시징 프로토콜을 사용하고 있지만 에너지 분야 산업에서 사용하는 필드버스들에서는 Modbus 라는 통신 프로토콜을 사용하여 장비 간 제어를 수행하는데 사용되고 있습니다. 에너지 분야에서 사용하기 위한 시스템인 만큼 각종 산업 장비들이 보유하고 있는 데이터를 시스템으로 수집하기 위해서는 모드버스 TCP 프로토콜을 통해 데이터를 가져와서 더 높은 레벨의 통신 프로토콜인 REST API 또는 MQTT를 사용해야 합니다.</p><h2 id="Modbus-TCP-x2F-IP"><a href="#Modbus-TCP-x2F-IP" class="headerlink" title="Modbus TCP&#x2F;IP"></a>Modbus TCP&#x2F;IP</h2><p>모드버스 프로토콜은 일반적으로 자동화 설비 산업에서 사용되므로 웹 개발자들이 경험할 수 있는 범용적인 통신 프로토콜은 아닙니다. 모드버스 TCP에서는 MBAP(MODBUS Application Protocol) 헤더와 Function Code 그리고 데이터 프레임을 하나로 전달하게 되며 일반적인 소켓 통신과 동일합니다. </p><p>모드버스 프로토콜은 마스터&#x2F;슬레이브 구조이므로 마스터는 슬레이브에서 정의한 메모리 맵 정보를 토대로 데이터를 읽거나 원하는 명령을 수행하도록 메모리의 데이터를 변경할 수 있습니다. 미리 정의된 몇가지의 기능 코드 중에서 03(0x03, Read Holding Registers)과 16(0x10, Wrtie Multiple Registers)를 주로 사용하는 편입니다. </p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'com.ghgande:j2mod:3.1.1'</span></code></pre><p><a href="https://github.com/steveohara/j2mod">steveohara&#x2F;j2mod</a>는 모드버스 TCP에 대해서 마스터와 슬레이브 구성을 모두 지원하는 자바 라이브러리이며 모드버스 <a href="https://github.com/steveohara/j2mod/tree/master/src/test/java/com/ghgande/j2mod/modbus">테스트 예제</a>를 제공하므로 모드버스 통신을 구현하는 것은 그다지 어렵지 않을 것입니다.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>다음은 간단하게 슬레이브에 모드버스 맵을 이미지로 정의하고 마스터에서 정의된 모드버스 맵에 대해서 읽어보는 테스트 예시입니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModbusTCP</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TCP_UNIT_ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Define slave memory map.</span>        <span class="token class-name">SimpleProcessImage</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleProcessImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObservableRegister</span> register <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObservableRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        register<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function">addRegister</span><span class="token punctuation">(</span>register<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Run slave.</span>        <span class="token class-name">ModbusSlave</span> tcpSlave <span class="token operator">=</span> <span class="token class-name">ModbusSlaveFactory</span><span class="token punctuation">.</span><span class="token function">createTCPSlave</span><span class="token punctuation">(</span><span class="token number">502</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tcpSlave<span class="token punctuation">.</span><span class="token function">addProcessImage</span><span class="token punctuation">(</span>TCP_UNIT_ID<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>        tcpSlave<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Run master and connect to slave</span>        <span class="token class-name">ModbusTCPMaster</span> modbusTCPMaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModbusTCPMaster</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">502</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modbusTCPMaster<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modbusTCPMaster<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Register</span><span class="token punctuation">[</span><span class="token punctuation">]</span> registers <span class="token operator">=</span> modbusTCPMaster<span class="token punctuation">.</span><span class="token function">readMultipleRegisters</span><span class="token punctuation">(</span>TCP_UNIT_ID<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"registers, &#123;&#125;"</span><span class="token punctuation">,</span> registers<span class="token punctuation">)</span><span class="token punctuation">;</span>            modbusTCPMaster<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Closes all slaves</span>        <span class="token class-name">ModbusSlaveFactory</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>현재 시스템에서는 AWS IoT 및 SQS 그리고 OpenAPI를 통하여 데이터를 수집할 수 있도록 제공하고 있습니다. 모드버스 통신 프로토콜을 통해 데이터를 수집할 수 있는 애플리케이션을 담당하고 있지는 않으나 간단하게 정리해보았습니다. </p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf">MODBUS Messaging on TCP&#x2F;IP Implementation Guide V1.0b</a></li><li><a href="https://www.youtube.com/watch?v=eb8iophBMLs">모드버스 프로토콜 11부 - 모드버스 TCP(더 넓은 세상으로)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;대부분의 IoT 디바이스의 통신에는 MQTT 메시징 프로토콜을 사용하고 있지만 에너지 분야 산업에서 사용하는 필드버스들에서는 Modbus 라는 통신 프로토콜을 사용하여 장비 간 제어를 수행하는데 사용되고 있습니다. 에너지 분야에서 사용하기 위한 </summary>
      
    
    
    
    
    <category term="Modbus" scheme="https://kdevkr.github.io/tags/Modbus/"/>
    
    <category term="TCP/IP" scheme="https://kdevkr.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>유닉스 타임스탬프와 시간 정밀도</title>
    <link href="https://kdevkr.github.io/unix-timestamp/"/>
    <id>https://kdevkr.github.io/unix-timestamp/</id>
    <published>2022-09-01T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>각 나라에서 사용하는 표준 시간은 다르고 동일한 나라에서도 여러가지 시간 기준이 존재합니다. 그러나, 개발자들은 사람마다 다른 시간을 그대로 사용할 수 없으며 전세계적으로 사용되는 표준 시간으로 정의된 것을 따라야합니다. 세계협정시라고 부르는 UTC는 1970년 1월 1일을 기준으로 산정한 시간으로 보통 유닉스 시간 또는 유닉스 타임스탬프라고 합니다.</p><h3 id="유닉스-시간"><a href="#유닉스-시간" class="headerlink" title="유닉스 시간"></a>유닉스 시간</h3><p>기본적으로 타임스탬프에 대해서 초 단위로 세어지는 정수로 표현한 값을 유닉스 시간(Unix Epoch) 또는 유닉스 타임스탬프라고 합니다. PostgreSQL 에서는 타임스탬프 유형의 컬럼에 대해서 EPOCH 키워드를 통해서 초 단위로 환산된 유닉스 시간을 추출할 수 있도록 지원합니다.</p><ul><li><a href="https://www.epoch101.com/#epochConvertToReadable-Container">Convert Epoch&#x2F;Unix Timestamp</a></li><li><a href="https://it-tools.tech/date-converter">Date-time converter</a></li></ul><h3 id="타임스탬프-정밀도"><a href="#타임스탬프-정밀도" class="headerlink" title="타임스탬프 정밀도"></a>타임스탬프 정밀도</h3><p>유닉스 시간이 정의되고 시간이 흘러 현재는 타임스탬프가 초 단위가 아닌 밀리고 그리고 심지어는 나노초 까지의 단위로 타임스탬프 정밀도를 지원하게 됩니다. 사용하는 언어 또는 외부 솔루션에 따라서 정밀도 표현 지원이 다르며 심지어 시계열 데이터베이스인 KDB+ 에서의 <a href="https://code.kx.com/q4m3/2_Basic_Data_Types_Atoms/#25-temporal-data">시간 유형</a>은 1970년 1월 1일이 아닌 2000년 1월 1일을 기준의 나노초 정밀도를 가지는 타임스탬프를 지원합니다.</p><pre class="language-q" data-language="q"><code class="language-q"><span class="token datetime number">2000.01.01</span><span class="token verb operator">=</span><span class="token number">0</span><span class="token number">1b</span><span class="token punctuation">.</span>z<span class="token punctuation">.</span>p<span class="token datetime number">2022.09.01</span>D<span class="token datetime number">21:38:52.940</span><span class="token number">328000</span></code></pre><p>타임스탬프를 스칼라 실수로 변환해보면 나노초 단위로 세어진 정수값으로 표현되므로 다른 시스템과 연계하기 위해 1970년 1월 1일 부터의 밀리초 단위로 세어지는 정수값으로 환산할 수 있습니다. (1 나노초는 10^6 밀리초 입니다.)</p><pre class="language-q" data-language="q"><code class="language-q"><span class="token keyword">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token symbol">`long</span><span class="token verb operator">$</span><span class="token datetime number">2022.09.01</span>D<span class="token datetime number">21:38:52.940</span><span class="token number">328000</span><span class="token punctuation">)</span><span class="token verb operator">-</span><span class="token symbol">`long</span><span class="token verb operator">$</span><span class="token datetime number">1970.01.01</span>D<span class="token datetime number">00:00</span><span class="token punctuation">)</span><span class="token verb operator">%</span><span class="token number">1e6</span><span class="token number">1662068332940</span></code></pre><p>현재 조직에서는 초 단위의 유닉스 시간이 아닌 밀리초로 환산한 정수값을 토대로 타임스탬프에 대한 데이터를 시스템 간 전달하고 있습니다. 대부분의 시스템은 여러가지 언어로 작성된 애플리케이션과 외부 솔루션과의 연계를 수행하며 동작하게 되므로 각 시스템에서 지원하는 타임스탬프의 정밀도 표현 차이로 인해서 약간의 차이가 발생할 수 있음을 고려해야할 수 있습니다.</p><h3 id="타임스탬프-표현"><a href="#타임스탬프-표현" class="headerlink" title="타임스탬프 표현"></a>타임스탬프 표현</h3><p>서버와 클라이언트 간 요청과 응답 시 전달되는 페이로드에 포함되는 타임스탬프는 어떻게 표현할 수 있을까요? 일반적으로 시스템 또는 개발자의 선호도에 따라서 UTC 기준의 Epoch라는 숫자 형태 또는 RFC 3339의 ISO 8601 형식으로 문자열 형태로 표현하게 됩니다. <a href="https://r.bluethl.net/how-to-design-better-apis#heading-2-use-iso-8601httpsenwikipediaorgwikiiso8601-utc-dates">더 나은 API 설계 시에는 ISO 8601 UTC</a>를 사용해야한다는 관점이 있지만 간을 문자열로 표현하는 것에는 <a href="https://engineering.fb.com/2022/07/25/production-engineering/its-time-to-leave-the-leap-second-in-the-past/">윤초 문제</a>가 포함되어있기 때문에 윤초를 무시한 밀리초 단위의 유닉스 시간을 사용할때에도 있습니다. 예를 들어, 유튜브의 경우 사용자의 이벤트 트래킹을 위해 로그 이벤트를 전송할 때에 밀리초 단위의 정수값을 전달하고 있습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;각 나라에서 사용하는 표준 시간은 다르고 동일한 나라에서도 여러가지 시간 기준이 존재합니다. 그러나, 개발자들은 사람마다 다른 시간을 그대로 사용할 수 없으며 전세계적으로 사용되는 표준 시간으로 정의된 것을 따라야합니다. 세계협정시라고 부르는 U</summary>
      
    
    
    
    
    <category term="Unix Timestamp" scheme="https://kdevkr.github.io/tags/Unix-Timestamp/"/>
    
    <category term="Unix Epoch" scheme="https://kdevkr.github.io/tags/Unix-Epoch/"/>
    
  </entry>
  
  <entry>
    <title>엘라스틱서치 인덱스</title>
    <link href="https://kdevkr.github.io/elasticsearch-indices/"/>
    <id>https://kdevkr.github.io/elasticsearch-indices/</id>
    <published>2022-08-21T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.886Z</updated>
    
    <content type="html"><![CDATA[<p>현재 조직의 주요 솔루션은 엘라스틱서치 1.6을 기반으로 동작하며 여러개의 노드로 구성되는 엘라스틱서치 클러스터로 운용하고 있습니다. 그러나, 제가 담당하여 개발중인 신규 시스템은 시계열 데이터를 저장하기 위한 시계열 데이터베이스를 사용중이므로 엘라스틱서치에 시계열 데이터와 같은 대규모 데이터 및 안전하게 운용되어야하는 가용성이 요구되지 않으므로 단일 노드 클러스터로 사용하고 있습니다.</p><p>싱글 노드 클러스터로 운용되는 엘라스틱서치에는 시스템에서 발생하는 특정 정보에 대한 로그 데이터를 개별 단일 인덱스에 저장하고 있으며 엘라스틱서치로부터 정해진 인덱스에 저장되는 도큐먼트를 조회하기 때문에 엘라스틱서치가 지원하는 여러가지 쿼리를 활용할 경험은 많지 않은 것은 아쉬운 부분이긴 합니다.</p><blockquote><p>시계열 데이터는 엘라스틱서치가 아닌 별도의 <a href="https://kx.com/developers/">시계열 데이터베이스</a>에 저장하고 통계 정보를 쿼리하고 있습니다.</p></blockquote><h2 id="인덱스-관련-트러블슈팅"><a href="#인덱스-관련-트러블슈팅" class="headerlink" title="인덱스 관련 트러블슈팅"></a>인덱스 관련 트러블슈팅</h2><p>대규모 노드로 구성된 엘라스틱서치 클러스터를 운용하지 않더라도 인덱스와 관련된 여러가지 문제들을 간간히 경험해보긴 했습니다. 오히려 엘라스틱서치가 고 가용성으로 운영되지 않아서 발생하는 문제로 봐야할 것 같습니다. </p><h3 id="동적-매핑-필드-제한"><a href="#동적-매핑-필드-제한" class="headerlink" title="동적 매핑 필드 제한"></a>동적 매핑 필드 제한</h3><p>조직의 기존 솔루션이 엘라스틱서치를 주요 데이터베이스로 활용했더라도 주 개발자들이 현재 개발중인 시스템에 참여한 것은 아니고 저는 조직의 신입일 때 참여했으므로 엘라스틱서치에 대해 대략적인 개념조차 모르던 시기였습니다. 시스템의 요구 사항과 설계가 명확하지 않았기에 엘라스틱서치에서 기본적으로 제공하는 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#mapping-dynamic">동적 필드 매핑</a>을 통해 개발자가 별도로 관리하지 않아도 도큐먼트에 대한 각 필드들을 자동으로 매핑하는 상태로 시스템에서 발생하는 일부 정보의 변화들을 로그로 저장하였습니다.</p><blockquote><p>limit of total fields 1000 has been exceeded</p></blockquote><p>위 문제는 동적 필드 매핑으로 만들어지는 인덱스에 여러가지 필드가 저장되어질때 확인할 수 있는 오류입니다. 엘라스틱서치에 저장되도록한 로그 중에서 다양하게 필드가 변경될 수 있는 메타데이터 오브젝트가 포함되었고 점점 다양한 키 값이 추가되면서 엘라스틱서치는 동적 매핑에 의해 메타데이터 키에 대한 필드 매핑을 추가하여 매핑 정보가 점차 늘어나서 제한량까지 넘어서게 되는 상황이 발생한 것 입니다.</p><p>이 문제에 대해서는 임시적으로 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#mapping-limit-settings">인덱스에 대해 필드 제한 수를 조정</a>하여 조치할 수 있으나 메타데이터 오브젝트가 다양하게 추가되면 다시 발생할 수 있으므로 근본적인 해결책은 아닙니다. 그래서 해당 현상이 발견되는 인덱스에 대해서는 동적 매핑에 의해 추가된 매핑 정보를 확인하여 계속해서 매핑 정보가 만들어질 수 있는 필드를 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/enabled.html">단순히 저장만하도록</a> 매핑 정보를 부여하고 재 인덱스를 수행해야만 했습니다.</p><h3 id="도큐먼트-삭제"><a href="#도큐먼트-삭제" class="headerlink" title="도큐먼트 삭제"></a>도큐먼트 삭제</h3><p>단일 노드의 엘라스틱서치 클러스터이므로 단일 인덱스에 너무 많은 도큐먼트가 저장되면 성능에 문제가 될 수 있습니다. 심지어는 엘라스틱서치 7부터 인덱스에 대한 프라이머리 샤드의 기본값이 1 이었던 부분으로 인하여 인덱스의 하나의 샤드가 너무 많은 도큐먼트를 저장하고 있는 구조가 되어버렸습니다.</p><p>특정 인덱스에 저장되는 도큐먼트가 너무 많아졌고 심지어는 오래된 도큐먼트가 불필요하게 남아있었기에 일정 기간이 지난 도큐먼트는 지우도록 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">_delete_by_query</a>를 사용해서 스케줄에 의해 엘라스틱서치 클러스터에 지우도록 요청해두었습니다. 그러나, <a href="https://ridicorp.com/story/index-aliases/">Elasticsearch의 색인 별명 활용 팁</a>에 나와있는 것처럼 엘라스틱서치 클러스터에서는 도큐먼트를 실제로 삭제하는 것은 아닌 부분으로 인하여 오히려 엘라스틱서치 클러스터의 인덱스의 용량이 일시적으로 늘어나게 되는 문제를 가져가게 됩니다. </p><blockquote><p>디스크 볼륨을 증설할 수 있다고 해도 서버 용량에 민감할 수 밖에 없습니다.</p></blockquote><h3 id="일자별-인덱스-조회"><a href="#일자별-인덱스-조회" class="headerlink" title="일자별 인덱스 조회"></a>일자별 인덱스 조회</h3><p>도큐먼트 삭제가 용이하지 않은 단일 인덱스의 문제를 해소하기 위해서 특정 로그에 대해서는 일자별로 저장되도록 적용해야했습니다. 단일 인덱스로 저장하던걸 일자별로 저장하는 것은 인덱스 명에 저장되는 시점의 날짜 포맷(yyyyMMdd)을 추가하면 되기에 어려움은 없었습니다. 해당 작업에 대해 검토하던 중 인덱스에 대한 조회 기능에 일부 사이드 이펙트가 발생할 수 있음을 확인하였습니다.</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API</a>에 대해서는 인덱스 패턴에 대해서 조회할 수 있도록 지원합니다만, 특정 도큐먼트에 대한 아이디를 기준으로 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#docs-get-api-request">Get API</a>를 사용하기 위해서는 인덱스 명을 알아야만 합니다. 심지어는 여러개의 인덱스에 대해서 조회할 수 있는 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Mget API</a>도 조회하고자 하는 인덱스들의 이름을 나열해야했기에 인덱스 패턴에 대해 인덱스 목록을 조회하고 여러개의 인덱스에 걸쳐 병렬 조회할 수 있도록 아래와 같이 변경해야 했습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// NOTE: 인덱스 패턴에 의한 실제 인덱스 목록 조회</span><span class="token class-name">GetIndexRequest</span> getIndexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"oauth_log*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GetIndexResponse</span> getIndexResponse <span class="token operator">=</span> highLevelClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getIndexRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indices <span class="token operator">=</span> getIndexResponse<span class="token punctuation">.</span><span class="token function">getIndices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NOTE: 여러개의 인덱스에 걸쳐 병렬 조회</span><span class="token class-name">MultiGetRequest</span> multiGetRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiGetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> index <span class="token operator">:</span> indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    multiGetRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">"c70e49fa-d0f4-4278-a271-a46f688349f6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MultiGetResponse</span> multiGetResponse <span class="token operator">=</span> highLevelClient<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span>multiGetRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MultiGetItemResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responses <span class="token operator">=</span> multiGetResponse<span class="token punctuation">.</span><span class="token function">getResponses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultiGetItemResponse</span> response <span class="token operator">:</span> responses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> index <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; in &#123;&#125;, &#123;&#125;"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> index<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>일자별 인덱스에 있는 도큐먼트의 아이디가 충돌하지 않는다는 것을 보장할 때를 기준으로 합니다.</p></blockquote><p>최근 인덱스와 관련된 작업을 하고 있어서 여태까지 경험했던 문제에 대해서 작성해보았습니다. 인덱스 관리와 관련해서 사용중이던 엘라스틱서치 버전을 7.3.2에서 7.12.1로 변경하는 작업을 진행하고 있으며 이와 더불어 엘라스틱서치와 함께 키바나를 활용해서 더 효율적으로 인덱스를 관리할 수 있는 방안에 대해서 공부해보고 있습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 조직의 주요 솔루션은 엘라스틱서치 1.6을 기반으로 동작하며 여러개의 노드로 구성되는 엘라스틱서치 클러스터로 운용하고 있습니다. 그러나, 제가 담당하여 개발중인 신규 시스템은 시계열 데이터를 저장하기 위한 시계열 데이터베이스를 사용중이므로 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>키바나에서 엘라스틱서치 클러스터로 연결할 수 없음</title>
    <link href="https://kdevkr.github.io/kibana-cannot-connect-elasticsearch/"/>
    <id>https://kdevkr.github.io/kibana-cannot-connect-elasticsearch/</id>
    <published>2022-08-18T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.886Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/kibana-cannot-connect-elasticsearch/01.png"></p><p>AWS EC2 인스턴스에 설치된 엘라스틱서치에 대해 키바나를 설치하고 실행하니 위와 같이 엘라스틱서치 클러스터에 연결할 수 없다는 화면이 노출되었습니다. 회사에서 이 문제에 대해 머리를 싸매면서 여러가지를 시도해보았으나 해결되지 않았고 집에와서 쉬는 김에 이와 관련된 정보를 검색해보면서 여러가지 확인 끝에 원인을 찾아내어 이 글을 작성합니다.</p><h2 id="키바나-응답-페이로드"><a href="#키바나-응답-페이로드" class="headerlink" title="키바나 응답 페이로드"></a>키바나 응답 페이로드</h2><blockquote><p>This Kibana installation has strict security requirements enabled that your current browser does not meet.</p></blockquote><p>먼저, 웹 페이지 화면에서는 엘라스틱서치 클러스터에 연결할 수 없다는 내용의 메시지였지만 실제로 키바나로부터 받은 응답 페이로드를 확인해보니 <a href="https://www.elastic.co/guide/en/kibana/current/Security-production-considerations.html#csp-strict-mode">Content Security Policy</a> 관련된 오류 내용이었습니다. 그리고 크롬 개발자 도구 콘솔에는 아래와 같은 오류 로그도 표시됨을 확인했습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">Refused to execute inline script because it violates the following Content Security Policy directive: <span class="token string">"script-src 'unsafe-eval' 'nonce-LQ+1u6/j7+lb3KNy'"</span><span class="token builtin class-name">.</span>Either the <span class="token string">'unsafe-inline'</span> keyword, a <span class="token builtin class-name">hash</span> <span class="token punctuation">(</span><span class="token string">'sha256-SHHSeLc0bp6xt4BoVVyUy+3IbVqp3ujLaR+s+kSP5UI='</span><span class="token punctuation">)</span>, or a nonce <span class="token punctuation">(</span><span class="token string">'nonce-...'</span><span class="token punctuation">)</span> is required to <span class="token builtin class-name">enable</span> inline execution.  </code></pre><h3 id="CSP-비활성화-시도"><a href="#CSP-비활성화-시도" class="headerlink" title="CSP 비활성화 시도"></a>CSP 비활성화 시도</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">csp.strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>엘라스틱서치 클러스터에 연결할 수 없는 사유인지 다른 문제인지를 판단할 수 없어서 CSP를 비활성화 해보았습니다. 그러나, CSP 비활성화 후에도 키바나에서는 동일하게 엘라스틱서치 클러스터에 연결할 수 없다고 표시되었기에 이로 인한 문제는 아님을 확인할 수 있었습니다.</p><h2 id="키바나-로그"><a href="#키바나-로그" class="headerlink" title="키바나 로그"></a>키바나 로그</h2><p>사실 키바나에서 엘라스틱서치 클러스터에 연결할 수 없다는 메시지를 보고나서는 엘라스틱서치와 키바나의 설정 파일의 문제가 아닐까 여러가지 살펴보았지만 다른 환경에서 사용중인 설정과 다를바가 없었기에 키바나 로그를 확인해야 했습니다.</p><h3 id="Chromium-with-headless-shell"><a href="#Chromium-with-headless-shell" class="headerlink" title="Chromium with headless_shell"></a>Chromium with headless_shell</h3><blockquote><p>Reporting plugin self-check generated a warning: Error: Could not close browser client handle</p></blockquote><p>가장 먼저 의심스러운 위 로그에 대해 검색해보니 <a href="https://github.com/elastic/kibana/issues/53829">kibana&#x2F;issues&#x2F;53829</a>에서 샌드박스 옵션을 설정한 것을 보고 시도해보았습니다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">xpack.reporting.capture.browser.chromium.disableSandbox</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>위 조치와 함께 EC2에 노드와 크로미움 패키지를 직접 설치까지 해보았지만 위 문제가 해소되지 않았습니다.</p><h3 id="플러그인-로그"><a href="#플러그인-로그" class="headerlink" title="플러그인 로그"></a>플러그인 로그</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">[</span>plugin:xpack_main@7.3.2<span class="token punctuation">]</span> Status changed from yellow to red - <span class="token punctuation">[</span>data<span class="token punctuation">]</span> Elasticsearch cluster did not respond with license information.</code></pre><p>집에와서 키바나 로그를 좀 더 자세히 살펴보니 위와 같은 오류 로그가 발생하는 것을 확인하였습니다. 사실 회사에서는 플러그인 오류이므로 키바나에서 엘라스틱서치 클러스터에 연결할 수 없는 사유와는 상관없다고 판단했었습니다. 왜냐하면 엘라스틱서치에 키바나 관련 인덱스까지는 만들어지므로 엘라스틱서치 클러스터와 통신이 되는 상황이라고 생각할 수 밖에 없었을테니까요.</p><p>아무튼 위 로그에 대해서 검색해보니 <a href="https://github.com/elastic/kibana/issues/36079">kibana&#x2F;issues&#x2F;36079</a>에 라이센스 정보를 확인하는 댓글이 눈에 들어왔고 라이센스 정보를 확인해보았습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ec2-user ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> http://localhost:9200/_xpack/license?pretty<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><blockquote><p>사실 라이센스가 없다고 생각하지는 않았고 혹시나 트라이얼 라이센스인데 만료되어서 그런 것인가라고 생각되 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/license-settings.html">License Settings</a>에 나와있는대로 베이직 라이센스 유형을 지정하고 클러스터를 다시 실행하였지만 증상을 동일했습니다. </p></blockquote><p>그러나, 정말로 엘라스틱서치에는 라이센스 정보가 없었고 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/start-basic.html">Start basic API</a>를 통해 베이직 라이센스를 시작할 수 있다고 하여 아래와 같이 라이센스를 추가하였습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ec2-user ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> -X POST http://localhost:9200/_license/start_basic?pretty<span class="token punctuation">&#123;</span>  <span class="token string">"acknowledged"</span> <span class="token builtin class-name">:</span> true,  <span class="token string">"basic_was_started"</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>ec2-user ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> http://localhost:9200/_xpack/license?pretty<span class="token punctuation">&#123;</span>  <span class="token string">"license"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"status"</span> <span class="token builtin class-name">:</span> <span class="token string">"active"</span>,    <span class="token string">"uid"</span> <span class="token builtin class-name">:</span> <span class="token string">"fb6a45f5-4f26-45fe-9889-2380b9ec8801"</span>,    <span class="token string">"type"</span> <span class="token builtin class-name">:</span> <span class="token string">"basic"</span>,    <span class="token string">"issue_date"</span> <span class="token builtin class-name">:</span> <span class="token string">"2022-08-18T14:51:26.602Z"</span>,    <span class="token string">"issue_date_in_millis"</span> <span class="token builtin class-name">:</span> <span class="token number">1660834286602</span>,    <span class="token string">"max_nodes"</span> <span class="token builtin class-name">:</span> <span class="token number">1000</span>,    <span class="token string">"issued_to"</span> <span class="token builtin class-name">:</span> <span class="token string">"cluster"</span>,    <span class="token string">"issuer"</span> <span class="token builtin class-name">:</span> <span class="token string">"elasticsearch"</span>,    <span class="token string">"start_date_in_millis"</span> <span class="token builtin class-name">:</span> -1  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img data-src="/images/posts/kibana-cannot-connect-elasticsearch/02.png"></p><p>엘라스틱서치 클러스터에 베이직 라이센스 정보가 있으므로 키바나에서는 더이상 플러그인 오류가 발생하지 않았으며 키바나 주소로 다시 접속하니 엘라스틱서치 클러스터에 연결할 수 없다는 메시지는 더이상 표시되지 않았습니다. 이로써 키바나에서 엘라스틱서치 클러스터로 연결한다는 의미는 X-Pack 플러그인에 대한 라이센스 정보를 확인한다는 점으로 이해할 수 있을 것 같습니다. 엘라스틱서치 클러스터가 만료된 트라이얼 라이센스를 가지고 있더라도 키바나 또는 Start basic API를 통해 베이직 라이센스로 전환할 수 있습니다. 따라서, 키바나를 실행하고나서 엘라스틱서치 클러스터에 연결할 수 없다는 의미의 메시지를 확인하다면 클러스터에 라이센스 정보가 있는지 확인해보시기 바랍니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/kibana-cannot-connect-elasticsearch/01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS EC2 인스턴스에 설치된 엘라스틱서치에 대해 키바나를 설치하고 실행하니 위와 같이 엘라스틱서치</summary>
      
    
    
    
    
    <category term="Basic License" scheme="https://kdevkr.github.io/tags/Basic-License/"/>
    
  </entry>
  
  <entry>
    <title>Tracing Handshake Websocket With Undertow</title>
    <link href="https://kdevkr.github.io/undertow-websocket-tracing/"/>
    <id>https://kdevkr.github.io/undertow-websocket-tracing/</id>
    <published>2022-08-12T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Handshake failed due to invalid Upgrade header: null</p></blockquote><p>본 글은 위와 같은 웹 소켓 연결 시에 애플리케이션 오류 로그가 발생한 건에 대한 관련 내용을 기록하기 위한 것 입니다. 이 오류 로그는 스프링 웹 소켓 모듈에서 DefaultHandshakeHandler를 통해 핸드쉐이크를 수행하는 과정에서 올바르지 않은 웹 소켓 연결에 대해 오류 로그로 기록하도록 되어있는데 Upgrade 헤더에 올바르지 않은 값이 전달되었다는 의미입니다.</p><blockquote><p>Connection: Upgrade<br>Upgrade: websocket</p></blockquote><p>일반적으로 웹 소켓 연결은 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol upgrade mechanism</a>으로 HTTP 통신에 대해 커넥션을 전환하는 과정을 거치게 되는데 서버에서는 웹소켓 엔드포인트에 해당하는 요청에 대해서는 Upgrade 헤더를 확인하고 websocket 이 전달되었는지를 확인합니다.</p><h2 id="웹소켓-프록시"><a href="#웹소켓-프록시" class="headerlink" title="웹소켓 프록시"></a>웹소켓 프록시</h2><p>시스템이 동작하는 인프라 환경은 AWS 클라우드 서비스로 구성되어 있습니다. 일반적으로 로드밸런싱을 위해서 사용하는 <a href="https://aws.amazon.com/ko/elasticloadbalancing/features/#Product_comparisons">Elastic Load Balancing 기능</a>에 따르면 ALB, NLB 모두 웹소켓을 지원한다고 되어있으므로 웹소켓 연결에 제한적인 환경은 아닙니다. 현재 조직에서 플랫폼으로써 제공하는 환경은 EC 키 기반의 인증서의 제약사항으로 NLB를 사용해서 TCP 프록시를 수행하고 SSL 오프로드는 Nginx에서 수행한 후 애플리케이션 서버로 트래픽이 전달되는 구조입니다.</p><p>다만, 위 문제가 발생했다고 안내된 특정 고객이 직접 구성하는 환경에서는 ELB 레벨에서 SSL 오프로드를 수행한 후의 트래픽만 Nginx로 전달되어 애플리케이션 서버로 프록시되므로 약간의 요청이 전달되는 방식이 다릅니다. 따라서, ELB 레벨에서 트래픽을 전달하는 과정에서 Upgrade 헤더가 유실될 가능성도 의심해볼 수 있습니다. </p><blockquote><p>각 환경의 Nginx에는 <a href="http://nginx.org/en/docs/http/websocket.html">Upgarde 헤더에 대한 프록시 구성</a>에 따라 Upgarde 헤더 값을 애플리케이션으로 전달되도록 $http_upgrade 변수가 설정되어 있습니다.</p></blockquote><h3 id="타임아웃"><a href="#타임아웃" class="headerlink" title="타임아웃"></a>타임아웃</h3><p>일반적으로 AWS 클라우드 환경에서 ELB를 사용할 때 웹소켓 연결 문제가 발생할 수 있습니다. 이는 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes">ELB 로드밸런서 속성</a>의 idle_timeout.timeout_seconds 기본값이 60초 이어서 발생하는 부분에 대해서는 타임아웃을 90초로 설정되어 웹 소켓 연결에 대한 부분은 정상적으로 유지하는 상태입니다.</p><blockquote><p>클라이언트의 초기 연결을 제외하고는 서버에서 1분마다 스케줄에 의해 어떠한 메시지를 전달하는데 서버가 전달하는 타이밍 상 60초 이내에 전달되는 트래픽이 없다고 판단되어 연결이 해지될 수 있습니다.</p></blockquote><h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><p>일반적인 웹 요청은 HTTP2로 연결될 수 있도록 지원하고 있는데 웹소켓에 대한 연결에 대해서는 HTTP 1.1의 업그레이드 매커니즘을 사용해야 합니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">curl --include \     --no-buffer \     --http1.1 \     --location \     --header &quot;Connection: Upgrade&quot; \     --header &quot;Upgrade: websocket&quot; \     --header &quot;Host: example.com&quot; \     --header &quot;Origin: https:&#x2F;&#x2F;example.com&quot; \     --header &quot;Sec-WebSocket-Key: SGVsbG8sIHdvcmxkIQ&#x3D;&#x3D;&quot; \     --header &quot;Sec-WebSocket-Version: 13&quot; \     https:&#x2F;&#x2F;example.com&#x2F;websocket&#x2F;server&#x2F;sessionid&#x2F;websocket</code></pre><p>그런데 위 cURL 명령어에서 –http1.1 옵션을 제외하면 Upgarde 헤더에 websocket에 전달되지 않는 상황이 발생함을 확인하였습니다. 결국 일반적인 브라우저를 통한 요청이 아니라 특정 클라이언트가 직접 웹소켓 연결을 시도할 가능성도 있다는 이야기 입니다.</p><blockquote><p><a href="https://github.com/websockets/wscat">wscat</a> 또는 <a href="https://learning.postman.com/docs/sending-requests/websocket/websocket/">postman</a> 으로도 웹 소켓 연결을 시도해보았지만 정상적으로 연결됨을 확인할 수 있었습니다.</p></blockquote><h2 id="스프링-웹-소켓"><a href="#스프링-웹-소켓" class="headerlink" title="스프링 웹 소켓"></a>스프링 웹 소켓</h2><p>시스템 입장에서는 올바르지 않은 웹소켓 연결이 요청되는 부분이므로 해당 오류 로그만으로는 어떻게 요청되었는가를 검토할 수 있는 방안이 없습니다. 스프링 웹 소켓 모듈에서 요청 정보를 기록할 수 있는 방안을 찾아보도록 합시다. </p><h3 id="RequestUpgradeStrategy"><a href="#RequestUpgradeStrategy" class="headerlink" title="RequestUpgradeStrategy"></a>RequestUpgradeStrategy</h3><p>RequestUpgradeStrategy는 HTTP 요청에 대해서 웹 소켓 연결로 업그레이드하기 위한 전략이며 언더토우를 사용하고 있다면 UndertowRequestUpgradeStrategy가 사용됩니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestUpgradeStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">UndertowRequestUpgradeStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">upgradeInternal</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> selectedProtocol<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Extension</span><span class="token punctuation">></span></span> selectedExtensions<span class="token punctuation">,</span> <span class="token class-name">Endpoint</span> endpoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HandshakeFailureException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: 핸드쉐이크 과정에서 검증된 요청에 대해서 업그레이드를 수행한다.</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">upgradeInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> selectedProtocol<span class="token punctuation">,</span> selectedExtensions<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>위 처럼 업그레이드를 수행하는 과정에서 요청과 응답에 대해 부가 처리를 수행할 수 있습니다만 DefaultHandshakeHandler 라는 클래스에서 upgradeInternal 함수가 호출되는 위치를 살펴보면 웹 소켓 연결 요청에 대해서 검증을 수행하고나서 마지막에 upgradeInternal 함수가 호출되므로 본 문제가 발생했을때는 요청 정보를 파악할 수 없습니다.</p><h3 id="DefaultHandshakeHandler"><a href="#DefaultHandshakeHandler" class="headerlink" title="DefaultHandshakeHandler"></a>DefaultHandshakeHandler</h3><p>DefaultHandshakeHandler는 스프링 웹 소켓 모듈에서 기본적으로 사용하는 웹 소켓 연결을 수행하는 핸들러로 HandshakeHandler로 등록된 빈이 없다면 내부적으로 DefaultHandshakeHandler를 생성하여 사용하도록 되어있습니다. 앞서 RequestUpgradeStrategy를 이용할 수 없는 이유를 확인하기 위해 핸드쉐이크를 수행하는 코드를 살펴보도록 하겠습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHandshakeHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HandshakeHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">doHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span><span class="token class-name">WebSocketHandler</span> wsHandler<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HandshakeFailureException</span> <span class="token punctuation">&#123;</span><span class="token class-name">WebSocketHttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketHttpHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Processing request "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" with headers="</span> <span class="token operator">+</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET <span class="token operator">!=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>METHOD_NOT_ALLOWED<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAllow</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Handshake failed due to unexpected HTTP method: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"WebSocket"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">getUpgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleInvalidUpgradeHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Upgrade"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"upgrade"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleInvalidConnectHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isWebSocketVersionSupported</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleWebSocketVersionNotSupported</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidOrigin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> wsKey <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getSecWebSocketKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>wsKey <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Missing \"Sec-WebSocket-Key\" header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandshakeFailureException</span><span class="token punctuation">(</span><span class="token string">"Response update failed during upgrade to WebSocket: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> subProtocol <span class="token operator">=</span> <span class="token function">selectProtocol</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">getSecWebSocketProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wsHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketExtension</span><span class="token punctuation">></span></span> requested <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getSecWebSocketExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketExtension</span><span class="token punctuation">></span></span> supported <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestUpgradeStrategy<span class="token punctuation">.</span><span class="token function">getSupportedExtensions</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketExtension</span><span class="token punctuation">></span></span> extensions <span class="token operator">=</span> <span class="token function">filterRequestedExtensions</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> requested<span class="token punctuation">,</span> supported<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Principal</span> user <span class="token operator">=</span> <span class="token function">determineUser</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> wsHandler<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Upgrading to WebSocket, subProtocol="</span> <span class="token operator">+</span> subProtocol <span class="token operator">+</span> <span class="token string">", extensions="</span> <span class="token operator">+</span> extensions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestUpgradeStrategy<span class="token punctuation">.</span><span class="token function">upgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> subProtocol<span class="token punctuation">,</span> extensions<span class="token punctuation">,</span> user<span class="token punctuation">,</span> wsHandler<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>AbstractHandshakeHandler 클래스에 대해 로그 레벨을 Trace로 설정하면 요청 정보를 로그로 기록할 수 있지만 모든 요청에 대해서 기록하므로 문제가 발생했을때만 요청 정보를 남길 수 없습니다.</p></blockquote><h4 id="AbstractHandshakeHandler-handleInvalidUpgradeHeader"><a href="#AbstractHandshakeHandler-handleInvalidUpgradeHeader" class="headerlink" title="AbstractHandshakeHandler.handleInvalidUpgradeHeader"></a>AbstractHandshakeHandler.handleInvalidUpgradeHeader</h4><p>앞서 doHandshake 함수를 살펴본 결과 Upgrade 헤더에 올바르지 않은 값이 전달되는 경우에는 handleInvalidUpgradeHeader 함수를 호출하는 것을 확인할 수 있습니다. 이제 우리는 handleInvalidUpgradeHeader 함수를 오버라이드 하여 요청 정보를 확인하고 오류 로그로 기록할 수 있는 위치를 알게 되었습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHandshakeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultHandshakeHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleInvalidUpgradeHeader</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: Upgrade 헤더에 올바르지 않은 값이 전달되었을때 호출된다.</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Method: &#123;&#125;, URI: &#123;&#125;, Principal: &#123;&#125;, Headers: &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethodValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleInvalidUpgradeHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>애플리케이션 레벨에서는 Upgrade 헤더에 올바르지 않은 값이 전달되는 경우에 대해서 원인을 파악하기는 어렵습니다. 그럼에도 불구하고 본 문제가 다시 발생했을 때 어떤 정보로 요청되었는지에 대한 로그가 기록되었으므로 원인 파악을 위한 실마리를 찾을 수 있는 방안을 마련할 수 있게 됩니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol upgrade mechanism</a></li><li><a href="https://aws.amazon.com/ko/elasticloadbalancing/features/#Product_comparisons">Elastic Load Balancing 기능</a></li><li><a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Handshake failed due to invalid Upgrade header: null&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;본 글은 위와 같은 웹 소켓 연결 시에 애플리케이션 오류 로그가 발생한 건에 대한 관련 내</summary>
      
    
    
    
    
    <category term="Undertow" scheme="https://kdevkr.github.io/tags/Undertow/"/>
    
    <category term="WebSocket" scheme="https://kdevkr.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Trace OAuth Requests</title>
    <link href="https://kdevkr.github.io/trace-oauth-requests/"/>
    <id>https://kdevkr.github.io/trace-oauth-requests/</id>
    <published>2022-08-10T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Failed to find access token</p></blockquote><p>OAuth API 요청 시 JdbcTokenStore에서 액세스 토큰을 찾을 수 없을 때 기록되는 INFO 레벨의 로그 입니다. 액세스 토큰을 찾을 수 없다는 이야기는 올바르지 않은 요청인데도 불구하고 INFO 레벨로 되어있는 부분에 대해서는 의아하긴 합니다만 위 정보만으로는 어떤 토큰에 의해서 어떠한 OAuth API에 대해 요청되었는지를 확인할 수 없습니다.</p><p>일반적으로 인프라 레벨에서 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/load-balancer-access-logs.html">ELB</a> 또는 <a href="https://docs.nginx.com/nginx/admin-guide/monitoring/logging/#setting-up-the-access-log">Nginx</a>와 같은 프록시 단계에서 액세스 로그를 남기는데 대부분의 액세스 로그에서는 요청 헤더 정보를 상세하게 기록하지 않고 간결하게 남기도록 설정되므로 토큰 정보가 포함되는 Authorization 헤더를 확인할 수 없습니다.</p><h2 id="Bearer-Authentication"><a href="#Bearer-Authentication" class="headerlink" title="Bearer Authentication"></a>Bearer Authentication</h2><p>현재 시스템은 Spring Security OAuth 모듈을 통해 JDBC 기반의 Opaque 토큰으로 되어있는 Bearer 인증을 지원하는 OpenAPI를 제공하고 있습니다. 그러나, 일부 사용자들이 IoT 디바이스를 구현 시 OpenAPI를 사용할 때 잘못된 토큰을 사용하는 문제가 사업팀으로부터 리포트 되었는데 단순하게 잘못된 액세스 토큰이 전달되었다는 로그에 대해서 원인 파악을 요구하는데 불구하고 파악할 수 있는 정보가 남아있지 않았습니다.</p><p>사실 OpenAPI의 각 핸들러로 전달되는 부분에 대해서는 AOP가 적용되어 핸들러에 대한 파라미터 들과 클라이언트 아이디와 토큰 정보를 이미 엘라스틱서치에 API 로그로 저장하고 있었습니다. 다만 문제는 잘못된 토큰에 대한 요청은 스프링 시큐리티 필터 체인에 의해서 핸들러까지 진입하기 전에 오류 응답으로 처리되었기에 API 로그가 남지 않았다는 것이 파악되었습니다.</p><blockquote><p>어떠한 문제에 대해서 파악할 수 있는 정보는 남겨야하므로 인증된 사용자가 OpenAPI를 사용한 로그 외에 OAuth에 대한 모든 요청에 대해서는 별도로 남기도록 개선하고자 하였습니다.</p></blockquote><h3 id="OAuth2AuthenticationProcessingFilter"><a href="#OAuth2AuthenticationProcessingFilter" class="headerlink" title="OAuth2AuthenticationProcessingFilter"></a>OAuth2AuthenticationProcessingFilter</h3><pre class="language-java" data-language="java"><code class="language-java">eventPublisher<span class="token punctuation">.</span><span class="token function">publishAuthenticationFailure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span>failed<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">PreAuthenticatedAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">"access-token"</span><span class="token punctuation">,</span> <span class="token string">"N/A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Bearer 토큰에 대한 인증을 처리하는 OAuth2AuthenticationProcessingFilter에서 AuthenticationEventPublisher를 사용하여 인증 성공이나 오류에 대한 이벤트를 발생시키므로 DefaultAuthenticationEventPublisher를 빈으로 등록하고 이벤트 리스너를 구현하면 어떤 토큰을 사용하여 요청했는지는 기록할 수 있는데 이벤트 리스너로 전달되는 이벤트 정보에는 요청과 응답에 대한 정보가 존재하지 않으므로 원하는 만큼의 정보를 로그로 기록할 수 없습니다.</p><blockquote><p>원하는 기능은 대부분 인터넷에 검색하면 나오기에 이리저리 찾아보았습니다.</p></blockquote><h3 id="AbstractRequestLoggingFilter"><a href="#AbstractRequestLoggingFilter" class="headerlink" title="AbstractRequestLoggingFilter"></a>AbstractRequestLoggingFilter</h3><p>AbstractRequestLoggingFilter.getMessagePayload 함수를 보면 내부적으로 ContentCachingRequestWrapper를 사용하는 것을 확인할 수 있는데 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/ContentCachingResponseWrapper.html">ContentCachingResponseWrapper</a>에 대해서 살펴보니 요청에 대한 응답을 내려준 이후에도 응답 페이로드를 읽을 수 있도록 지원한다는 내용을 확인했습니다.</p><blockquote><p>잘못된 토큰에 대한 요청의 응답으로 액세스 토큰 정보를 전달하므로 응답 페이로드를 가져올 수 있다면 사용된 토큰을 로그로써 확인할 수 있다는 이야기입니다.</p></blockquote><h3 id="HttpTraceFilter"><a href="#HttpTraceFilter" class="headerlink" title="HttpTraceFilter"></a>HttpTraceFilter</h3><p>Spring Boot Actuator 모듈을 사용하여 어드민 페이지를 구현해놓았기에 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.tracing">HttpTraceEndpoint</a>를 통해서 일부 요청에 대한 트레이스 정보를 확인할 수 있는 점을 떠올려 HttpTraceFilter를 살펴보니 TraceableHttpServletRequest와 TraceableHttpServletResponse를 사용하여 요청과 응답에 대한 정보를 가져오는 것을 확인할 수 있었습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRequestValid</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TraceableHttpServletRequest</span> traceableRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpTrace</span> trace <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">receivedRequest</span><span class="token punctuation">(</span>traceableRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TraceableHttpServletResponse</span> traceableResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletResponse</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>status <span class="token operator">!=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">CustomStatusResponseWrapper</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">:</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">sendingResponse</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> traceableResponse<span class="token punctuation">,</span> request<span class="token operator">::</span><span class="token function">getUserPrincipal</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getSessionId</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>단, TraceableHttpServletRequest와 TraceableHttpServletResponse는 final 키워드가 설정된 클래스이므로 다른 패키지에서 활용할 수 없습니다.</p></blockquote><h3 id="OAuthFilter"><a href="#OAuthFilter" class="headerlink" title="OAuthFilter"></a>OAuthFilter</h3><p>앞서 살펴본 클래스들을 종합하여 OAuth 요청과 응답에 대한 정보를 이벤트로 발생시키는 필터를 구현합니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OAuthFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpExchangeTracer</span> tracer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultTokenServices</span> defaultTokenServices<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationEventPublisher</span> applicationEventPublisher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OAuthFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpTraceProperties</span> traceProperties<span class="token punctuation">,</span> <span class="token class-name">DefaultTokenServices</span> defaultTokenServices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpExchangeTracer</span><span class="token punctuation">(</span>traceProperties<span class="token punctuation">.</span><span class="token function">getInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultTokenServices <span class="token operator">=</span> defaultTokenServices<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isApiV1 <span class="token operator">=</span> pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"/oauth/v1/**"</span><span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isApiV1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TraceableHttpServletRequest</span> traceableRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ContentCachingResponseWrapper</span> cachingResponseWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentCachingResponseWrapper</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpTrace</span> trace <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">receivedRequest</span><span class="token punctuation">(</span>traceableRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cachingResponseWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TraceableHttpServletResponse</span> traceableResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletResponse</span><span class="token punctuation">(</span>                        <span class="token punctuation">(</span>status <span class="token operator">!=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">CustomStatusResponseWrapper</span><span class="token punctuation">(</span>cachingResponseWrapper<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">:</span> cachingResponseWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">sendingResponse</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> traceableResponse<span class="token punctuation">,</span> request<span class="token operator">::</span><span class="token function">getUserPrincipal</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getSessionId</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> clientId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>applicationEventPublisher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> tokenValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">.</span>ACCESS_TOKEN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">OAuth2Authentication</span> authentication <span class="token operator">=</span> defaultTokenServices<span class="token punctuation">.</span><span class="token function">loadAuthentication</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                        clientId <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getOAuth2Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidTokenException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OAuthTraceEvent</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> traceableResponse<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span> applicationEventPublisher<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher <span class="token operator">=</span> applicationEventPublisher<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TraceableHttpServletRequest</span> <span class="token keyword">implements</span> <span class="token class-name">TraceableRequest</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span>        <span class="token class-name">TraceableHttpServletRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">URI</span> <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> queryString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">StringBuffer</span> urlBuffer <span class="token operator">=</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>urlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> encoded <span class="token operator">=</span> <span class="token class-name">UriUtils</span><span class="token punctuation">.</span><span class="token function">encodeQuery</span><span class="token punctuation">(</span>queryString<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">StringBuffer</span> urlBuffer <span class="token operator">=</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>urlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span><span class="token class-name">String</span> queryString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> headers<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TraceableHttpServletResponse</span> <span class="token keyword">implements</span> <span class="token class-name">TraceableResponse</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpServletResponse</span> delegate<span class="token punctuation">;</span>        <span class="token class-name">TraceableHttpServletResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> response<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> headers<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token keyword">instanceof</span> <span class="token class-name">ContentCachingResponseWrapper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">ContentCachingResponseWrapper</span> wrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ContentCachingResponseWrapper</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>                <span class="token keyword">int</span> status <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">getContentAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">,</span> wrapper<span class="token punctuation">.</span><span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                wrapper<span class="token punctuation">.</span><span class="token function">copyBodyToResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CustomStatusResponseWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletResponseWrapper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">CustomStatusResponseWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>잘못된 토큰에 대한 응답 처리는 OAuth2AuthenticationProcessingFilter에서 OAuthException을 던지게 되면서 수행하므로 우리는 그전에 응답 페이로드를 캐시하여 가져올 수 있도록 ContentCachingResponseWrapper를 이후 필터로 전달했습니다. </p><h4 id="OAuthTraceEvent"><a href="#OAuthTraceEvent" class="headerlink" title="OAuthTraceEvent"></a>OAuthTraceEvent</h4><p>OAuthTraceEvent는 OAuth API에 대한 요청과 응답 정보에서 올바른 토큰으로 요청된 것은 클라이언트 아이디가 존재하므로 요청 헤더 중 Authorization에 포함된 토큰까지 로그로 저장할 필요는 없습니다. 토큰 자체를 제외하기 보다는 토큰의 일부를 마스킹 처리하는 방향으로 구현하였습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OAuthTraceEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Request</span> request<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Response</span> response<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Principal</span> principal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Session</span> session<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> responseBody<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> clientId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeTaken<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> traceTimestamp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OAuthTraceEvent</span><span class="token punctuation">(</span><span class="token class-name">HttpTrace</span> trace<span class="token punctuation">,</span> <span class="token class-name">String</span> responseBody<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span> <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">protectAuthorization</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeTaken <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getTimeTaken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>principal <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>responseBody <span class="token operator">=</span> responseBody<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>traceTimestamp <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">protectAuthorization</span><span class="token punctuation">(</span><span class="token class-name">HttpTrace</span> trace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span> <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> authorization <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> authorization<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"(?&lt;=.&#123;19&#125;)."</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authorization<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>이제 우리는 OAuthTraceEvent를 처리하는 이벤트 리스너에서 애플리케이션 로그 또는 엘라스틱서치에 저장하도록 구현하면 됩니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.baeldung.com/spring-http-logging">Spring – Log Incoming Requests</a>  </li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.tracing">Production-ready Features - 8. HTTP Tracing</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Failed to find access token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth API 요청 시 JdbcTokenStore에서 액세스 토큰을 찾을 수 없을 때 기록되는 INFO 레벨의 로그 입니다. 액세스</summary>
      
    
    
    
    
    <category term="HttpTrace" scheme="https://kdevkr.github.io/tags/HttpTrace/"/>
    
    <category term="ContentCaching" scheme="https://kdevkr.github.io/tags/ContentCaching/"/>
    
  </entry>
  
  <entry>
    <title>언더토우 임시 디렉토리 삭제 방지</title>
    <link href="https://kdevkr.github.io/undertow-temp-dir/"/>
    <id>https://kdevkr.github.io/undertow-temp-dir/</id>
    <published>2022-08-03T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/spring-projects/spring-boot/issues/9616">Tomcat does not create temporary directory used to store file uploads when it does not exist</a><br><a href="https://adunhansa.tistory.com/209">스프링 부트 파일 업로드 에러 The temporary upload location []  is not valid</a></p></blockquote><p>일반적으로 자주 발생하는 상황은 아니지만 아래와 같이 파일 업로드 시 임시 디렉토리에 대한 삭제 문제로 멀티파트 요청에 대해 임시적으로 저장하는 과정에서 <code>NoSuchFileException</code>이 발생할 수 있습니다. 리눅스 시스템에서 임시 디렉토리 경로에 존재하는 파일이나 디렉토리를 일정 기간 사용하지 않았을 경우 삭제하도록 되어있는 부분으로 인하여 애플리케이션 서버로 파일 업로드가 주기적으로 요청되지 않는 한 멀티파트에 대한 임시 파일이 만들어지지 않으므로 위 현상이 나타나게 됩니다.</p><p>언더토우에서는 MultiPartParserDefinition$MultiPartUploadHandler의 beginPart라는 함수에서 멀티파트 폼 데이터에 대해 임시 파일을 만들고 읽어들이도록 되어있습니다. 스프링 부트 기반의 애플리케이션 서버에서 멀티파트에 대한 로케이션 속성을 지정하지 않으면 언더토우는 서블릿 배포 시 시스템의 임시 디렉토리 경로에 멀티파트 업로드를 위한 폴더를 생성합니다.</p><p><a href="https://github.com/kdevkr/spring-demo-undertow">Spring Demo Undertow</a> 리파지토리를 클론하여 애플리케이션을 실행하면 다음과 같이 현재 실행중인 애플리케이션 서버에서 바라보는 파일 업로드 경로가 로그로 출력됩니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Current</span> temp dir<span class="token operator">:</span> <span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Users</span>\<span class="token class-name">Mambo</span>\<span class="token class-name">AppData</span>\<span class="token class-name">Local</span>\<span class="token class-name">Temp</span>\undertow<span class="token punctuation">.</span><span class="token number">8080.5583604686546214060</span></code></pre><p>위 로그를 출력하는 MultipartCustomizer는 UndertowDeploymentInfoCustomizer 인터페이스를 구현한 클래스로 시스템 기본 임시 디렉토리를 사용하는 경우에 주기적인 스케줄로 파일 업로드 경로가 삭제되었는지를 확인하고 복구합니다. 멀티파트 요청에 대한 파일 업로드 경로를 별도로 지정하지 않은 리눅스 환경에서는 파일 업로드를 시도하는 경우에 따라 리눅스 시스템에서 파일 업로드를 위한 폴더를 삭제할 가능성을 내재하고 있으므로 애플리케이션을 재실행하지 않아도 자동적으로 처리하거나 삭제를 방지하는 것을 도와주는 트릭을 구현할 수 있습니다.</p><blockquote><p>멀티파트 요청이 정상적으로 수행하는 경우 만들어진 임시 파일이 자동적으로 삭제되므로 시스템 기본 임시 디렉토리를 사용하는 것보다는 별도의 파일 업로드 경로를 지정하고 주기적으로 삭제되지 않고 남아있는 파일들이 있는지 관리하는 것이 더 좋은 대안입니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/9616&quot;&gt;Tomcat does not create temporary directory used to stor</summary>
      
    
    
    
    
    <category term="MultiPartParserDefinition" scheme="https://kdevkr.github.io/tags/MultiPartParserDefinition/"/>
    
    <category term="MultipartConfigElement" scheme="https://kdevkr.github.io/tags/MultipartConfigElement/"/>
    
    <category term="UndertowDeploymentInfoCustomizer" scheme="https://kdevkr.github.io/tags/UndertowDeploymentInfoCustomizer/"/>
    
  </entry>
  
  <entry>
    <title>JSON Web Token</title>
    <link href="https://kdevkr.github.io/jwt/"/>
    <id>https://kdevkr.github.io/jwt/</id>
    <published>2022-07-29T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.886Z</updated>
    
    <content type="html"><![CDATA[<p>최근 시스템에서 발송되는 특정 이메일에 포함되는 링크를 통해서 사용자가 관련된 페이지에 접근할 수 있도록 해달라는 요구사항이 있었습니다. 일반적으로 사용자가 이메일을 통해서 시스템에 접속하는 경우에는 자신의 계정과 비밀번호를 사용하여 시스템에 인증하기 전인 경우가 많습니다. 따라서, 이메일에 포함된 링크를 통해서 접근할 때 사용자 인증을 일시적으로 제공하는 방안을 도입해야합니다.</p><h2 id="Token-based-Authentication"><a href="#Token-based-Authentication" class="headerlink" title="Token-based Authentication"></a>Token-based Authentication</h2><p>토큰 기반 인증 매커니즘은 사용자 계정과 비밀번호를 입력하지 않아도 시스템을 이용할 수 있는 권한을 제공하기 위한 방식입니다. 여기서 토큰이라함은 시스템이 인식할 수 있는 문자열 데이터를 말합니다. 휴대폰 문자 인증이나 이메일로 발송되는 인증코드 또는 링크를 토큰이라 부를 수 있습니다.</p><p>현재 시스템은 Spring Security OAuth를 통해 클라이언트 크레덴셜 기반의 토큰으로 OpenAPI를 사용할 수 있도록 제공하고 있는데 JWT가 아닌 JdbcTokenStore를 사용하고 있기에 SecureRandomBytesKeyGenerator로 만들어지는 액세스 토큰을 사용하게 되어있습니다. 개발자 커뮤니티를 보면 세션 기반 인증 매커니즘이 아닌 토큰 기반으로 JWT를 발급하고 서버와 클라이언트가 통신할 때 JWT를 요청 헤더에 포함시켜 시스템에 대한 권한 및 인가를 수행할 수 있도록 구성하는 것 같습니다. </p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc7519">RFC7519</a>로 정의되어있는 JWT(JSON Web Token)은 사용자의 신원을 확인할 수 있는 정보를 Base64 인코딩으로 표현하면서 페이로드에 대한 전자서명을 통해서 인증 시스템에서 발급한 토큰을 신뢰할 수 있는지 검증하여 토큰에 포함된 정보를 토대로 권한 및 인가를 적용할 수 있습니다. JWT에 대해서는 아래의 링크를 통해서 간단하게 이해할 수 있습니다.</p><ul><li><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a></li><li><a href="https://auth0.com/learn/json-web-tokens/">Get Started with JSON Web Tokens</a></li></ul><h3 id="URI-Query-String"><a href="#URI-Query-String" class="headerlink" title="URI Query String"></a>URI Query String</h3><p><em>JSON Web Token (JWT) is a compact claims representation format intended for space constrained environments such as HTTP Authorization headers and URI query parameters.</em></p><p>이메일에 포함되는 링크는 GET 요청을 수행하는 URL(URI + Query String)이므로 일반적으로 HTTP 통신 시 Authorization 또는 X-Auth-Token 헤더에 토큰을 포함하여 전달할 수 없습니다. JWT는 그 자체로 Base64 URL Safe로 인코딩되므로 쿼리 파라미터에 포함하여 전달할 수 있습니다.</p><h4 id="Token-Parameter"><a href="#Token-Parameter" class="headerlink" title="Token Parameter"></a>Token Parameter</h4><p>이메일에 포함되는 링크에 토큰 정보가 어떻게 담겨지는지 두가지 예시를 살펴보겠습니다. 첫번째는 이메일과 인증을 위한 토큰이 Path Variable 형태로 URI에 포함되는 방식이며, 두번째는 URI에 대한 쿼리 스트링으로 토큰 파라미터가 포함됨을 보여줍니다.</p><ul><li><a href="http://daily-devblog.com/api/regist/certify/kdevkr@gmail.com/$TOKEN">http://daily-devblog.com/api/regist/certify/kdevkr@gmail.com/$TOKEN</a></li><li><a href="https://careers.kakao.com/applicant/checkEmail?token=$TOKEN&amp;jobOfferId=P-1">https://careers.kakao.com/applicant/checkEmail?token=$TOKEN&amp;jobOfferId=P-1</a></li></ul><p><img data-src="/images/posts/jwt/01.png"></p><p>두번째처럼 이메일에 포함된 링크를 나중에 클릭하더라도 시스템에서 인식할 수 있는 토큰인지 만료되었는지를 판단하여 시스템에 대한 인가를 판단하게 됩니다. 여기서 확인할 수 있듯이 이메일에는 시스템에서 발급한 토큰이 링크에 포함되어 유지되므로 보안 상 만료 시간을 최소화하는 것이 좋습니다.</p><h3 id="Implementation-Sample"><a href="#Implementation-Sample" class="headerlink" title="Implementation Sample"></a>Implementation Sample</h3><p>이메일 링크에 포함된 토큰 파라미터에 따라 토큰 기반 인증 매커니즘을 수행하고 사용자 인증을 수행할 수 있는 방안을 적용해보도록 하겠습니다. 간단한 샘플 형태로 만들고 일련의 프로세스를 이해할 수 있도록 공유하고자함이니 코드를 그대로 사용하기에는 문제점이 있을 수 있습니다.</p><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>우선 스프링 시큐리티 기반의 환경이라는 것을 기반으로 하며 JWT 발급과 검증을 위해서 사용할 <a href="https://github.com/jwtk/jjwt">Java JWT</a> 라이브러리와 JWT 발급 시 서명할 키 페어를 불러올 수 있도록 <a href="https://www.bouncycastle.org/">Bouncy Castle</a>를 의존성에 추가합니다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'com.google.code.gson:gson:2.9.0'</span>    implementation <span class="token string">'io.jsonwebtoken:jjwt-api:0.11.5'</span>    runtimeOnly <span class="token string">'io.jsonwebtoken:jjwt-impl:0.11.5'</span>    runtimeOnly <span class="token string">'io.jsonwebtoken:jjwt-jackson:0.11.5'</span>    implementation <span class="token string">'org.bouncycastle:bcprov-jdk18on:1.71'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Generate-EC-Key-Pair"><a href="#Generate-EC-Key-Pair" class="headerlink" title="Generate EC Key Pair"></a>Generate EC Key Pair</h4><p>본 샘플에서는 <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-3">Cryptographic Algorithms for Digital Signatures and MACs</a> 목록 중에서 ES256이라는 서명 알고리즘을 사용하는 JWT 토큰을 발급하기 위해 P-256 곡선을 사용하는 EC 키 페어를 생성합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">openssl ecparam -name prime256v1 -genkey -noout -out ec-private.pemopenssl ec -in ec-private.pem -pubout -out ec-public.pemopenssl pkcs8 -topk8 -inform pem -in ec-private.pem -outform pem -nocrypt -out ec-private.pkcs8</code></pre><h4 id="Generate-JWT"><a href="#Generate-JWT" class="headerlink" title="Generate JWT"></a>Generate JWT</h4><p>JWT 발급을 위한 EC 키 페어를 준비했으므로 클래스패스로부터 키 페어를 불러오고 토큰 발급을 위한 유틸 클래스를 작성합니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>pem<span class="token punctuation">.</span></span><span class="token class-name">PemReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ClassPathResource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StreamUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">DatatypeConverter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">StringReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Key</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Key</span><span class="token punctuation">></span></span> signingKeyStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Key</span><span class="token punctuation">></span></span> parseKeyStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parseKeyStore<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> parseKeyStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> content<span class="token punctuation">;</span>            <span class="token class-name">PemReader</span> pemReader<span class="token punctuation">;</span>            <span class="token class-name">X509EncodedKeySpec</span> spec<span class="token punctuation">;</span>            <span class="token class-name">KeyFactory</span> kf<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> HS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/hs256/secret.key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token class-name">DatatypeConverter</span><span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> signatureAlgorithm<span class="token punctuation">.</span><span class="token function">getJcaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/rs256/rsa-public.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> ES256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/es256/ec-public.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"EC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Elliptic Curve</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Only support HS256, RS256, ES256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        parseKeyStore<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>signingKeyStore<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> signingKeyStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> content<span class="token punctuation">;</span>            <span class="token class-name">PemReader</span> pemReader<span class="token punctuation">;</span>            <span class="token class-name">PKCS8EncodedKeySpec</span> spec<span class="token punctuation">;</span>            <span class="token class-name">KeyFactory</span> kf<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> HS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/hs256/secret.key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token class-name">DatatypeConverter</span><span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> signatureAlgorithm<span class="token punctuation">.</span><span class="token function">getJcaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/rs256/rsa-private.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> ES256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/es256/ec-private.pkcs8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"EC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Elliptic Curve</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Only support HS256, RS256, ES256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        signingKeyStore<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">TypeToken</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Type</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Key</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZonedDateTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> REGEX <span class="token operator">=</span> <span class="token string">"^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Type</span> hashMapType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isJwt</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> token <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>REGEX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">isValid</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token function">alg</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> alg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">.</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">isSigned</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">alg</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chunks <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>chunks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> headerMap <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> hashMapType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> headerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token keyword">long</span> expires<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims<span class="token punctuation">,</span> <span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> issuedAt <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"UTC"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> expiration <span class="token operator">=</span> issuedAt <span class="token operator">+</span> expires<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Key</span> signingKey <span class="token operator">=</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">.</span><span class="token function">signingKey</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>signingKey <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JwtException</span><span class="token punctuation">(</span><span class="token string">"Not found signingKey for "</span> <span class="token operator">+</span> signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"typ"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"JWT Sample Issuer"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>issuedAt<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expiration<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signingKey<span class="token punctuation">,</span> signatureAlgorithm<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedJwtException</span><span class="token punctuation">(</span><span class="token string">"Cannot generate jwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> <span class="token function">parseClaims</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">parseClaims</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token function">alg</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> <span class="token function">parseClaims</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> alg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">.</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Add-Token-Filter-in-SecurityFilterChain"><a href="#Add-Token-Filter-in-SecurityFilterChain" class="headerlink" title="Add Token Filter in SecurityFilterChain"></a>Add Token Filter in SecurityFilterChain</h4><p>시스템에서 발급된 토큰이 파라미터로 전달되었을 때 JWT를 검증하고 사용자 인증을 처리할 수 있는 필터를 작성하고 스프링 시큐리티 필터 체인에 등록합니다. </p><p><strong>TokenAuthenticationFilter.java</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">JwtUtil</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Claims</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jws</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationToken</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">AntPathMatcher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">OncePerRequestFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ADDITIONAL_URI_PATTERN <span class="token operator">=</span> <span class="token string">"/users/&#123;username&#125;"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TokenAuthenticationFilter</span><span class="token punctuation">(</span><span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">isJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> base64RequestURI <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> redirectLoginUrl <span class="token operator">=</span> <span class="token string">"/login?redirect="</span> <span class="token operator">+</span> base64RequestURI<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isValidToken<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                isValidToken <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isValidToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseClaims</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Claims</span> body <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> subject <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ADDITIONAL_URI_PATTERN<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isValidToken <span class="token operator">=</span> <span class="token function">isValidWithVariables</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isValidToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> token<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">SecurityContext</span> securityContext <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        securityContext<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">JwtException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                isValidToken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValidToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// NOTE: If token expired or invalid, redirect for login page.</span>                response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>redirectLoginUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValidWithVariables</span><span class="token punctuation">(</span><span class="token class-name">Claims</span> body<span class="token punctuation">,</span> <span class="token class-name">String</span> requestURI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> variables <span class="token operator">=</span> pathMatcher<span class="token punctuation">.</span><span class="token function">extractUriTemplateVariables</span><span class="token punctuation">(</span>ADDITIONAL_URI_PATTERN<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userId <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> variables<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>SecurityConfig.java</strong><br>간단한 샘플이므로 인메모리 사용자를 등록하는 스프링 시큐리티 환경을 구성합니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">TokenAuthenticationFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSecurity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>provisioning<span class="token punctuation">.</span></span><span class="token class-name">InMemoryUserDetailsManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">SecurityFilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationFilter</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/in-memory.html</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserDetails</span> mambo <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"mambo"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"&#123;noop&#125;1234"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>mambo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// https://docs.spring.io/spring-security/reference/servlet/configuration/java.html#jc-httpsecurity</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">,</span> <span class="token class-name">TokenAuthenticationFilter</span> tokenAuthenticationFilter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/users/&#123;username&#125;/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>tokenAuthenticationFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Generate-JWT-Test"><a href="#Generate-JWT-Test" class="headerlink" title="Generate JWT Test"></a>Generate JWT Test</h4><p>테스트 코드를 통해서 토큰을 발급해보고 이메일에 포함될 링크처럼 토큰 파라미터에 토큰을 포함하여 브라우저 주소에 직접 입력해봅니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">JwtUtilTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> subject <span class="token operator">=</span> <span class="token string">"mambo"</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> expires <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"mambo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> claims<span class="token punctuation">,</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>ES256<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\nmambo.kr:8080/users/mambo?token=&#123;&#125;"</span><span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>토큰이 발급되고나서 3분 이내에는 로그인 처리가 됨을 확인할 수 있지만 만료된 이후라면 올바르게 서명된 토큰일지라도 로그인 페이지로 리디렉션됨을 확인할 수 있습니다.</p><blockquote><p>본 글에서는 JWS으로만 구성된 JWT 토큰을 발급하여 신뢰할 수 있는 발급자로부터 서명된 것임을 증명하는 것을 기반으로 사용자 인증을 수행했습니다. 다만, JWT는 암호화되지 않은 상태로 이메일과 같은 곳에 노출되어있으므로 짧은 만료 시간을 두어 제한 시간내에만 인증할 수 있도록 하였습니다.<br>좀 더 시간이 주어진다면 JWS와 함께 JWE로 클레임 페이로드가 암호화된 JWT 토큰을 발급해볼 수 있는 것도 알아봐야할 것 같습니다. 본 글에서 사용했던 jjwt 라이브러리에서는 JWE를 지원하지 않으므로 <a href="https://connect2id.com/products/nimbus-jose-jwt">Nimbus JOSE + JWT</a>로 대체해야 합니다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.spring.io/spring-security/reference/servlet/configuration/java.html">Spring Security Docs</a></li><li><a href="https://jwt.io/">JWT Debugger</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7519">RFC7519</a></li><li><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;최근 시스템에서 발송되는 특정 이메일에 포함되는 링크를 통해서 사용자가 관련된 페이지에 접근할 수 있도록 해달라는 요구사항이 있었습니다. 일반적으로 사용자가 이메일을 통해서 시스템에 접속하는 경우에는 자신의 계정과 비밀번호를 사용하여 시스템에 인</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PKI(Public Key Infrastructure)</title>
    <link href="https://kdevkr.github.io/pki/"/>
    <id>https://kdevkr.github.io/pki/</id>
    <published>2022-07-17T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>정보보안 전문가의 수준은 아닐지라도 웹 애플리케이션에서 사용되는 보안 기술에 대해서 어느정도 이해하고 있어야합니다. 이 글은 <a href="/ssl-certificate/">SSL 인증서</a>와 <a href="/mutual-tls/">Mutual TLS</a>에서 언급하거나 다루어본 X.509 인증서와 함께 공개키 기반 인증 구조라고 하는 PKI와 관련된 용어와 개념에 대해서 간단하게 알아봅니다.</p></blockquote><h2 id="X-509-Certificate"><a href="#X-509-Certificate" class="headerlink" title="X.509 Certificate"></a>X.509 Certificate</h2><p><em>A public key infrastructure (PKI) is a set of roles, policies, hardware, software and procedures needed to create, manage, distribute, use, store and revoke digital certificates and manage public-key encryption.</em></p><p>X.509는 <a href="https://datatracker.ietf.org/doc/html/rfc5280">RFC5280</a>로 정의되어있는 디지털 인증서(공개키 인증서)의 표준 형식입니다. 대부분의 웹 애플리케이션에 적용하는 HTTPS 프로토콜에서 TLS 핸드쉐이크를 위해서 사용되는 가장 일반적인 인증서 형식이기도 하듯이 전세계적으로 디지털 인증서라 함은 ITU-T X.509 표준 방식으로 작성된 X.509 인증서라고 할 수 있습니다. 국내에서 사용되던 <a href="https://ko.wikipedia.org/wiki/%EA%B3%B5%EB%8F%99%EC%9D%B8%EC%A6%9D%EC%84%9C">공동인증서(공인인증서)</a>도 공개키 기반 인증 기술을 활용해서 만든 디지털 인증서이지만 한국에서만 사용할 수 있는 인증서 형식이라는 점입니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl x509 -in local.dev+1.pem -text -nooutCertificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            e5:29:9a:ba:66:<span class="token punctuation">..</span>.        Signature Algorithm: sha256WithRSAEncryption        Issuer: O <span class="token operator">=</span> mkcert development CA, OU <span class="token operator">=</span> ubuntu@ubuntu, CN <span class="token operator">=</span> mkcert ubuntu@ubuntu        Validity            Not Before: Jul <span class="token number">12</span> <span class="token number">21</span>:55:43 <span class="token number">2022</span> GMT            Not After <span class="token builtin class-name">:</span> Oct <span class="token number">12</span> <span class="token number">21</span>:55:43 <span class="token number">2024</span> GMT        Subject: O <span class="token operator">=</span> mkcert development certificate, OU <span class="token operator">=</span> ubuntu@ubuntu        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>                Modulus:                    00:d8:c2:77:4f:4f:9d:1c:c2:70:b2:00:52:4f:e7:                    <span class="token punctuation">..</span>.                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>        X509v3 extensions:            X509v3 Key Usage: critical                Digital Signature, Key Encipherment            X509v3 Extended Key Usage:                TLS Web Server Authentication            X509v3 Authority Key Identifier:                keyid:3B:31:5D:2F:7C:D6:E6:E2:F5:9B:66:1D:E5:75:5C:11:C6:85:8C:6D            X509v3 Subject Alternative Name:                DNS:local.dev, DNS:localhost    Signature Algorithm: sha256WithRSAEncryption         <span class="token number">43</span>:e1:81:18:d5:04:ca:d4:73:68:85:4d:1d:d4:79:cb:02:0d:         <span class="token punctuation">..</span>.</code></pre><p>위 예시는 로컬 호스트에서 사용할 수 있는 사설 인증서를 만드는 오픈소스 도구인 <a href="https://github.com/FiloSottile/mkcert">mkcert</a>를 통해 만들어진 X.509 인증서에 대한 정보를 openssl 도구로 인증서에 포함된 정보를 확인해본 것입니다. 인증서에 포함될 수 있는 필드들은 RFC5280 문서에 설명되어있는데 발급자(Issuer), 서명 알고리즘(Signature Algorithm), 소유자(Subject), 소유자의 공개키(Subject Public Key Info) 그리고 신원을 확인할 수 있는 부가 정보(Extensions)입니다. </p><p>HTTPS 프로토콜 통신에서 TLS 핸드쉐이킹 과정 중 클라이언트는 서버에서 제공한 X.509 인증서 정보를 확인하여 부가 정보 중 SAN(X509v3 Subject Alternative Name)에 입력된 정보를 토대로 브라우저에서 도메인이나 IP 주소에 대한 신원을 추가적으로 검증합니다. 예를 들어, 위 예시에서는 localhost와 local.dev라는 호스트를 신뢰할 수 있다고 판단할 수 있습니다.</p><blockquote><p>X.509 인증서는 상위 기관에서 소유자의 공개키를 전자서명한 것으로 암호화가 목적이 아닌 공개키에 대한 소유자의 신원을 검증하고자 함에 있습니다.</p></blockquote><h3 id="PEM-Format"><a href="#PEM-Format" class="headerlink" title="PEM Format"></a>PEM Format</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl x509 -in local.dev+1.pem-----BEGIN CERTIFICATE-----MIIEDDCCAnSgAwIBAgIRAOUpmrpmzWKOajX3U1ze1McwDQYJKoZIhvcNAQELBQAwVzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMRYwFAYDVQQLDA11YnVudHVAdWJ1bnR1MR0wGwYDVQQDDBRta2NlcnQgdWJ1bnR1QHVidW50dTAeFw0yMjA3MTIyMTU1NDNaFw0yNDEwMTIyMTU1NDNaMEExJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9wbWVudCBjZXJ0aWZpY2F0ZTEWMBQGA1UECwwNdWJ1bnR1QHVidW50dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANjCd09PnRzCcLIAUk/nr27i2uvztXSF1vbwUby3dPWQcZuR3cLRvIeNv6oOMLnf9uGbI/pjlRcCoZwk+ETUZtVrsFsvNZGCir34QbXkNb96/M8HSM3ZC9soeijU8NqoWDjr4LGtU+FX8pOOHbsjJoiyIH7lg76EpOUrasnVmx6T8xoUlye2si0A+VbV/J6tlJXKix0qidliIiBIY2HWktN+HBIYbttuRwXOK22i7KPwT/jURgZlcAq5Lmfu9+pTs5ak2jXSaneWLkKF0/9RxMy2jGKfdTwYqU4ZjbZz1zXs+UeI7hgsPqprhnVBkDAejNrXNJ1O390IbwtgboJ/V6cCAwEAAaNpMGcwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFDsxXS981ubi9ZtmHeV1XBHGhYxtMB8GA1UdEQQYMBaCCWxvY2FsLmRldoIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBgQBD4YEY1QTK1HNohU0d1HnLAg3Pm9bUJxGWw2bOAO+0Dgdau3Fn+72JPz7ZYGX3Deny01TYDEoeno7VOY+gq2u0F4L1SBNWdXhdxxfj/4JK3r1FpmgmEpPOVyrO2KMWgPlNu4JV8jUc/OIOeKYe8S9VddM7VyRjZSCNKsI4kneeu/fZFXLMtWS8lcj/hubQdGYXuSaSZHihpTPvCR2XP6z+NbeDndqo4YemGIUS2eyp4MQCwlR910FUv3NNgk43iJw368ma8p/jigQeUx9reyYKijxd/rbwmg9k5Mks+CgK7pi0Bd8uJxD5i9KgitDBetjoPbw8xIazDUbhtPofs3y8HTGqR4kszm4JZMh0310Ff3hkqjXwT1oVEMrBUUUZrSBjuUEy7bujgu1JBV1f/j5lLzS5dMOM68x7my7YVSUG+hbjeB9w9eZWLx/YZ707ssvAfKVvWoyKrwwlZTQRs7mIHRcM9stz0/k/ZQZH0IBerjuPJ93BKH0wRYxU33i3htQ<span class="token operator">=</span>-----END CERTIFICATE-----</code></pre><p>위 결과는 X.509 인증서가 실제로 파일에 저장된 형태를 보여주고 있습니다. 이와 같이 구성되는 방식을 PEM(Privacy Enhanced Mail)이라고 하는데 X.509 인증서를 저장하는 가장 일반적인 형식입니다. 바이너리 데이터로 저장되는 DER(Distinguished Encoding Representation)로도 저장할 수 있으나 시스템 간 안전하게 전달될 수 있도록 <a href="/base64/">Base64</a>로 인코딩되어 아스키 코드형태로 되어있는 PEM 형식이 선호되는 것 같습니다.</p><h3 id="Certificate-Profiles"><a href="#Certificate-Profiles" class="headerlink" title="Certificate Profiles"></a>Certificate Profiles</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl s_client -showcerts -connect naver.com:443 <span class="token operator">&lt;</span>/dev/nullubuntu@ubuntu:~/x509$ openssl x509 -in naver.com.pem -text -nooutCertificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            07:f2:85:21:53:b1:50:67:e3:c6:77:aa:3a:83:be:dd        Signature Algorithm: sha256WithRSAEncryption        Issuer: C <span class="token operator">=</span> US, O <span class="token operator">=</span> DigiCert Inc, CN <span class="token operator">=</span> DigiCert TLS RSA SHA256 <span class="token number">2020</span> CA1        Validity            Not Before: May <span class="token number">23</span> 00:00:00 <span class="token number">2022</span> GMT            Not After <span class="token builtin class-name">:</span> Jun  <span class="token number">7</span> <span class="token number">23</span>:59:59 <span class="token number">2023</span> GMT        Subject: C <span class="token operator">=</span> KR, ST <span class="token operator">=</span> Gyeonggi-do, L <span class="token operator">=</span> Seongnam-si, O <span class="token operator">=</span> NAVER Corp., CN <span class="token operator">=</span> www.naver.net        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>                Modulus:                    00<span class="token punctuation">..</span>.                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>        X509v3 extensions:            X509v3 Authority Key Identifier:                keyid:B7:6B:A2:EA:A8:AA:84:8C:79:EA:B4:DA:0F:98:B2:C5:95:76:B9:F4            X509v3 Subject Key Identifier:                F5:3C:13:14:C9:7B:15:36:50:8C:3E:89:40:EE:2C:E0:22:2F:9E:61            X509v3 Subject Alternative Name:                DNS:www.naver.net, DNS:www.naver.asia, DNS:www.naver.co, DNS:www.naver.kr, DNS:www.naver.co.kr, DNS:naver.com, DNS:naver.net, DNS:naver.asia, DNS:naver.co, DNS:naver.kr, DNS:naver.co.kr            X509v3 Key Usage: critical                Digital Signature, Key Encipherment            X509v3 Extended Key Usage:                TLS Web Server Authentication, TLS Web Client Authentication            X509v3 CRL Distribution Points:                Full Name:                  URI:http://crl3.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl                Full Name:                  URI:http://crl4.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl            X509v3 Certificate Policies:                Policy: <span class="token number">2.23</span>.140.1.2.2                  CPS: http://www.digicert.com/CPS            Authority Information Access:                OCSP - URI:http://ocsp.digicert.com                CA Issuers - URI:http://cacerts.digicert.com/DigiCertTLSRSASHA2562020CA1-1.crt            <span class="token punctuation">..</span>.    Signature Algorithm: sha256WithRSAEncryption         2e<span class="token punctuation">..</span>.</code></pre><p>네이버 사이트의 서버 인증서를 전달받은 후 X.509 인증서 정보를 조회해보면 네이버의 인증서를 발급한 기관은 DigiCert 이며 네이버 인증서에 포함되는 공개키를 sha256WithRSAEncryption 서명 알고리즘을 사용해서 전자 서명을 한 것을 확인할 수 있습니다.</p><ul><li>인증서 발급 기관(Issuer)</li><li>인증서 만료 기한(Validity) </li><li>공개키 소유자(Subject) </li><li>공개키(Subject Public Key Info)</li><li>서명 알고리즘(Signature Algorithm)</li><li>소유자 대체 이름(Subject Alternative Name)</li></ul><h2 id="PKCS"><a href="#PKCS" class="headerlink" title="PKCS"></a>PKCS</h2><p>PKCS(Public key Cryptography Standard)는 공개키 기반 인증 구조에서 안전하게 정보를 교환하기 위한 프로토콜입니다.</p><h3 id="PKCS-8"><a href="#PKCS-8" class="headerlink" title="PKCS#8"></a>PKCS#8</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc5208">RFC5208</a>로 정의된 PKCS#8은 공개키 기반 인증 구조에서 사용되는 개인키를 표현하고 저장하기 위한 표준으로 앞서 X.509 인증서와 같이 PEM 형식으로 저장합니다. 지난 <a href="/mutual-tls/">Mutual TLS</a>에서는 자바 애플리케이션에서 PEM 형식의 클라이언트 인증서와 개인키를 통해 키 스토어를 만드는 과정에서 PKCS8EncodedKeySpec 이란 것을 사용했다는 것을 알 수 있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkey -in local.dev+1-key.pem-----BEGIN PRIVATE KEY-----MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDYwndPT50cwnCyAFJP569u4trr87V0hdb28FG8t3T1kHGbkd3C0byHjb+qDjC53/bhmyP6Y5UXAqGcJPhE1GbVa7BbLzWRgoq9+EG15DW/evzPB0jN2QvbKHoo1PDaqFg46+CxrVPhV/KTjh27IyaIsiB+5YO+hKTlK2rJ1Zsek/MaFJcntrItAPlW1fyerZSVyosdKonZYiIgSGNh1pLTfhwSGG7bbkcFzittouyj8E/41EYGZXAKuS5n7vfqU7OWpNo10mp3li5ChdP/UcTMtoxin3U8GKlOGY22c9c17PlHiO4YLD6qa4Z1QZAwHoza1zSdTt/dCG8LYG6Cf1enAgMBAAECggEAIehp2ZJOtY0FLBM4zR8lJmd+b6K0JAI72m1FnAvm0/NAkmGDG1LL9ziJXwTRQoJykGBAhI7HZ84VkeOGot3HKGOsNtdvvc95/LW1Mcr9TXLj0U8GaI0neaUfVvvYoZvsERt1DtZaZMnpPIPiyr9467FRvAgTT95YHTFphyFPHr0kVlAd4qAbyIzOSiGmoBg2Krjk5dXW9Cg7YIxKNUXlxMHNlP3c9zxKyy7Cd3qcp4tFzKxqiTXPEdOxw3b66P/2+RQWi6kCQfu2RINZLjzPBajjEYJ8/o8sVXDs1Bl6pPnpYzMLjHapX8V+NuuG8r9O8Y28siO0NT+tpVnyJHUE4QKBgQDdTb7KJySyUYk+xySCPv3lpBucfnJDy7veWNdiu4KIMVtqnenPJATVE9ovdWFNNrr+1cLJG/uvM3AOSTLHJRXHcFewm2ipxovgr6SKx65zevHbbVMcaDir3hdvh6h7qG/naURQlNz1xups68g89xvbBnFp/X4fTDto+QQUIR5hRQKBgQD6vlcYJUcG7rr6nOEacUtxvhE59qX5sWDCAvrfP/IUjitsqiH9YRTkuUfYQXGQMMfpXCViZ/UVQEsiI4LMY3wM4pquWplZVn9CeyrbgZn/QP2Bp1nExmL21HWGooBG6l2lxGM18lMIzY7vE5GMzGGkH8rRHqgkIAkuTIC5G/sl+wKBgQCGvXUyY87F+zrSzDEAVBYGIXrmN16exIaoA/Nvm7cH8PU13tuiUM3YZfPr/U2202HbEo88HxuIOos5R3vxIDU4bsAVOSnqZIZ50LcgAB/JE8v5y4BUxWfrzJb8Qt5kG9O2U7NSVLCLvAazNoN+Cv4cxrl6zOpjZ+isKyE+mEOE+QKBgQC5M1l09iOuFSp57OG+/CtzSaXDoFAbS05iPn055CtTz2Z3jnoogkpCXi+YpU3R6JXf4TWjp5E4LxLPllcHy/tWMRF68mQNvnukiQCwvNsX09Lqrsb5NmbmVSqxVNlWh8i/pXx53hBCkkGeiF+bFWKRLQJKz0/1zsu5LLxu/SHVfQKBgGuldPS/1zqt1eblPAeobBot1LMCxS8Bk6n1dMiWDM0+yANwh+tkA+MFyZTbdPjjf2e+RAXwUtsKLSvJha0EXLEZPSQL7WDIleYVJ5oAX4nfHS4eNZzvxnL7bblcWtekrBNnHinKS+Cqd+ATLixLnDpi0w+DTfQu93eKXg1NCYrg-----END PRIVATE KEY-----ubuntu@ubuntu:~/x509$ openssl pkey -in local.dev+1-key.pem -text -nooutRSA Private-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit, <span class="token number">2</span> primes<span class="token punctuation">)</span>modulus:    00<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.</code></pre><h3 id="PKCS-12"><a href="#PKCS-12" class="headerlink" title="PKCS#12"></a>PKCS#12</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc7292">RFC7292</a>로 정의된 PKCS#12는 인증서와 개인키 등 공개키 기반 인증 구조에서 사용되는 다양한 항목들을 하나로 통합하여 교환하기 위한 정보 교환의 표준입니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkcs12 -in local.dev+1.pkcs12Enter Import Password: mamboBag Attributes    localKeyID: <span class="token number">16</span> CC 2D CE 9F D0 <span class="token number">52</span> C9 <span class="token number">72</span> <span class="token number">97</span> <span class="token number">90</span> DC EC AB DF <span class="token number">28</span> 0B EA B6 AA<span class="token assign-left variable">subject</span><span class="token operator">=</span>O <span class="token operator">=</span> mkcert development certificate, OU <span class="token operator">=</span> ubuntu@ubuntu<span class="token assign-left variable">issuer</span><span class="token operator">=</span>O <span class="token operator">=</span> mkcert development CA, OU <span class="token operator">=</span> ubuntu@ubuntu, CN <span class="token operator">=</span> mkcert ubuntu@ubuntu-----BEGIN CERTIFICATE-----MIIEDDCCAnSgAwIBAgIRAOUpmrpmzWKOajX3U1ze1McwDQYJKoZIhvcNAQELBQAwVzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMRYwFAYDVQQLDA11YnVudHVAdWJ1bnR1MR0wGwYDVQQDDBRta2NlcnQgdWJ1bnR1QHVidW50dTAeFw0yMjA3MTIyMTU1NDNaFw0yNDEwMTIyMTU1NDNaMEExJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9wbWVudCBjZXJ0aWZpY2F0ZTEWMBQGA1UECwwNdWJ1bnR1QHVidW50dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANjCd09PnRzCcLIAUk/nr27i2uvztXSF1vbwUby3dPWQcZuR3cLRvIeNv6oOMLnf9uGbI/pjlRcCoZwk+ETUZtVrsFsvNZGCir34QbXkNb96/M8HSM3ZC9soeijU8NqoWDjr4LGtU+FX8pOOHbsjJoiyIH7lg76EpOUrasnVmx6T8xoUlye2si0A+VbV/J6tlJXKix0qidliIiBIY2HWktN+HBIYbttuRwXOK22i7KPwT/jURgZlcAq5Lmfu9+pTs5ak2jXSaneWLkKF0/9RxMy2jGKfdTwYqU4ZjbZz1zXs+UeI7hgsPqprhnVBkDAejNrXNJ1O390IbwtgboJ/V6cCAwEAAaNpMGcwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFDsxXS981ubi9ZtmHeV1XBHGhYxtMB8GA1UdEQQYMBaCCWxvY2FsLmRldoIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBgQBD4YEY1QTK1HNohU0d1HnLAg3Pm9bUJxGWw2bOAO+0Dgdau3Fn+72JPz7ZYGX3Deny01TYDEoeno7VOY+gq2u0F4L1SBNWdXhdxxfj/4JK3r1FpmgmEpPOVyrO2KMWgPlNu4JV8jUc/OIOeKYe8S9VddM7VyRjZSCNKsI4kneeu/fZFXLMtWS8lcj/hubQdGYXuSaSZHihpTPvCR2XP6z+NbeDndqo4YemGIUS2eyp4MQCwlR910FUv3NNgk43iJw368ma8p/jigQeUx9reyYKijxd/rbwmg9k5Mks+CgK7pi0Bd8uJxD5i9KgitDBetjoPbw8xIazDUbhtPofs3y8HTGqR4kszm4JZMh0310Ff3hkqjXwT1oVEMrBUUUZrSBjuUEy7bujgu1JBV1f/j5lLzS5dMOM68x7my7YVSUG+hbjeB9w9eZWLx/YZ707ssvAfKVvWoyKrwwlZTQRs7mIHRcM9stz0/k/ZQZH0IBerjuPJ93BKH0wRYxU33i3htQ<span class="token operator">=</span>-----END CERTIFICATE-----Bag Attributes    localKeyID: <span class="token number">16</span> CC 2D CE 9F D0 <span class="token number">52</span> C9 <span class="token number">72</span> <span class="token number">97</span> <span class="token number">90</span> DC EC AB DF <span class="token number">28</span> 0B EA B6 AAKey Attributes: <span class="token operator">&lt;</span>No Attributes<span class="token operator">></span>Enter PEM pass phrase: mamboVerifying - Enter PEM pass phrase: mambo-----BEGIN ENCRYPTED PRIVATE KEY-----MIIFHDBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIUCWpIEy8DAECAggAMAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECAwP9e11T4W6BIIEyP1XL6GHaVmqcgu+jiWoeopRciYOLS0MWB8Yzb/8Rslyx1l1MAluW+QP30qCbVhhO6l7ulziGC0hRNNNittmdSrZKPbNtch8ZY0G/dWoMY9VfjJSdndbWwXv8zulRXMYiXeVME8MsmG5HPTZyc785dVpeCYaFt6muWw2ABnP97ShSLdIRAeY2G6HDLnEz3/hjbYfE2UFF68ik/wEEtK5f48XxM+PuyDKk4b3+qFfqVSRS6QbdCnrKVQfGqeiWQKOdt/FQZ82/xIqlu3kVuXPmEaN8W62MK1vCocjm/AXJ6l01gUqL00a6ntdTdsCXA6g0qpcwZDd6/1gVgsEK0Y1mbzfq1YS52zw+obHp6nIJpA7Fnllf6irT3mSyEIzorIZ4z4As6CA91EmM4DjFJ6FlLpmVIofe0JlzGxTZ1yueWLZjGf+3sEImikF6ndzh+dCV0ox73h6g8VsD79MHkaZfuBL0ZrxyGSOomRO9WhRrjUihlgILLtMHStWDDTp4F194SiD2T+xC25LuvpfQAmLYYL+otb9n2cv1thik/MjZCDk5duYcRDLUJ3G23MaHk6DC13JaDk925zFhbnFCt1PTzvWZ+HjE1GEFiDr88YJkyLdI7VKTsMC/bcfAE7SrpaqX0cLVjnmlIQK5ScNYvB+PxCJj95YZsVpZ8cw9V/NlkWT1kpSX//G8Wl4YKW0vM25aBCca2hFqbCDC3/6vqqx4z8D+r3K8KRVV/7y94JaMoHjrvd1fjUDOQfuilh3bgfCmhuFS8IV/HjBbkuPY/O8O8abcb16wTMReKqahpmFsdOwIC/2gqoTQbKp2xbtY+gcvcObsWQRMcMHmrHx2vMO4Tr4BKgNBxz4Gv5KAE/Pa2Gvqs0O5xsLNxF1kMUyT5CkrAuUayvysGHvY98p7ORHFKfA+tFOxgf7jBrs6/BpQmZHrbOU4v4WplpcbUe9e31l11n8BkQ/qhcOrtsxqcYub3PRXwpm68LhDacKTdtyVv/j6yYba/RbfSn8ZwZAiwS6oW69qa/JCtECiw0058pNxHujA/A4Ceb7G9uFPhNb2UfgwzmID5tzxOhQype0vi02Vc1sMZHAsmIIiIpJUmh37Td1VkxUg+3FspeOmw00z4WNkrf1SMpFabpySw4BXcJMDIOxYhQI/ij6mPglTjvJHF6eMw53l84MJIUHFkQDGTX2eLZBW91lDxVxmMkt74G7rD9j6pfm/Eo5gezjc9DcX3ot1T6Gv0rk0ilF3Vfuw5+f46ZtZBQqYlFalKgYVpelidv2y5kC7gEnfabH93l9GFHU4OKT1IESwPt4E0pJttVfTAwx3dBT/h8BgfN3bOqM1EdZF0/KIoc1NLl1H2o/EZ94Jig25N3jqJ7w0riNE3dE891Fu715nfEjfSxIpMKC78FR/J9qTXgu6sUwNgCs/DdVqruOjwFKupNgQcj7fwSJtnyQGY9fpZjAG+e5MiPxNFDjaoLu8M7k<span class="token number">5</span>+CGelITcwbq2U8InZIpZTOCLif3zuHg0hkf3GXCsAapfQnmovR/xjtJBWEZVw+Z2otgK9OruIMuEwxzxX2awqI5zDN2yBCnP62eEYoJ+HKM21i/hexMF4jIh9H+H99W<span class="token assign-left variable">oFgNCNUwDw6RXPEUEqnTzQ</span><span class="token operator">==</span>-----END ENCRYPTED PRIVATE KEY-----</code></pre><h4 id="Convert-PEM-to-PKCS-12"><a href="#Convert-PEM-to-PKCS-12" class="headerlink" title="Convert PEM to PKCS#12"></a>Convert PEM to PKCS#12</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkcs12 -export -in local.dev+1.pem -inkey local.dev+1-key.pem -out local.dev+1.pkcs12Enter Export Password: mamboVerifying - Enter Export Password: mambo</code></pre><h4 id="Convert-PKCS-12-to-JKS"><a href="#Convert-PKCS-12-to-JKS" class="headerlink" title="Convert PKCS#12 to JKS"></a>Convert PKCS#12 to JKS</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ keytool -importkeystore -srckeystore local.dev+1.pkcs12 -srcstoretype PKCS12 -deststoretype JKS -destkeystore local.dev+1.jksImporting keystore local.dev+1.pkcs12 to local.dev+1.jks<span class="token punctuation">..</span>.Enter destination keystore password: mamboRe-enter new password: mamboEnter <span class="token builtin class-name">source</span> keystore password: mamboEntry <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token number">1</span> successfully imported.Import <span class="token builtin class-name">command</span> completed:  <span class="token number">1</span> entries successfully imported, <span class="token number">0</span> entries failed or cancelledWarning:The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 <span class="token function">which</span> is an industry standard <span class="token function">format</span> using <span class="token string">"keytool -importkeystore -srckeystore local.dev+1.jks -destkeystore local.dev+1.jks -deststoretype pkcs12"</span><span class="token builtin class-name">.</span></code></pre><p>Java KeyStore API에서는 PKCS#12를 기본 형식으로 사용하고 있습니다. 그래서 PKCS#12로 되어있는 파일을 그대로 KeyStore로 불러올 수 있으므로 굳이 JKS 형식의 파일로 변환할 필요는 없습니다. 오히려 마지막 경고 문구에서 알려주는 것처럼 JKS 형식으로 되어있는 키스토어 파일을 PKCS#12로 변환하는 방법을 아는게 좋습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ keytool -importkeystore -srckeystore local.dev+1.jks -destkeystore local.dev+1.jks -deststoretype pkcs12Enter <span class="token builtin class-name">source</span> keystore password: mamboEntry <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token number">1</span> successfully imported.Import <span class="token builtin class-name">command</span> completed:  <span class="token number">1</span> entries successfully imported, <span class="token number">0</span> entries failed or cancelledWarning:Migrated <span class="token string">"local.dev+1.jks"</span> to PKCS12. The JKS keystore is backed up as <span class="token string">"local.dev+1.jks.old"</span><span class="token builtin class-name">.</span></code></pre><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul><li><a href="https://www.youtube.com/watch?v=t0F7fe5Alwg">Public Key Infrastructure PKI Concepts</a></li><li><a href="https://stackoverflow.com/a/7886248">Using openssl to get the certificate from a server</a></li><li><a href="https://stackoverflow.com/a/15144560">Converting PKCS#12 certificate into PEM using OpenSSL</a></li><li><a href="https://d2.naver.com/helloworld/197937">JCA로 이해하는 암호화와 보안</a></li><li><a href="https://d2.naver.com/helloworld/227016">JCA로 이해하는 암호화와 보안 2</a></li><li><a href="https://gruuuuu.github.io/security/what-is-x509/">호다닥 공부해보는 x509와 친구들</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;정보보안 전문가의 수준은 아닐지라도 웹 애플리케이션에서 사용되는 보안 기술에 대해서 어느정도 이해하고 있어야합니다. 이 글은 &lt;a href=&quot;/ssl-certificate/&quot;&gt;SSL 인증서&lt;/a&gt;와 &lt;a href=&quot;/mut</summary>
      
    
    
    
    
    <category term="X.509" scheme="https://kdevkr.github.io/tags/X-509/"/>
    
    <category term="PKI" scheme="https://kdevkr.github.io/tags/PKI/"/>
    
    <category term="PKCS#8" scheme="https://kdevkr.github.io/tags/PKCS-8/"/>
    
    <category term="PKCS#12" scheme="https://kdevkr.github.io/tags/PKCS-12/"/>
    
  </entry>
  
  <entry>
    <title>Mutual TLS</title>
    <link href="https://kdevkr.github.io/mutual-tls/"/>
    <id>https://kdevkr.github.io/mutual-tls/</id>
    <published>2022-07-13T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글은 에너지 분야에서 수요 반응(DR) 이벤트를 송수신하기 위해서 사용하는 <a href="https://www.openadr.org/">OpenADR 프로토콜</a>에서 VTN과 VEN이 서로 상호 인증(Mutual Authentication)을 수행하는 구조를 이해하기 위해 정리한 것입니다.</p></blockquote><h2 id="Mutual-Authentication"><a href="#Mutual-Authentication" class="headerlink" title="Mutual Authentication"></a>Mutual Authentication</h2><p><em>Client certificates must be used for HTTP client authentication. The entity initiating the request(the client) must have an X.509 certificate that is validated by the server during the TLS handshake. If no client certificate is supplied, or if the certificate is not valid (e.g., it is not signed by a trusted CA, or it is expired) the server must terminate the connection during the TLS handshake.</em></p><p>OpenADR 프로토콜에서 VTN 시스템과 VEN 디바이스 간 통신을 위해서는 HTTP 또는 XMPP를 이용해야합니다. HTTP 클라이언트 통신을 위해서는 VTN과 VEN은 서로를 신뢰할 수 있는 X.509 공개키 인증서를 제공해야합니다. 클라이언트 요청에 서버가 신뢰할 수 있는 기관으로부터 서명된 X.509 인증서가 포함되지 않으면 서버 시스템에서는 TLS 핸드쉐이크 과정에서 연결을 해지할 수 있습니다. </p><h3 id="X-509-Client-Certificate"><a href="#X-509-Client-Certificate" class="headerlink" title="X.509 Client Certificate"></a>X.509 Client Certificate</h3><p>OpenADR 프로토콜에서의 보안은 공개키 기반 인프라(PKI)의 X.509 인증서로 수행하며 더 높은 보안 레벨을 요구하는 시스템을 구성하고 싶다면 XML 페이로드에 대한 서명을 지원할 수 있습니다. 2048 비트 이상의 RSA 또는 256 비트 이상의 ECC 키 기반의 공개키 인증서를 사용할 수 있습니다. 일반적으로 VEN은 임베디드 디바이스이므로 RSA 보다는 ECC 키 기반의 인증서를 사용하는 것이 더 효율적일 수 있습니다. OpenADR 프로토콜에서 TLS 핸드쉐이크 과정에서 최소한 TLS 1.2 버전과 함께 그에 상응하는 암호화 스위트를 사용해야합니다.</p><ul><li>Transport Layer Security: TLS 1.2+</li><li>Cipher Suites: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256</li></ul><h4 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a>cURL</h4><p>리눅스 시스템에서 주로 사용되는 HTTP 클라이언트 통신 도구인 <a href="https://curl.se/">cURL</a>를 사용해서 EiRegisterParty 서비스 엔드포인트에 대해 요청하면 VTN 과의 상호 TLS 핸드쉐이크 과정을 정상적으로 수행할 수 있는지 검증할 수 있습니다. <a href="https://downey.io/notes/dev/curl-using-mutual-tls/">how to curl an endpoint protected by mutual tls (mtls)</a>에서는 cURL로 클라이언트 인증서를 포함하는 방법을 소개하고 있어 다음과 같이 명령어를 실행하면 됩니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">curl -v --tlsv1.2 --tls-max 1.3 --cert .&#x2F;cert.pem --key .&#x2F;privkey.pem https:&#x2F;&#x2F;Host&#x2F;OpenADR2&#x2F;Simple&#x2F;2.0b&#x2F;EiRegisterParty</code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>웹 애플리케이션 서버 뿐만 아니라 VEN 디바이스를 구현하는 가장 일반적인 방법은 자바 언어로 구현하는 것입니다. 자바 애플리케이션에서는 KeyStore라는 별도의 키 저장소 클래스를 제공하므로 HTTP 클라이언트 요청 시 X.509 클라이언트 인증서를 포함시키기 위해서는 PKI 및 PKCS 표준에 대한 일련의 클래스들을 알아야합니다. X.509 클라이언트 인증서는 PEM 형식으로 교환되므로 KeyStore로 변환하는 과정이 필요할 수 있습니다. 다음은 <a href="https://www.bouncycastle.org/java.html">BouncyCastle API</a> 자바 라이브러리를 통해서 X.509 인증서와 개인키를 불러와서 HTTP 클라이언트 요청을 시도하는 코드를 보여줍니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MutualTlsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MutualTlsTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Test mutual authentication"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testMutualAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"javax.net.debug"</span><span class="token punctuation">,</span> <span class="token string">"ssl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> certPemText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> privateKeyText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certPem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>certPemText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyStore</span> clientKeyStore <span class="token operator">=</span> <span class="token class-name">KeyStore</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Certificate</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token class-name">CertificateFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateCertificates</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>certPem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientKeyStore<span class="token punctuation">.</span><span class="token function">setKeyEntry</span><span class="token punctuation">(</span><span class="token string">"client"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> password<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Certificate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyManagerFactory</span> keyManagerFactory <span class="token operator">=</span> <span class="token class-name">KeyManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SunX509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keyManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>clientKeyStore<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// NOTE: If server generate client certificate from self-signed root CA, you can use trustKeyStore.</span>            <span class="token class-name">KeyStore</span> trustKeyStore <span class="token operator">=</span> <span class="token class-name">KeyStore</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trustKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"ca.jks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TrustManagerFactory</span> trustManagerFactory <span class="token operator">=</span> <span class="token class-name">TrustManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">TrustManagerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trustManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>trustKeyStore<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SSLContext</span> sslcontext <span class="token operator">=</span> <span class="token class-name">SSLContexts</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadTrustMaterial</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustAllStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sslcontext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyManagerFactory<span class="token punctuation">.</span><span class="token function">getKeyManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trustManagerFactory<span class="token punctuation">.</span><span class="token function">getTrustManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tlsVersions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"TLSv1.2"</span><span class="token punctuation">,</span><span class="token string">"TLSv1.3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherSuites <span class="token operator">=</span> <span class="token class-name">SSLContext</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultSSLParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCipherSuites</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SSLConnectionSocketFactory</span> sslSocketFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLConnectionSocketFactory</span><span class="token punctuation">(</span>sslcontext<span class="token punctuation">,</span> tlsVersions<span class="token punctuation">,</span> cipherSuites<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NoopHostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CloseableHttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClientBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSSLSocketFactory</span><span class="token punctuation">(</span>sslSocketFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"https://Host/OpenADR2/Simple/2.0b/EiRegisterParty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/xml; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"payload.xml"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CloseableHttpResponse</span> httpResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><p>개인적으로 학습중인 Go 언어에서 HTTP 클라이언트 요청과 함께 X.509 클라이언트 인증서를 포함시키는 방법을 찾아보았습니다. <a href="https://venilnoronha.io/a-step-by-step-guide-to-mtls-in-go">A step by step guide to mTLS in Go</a>에 잘 설명되어있으므로 다음과 같이 간단하게 테스트해볼 수 있습니다.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"crypto/x509"</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cert<span class="token punctuation">,</span> err <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">,</span> <span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>caCert<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"ca.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>caCertPool <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewCertPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>caCertPool<span class="token punctuation">.</span><span class="token function">AppendCertsFromPEM</span><span class="token punctuation">(</span>caCert<span class="token punctuation">)</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>Transport<span class="token punctuation">:</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">&#123;</span>TLSClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>ClientAuth<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>RequireAndVerifyClientCert<span class="token punctuation">,</span>ClientCAs<span class="token punctuation">:</span>    caCertPool<span class="token punctuation">,</span>Certificates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tls<span class="token punctuation">.</span>Certificate<span class="token punctuation">&#123;</span>cert<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>MinVersion<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>VersionTLS12<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>payloadXml<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"payload.xml"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> payloadXml<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>payload<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>payloadXml<span class="token punctuation">)</span>r<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">"https://Host/OpenADR2/Simple/2.0b/EiRegisterParty"</span><span class="token punctuation">,</span> <span class="token string">"application/xml"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="X-509-Client-Certificate-Proxy"><a href="#X-509-Client-Certificate-Proxy" class="headerlink" title="X.509 Client Certificate Proxy"></a>X.509 Client Certificate Proxy</h3><p>오늘날의 인프라 시스템은 애플리케이션 서버 정보를 감추고 클라이언트 요청에 대해 전처리 동작을 수행하고 넘겨주는 리버스 프록시를 구성하는 것이 일반적입니다. 리버스 프록시는 Nginx와 같은 웹 서버 또는 로드밸런서에서 지원하며 이러한 리버스 프록시를 수행하는 인프라 구성에서는 클라이언트 요청에 대한 TLS 핸드쉐이크 과정에서 전달된 클라이언트 인증서를 별도의 프록시 헤더에 포함시켜 넘겨주어야합니다.</p><h4 id="X-SSL-CERT"><a href="#X-SSL-CERT" class="headerlink" title="X-SSL-CERT"></a>X-SSL-CERT</h4><p>일반적으로 클라이언트 인증서에 대한 프록시 헤더의 표준은 없으므로 X-SSL-CERT와 같이 애플리케이션 서버에서 읽을 수 있는 헤더를 정하여 클라이언트 인증서를 포함시켜 전달하도록 구성하면 됩니다. 다음은 Nginx에서의 리버스 프록시 구성 시 X-SSL-CERT 헤더에 클라이언트 인증서를 포함시키는 예시입니다.</p><pre class="language-conf" data-language="conf"><code class="language-conf">server &#123;    ssl_verify_client optional_no_ca;    location &#x2F; &#123;        proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;    &#125;&#125;</code></pre><blockquote><p>일반적으로 mTLS를 수행할 때 전달되는 클라이언트 인증서도 신뢰할 수 있는 인증 기관에서 발급된 것인지를 판단합니다. 시스템 자체적으로 서명한 클라이언트 인증서는 신뢰할 수 없으므로 클라이언트 인증서의 검증은 애플리케이션 서버로 위임할 수 있습니다.</p></blockquote><h4 id="Webpack-Certificate-Proxy"><a href="#Webpack-Certificate-Proxy" class="headerlink" title="Webpack Certificate Proxy"></a>Webpack Certificate Proxy</h4><p>일반적으로 프론트엔드 개발을 위해서 사용하는 Webpack에서는 자체적으로 프록시 구성을 지원하는 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>를 제공합니다. 이는 리버스 프록시 구성과 동일하므로 모든 요청에 대해서 Webpack 프록시 서버를 경유하도록 한다면 다음과 같이 클라이언트 인증서를 포함할 수 있도록 설정해야합니다.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'spdy'</span><span class="token punctuation">,</span> <span class="token comment">// https</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'cert.pem'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'privkey.pem'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">requestCert</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token literal-property property">minVersion</span><span class="token operator">:</span> <span class="token string">'TLSv1.2'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">'/'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:5000'</span><span class="token punctuation">,</span>                <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">xfwd</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token function">onProxyReq</span><span class="token punctuation">(</span><span class="token parameter">proxyReq<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> cert <span class="token operator">=</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">getPeerCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cert <span class="token operator">&amp;&amp;</span> cert<span class="token punctuation">.</span>raw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> pem <span class="token operator">=</span> <span class="token string">'-----BEGIN CERTIFICATE-----'</span> <span class="token operator">+</span> cert<span class="token punctuation">.</span>raw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-----END CERTIFICATE-----'</span><span class="token punctuation">;</span>                        proxyReq<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'X-SSL-CERT'</span><span class="token punctuation">,</span> pem<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>requestCert 옵션을 켜야 onProxyReq 함수내에서 클라이언트 인증서를 가져와서 전달할 수 있습니다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-authentication/">What protocols support mutual authentication?</a></li><li><a href="https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-tls/">What is mutual TLS (mTLS)?</a></li><li><a href="https://downey.io/notes/dev/curl-using-mutual-tls/">how to curl an endpoint protected by mutual tls (mtls)</a></li><li><a href="https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_escaped_cert">Nginx SSL Client Cert</a></li><li><a href="https://webpack.js.org/configuration/dev-server/#devserverserver">Webpack DevServer.server</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글은 에너지 분야에서 수요 반응(DR) 이벤트를 송수신하기 위해서 사용하는 &lt;a href=&quot;https://www.openadr.org/&quot;&gt;OpenADR 프로토콜&lt;/a&gt;에서 VTN과 VEN이 서로 상호 인증(Mutual </summary>
      
    
    
    
    
    <category term="X.509" scheme="https://kdevkr.github.io/tags/X-509/"/>
    
    <category term="mTLS" scheme="https://kdevkr.github.io/tags/mTLS/"/>
    
    <category term="X-SSL-CERT" scheme="https://kdevkr.github.io/tags/X-SSL-CERT/"/>
    
  </entry>
  
  <entry>
    <title>SHA-256</title>
    <link href="https://kdevkr.github.io/sha-256/"/>
    <id>https://kdevkr.github.io/sha-256/</id>
    <published>2022-07-10T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p><a href="https://ko.wikipedia.org/wiki/SHA">SHA(Secure Hash Algorithm)</a>은 NIST에 의해서 관리되는 안전한 해시 표준 함수들의 모음이며 현재는 NIST FIPS 180-3 규격의 <a href="https://ko.wikipedia.org/wiki/SHA-2">SHA-2</a>를 권장해서 사용하고 있습니다. 해시 함수는 어떠한 문자열을 일정한 길이를 가진 임의의 문자열로 변환하는 것을 말합니다. 수 많은 연구에 의해 만들어진 여러가지 해시 함수 중에서 일반적으로 SHA-256을 사용하는 이유는 해시 함수를 사용하게 되는 목적에 있다고 볼 수 있습니다. 특정한 문자열에 대해서는 동일한 해시값(다이제스트)으로 변환되며 해시값을 기준으로는 동일한 패턴을 찾을 수 없어서 본래의 문자열을 유추할 수 없도록 하고자 하는 것에 있습니다.</p><p>SHA-256 해시 함수의 동작 과정은 <a href="https://sha256algorithm.com/">Sha256 Algorithm Explained</a>를 이용하면 눈으로 확인할 수 있으니 참고해보면 좋을 것 같습니다.</p><h3 id="메시지-다이제스트"><a href="#메시지-다이제스트" class="headerlink" title="메시지 다이제스트"></a>메시지 다이제스트</h3><p>해시 함수는 어떠한 입력에 대해서 일정한 길이의 비트로 이루어진 결과를 가져오기 위한 목적으로 사용됩니다. 메시지 다이제스트란 어떤 문자열 데이터를 일정한 길이의 다이제스트로 변환한 것을 말하며 단순하게 해시 함수로 처리된 해시값일 뿐입니다.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/sha256"</span><span class="token string">"encoding/hex"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>plain <span class="token operator">:=</span> <span class="token string">"HelloWorld"</span>hash <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span>hashed <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"plain:"</span><span class="token punctuation">,</span> plain<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hashed:"</span><span class="token punctuation">,</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hashed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">plain: HelloWorldhashed: 872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4</code></pre><h3 id="파일-체크섬"><a href="#파일-체크섬" class="headerlink" title="파일 체크섬"></a>파일 체크섬</h3><p>위 메시지 다이제스트를 바이너리 파일에 활용한 부분이 파일 체크섬입니다. <a href="https://ubuntu.com/tutorials/how-to-verify-ubuntu#5-verify-the-sha256-checksum">how-to-verify-ubuntu</a>에서 처럼 다운로드 받은 파일의 위변조 여부를 검증하기 위해서 MD5 또는 SHA-256로 해시된 다이제스트를 제공하며 이를 통해 올바른 바이너리 파일임을 검증하고 안전하다고 판단할 수 있습니다. 아래의 예시는 윈도우 터미널에서 <a href="https://docs.microsoft.com/ko-kr/windows-server/administration/windows-commands/certutil">CertUtil</a>을 사용하여 파일 체크섬을 확인한 것이며 <a href="https://gtkhash.org/">GtkHash</a>와 같은 도구로도 확인할 수 있습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> certutil <span class="token operator">-</span>hashfile orig<span class="token punctuation">.</span>txt sha256SHA256의 orig<span class="token punctuation">.</span>txt 해시:872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4CertUtil: <span class="token operator">-</span>hashfile 명령이 성공적으로 완료되었습니다<span class="token punctuation">.</span></code></pre><h3 id="비밀번호-암호화"><a href="#비밀번호-암호화" class="headerlink" title="비밀번호 암호화"></a>비밀번호 암호화</h3><p>일반적으로 비밀번호를 암호화하여 저장할 때는 <a href="https://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a>에서 언급된 PBKDF2 또는 bcrypt를 사용하는 편인 것으로 알고 있습니다. bcrypt는 NIST 에서 권장하는 알고리즘에 속하지는 않았으나 OpenBSD나 스프링 프레임워크의 기본 패스워드 인코더로 지정된 비교적 안전한 알고리즘 중 하나입니다. 아무튼 시계열 데이터베이스 중 하나인 <a href="https://code.kx.com/q/basics/cmdline/#-u-usr-pwd-local">KDB+는 MD5 또는 SHA-1 알고리즘 방식으로 비밀번호를 지원</a>하기에 사용하는 시스템마다 지원하는 방식에 제한이 있을 수 있습니다.</p><h4 id="비밀번호-암호화-관련-읽으면-좋은-글"><a href="#비밀번호-암호화-관련-읽으면-좋은-글" class="headerlink" title="비밀번호 암호화 관련 읽으면 좋은 글"></a>비밀번호 암호화 관련 읽으면 좋은 글</h4><ul><li><a href="https://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a></li><li><a href="https://lovejaco.github.io/posts/cryptographic-hash-function/">해시 함수, 암호화 해시 함수, 그리고 SHA</a></li><li><a href="https://auth0.com/blog/hashing-in-action-understanding-bcrypt/">Hashing in Action: Understanding bcrypt</a></li></ul><h3 id="키-서명-지문"><a href="#키-서명-지문" class="headerlink" title="키 서명 지문"></a>키 서명 지문</h3><p><a href="/ssh">SSH 키 페어 발급 및 원격 호스트 연결하기</a>에서처럼 SSH 키에 대해 지문(Fingerprint)을 생성해놓고 호스트에 대한 공개키가 변경되었는지를 판단하는데 사용되기도 합니다. 이러한 키 서명 지문은 아래의 이미지와 같이 SSL 인증서 정보에도 서명 해시 알고리즘으로도 사용하는 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/sha-256/01.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SHA&quot;&gt;&lt;a href=&quot;#SHA&quot; class=&quot;headerlink&quot; title=&quot;SHA&quot;&gt;&lt;/a&gt;SHA&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/SHA&quot;&gt;SHA(Secure Hash Algori</summary>
      
    
    
    
    
    <category term="Hashing" scheme="https://kdevkr.github.io/tags/Hashing/"/>
    
    <category term="Message Disgest" scheme="https://kdevkr.github.io/tags/Message-Disgest/"/>
    
    <category term="Checksum" scheme="https://kdevkr.github.io/tags/Checksum/"/>
    
  </entry>
  
  <entry>
    <title>SSH 키 페어 발급 및 원격 호스트 연결하기</title>
    <link href="https://kdevkr.github.io/ssh/"/>
    <id>https://kdevkr.github.io/ssh/</id>
    <published>2022-07-03T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>개발자 또는 시스템을 운용하는 사람들이 서버 엔지니어가 구축한 원격 호스트에 접속하기 위해서 SSH 프로토콜을 사용한다. 우리가 컴퓨터에 로그인하는 것처럼 간단하게 사용자 이름과 비밀번호를 사용하기도 하며 공개키 기반 인증으로 비밀번호를 대체하거나 2FA(OTP)를 추가적으로 인증하여 보안을 적용하기도 한다. SSH 프로토콜을 사용하는 이유에는 TCP 보안 채널을 연결하고 통신 내용에 대해 암호화하여 패킷을 보호하고 안전하게 서버에 접속하여 통신할 수 있도록 구성하기 위함에 있다. 초보 개발자라면 이 글을 통해서 SSH 키페어를 발급해보고 아마존 웹 서비스의 EC2 인스턴스 또는 깃허브 저장소에 등록하여 원격 호스트에 연결하는 방법을 통해서 SSH에 대해 이해해보기를 바란다.</p><p>먼저, 서버 엔지니어가 리눅스 서버 환경을 준비하고 제공해주는 것처럼 내 컴퓨터에 가상의 리눅스 환경을 만들어볼 수 있는데 아래의 두가지 방법 중에서 <a href="https://www.virtualbox.org/">OracleVM VirtualBox</a>을 사용해서 리눅스 서버를 준비하였다.</p><ul><li><a href="https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10">Install Ubuntu on WSL2 on Windows 10</a></li><li><a href="https://ubuntu.com/tutorials/how-to-run-ubuntu-desktop-on-a-virtual-machine-using-virtualbox">How to run Ubuntu Desktop on a virtual machine using VirtualBox</a></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span class="token function">ssh</span> -VOpenSSH_8.9p1 Ubuntu-3, OpenSSL <span class="token number">3.0</span>.2 <span class="token number">15</span> Mar <span class="token number">2022</span></code></pre><blockquote><p>VirtualBox로 준비된 우분투 리눅스의 주소는 192.168.0.28 이다.</p></blockquote><p>내 컴퓨터에 설치된 OpenSSH 클라이언트를 사용해서 위 우분투 리눅스에 접속해보도록 하자.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> ssh ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28's password:Welcome to Ubuntu 22<span class="token punctuation">.</span>04<span class="token punctuation">.</span>1 LTS <span class="token punctuation">(</span>GNU/Linux 5<span class="token punctuation">.</span>15<span class="token punctuation">.</span>0-47-generic x86_64<span class="token punctuation">)</span></code></pre><p>실제 리눅스 서버 그리고 인프라에 따라서 여러가지 네트워크 방화벽 정책이 있을 수 있지만 지금은 내 컴퓨터에 가상 환경으로 우분투 리눅스를 준비했고 어떤 방화벽도 존재하지 않으므로 사용자 이름과 비밀번호만으로 SSH 프로토콜을 사용하여 리눅스 서버에 연결할 수 있었다.</p><h2 id="SSH-키-페어"><a href="#SSH-키-페어" class="headerlink" title="SSH 키 페어"></a>SSH 키 페어</h2><p>아마존 웹 서비스의 EC2 인스턴스 또는 깃허브 저장소와 같은 서비스에서는 SSH 프로토콜을 사용해서 서버에 연결할 때에 사용자 이름과 비밀번호를 사용하지 않고 공개키 기반의 키 페어라는 것을 사용한다. 비밀번호 인증보다 공개키 기반 인증을 구성하는 이유는 비밀번호 인증 방식의 경우에는 서버에서 사용되는 비밀번호를 외부로 그대로 대칭키로써 노출하는 것이며 공개키 기반 인증은 서버에서 신뢰할 수 있는 키를 보유한 클라이언트가 서로 다른 키를 가지고 있기 때문이다.</p><blockquote><p>SSH 키페어가 보안적으로 완벽한 것은 아니므로 SSH 클라이언트가 보유하는 비밀키가 제 3자에게 탈취되지 않도록 잘 관리해야하는 것은 필요하다.</p></blockquote><h3 id="SSH-키-페어-생성하기"><a href="#SSH-키-페어-생성하기" class="headerlink" title="SSH 키 페어 생성하기"></a>SSH 키 페어 생성하기</h3><p>아마존 웹 서비스를 이용하는 개발자라면 웹 콘솔이나 AWS CLI의 create-key-pair 명령을 사용해서 RSA 또는 ED25519 기반의 키 페어를 간단하게 생성할 수 있다. 그러나, 일반적인 경우라면 어떠한 환경에 의존하지 않고 OpenSSH에 포함된 ssh-keygen 도구를 사용하는 방법에 대해서 알아야한다. 앞서, 준비된 우분투 리눅스에 사용자 이름과 비밀번호를 사용해서 접속하였을때 윈도우의 OpenSSH 클라이언트를 이용하였는데 윈도우 10의 선택적 기능을 통해서 간단하게 OpenSSH 클라이언트를 설치할 수 있고 Git Bash를 설치해도 ssh-keygen이 포함되어있으므로 자신이 원하는 방식을 선택해보면 좋을 것 같다.</p><p><img data-src="/images/posts/ssh/ssh-01.png" alt="윈도우 10의 선택적 기능을 통해서 설치한 OpenSSH 클라이언트"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># in Windows Terminal</span><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>VOpenSSH_for_Windows_7<span class="token punctuation">.</span>7p1<span class="token punctuation">,</span> LibreSSL 2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>5<span class="token comment"># in Git Bash</span>$ ssh <span class="token operator">-</span>VOpenSSH_9<span class="token punctuation">.</span>0p1<span class="token punctuation">,</span> OpenSSL 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1p  21 Jun 2022</code></pre><p>OpenSSH를 확인했다면 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent</a>를 참고해서 ssh-keygen으로 SSH 키페어를 생성하는 방법에 대해서 알아보자. </p><h4 id="RSA-키-페어"><a href="#RSA-키-페어" class="headerlink" title="RSA 키 페어"></a>RSA 키 페어</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>b 4096 <span class="token operator">-</span>m PEM <span class="token operator">-</span>f win-mambo-rsa-4096<span class="token punctuation">.</span>pemGenerating public/private rsa key pair<span class="token punctuation">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved in win-mambo-rsa-4096<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>Your public key has been saved in win-mambo-rsa-4096<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is:SHA256:F3ECBEjeXszb6ccTJ2EWz9eaxvZoAg4f6F4rU0aDYJY mambo@DESKTOP-OJJ4TB3The key's randomart image is:<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token namespace">[RSA 4096]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>o<span class="token punctuation">.</span>o o    <span class="token punctuation">|</span><span class="token punctuation">|</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Eo   <span class="token operator">+</span> <span class="token operator">+</span>  <span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>    <span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> o o<span class="token punctuation">|</span><span class="token punctuation">|</span>     <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>o= o <span class="token operator">+</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token punctuation">.</span> S<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>o B  <span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span> <span class="token operator">*</span>o+ <span class="token operator">*</span> o <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span>o= = o <span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span>o<span class="token punctuation">.</span> o <span class="token operator">+</span>   <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span>o<span class="token punctuation">.</span>      <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token namespace">[SHA256]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><h4 id="ED25519-키-페어"><a href="#ED25519-키-페어" class="headerlink" title="ED25519 키 페어"></a>ED25519 키 페어</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh-keygen <span class="token operator">-</span>t ed25519 <span class="token operator">-</span>m PEM <span class="token operator">-</span>f win-mambo-ed25519<span class="token punctuation">.</span>pemGenerating public/private ed25519 key pair<span class="token punctuation">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved in win-mambo-ed25519<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>Your public key has been saved in win-mambo-ed25519<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is:SHA256:oad/A11tVJQFxRIDA63pozCFj/FsTCDh51hALNdFBVU mambo@DESKTOP-OJJ4TB3The key's randomart image is:<span class="token operator">+</span><span class="token operator">--</span><span class="token namespace">[ED25519 256]</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span>   o+o o+<span class="token operator">++</span><span class="token operator">+</span>E<span class="token punctuation">.</span><span class="token operator">+</span>BB<span class="token punctuation">|</span><span class="token punctuation">|</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span>o     <span class="token punctuation">.</span><span class="token punctuation">.</span>oo<span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>   o<span class="token punctuation">.</span><span class="token punctuation">.</span>oo<span class="token punctuation">.</span>  o o <span class="token punctuation">.</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>     =o<span class="token punctuation">.</span>o<span class="token punctuation">.</span>o <span class="token punctuation">.</span> o  <span class="token punctuation">|</span><span class="token punctuation">|</span>    <span class="token punctuation">.</span> oXSo <span class="token punctuation">.</span> <span class="token punctuation">.</span>   <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token operator">+</span>oB <span class="token operator">+</span>      <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token punctuation">.</span><span class="token operator">+</span> o <span class="token punctuation">.</span>     <span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span> o      <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>     <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token namespace">[SHA256]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>먼저, RSA 기반의 키 페어를 만들때는 기본적으로 2048 비트 이상으로 만들어지게 되는데 아마존 웹 서비스나 깃허브 저장소에서는 모두 4096 비트를 지원하고 있으며 이를 권장하는 편이다. 그런데, 시스템에서 ED25519 방식을 지원한다면 키 길이에 따른 보안 효율 상 ED25519를 사용하는게 더 나은 선택이 될 수 있다.</p><h3 id="SSH-공개키-등록하기"><a href="#SSH-공개키-등록하기" class="headerlink" title="SSH 공개키 등록하기"></a>SSH 공개키 등록하기</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> scp <span class="token punctuation">.</span>\window-mambo<span class="token punctuation">.</span>pub ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28:<span class="token operator">/</span>home/ubuntu/<span class="token punctuation">.</span>ssh/ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28's password:window-mambo<span class="token punctuation">.</span>pub                                                                      100%  104    51<span class="token punctuation">.</span>6KB/s   00:00<span class="token comment"># in ubuntu</span>ubuntu@ubuntu:~<span class="token operator">/</span><span class="token punctuation">.</span>ssh$ <span class="token function">cat</span> window-mambo<span class="token punctuation">.</span>pub >> authorized_keys</code></pre><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i <span class="token punctuation">.</span>\window-mambo<span class="token punctuation">.</span>pem ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28Welcome to Ubuntu 22<span class="token punctuation">.</span>04<span class="token punctuation">.</span>1 LTS <span class="token punctuation">(</span>GNU/Linux 5<span class="token punctuation">.</span>15<span class="token punctuation">.</span>0-47-generic x86_64</code></pre><p>이렇게 해서 SSH 키 페어를 발급하고 가상 환경인 우분투 리눅스에 키 페어를 등록하고 SSH로 접속해보았다. 서버 엔지니어는 이러한 과정을 거치게 되면서 최종적으로 개발자인 우리에게 서버에 접속할 사용자 이름과 함께 비밀키를 전달한 것임을 알 수 있다.</p><h2 id="SSH-키-페어-실습"><a href="#SSH-키-페어-실습" class="headerlink" title="SSH 키 페어 실습"></a>SSH 키 페어 실습</h2><p>이제 아마존 웹 서비스와 깃허브 저장소 서비스에 SSH 키페어를 등록하고 연결하는 것을 실습해보면서 다시 한번 머리에 숙지하도록 해보자.</p><h3 id="깃허브-공개키-등록하기"><a href="#깃허브-공개키-등록하기" class="headerlink" title="깃허브 공개키 등록하기"></a>깃허브 공개키 등록하기</h3><p>먼저, 사내에서 사용중인 조직 계정으로 등록되어있는 프라이빗 깃허브 리파지토리를 복사해오거나 푸시해야한다면 조직에 속한 내 사용자 계정에 SSH 키 페어를 등록하고 깃허브 서버에 인증할 수 있어야 한다. 사용자 계정 설정 &gt; 액세스 &gt; <a href="https://github.com/settings/keys">SSH and GPG Keys</a> 메뉴로 진입하면 SSH 키 페어를 등록할 수 있도록 제공하고 있으므로 앞서 만들었던 ED25519 키 페어를 등록하고 깃허브에 접속할 수 있는지 테스트 해보자.</p><p><img data-src="/images/posts/ssh/ssh-02.png"></p><p><img data-src="/images/posts/ssh/ssh-03.png"></p><p><img data-src="/images/posts/ssh/ssh-04.png"></p><p>깃허브 서버에 우리가 만든 키 페어를 등록하였으므로 내 컴퓨터의 OpenSSH 클라이언트로 깃허브에 연결할 수 있는지 확인해보자. 깃허브에서는 앞서 리눅스 서버에 연결했던 것 처럼 쉘을 제공하지는 않지만 인증에 성공할 수 있는지 검증해볼 수 있다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i win-mambo-ed25519<span class="token punctuation">.</span>pem <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>comThe authenticity of host <span class="token string">'github.com (15.164.81.167)'</span> cannot be established<span class="token punctuation">.</span>ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM<span class="token punctuation">.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? yesWarning: Permanently added <span class="token string">'github.com,15.164.81.167'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts<span class="token punctuation">.</span>Hi kdevkr! You've successfully authenticated<span class="token punctuation">,</span> but GitHub does not provide shell access<span class="token punctuation">.</span></code></pre><h3 id="EC2-공개키-등록하기"><a href="#EC2-공개키-등록하기" class="headerlink" title="EC2 공개키 등록하기"></a>EC2 공개키 등록하기</h3><p>아마존 웹 서비스에서 EC2 인스턴스를 실행할 때 키 페어를 자동으로 만들어주기도 하는데 이미 만들어진 SSH 키 페어를 가져와서 등록하고 사용할 수 있도록 지원하고 있다. 내 컴퓨터에서 발급했던 공개키를 가져와서 등록한 후 EC2 인스턴스인 리눅스 서버에 접속할 수 있는지 확인해보자.</p><p><img data-src="/images/posts/ssh/ssh-05.png"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i win-mambo-ed25519<span class="token punctuation">.</span>pem ec2-user@15<span class="token punctuation">.</span>164<span class="token punctuation">.</span>219<span class="token punctuation">.</span>55The authenticity of host <span class="token string">'15.164.219.55 (15.164.219.55)'</span> cannot be established<span class="token punctuation">.</span>ECDSA key fingerprint is SHA256:64Ca/STwUWZkN+ggo5jx6BCvwyhNRcCY5/xjk0SkSjU<span class="token punctuation">.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? yesWarning: Permanently added <span class="token string">'15.164.219.55'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts<span class="token punctuation">.</span>       __<span class="token punctuation">|</span>  __<span class="token punctuation">|</span>_  <span class="token punctuation">)</span>       _<span class="token punctuation">|</span>  <span class="token punctuation">(</span>     <span class="token operator">/</span>   Amazon Linux 2 AMI      ___<span class="token punctuation">|</span>\___<span class="token punctuation">|</span>___<span class="token punctuation">|</span>https:<span class="token operator">/</span><span class="token operator">/</span>aws<span class="token punctuation">.</span>amazon<span class="token punctuation">.</span>com/amazon-linux-2/<span class="token namespace">[ec2-user@ip-10-0-2-243 ~]</span>$ <span class="token function">cat</span> ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/authorized_keysssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOy21gZ45To8FNf6hilxV51QqT9JCBjIpVKCRlup7m4D window-mambo</code></pre><blockquote><p>EC2 인스턴스가 퍼블릭 서브넷에 위치하고 22번 포트가 허용되어있다면 SSH 키 페어를 사용하여 EC2 인스턴스에 접속할 수 있는데, 인터넷에서 바로 접근할 수 없는 프라이빗 서브넷에 위치한 EC2 인스턴스에 SSM 에이전트를 구성한다면 아마존 웹 서비스에서 제공하는 <a href="/connect-private-ec2-instance-using-ssm-agent/">SSM 엔드포인트를 사용해서 SSH 접속이 가능</a>하도록 만들 수 있다.</p></blockquote><h2 id="트러블슈팅"><a href="#트러블슈팅" class="headerlink" title="트러블슈팅"></a>트러블슈팅</h2><p>지난 <a href="/ed25519">ED25519</a> 글을 읽어본 분들이라면 윈도우 컴퓨터에서 발급한 ED25519 키 페어를 발급하고 윈도우 환경에서 비밀키를 사용해서 인증을 시도하면 키 형식이 올바르지 않아서 실패하는 문제가 있다는 것을 확인했을 것이다. 지난번 글에서는 단순히 안되는 부분을 언급하고 마무리하였지만 이 문제에 대해서 왜 그런것인가에 대해 궁금해졌고 <a href="https://github.com/aws/aws-cli/discussions/7074">aws-cli&#x2F;discussions&#x2F;7074</a>로 관련 문제에 대해서 질문을 통해서 원인을 찾게 되었다.</p><p><img data-src="/images/posts/ssh/ssh-06.png"></p><p>윈도우 환경에서 AWS CLI를 통해서 키 페어를 발급하고나서 비밀키 파일에 대해서 에디터로 열어보면 위와 같이 UTF-16LE 인코딩 형식과 CRLF 개행 방식으로 되어있는 것을 확인할 수 있었다. OpenSSH의 ssh-keygen으로 만들어지는 키페어 파일을 살펴보면 UTF-8과 LF로 만들어지는데 Git Bash에 포함되어있는 dos2unix라는 도구를 통해서 UTF-16LE로 되어있는 인코딩 형식을 UTF-8로 변경해보고 시도해본결과 정상적으로 접속을 수행할 수 있었다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ dos2unix aws-mambo.pemdos2unix: converting UTF-16LE file aws-mambo.pem to UTF-8 Unix format...</code></pre><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i aws-mambo<span class="token punctuation">.</span>pem ec2-user@3<span class="token punctuation">.</span>34<span class="token punctuation">.</span>188<span class="token punctuation">.</span>47       __<span class="token punctuation">|</span>  __<span class="token punctuation">|</span>_  <span class="token punctuation">)</span>       _<span class="token punctuation">|</span>  <span class="token punctuation">(</span>     <span class="token operator">/</span>   Amazon Linux 2 AMI      ___<span class="token punctuation">|</span>\___<span class="token punctuation">|</span>___<span class="token punctuation">|</span>https:<span class="token operator">/</span><span class="token operator">/</span>aws<span class="token punctuation">.</span>amazon<span class="token punctuation">.</span>com/amazon-linux-2/<span class="token namespace">[ec2-user@ip-10-0-2-42 ~]</span>$</code></pre><p>또한, 윈도우 터미널이 아니라 Git Bash에서 시도해본 결과 다음과 같이 다시한번 키 형식이 올바르지 않다는 메시지가 발생했는데 이번에는 CRLF로 되어있던 개행 형식을 LF로 변경하게되면 성공적으로 접속할 수 있음을 확인했다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -i aws-mambo.pem ec2-user@3.34.188.47Load key <span class="token string">"aws-mambo.pem"</span><span class="token builtin class-name">:</span> invalid <span class="token function">format</span>ec2-user@3.34.188.47: Permission denied <span class="token punctuation">(</span>publickey,gssapi-keyex,gssapi-with-mic<span class="token punctuation">)</span>.</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -i aws-mambo.pem ec2-user@3.34.188.47       __<span class="token operator">|</span>  __<span class="token operator">|</span>_  <span class="token punctuation">)</span>       _<span class="token operator">|</span>  <span class="token punctuation">(</span>     /   Amazon Linux <span class="token number">2</span> AMI      ___<span class="token operator">|</span><span class="token punctuation">\</span>___<span class="token operator">|</span>___<span class="token operator">|</span>https://aws.amazon.com/amazon-linux-2/<span class="token punctuation">[</span>ec2-user@ip-10-0-2-42 ~<span class="token punctuation">]</span>$</code></pre><p>실무에서 SSH 키 페어를 전달받았는데 SSH 접속이 불가능하다면 전달받은 키 페어 파일의 인코딩 형식과 개행 형식을 살펴보고 위와 같이 변경해서 시도해보기를 추천한다. </p><blockquote><p>실무에서는 조직 혹은 인프라 환경마다 다양한 방식으로 서버에 접속할 수 있는 방법을 제한하는데요. 배스천 호스트로 우선 접속하거나서 각 서버마다 정해진 사용자 이름과 비밀번호를 사용하여 이동해야하거나 심지어는 SSH 키 페어 인증 뿐만 아니라 OTP를 통한 2FA 인증을 요구하도록 구성하기도 합니다. 저는 서버 엔지니어가 아니므로 SSH 연결 시 2FA을 구성하는 것은 모르기에 이 부분에 대해서는 별도로 찾아보아야겠습니다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">Connect to your Linux instance using SSH</a>  </li><li><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">Connecting to GitHub with SSH</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;개발자 또는 시스템을 운용하는 사람들이 서버 엔지니어가 구축한 원격 호스트에 접속하기 위해서 SSH 프로토콜을 사용한다. 우리가 컴퓨터에 로그인하는 것처럼 간단하게 사용자 이름과 비밀번호를 사용하기도 하며 공개키 기반 인증으로 비밀번호를 대체하거</summary>
      
    
    
    
    
    <category term="SSH" scheme="https://kdevkr.github.io/tags/SSH/"/>
    
    <category term="Key Pair" scheme="https://kdevkr.github.io/tags/Key-Pair/"/>
    
    <category term="RSA" scheme="https://kdevkr.github.io/tags/RSA/"/>
    
    <category term="ED25519" scheme="https://kdevkr.github.io/tags/ED25519/"/>
    
  </entry>
  
  <entry>
    <title>개발자가 알아야할 네트워크 지식</title>
    <link href="https://kdevkr.github.io/network/"/>
    <id>https://kdevkr.github.io/network/</id>
    <published>2022-05-27T00:00:00.000Z</published>
    <updated>2022-10-06T15:47:20.890Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/network/01.jpg" alt="노란건 돌돌이..."></p><p><a href="https://roadmap.sh/backend">roadmap.sh</a>를 참고하면 프론트엔드와 백엔드 개발자 모두 인터넷이라는 기초 지식을 필요로 하다고 말합니다. 그렇다면 위 장비들이 인터넷을 사용하기 위해서 어떠한 용도로 사용되는 장비라는 것을 아는 개발자가 얼마나 될까요? 이미 이것들을 알거나 다루지 않는 경험 많은 개발자들은 “개발자는 저것을 사용할 일이 없어요”라고 할테지요. 물론 저도 위 장비들을 경험한 것은 개발자로 일하고 있는 지금이 아니라 컴퓨터공학과라는 이유로 가설병 보직을 받고나서 사단 내 유선 전화를 고치거나 신규로 다이렉트 전화선을 추가해야하는 요건이 있을때 사용해본 경험이 있을 뿐입니다.</p><blockquote><p>심지어는 유선병이라는 이유로 늘어진 통신선을 정리하기 위해서 전봇대도 타야하는 상황도…</p></blockquote><p>아무튼 위와 같은 경험이 없었더라면 인터넷을 사용하기 위해서 사용하는 <em>RJ45 커넥터 규격</em>이란 것을 떠올리거나 UTP 케이블을 커넥터와 결합할 때 일반적으로 나열하는 <em>색상의 순서가 표준으로 정해져있다</em>는 것을 알지 못했을 겁니다. 왜냐하면 현재 개발자로 일할때에는 인터넷 선에 대한 부분을 직접 다루어본다거나 이미 구성된 서버 인프라 환경을 통해서 애플리케이션을 배포하고 운영하기 때문이죠.</p><p><img data-src="/images/posts/network/02.png" alt="대한민국 해저 케이블 위치"></p><p>인터넷으로 전세계가 연결될 수 있다는 것을 알아도 우리나라에서 다른 나라로 트래픽이 전달되기 위해서는 수 많은 <a href="https://www.submarinecablemap.com/country/south-korea">해저 광 케이블</a>이 설치되고 경유한다는 것까지는 모를 수 있습니다. 실제로 개발자 또는 엔지니어가 아닌 사업팀에게 사용자의 클릭으로 인해 어떠한 요청이 서버로 전달되고 다시 돌아오는데까지 설명하더라도 바다를 통해서 다른 나라로 건너가서 서버로 들어오게 된다라고 설명하지는 않습니다.</p><blockquote><p>개인적으로 궁금할 수는 있지만 굳이 모른다고해도 일하거나 이해하는데 지장이 없기 때문이죠.</p></blockquote><h4 id="해저-케이블-관련-정보"><a href="#해저-케이블-관련-정보" class="headerlink" title="해저 케이블 관련 정보"></a>해저 케이블 관련 정보</h4><ul><li><a href="https://www.yna.co.kr/view/AKR20210108069100051">해저케이블 있기에 가능한 지구촌 소통</a></li><li><a href="https://brunch.co.kr/@go2hanoi/14">베트남 해저 케이블은 왜 자주 끊길까?</a></li><li><a href="http://www.goodmorningvietnam.co.kr/mobile/article.html?no=49888">해저 케이블 루트 2개에 문제가 있는데 여전히 고칠 수 없다</a></li></ul><p>조직내에 서버 인프라 엔지니어가 있거나 인프라 팀이 존재한다면 애플리케이션으로 트래픽이 전달되도록 <a href="https://aws.amazon.com/ko/route53/what-is-dns/">DNS</a>와 <a href="https://docs.microsoft.com/ko-kr/azure/rtos/netx-duo/netx-duo-nat/chapter1">NAT</a>와 같은 설정들을 개발자가 담당하지는 않을겁니다. AWS와 같은 클라우드 서비스에서는 개발자가 직접 웹 콘솔을 통해서 클릭만으로도 서버 인프라 구성에 대한 설정을 쉽게 할 수 있도록 제공하긴 합니다. 그래서 클라우드 인프라 환경을 직접 다루는 저와 같은 개발자들은 요구사항에 따라서 인프라 구성을 검토하거나 설정을 변경해야하는 작업도 해야할 수 있기에 어느정도의 인프라 지식도 필요하게 되죠.</p><blockquote><p>알아야하는 인프라 지식은 현재 조직에서 어떤 것을 경험하느냐에 따라 달라집니다.</p></blockquote><p>일반적으로는 HTTP라는 통신 프로토콜을 사용하지만 사업 분야에 따라서 <a href="https://mqtt.org/">MQTT 통신 프로토콜</a>를 통해 데이터가 전달된다거나 <a href="https://ko.wikipedia.org/w/index.php?title=%EB%AA%A8%EB%93%9C%EB%B2%84%EC%8A%A4&tableofcontents=0">Modbus TCP</a>를 통해 산업 자동화 장비와의 통신으로 데이터를 수집하고 심지어는 차량에서는 <a href="https://ko.wikipedia.org/wiki/CAN_%EB%B2%84%EC%8A%A4">CAN 통신</a>을 사용하고 OBD 모듈을 통해서 데이터를 전달받기도 하죠. 통신 프로토콜 뿐만 아니라 이더넷으로 인터넷에 접속하지 않고 프라이빗 네트워크 환경으로 연결하며 무선 통신을 통해서 인터넷으로 접속하는 인프라 환경을 경험해보지 않았다면 아마도 네트워크 우선 순위가 있다는 지식을 알지 못하고 있을 수 있씁니다.</p><blockquote><p>셀룰러 모듈이 포함된 클라이언트 장비를 전달하고나서 유선 연결을 시도한 순간 인터넷 연결이 끊어져서 원격이 해제되었던 것을 실제로 경험하기도 했죠.</p></blockquote><p>대부분의 개발자가 웹 서버 또는 애플리케이션에 SSL 인증서를 설치해서 HTTPS 통신을 할 수 있도록 구성할 수 있지만 AWS 클라우드 환경을 사용하지 않거나 ELB 중 NLB를 통해서 ECC 기반의 SSL 인증서를 설정하여 TLS 오프로드 기능을 설정하려고 시도하지 않았다면 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificates">2048 이상의 RSA 키 또는 EC 키가 포함된 인증서를 지원하지 않음</a>에 대한 것을 알지 못할 수 있습니다. </p><p>결국은 개발자라는 직무에서 알아야할 네트워크 지식은 정해져있지 않으며 현재 내가 조직에서 어떠한 요구사항을 처리하는가 또는 어떤 것까지 담당하고 경험하는가에 따라 그 깊이와 범위가 달라질 수 있다는 점을 인지해야할 것 같습니다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/network/01.jpg&quot; alt=&quot;노란건 돌돌이...&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roadmap.sh/backend&quot;&gt;roadmap.sh&lt;/a&gt;를 참고하면 프론트엔드와 백엔</summary>
      
    
    
    
    
    <category term="개발자" scheme="https://kdevkr.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
    <category term="네트워크" scheme="https://kdevkr.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
  </entry>
  
</feed>
