<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2022-07-17T10:38:44.404Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PKI(Public Key Infrastructure)</title>
    <link href="https://kdevkr.github.io/pki/"/>
    <id>https://kdevkr.github.io/pki/</id>
    <published>2022-07-17T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>정보보안 전문가의 수준은 아닐지라도 웹 애플리케이션에서 사용되는 보안 기술에 대해서 어느정도 이해하고 있어야합니다. 이 글은 <a href="/ssl-certificate/">SSL 인증서</a>와 <a href="/mutual-tls/">Mutual TLS</a>에서 언급하거나 다루어본 X.509 인증서와 함께 공개키 기반 인증 구조라고 하는 PKI와 관련된 용어와 개념에 대해서 간단하게 알아봅니다.</p></blockquote><h2 id="X-509-Certificate"><a href="#X-509-Certificate" class="headerlink" title="X.509 Certificate"></a>X.509 Certificate</h2><p><em>A public key infrastructure (PKI) is a set of roles, policies, hardware, software and procedures needed to create, manage, distribute, use, store and revoke digital certificates and manage public-key encryption.</em></p><p>X.509는 <a href="https://datatracker.ietf.org/doc/html/rfc5280">RFC5280</a>로 정의되어있는 디지털 인증서(공개키 인증서)의 표준 형식입니다. 대부분의 웹 애플리케이션에 적용하는 HTTPS 프로토콜에서 TLS 핸드쉐이크를 위해서 사용되는 가장 일반적인 인증서 형식이기도 하듯이 전세계적으로 디지털 인증서라 함은 ITU-T X.509 표준 방식으로 작성된 X.509 인증서라고 할 수 있습니다. 국내에서 사용되던 <a href="https://ko.wikipedia.org/wiki/%EA%B3%B5%EB%8F%99%EC%9D%B8%EC%A6%9D%EC%84%9C">공동인증서(공인인증서)</a>도 공개키 기반 인증 기술을 활용해서 만든 디지털 인증서이지만 한국에서만 사용할 수 있는 인증서 형식이라는 점입니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl x509 -in local.dev+1.pem -text -nooutCertificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            e5:29:9a:ba:66:<span class="token punctuation">..</span>.        Signature Algorithm: sha256WithRSAEncryption        Issuer: O <span class="token operator">=</span> mkcert development CA, OU <span class="token operator">=</span> ubuntu@ubuntu, CN <span class="token operator">=</span> mkcert ubuntu@ubuntu        Validity            Not Before: Jul <span class="token number">12</span> <span class="token number">21</span>:55:43 <span class="token number">2022</span> GMT            Not After <span class="token builtin class-name">:</span> Oct <span class="token number">12</span> <span class="token number">21</span>:55:43 <span class="token number">2024</span> GMT        Subject: O <span class="token operator">=</span> mkcert development certificate, OU <span class="token operator">=</span> ubuntu@ubuntu        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>                Modulus:                    00:d8:c2:77:4f:4f:9d:1c:c2:70:b2:00:52:4f:e7:                    <span class="token punctuation">..</span>.                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>        X509v3 extensions:            X509v3 Key Usage: critical                Digital Signature, Key Encipherment            X509v3 Extended Key Usage:                TLS Web Server Authentication            X509v3 Authority Key Identifier:                keyid:3B:31:5D:2F:7C:D6:E6:E2:F5:9B:66:1D:E5:75:5C:11:C6:85:8C:6D            X509v3 Subject Alternative Name:                DNS:local.dev, DNS:localhost    Signature Algorithm: sha256WithRSAEncryption         <span class="token number">43</span>:e1:81:18:d5:04:ca:d4:73:68:85:4d:1d:d4:79:cb:02:0d:         <span class="token punctuation">..</span>.</code></pre><p>위 예시는 로컬 호스트에서 사용할 수 있는 사설 인증서를 만드는 오픈소스 도구인 <a href="https://github.com/FiloSottile/mkcert">mkcert</a>를 통해 만들어진 X.509 인증서에 대한 정보를 openssl 도구로 인증서에 포함된 정보를 확인해본 것입니다. 인증서에 포함될 수 있는 필드들은 RFC5280 문서에 설명되어있는데 발급자(Issuer), 서명 알고리즘(Signature Algorithm), 소유자(Subject), 소유자의 공개키(Subject Public Key Info) 그리고 신원을 확인할 수 있는 부가 정보(Extensions)입니다. </p><p>HTTPS 프로토콜 통신에서 TLS 핸드쉐이킹 과정 중 클라이언트는 서버에서 제공한 X.509 인증서 정보를 확인하여 부가 정보 중 SAN(X509v3 Subject Alternative Name)에 입력된 정보를 토대로 브라우저에서 도메인이나 IP 주소에 대한 신원을 추가적으로 검증합니다. 예를 들어, 위 예시에서는 localhost와 local.dev라는 호스트를 신뢰할 수 있다고 판단할 수 있습니다.</p><blockquote><p>X.509 인증서는 상위 기관에서 소유자의 공개키를 전자서명한 것으로 암호화가 목적이 아닌 공개키에 대한 소유자의 신원을 검증하고자 함에 있습니다.</p></blockquote><h3 id="PEM-Format"><a href="#PEM-Format" class="headerlink" title="PEM Format"></a>PEM Format</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl x509 -in local.dev+1.pem-----BEGIN CERTIFICATE-----MIIEDDCCAnSgAwIBAgIRAOUpmrpmzWKOajX3U1ze1McwDQYJKoZIhvcNAQELBQAwVzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMRYwFAYDVQQLDA11YnVudHVAdWJ1bnR1MR0wGwYDVQQDDBRta2NlcnQgdWJ1bnR1QHVidW50dTAeFw0yMjA3MTIyMTU1NDNaFw0yNDEwMTIyMTU1NDNaMEExJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9wbWVudCBjZXJ0aWZpY2F0ZTEWMBQGA1UECwwNdWJ1bnR1QHVidW50dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANjCd09PnRzCcLIAUk/nr27i2uvztXSF1vbwUby3dPWQcZuR3cLRvIeNv6oOMLnf9uGbI/pjlRcCoZwk+ETUZtVrsFsvNZGCir34QbXkNb96/M8HSM3ZC9soeijU8NqoWDjr4LGtU+FX8pOOHbsjJoiyIH7lg76EpOUrasnVmx6T8xoUlye2si0A+VbV/J6tlJXKix0qidliIiBIY2HWktN+HBIYbttuRwXOK22i7KPwT/jURgZlcAq5Lmfu9+pTs5ak2jXSaneWLkKF0/9RxMy2jGKfdTwYqU4ZjbZz1zXs+UeI7hgsPqprhnVBkDAejNrXNJ1O390IbwtgboJ/V6cCAwEAAaNpMGcwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFDsxXS981ubi9ZtmHeV1XBHGhYxtMB8GA1UdEQQYMBaCCWxvY2FsLmRldoIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBgQBD4YEY1QTK1HNohU0d1HnLAg3Pm9bUJxGWw2bOAO+0Dgdau3Fn+72JPz7ZYGX3Deny01TYDEoeno7VOY+gq2u0F4L1SBNWdXhdxxfj/4JK3r1FpmgmEpPOVyrO2KMWgPlNu4JV8jUc/OIOeKYe8S9VddM7VyRjZSCNKsI4kneeu/fZFXLMtWS8lcj/hubQdGYXuSaSZHihpTPvCR2XP6z+NbeDndqo4YemGIUS2eyp4MQCwlR910FUv3NNgk43iJw368ma8p/jigQeUx9reyYKijxd/rbwmg9k5Mks+CgK7pi0Bd8uJxD5i9KgitDBetjoPbw8xIazDUbhtPofs3y8HTGqR4kszm4JZMh0310Ff3hkqjXwT1oVEMrBUUUZrSBjuUEy7bujgu1JBV1f/j5lLzS5dMOM68x7my7YVSUG+hbjeB9w9eZWLx/YZ707ssvAfKVvWoyKrwwlZTQRs7mIHRcM9stz0/k/ZQZH0IBerjuPJ93BKH0wRYxU33i3htQ<span class="token operator">=</span>-----END CERTIFICATE-----</code></pre><p>위 결과는 X.509 인증서가 실제로 파일에 저장된 형태를 보여주고 있습니다. 이와 같이 구성되는 방식을 PEM(Privacy Enhanced Mail)이라고 하는데 X.509 인증서를 저장하는 가장 일반적인 형식입니다. 바이너리 데이터로 저장되는 DER(Distinguished Encoding Representation)로도 저장할 수 있으나 시스템 간 안전하게 전달될 수 있도록 <a href="/base64/">Base64</a>로 인코딩되어 아스키 코드형태로 되어있는 PEM 형식이 선호되는 것 같습니다.</p><h3 id="Certificate-Profiles"><a href="#Certificate-Profiles" class="headerlink" title="Certificate Profiles"></a>Certificate Profiles</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl s_client -showcerts -connect naver.com:443 <span class="token operator">&lt;</span>/dev/nullubuntu@ubuntu:~/x509$ openssl x509 -in naver.com.pem -text -nooutCertificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            07:f2:85:21:53:b1:50:67:e3:c6:77:aa:3a:83:be:dd        Signature Algorithm: sha256WithRSAEncryption        Issuer: C <span class="token operator">=</span> US, O <span class="token operator">=</span> DigiCert Inc, CN <span class="token operator">=</span> DigiCert TLS RSA SHA256 <span class="token number">2020</span> CA1        Validity            Not Before: May <span class="token number">23</span> 00:00:00 <span class="token number">2022</span> GMT            Not After <span class="token builtin class-name">:</span> Jun  <span class="token number">7</span> <span class="token number">23</span>:59:59 <span class="token number">2023</span> GMT        Subject: C <span class="token operator">=</span> KR, ST <span class="token operator">=</span> Gyeonggi-do, L <span class="token operator">=</span> Seongnam-si, O <span class="token operator">=</span> NAVER Corp., CN <span class="token operator">=</span> www.naver.net        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>                Modulus:                    00<span class="token punctuation">..</span>.                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>        X509v3 extensions:            X509v3 Authority Key Identifier:                keyid:B7:6B:A2:EA:A8:AA:84:8C:79:EA:B4:DA:0F:98:B2:C5:95:76:B9:F4            X509v3 Subject Key Identifier:                F5:3C:13:14:C9:7B:15:36:50:8C:3E:89:40:EE:2C:E0:22:2F:9E:61            X509v3 Subject Alternative Name:                DNS:www.naver.net, DNS:www.naver.asia, DNS:www.naver.co, DNS:www.naver.kr, DNS:www.naver.co.kr, DNS:naver.com, DNS:naver.net, DNS:naver.asia, DNS:naver.co, DNS:naver.kr, DNS:naver.co.kr            X509v3 Key Usage: critical                Digital Signature, Key Encipherment            X509v3 Extended Key Usage:                TLS Web Server Authentication, TLS Web Client Authentication            X509v3 CRL Distribution Points:                Full Name:                  URI:http://crl3.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl                Full Name:                  URI:http://crl4.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl            X509v3 Certificate Policies:                Policy: <span class="token number">2.23</span>.140.1.2.2                  CPS: http://www.digicert.com/CPS            Authority Information Access:                OCSP - URI:http://ocsp.digicert.com                CA Issuers - URI:http://cacerts.digicert.com/DigiCertTLSRSASHA2562020CA1-1.crt            <span class="token punctuation">..</span>.    Signature Algorithm: sha256WithRSAEncryption         2e<span class="token punctuation">..</span>.</code></pre><p>네이버 사이트의 서버 인증서를 전달받은 후 X.509 인증서 정보를 조회해보면 네이버의 인증서를 발급한 기관은 DigiCert 이며 네이버 인증서에 포함되는 공개키를 sha256WithRSAEncryption 서명 알고리즘을 사용해서 전자 서명을 한 것을 확인할 수 있습니다.</p><ul><li>인증서 발급 기관(Issuer)</li><li>인증서 만료 기한(Validity) </li><li>공개키 소유자(Subject) </li><li>공개키(Subject Public Key Info)</li><li>서명 알고리즘(Signature Algorithm)</li><li>소유자 대체 이름(Subject Alternative Name)</li></ul><h2 id="PKCS"><a href="#PKCS" class="headerlink" title="PKCS"></a>PKCS</h2><p>PKCS(Public key Cryptography Standard)는 공개키 기반 인증 구조에서 안전하게 정보를 교환하기 위한 프로토콜입니다.</p><h3 id="PKCS-8"><a href="#PKCS-8" class="headerlink" title="PKCS#8"></a>PKCS#8</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc5208">RFC5208</a>로 정의된 PKCS#8은 공개키 기반 인증 구조에서 사용되는 개인키를 표현하고 저장하기 위한 표준으로 앞서 X.509 인증서와 같이 PEM 형식으로 저장합니다. 지난 <a href="/mutual-tls/">Mutual TLS</a>에서는 자바 애플리케이션에서 PEM 형식의 클라이언트 인증서와 개인키를 통해 키 스토어를 만드는 과정에서 PKCS8EncodedKeySpec 이란 것을 사용했다는 것을 알 수 있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkey -in local.dev+1-key.pem-----BEGIN PRIVATE KEY-----MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDYwndPT50cwnCyAFJP569u4trr87V0hdb28FG8t3T1kHGbkd3C0byHjb+qDjC53/bhmyP6Y5UXAqGcJPhE1GbVa7BbLzWRgoq9+EG15DW/evzPB0jN2QvbKHoo1PDaqFg46+CxrVPhV/KTjh27IyaIsiB+5YO+hKTlK2rJ1Zsek/MaFJcntrItAPlW1fyerZSVyosdKonZYiIgSGNh1pLTfhwSGG7bbkcFzittouyj8E/41EYGZXAKuS5n7vfqU7OWpNo10mp3li5ChdP/UcTMtoxin3U8GKlOGY22c9c17PlHiO4YLD6qa4Z1QZAwHoza1zSdTt/dCG8LYG6Cf1enAgMBAAECggEAIehp2ZJOtY0FLBM4zR8lJmd+b6K0JAI72m1FnAvm0/NAkmGDG1LL9ziJXwTRQoJykGBAhI7HZ84VkeOGot3HKGOsNtdvvc95/LW1Mcr9TXLj0U8GaI0neaUfVvvYoZvsERt1DtZaZMnpPIPiyr9467FRvAgTT95YHTFphyFPHr0kVlAd4qAbyIzOSiGmoBg2Krjk5dXW9Cg7YIxKNUXlxMHNlP3c9zxKyy7Cd3qcp4tFzKxqiTXPEdOxw3b66P/2+RQWi6kCQfu2RINZLjzPBajjEYJ8/o8sVXDs1Bl6pPnpYzMLjHapX8V+NuuG8r9O8Y28siO0NT+tpVnyJHUE4QKBgQDdTb7KJySyUYk+xySCPv3lpBucfnJDy7veWNdiu4KIMVtqnenPJATVE9ovdWFNNrr+1cLJG/uvM3AOSTLHJRXHcFewm2ipxovgr6SKx65zevHbbVMcaDir3hdvh6h7qG/naURQlNz1xups68g89xvbBnFp/X4fTDto+QQUIR5hRQKBgQD6vlcYJUcG7rr6nOEacUtxvhE59qX5sWDCAvrfP/IUjitsqiH9YRTkuUfYQXGQMMfpXCViZ/UVQEsiI4LMY3wM4pquWplZVn9CeyrbgZn/QP2Bp1nExmL21HWGooBG6l2lxGM18lMIzY7vE5GMzGGkH8rRHqgkIAkuTIC5G/sl+wKBgQCGvXUyY87F+zrSzDEAVBYGIXrmN16exIaoA/Nvm7cH8PU13tuiUM3YZfPr/U2202HbEo88HxuIOos5R3vxIDU4bsAVOSnqZIZ50LcgAB/JE8v5y4BUxWfrzJb8Qt5kG9O2U7NSVLCLvAazNoN+Cv4cxrl6zOpjZ+isKyE+mEOE+QKBgQC5M1l09iOuFSp57OG+/CtzSaXDoFAbS05iPn055CtTz2Z3jnoogkpCXi+YpU3R6JXf4TWjp5E4LxLPllcHy/tWMRF68mQNvnukiQCwvNsX09Lqrsb5NmbmVSqxVNlWh8i/pXx53hBCkkGeiF+bFWKRLQJKz0/1zsu5LLxu/SHVfQKBgGuldPS/1zqt1eblPAeobBot1LMCxS8Bk6n1dMiWDM0+yANwh+tkA+MFyZTbdPjjf2e+RAXwUtsKLSvJha0EXLEZPSQL7WDIleYVJ5oAX4nfHS4eNZzvxnL7bblcWtekrBNnHinKS+Cqd+ATLixLnDpi0w+DTfQu93eKXg1NCYrg-----END PRIVATE KEY-----ubuntu@ubuntu:~/x509$ openssl pkey -in local.dev+1-key.pem -text -nooutRSA Private-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit, <span class="token number">2</span> primes<span class="token punctuation">)</span>modulus:    00<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.</code></pre><h3 id="PKCS-12"><a href="#PKCS-12" class="headerlink" title="PKCS#12"></a>PKCS#12</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc7292">RFC7292</a>로 정의된 PKCS#12는 인증서와 개인키 등 공개키 기반 인증 구조에서 사용되는 다양한 항목들을 하나로 통합하여 교환하기 위한 정보 교환의 표준입니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkcs12 -in local.dev+1.pkcs12Enter Import Password: mamboBag Attributes    localKeyID: <span class="token number">16</span> CC 2D CE 9F D0 <span class="token number">52</span> C9 <span class="token number">72</span> <span class="token number">97</span> <span class="token number">90</span> DC EC AB DF <span class="token number">28</span> 0B EA B6 AA<span class="token assign-left variable">subject</span><span class="token operator">=</span>O <span class="token operator">=</span> mkcert development certificate, OU <span class="token operator">=</span> ubuntu@ubuntu<span class="token assign-left variable">issuer</span><span class="token operator">=</span>O <span class="token operator">=</span> mkcert development CA, OU <span class="token operator">=</span> ubuntu@ubuntu, CN <span class="token operator">=</span> mkcert ubuntu@ubuntu-----BEGIN CERTIFICATE-----MIIEDDCCAnSgAwIBAgIRAOUpmrpmzWKOajX3U1ze1McwDQYJKoZIhvcNAQELBQAwVzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMRYwFAYDVQQLDA11YnVudHVAdWJ1bnR1MR0wGwYDVQQDDBRta2NlcnQgdWJ1bnR1QHVidW50dTAeFw0yMjA3MTIyMTU1NDNaFw0yNDEwMTIyMTU1NDNaMEExJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9wbWVudCBjZXJ0aWZpY2F0ZTEWMBQGA1UECwwNdWJ1bnR1QHVidW50dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANjCd09PnRzCcLIAUk/nr27i2uvztXSF1vbwUby3dPWQcZuR3cLRvIeNv6oOMLnf9uGbI/pjlRcCoZwk+ETUZtVrsFsvNZGCir34QbXkNb96/M8HSM3ZC9soeijU8NqoWDjr4LGtU+FX8pOOHbsjJoiyIH7lg76EpOUrasnVmx6T8xoUlye2si0A+VbV/J6tlJXKix0qidliIiBIY2HWktN+HBIYbttuRwXOK22i7KPwT/jURgZlcAq5Lmfu9+pTs5ak2jXSaneWLkKF0/9RxMy2jGKfdTwYqU4ZjbZz1zXs+UeI7hgsPqprhnVBkDAejNrXNJ1O390IbwtgboJ/V6cCAwEAAaNpMGcwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFDsxXS981ubi9ZtmHeV1XBHGhYxtMB8GA1UdEQQYMBaCCWxvY2FsLmRldoIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBgQBD4YEY1QTK1HNohU0d1HnLAg3Pm9bUJxGWw2bOAO+0Dgdau3Fn+72JPz7ZYGX3Deny01TYDEoeno7VOY+gq2u0F4L1SBNWdXhdxxfj/4JK3r1FpmgmEpPOVyrO2KMWgPlNu4JV8jUc/OIOeKYe8S9VddM7VyRjZSCNKsI4kneeu/fZFXLMtWS8lcj/hubQdGYXuSaSZHihpTPvCR2XP6z+NbeDndqo4YemGIUS2eyp4MQCwlR910FUv3NNgk43iJw368ma8p/jigQeUx9reyYKijxd/rbwmg9k5Mks+CgK7pi0Bd8uJxD5i9KgitDBetjoPbw8xIazDUbhtPofs3y8HTGqR4kszm4JZMh0310Ff3hkqjXwT1oVEMrBUUUZrSBjuUEy7bujgu1JBV1f/j5lLzS5dMOM68x7my7YVSUG+hbjeB9w9eZWLx/YZ707ssvAfKVvWoyKrwwlZTQRs7mIHRcM9stz0/k/ZQZH0IBerjuPJ93BKH0wRYxU33i3htQ<span class="token operator">=</span>-----END CERTIFICATE-----Bag Attributes    localKeyID: <span class="token number">16</span> CC 2D CE 9F D0 <span class="token number">52</span> C9 <span class="token number">72</span> <span class="token number">97</span> <span class="token number">90</span> DC EC AB DF <span class="token number">28</span> 0B EA B6 AAKey Attributes: <span class="token operator">&lt;</span>No Attributes<span class="token operator">></span>Enter PEM pass phrase: mamboVerifying - Enter PEM pass phrase: mambo-----BEGIN ENCRYPTED PRIVATE KEY-----MIIFHDBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIUCWpIEy8DAECAggAMAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECAwP9e11T4W6BIIEyP1XL6GHaVmqcgu+jiWoeopRciYOLS0MWB8Yzb/8Rslyx1l1MAluW+QP30qCbVhhO6l7ulziGC0hRNNNittmdSrZKPbNtch8ZY0G/dWoMY9VfjJSdndbWwXv8zulRXMYiXeVME8MsmG5HPTZyc785dVpeCYaFt6muWw2ABnP97ShSLdIRAeY2G6HDLnEz3/hjbYfE2UFF68ik/wEEtK5f48XxM+PuyDKk4b3+qFfqVSRS6QbdCnrKVQfGqeiWQKOdt/FQZ82/xIqlu3kVuXPmEaN8W62MK1vCocjm/AXJ6l01gUqL00a6ntdTdsCXA6g0qpcwZDd6/1gVgsEK0Y1mbzfq1YS52zw+obHp6nIJpA7Fnllf6irT3mSyEIzorIZ4z4As6CA91EmM4DjFJ6FlLpmVIofe0JlzGxTZ1yueWLZjGf+3sEImikF6ndzh+dCV0ox73h6g8VsD79MHkaZfuBL0ZrxyGSOomRO9WhRrjUihlgILLtMHStWDDTp4F194SiD2T+xC25LuvpfQAmLYYL+otb9n2cv1thik/MjZCDk5duYcRDLUJ3G23MaHk6DC13JaDk925zFhbnFCt1PTzvWZ+HjE1GEFiDr88YJkyLdI7VKTsMC/bcfAE7SrpaqX0cLVjnmlIQK5ScNYvB+PxCJj95YZsVpZ8cw9V/NlkWT1kpSX//G8Wl4YKW0vM25aBCca2hFqbCDC3/6vqqx4z8D+r3K8KRVV/7y94JaMoHjrvd1fjUDOQfuilh3bgfCmhuFS8IV/HjBbkuPY/O8O8abcb16wTMReKqahpmFsdOwIC/2gqoTQbKp2xbtY+gcvcObsWQRMcMHmrHx2vMO4Tr4BKgNBxz4Gv5KAE/Pa2Gvqs0O5xsLNxF1kMUyT5CkrAuUayvysGHvY98p7ORHFKfA+tFOxgf7jBrs6/BpQmZHrbOU4v4WplpcbUe9e31l11n8BkQ/qhcOrtsxqcYub3PRXwpm68LhDacKTdtyVv/j6yYba/RbfSn8ZwZAiwS6oW69qa/JCtECiw0058pNxHujA/A4Ceb7G9uFPhNb2UfgwzmID5tzxOhQype0vi02Vc1sMZHAsmIIiIpJUmh37Td1VkxUg+3FspeOmw00z4WNkrf1SMpFabpySw4BXcJMDIOxYhQI/ij6mPglTjvJHF6eMw53l84MJIUHFkQDGTX2eLZBW91lDxVxmMkt74G7rD9j6pfm/Eo5gezjc9DcX3ot1T6Gv0rk0ilF3Vfuw5+f46ZtZBQqYlFalKgYVpelidv2y5kC7gEnfabH93l9GFHU4OKT1IESwPt4E0pJttVfTAwx3dBT/h8BgfN3bOqM1EdZF0/KIoc1NLl1H2o/EZ94Jig25N3jqJ7w0riNE3dE891Fu715nfEjfSxIpMKC78FR/J9qTXgu6sUwNgCs/DdVqruOjwFKupNgQcj7fwSJtnyQGY9fpZjAG+e5MiPxNFDjaoLu8M7k<span class="token number">5</span>+CGelITcwbq2U8InZIpZTOCLif3zuHg0hkf3GXCsAapfQnmovR/xjtJBWEZVw+Z2otgK9OruIMuEwxzxX2awqI5zDN2yBCnP62eEYoJ+HKM21i/hexMF4jIh9H+H99W<span class="token assign-left variable">oFgNCNUwDw6RXPEUEqnTzQ</span><span class="token operator">==</span>-----END ENCRYPTED PRIVATE KEY-----</code></pre><h4 id="Convert-PEM-to-PKCS-12"><a href="#Convert-PEM-to-PKCS-12" class="headerlink" title="Convert PEM to PKCS#12"></a>Convert PEM to PKCS#12</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkcs12 -export -in local.dev+1.pem -inkey local.dev+1-key.pem -out local.dev+1.pkcs12Enter Export Password: mamboVerifying - Enter Export Password: mambo</code></pre><h4 id="Convert-PKCS-12-to-JKS"><a href="#Convert-PKCS-12-to-JKS" class="headerlink" title="Convert PKCS#12 to JKS"></a>Convert PKCS#12 to JKS</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ keytool -importkeystore -srckeystore local.dev+1.pkcs12 -srcstoretype PKCS12 -deststoretype JKS -destkeystore local.dev+1.jksImporting keystore local.dev+1.pkcs12 to local.dev+1.jks<span class="token punctuation">..</span>.Enter destination keystore password: mamboRe-enter new password: mamboEnter <span class="token builtin class-name">source</span> keystore password: mamboEntry <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token number">1</span> successfully imported.Import <span class="token builtin class-name">command</span> completed:  <span class="token number">1</span> entries successfully imported, <span class="token number">0</span> entries failed or cancelledWarning:The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 <span class="token function">which</span> is an industry standard <span class="token function">format</span> using <span class="token string">"keytool -importkeystore -srckeystore local.dev+1.jks -destkeystore local.dev+1.jks -deststoretype pkcs12"</span><span class="token builtin class-name">.</span></code></pre><p>Java KeyStore API에서는 PKCS#12를 기본 형식으로 사용하고 있습니다. 그래서 PKCS#12로 되어있는 파일을 그대로 KeyStore로 불러올 수 있으므로 굳이 JKS 형식의 파일로 변환할 필요는 없습니다. 오히려 마지막 경고 문구에서 알려주는 것처럼 JKS 형식으로 되어있는 키스토어 파일을 PKCS#12로 변환하는 방법을 아는게 좋습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ keytool -importkeystore -srckeystore local.dev+1.jks -destkeystore local.dev+1.jks -deststoretype pkcs12Enter <span class="token builtin class-name">source</span> keystore password: mamboEntry <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token number">1</span> successfully imported.Import <span class="token builtin class-name">command</span> completed:  <span class="token number">1</span> entries successfully imported, <span class="token number">0</span> entries failed or cancelledWarning:Migrated <span class="token string">"local.dev+1.jks"</span> to PKCS12. The JKS keystore is backed up as <span class="token string">"local.dev+1.jks.old"</span><span class="token builtin class-name">.</span></code></pre><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul><li><a href="https://www.youtube.com/watch?v=t0F7fe5Alwg">Public Key Infrastructure PKI Concepts</a></li><li><a href="https://stackoverflow.com/a/7886248">Using openssl to get the certificate from a server</a></li><li><a href="https://stackoverflow.com/a/15144560">Converting PKCS#12 certificate into PEM using OpenSSL</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;정보보안 전문가의 수준은 아닐지라도 웹 애플리케이션에서 사용되는 보안 기술에 대해서 어느정도 이해하고 있어야합니다. 이 글은 &lt;a href=&quot;/ssl-certificate/&quot;&gt;SSL 인증서&lt;/a&gt;와 &lt;a href=&quot;/mut</summary>
      
    
    
    
    
    <category term="X.509" scheme="https://kdevkr.github.io/tags/X-509/"/>
    
    <category term="PKI" scheme="https://kdevkr.github.io/tags/PKI/"/>
    
    <category term="PKCS#8" scheme="https://kdevkr.github.io/tags/PKCS-8/"/>
    
    <category term="PKCS#12" scheme="https://kdevkr.github.io/tags/PKCS-12/"/>
    
  </entry>
  
  <entry>
    <title>Mutual TLS</title>
    <link href="https://kdevkr.github.io/mutual-tls/"/>
    <id>https://kdevkr.github.io/mutual-tls/</id>
    <published>2022-07-13T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mutual-Authentication"><a href="#Mutual-Authentication" class="headerlink" title="Mutual Authentication"></a>Mutual Authentication</h2><p><strong>mTLS(Mutual TLS)</strong> 는 TLS 프로토콜을 사용하면서 서버와 클라이언트 간 상호 인증을 수행하는 방법을 말한다. 일반적으로 대부분의 웹 애플리케이션에서는 HTTPS 프로토콜을 사용하여 연결을 할 때 브라우저인 클라이언트에서 서버 또는 웹 서버가 제공하는 SSL 인증서를 검증하여 올바른 곳으로 요청하는 지 검증하도록 요구합니다. 그러나, <a href="https://www.openadr.org/">OpenADR</a>와 같은 일부 프로토콜에서는 서버에서도 클라이언트의 신원을 확인하여 더 확실한 보안성을 요구하기도 합니다.</p><h3 id="X-509-Client-Certificate"><a href="#X-509-Client-Certificate" class="headerlink" title="X.509 Client Certificate"></a>X.509 Client Certificate</h3><p>PEM 형식으로 되어있는 X.509 인증서와 개인키를 사용하여 HTTP 요청 시 클라이언트 인증서로 전달하는 방법에 대해서 알아보겠습니다.</p><h4 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a>cURL</h4><p>가장 일반적으로 사용되는 HTTP 클라이언트 통신 도구인 <a href="https://curl.se/">cURL</a>에서 클라이언트 인증서를 포함하기 위해서는 <a href="https://downey.io/notes/dev/curl-using-mutual-tls/">how to curl an endpoint protected by mutual tls (mtls)</a>를 참고하여 다음과 같이 수행할 수 있음을 확인하였습니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">curl -v --tlsv1.2 --tls-max 1.3 --cert .&#x2F;cert.pem --key .&#x2F;privkey.pem https:&#x2F;&#x2F;uri</code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>자바 애플리케이션에서 클라이언트 인증서를 포함하여 요청하기 위해서는 KeyStore가 필요로 합니다. JKS 또는 PKCS12 형식의 파일이라면 쉽게 KeyStore로 불러올 수 있지만, 일반적으로 X.509 인증서 형식으로 사용되는 PEM 파일이라면 KeyStore로 변경하는 과정이 필요로 합니다. Base64로 인코딩된 PEM 형식을 변환할 수도 있지만 <a href="https://www.bouncycastle.org/java.html">BouncyCastle API</a>와 같은 라이브러리를 사용하는게 더 간단합니다. 다음은 PEM 형식의 인증서와 개인키를 변환하는 두가지 방법에 대한 예시입니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MutualTlsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MutualTlsTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Convert PEM to KeyStore"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testConvertPemToKeyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> certPemText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> privateKeyText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> escapeCertPemText <span class="token operator">=</span> certPemText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-----BEGIN CERTIFICATE-----"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-----END CERTIFICATE-----"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> escapePrivateKeyText <span class="token operator">=</span> privateKeyText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-----BEGIN PRIVATE KEY-----"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-----END PRIVATE KEY-----"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certPem <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>escapeCertPemText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>escapePrivateKeyText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certPemUsingBC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>certPemText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyUsingBC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>certPem<span class="token punctuation">,</span> certPemUsingBC<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">,</span> privateKeyUsingBC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Test mutual authentication"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testMutualAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"javax.net.debug"</span><span class="token punctuation">,</span> <span class="token string">"ssl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> certPemText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> privateKeyText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certPem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>certPemText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyStore</span> clientKeyStore <span class="token operator">=</span> <span class="token class-name">KeyStore</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Certificate</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token class-name">CertificateFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateCertificates</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>certPem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientKeyStore<span class="token punctuation">.</span><span class="token function">setKeyEntry</span><span class="token punctuation">(</span><span class="token string">"client"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> password<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Certificate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyManagerFactory</span> keyManagerFactory <span class="token operator">=</span> <span class="token class-name">KeyManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SunX509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keyManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>clientKeyStore<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// NOTE: If server generate client certificate from self-signed root CA, you can use trustKeyStore.</span>            <span class="token class-name">KeyStore</span> trustKeyStore <span class="token operator">=</span> <span class="token class-name">KeyStore</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trustKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"ca.jks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TrustManagerFactory</span> trustManagerFactory <span class="token operator">=</span> <span class="token class-name">TrustManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">TrustManagerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trustManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>trustKeyStore<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SSLContext</span> sslcontext <span class="token operator">=</span> <span class="token class-name">SSLContexts</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadTrustMaterial</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustAllStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sslcontext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyManagerFactory<span class="token punctuation">.</span><span class="token function">getKeyManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trustManagerFactory<span class="token punctuation">.</span><span class="token function">getTrustManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tlsVersions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"TLSv1.2"</span><span class="token punctuation">,</span><span class="token string">"TLSv1.3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherSuites <span class="token operator">=</span> <span class="token class-name">SSLContext</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultSSLParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCipherSuites</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SSLConnectionSocketFactory</span> sslSocketFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLConnectionSocketFactory</span><span class="token punctuation">(</span>sslcontext<span class="token punctuation">,</span> tlsVersions<span class="token punctuation">,</span> cipherSuites<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NoopHostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CloseableHttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClientBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSSLSocketFactory</span><span class="token punctuation">(</span>sslSocketFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"https://uri"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/xml; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"payload.xml"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CloseableHttpResponse</span> httpResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><p>Go 언어는 실무에서 사용하지는 않지만 개인적으로 학습중이므로 <a href="https://venilnoronha.io/a-step-by-step-guide-to-mtls-in-go">A step by step guide to mTLS in Go</a>를 참고하여 다음과 같이 클라이언트 인증서를 전달할 수 있음을 확인하였습니다.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"crypto/x509"</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cert<span class="token punctuation">,</span> err <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">,</span> <span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>caCert<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"ca.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>caCertPool <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewCertPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>caCertPool<span class="token punctuation">.</span><span class="token function">AppendCertsFromPEM</span><span class="token punctuation">(</span>caCert<span class="token punctuation">)</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>Transport<span class="token punctuation">:</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">&#123;</span>TLSClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>ClientAuth<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>RequireAndVerifyClientCert<span class="token punctuation">,</span>ClientCAs<span class="token punctuation">:</span>    caCertPool<span class="token punctuation">,</span>Certificates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tls<span class="token punctuation">.</span>Certificate<span class="token punctuation">&#123;</span>cert<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>MinVersion<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>VersionTLS12<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>payloadXml<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"payload.xml"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> payloadXml<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>payload<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>payloadXml<span class="token punctuation">)</span>r<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">"https://uri"</span><span class="token punctuation">,</span> <span class="token string">"application/xml"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="X-SSL-CERT"><a href="#X-SSL-CERT" class="headerlink" title="X-SSL-CERT"></a>X-SSL-CERT</h3><p>일반적으로 Nginx와 같은 웹 서버를 통해서 리버스 프록시를 구성하는 경우 TLS 핸드쉐이크를 웹 서버에서 수행하도록 TLS Termination Proxy가 되도록 합니다. TLS 핸드쉐이크를 수행하는 과정에서 클라이언트가 전달한 인증서를 애플리케이션 서버까지 전달해야하므로 X-SSL-CERT와 같은 헤더에 클라이언트 인증서를 제공해야합니다.</p><pre class="language-conf" data-language="conf"><code class="language-conf">server &#123;    ssl_verify_client optional_no_ca;    location &#x2F; &#123;        proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;    &#125;&#125;</code></pre><blockquote><p>일반적으로 mTLS를 수행할 때 전달되는 클라이언트 인증서도 신뢰할 수 있는 인증 기관에서 발급된 것인지를 판단합니다. 그러나, 현재 조직의 시스템처럼 사설 루트 인증 기관을 만들고서 클라이언트 인증서를 전달하고 요청받을 수 있습니다. 이와 같은 상호 인증 구성이라면 ssl_verify_client 옵션을 고려하셔야 합니다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-authentication/">What protocols support mutual authentication?</a></li><li><a href="https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-tls/">What is mutual TLS (mTLS)?</a></li><li><a href="https://downey.io/notes/dev/curl-using-mutual-tls/">how to curl an endpoint protected by mutual tls (mtls)</a></li><li><a href="https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_escaped_cert">Nginx SSL Client Cert</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mutual-Authentication&quot;&gt;&lt;a href=&quot;#Mutual-Authentication&quot; class=&quot;headerlink&quot; title=&quot;Mutual Authentication&quot;&gt;&lt;/a&gt;Mutual Authentication&lt;/</summary>
      
    
    
    
    
    <category term="X.509" scheme="https://kdevkr.github.io/tags/X-509/"/>
    
    <category term="mTLS" scheme="https://kdevkr.github.io/tags/mTLS/"/>
    
    <category term="X-SSL-CERT" scheme="https://kdevkr.github.io/tags/X-SSL-CERT/"/>
    
  </entry>
  
  <entry>
    <title>SHA-256</title>
    <link href="https://kdevkr.github.io/sha-256/"/>
    <id>https://kdevkr.github.io/sha-256/</id>
    <published>2022-07-10T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p><a href="https://ko.wikipedia.org/wiki/SHA">SHA(Secure Hash Algorithm)</a>은 NIST에 의해서 관리되는 안전한 해시 표준 함수들의 모음이며 현재는 NIST FIPS 180-3 규격의 <a href="https://ko.wikipedia.org/wiki/SHA-2">SHA-2</a>를 권장해서 사용하고 있습니다. 해시 함수는 어떠한 문자열을 일정한 길이를 가진 임의의 문자열로 변환하는 것을 말합니다. 수 많은 연구에 의해 만들어진 여러가지 해시 함수 중에서 일반적으로 SHA-256을 사용하는 이유는 해시 함수를 사용하게 되는 목적에 있다고 볼 수 있습니다. 특정한 문자열에 대해서는 동일한 해시값(다이제스트)으로 변환되며 해시값을 기준으로는 동일한 패턴을 찾을 수 없어서 본래의 문자열을 유추할 수 없도록 하고자 하는 것에 있습니다.</p><p>SHA-256 해시 함수의 동작 과정은 <a href="https://sha256algorithm.com/">Sha256 Algorithm Explained</a>를 이용하면 눈으로 확인할 수 있으니 참고해보면 좋을 것 같습니다.</p><h3 id="메시지-다이제스트"><a href="#메시지-다이제스트" class="headerlink" title="메시지 다이제스트"></a>메시지 다이제스트</h3><p>해시 함수는 어떠한 입력에 대해서 일정한 길이의 비트로 이루어진 결과를 가져오기 위한 목적으로 사용됩니다. 메시지 다이제스트란 어떤 문자열 데이터를 일정한 길이의 다이제스트로 변환한 것을 말하며 단순하게 해시 함수로 처리된 해시값일 뿐입니다.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/sha256"</span><span class="token string">"encoding/hex"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>plain <span class="token operator">:=</span> <span class="token string">"HelloWorld"</span>hash <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span>hashed <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"plain:"</span><span class="token punctuation">,</span> plain<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hashed:"</span><span class="token punctuation">,</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hashed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">plain: HelloWorldhashed: 872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4</code></pre><h3 id="파일-체크섬"><a href="#파일-체크섬" class="headerlink" title="파일 체크섬"></a>파일 체크섬</h3><p>위 메시지 다이제스트를 바이너리 파일에 활용한 부분이 파일 체크섬입니다. <a href="https://ubuntu.com/tutorials/how-to-verify-ubuntu#5-verify-the-sha256-checksum">how-to-verify-ubuntu</a>에서 처럼 다운로드 받은 파일의 위변조 여부를 검증하기 위해서 MD5 또는 SHA-256로 해시된 다이제스트를 제공하며 이를 통해 올바른 바이너리 파일임을 검증하고 안전하다고 판단할 수 있습니다. 아래의 예시는 윈도우 터미널에서 <a href="https://docs.microsoft.com/ko-kr/windows-server/administration/windows-commands/certutil">CertUtil</a>을 사용하여 파일 체크섬을 확인한 것이며 <a href="https://gtkhash.org/">GtkHash</a>와 같은 도구로도 확인할 수 있습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> certutil <span class="token operator">-</span>hashfile orig<span class="token punctuation">.</span>txt sha256SHA256의 orig<span class="token punctuation">.</span>txt 해시:872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4CertUtil: <span class="token operator">-</span>hashfile 명령이 성공적으로 완료되었습니다<span class="token punctuation">.</span></code></pre><h3 id="비밀번호-암호화"><a href="#비밀번호-암호화" class="headerlink" title="비밀번호 암호화"></a>비밀번호 암호화</h3><p>일반적으로 비밀번호를 암호화하여 저장할 때는 <a href="https://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a>에서 언급된 PBKDF2 또는 bcrypt를 사용하는 편인 것으로 알고 있습니다. bcrypt는 NIST 에서 권장하는 알고리즘에 속하지는 않았으나 OpenBSD나 스프링 프레임워크의 기본 패스워드 인코더로 지정된 비교적 안전한 알고리즘 중 하나입니다. 아무튼 시계열 데이터베이스 중 하나인 <a href="https://code.kx.com/q/basics/cmdline/#-u-usr-pwd-local">KDB+는 MD5 또는 SHA-1 알고리즘 방식으로 비밀번호를 지원</a>하기에 사용하는 시스템마다 지원하는 방식에 제한이 있을 수 있습니다.</p><h4 id="비밀번호-암호화-관련-읽으면-좋은-글"><a href="#비밀번호-암호화-관련-읽으면-좋은-글" class="headerlink" title="비밀번호 암호화 관련 읽으면 좋은 글"></a>비밀번호 암호화 관련 읽으면 좋은 글</h4><ul><li><a href="https://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a></li><li><a href="https://lovejaco.github.io/posts/cryptographic-hash-function/">해시 함수, 암호화 해시 함수, 그리고 SHA</a></li><li><a href="https://auth0.com/blog/hashing-in-action-understanding-bcrypt/">Hashing in Action: Understanding bcrypt</a></li></ul><h3 id="키-서명-지문"><a href="#키-서명-지문" class="headerlink" title="키 서명 지문"></a>키 서명 지문</h3><p><a href="/ssh">SSH 키 페어 발급 및 원격 호스트 연결하기</a>에서처럼 SSH 키에 대해 지문(Fingerprint)을 생성해놓고 호스트에 대한 공개키가 변경되었는지를 판단하는데 사용되기도 합니다. 이러한 키 서명 지문은 아래의 이미지와 같이 SSL 인증서 정보에도 서명 해시 알고리즘으로도 사용하는 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/sha-256/01.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SHA&quot;&gt;&lt;a href=&quot;#SHA&quot; class=&quot;headerlink&quot; title=&quot;SHA&quot;&gt;&lt;/a&gt;SHA&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/SHA&quot;&gt;SHA(Secure Hash Algori</summary>
      
    
    
    
    
    <category term="Hashing" scheme="https://kdevkr.github.io/tags/Hashing/"/>
    
    <category term="Message Disgest" scheme="https://kdevkr.github.io/tags/Message-Disgest/"/>
    
    <category term="Checksum" scheme="https://kdevkr.github.io/tags/Checksum/"/>
    
  </entry>
  
  <entry>
    <title>SSH 키 페어 발급 및 원격 호스트 연결하기</title>
    <link href="https://kdevkr.github.io/ssh/"/>
    <id>https://kdevkr.github.io/ssh/</id>
    <published>2022-07-03T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<p>일반적으로 (원격 호스트인) 서버에 접속하기 위해서 사용자 계정과 비밀번호를 공유하기보다는 SSH 프로토콜을 사용하여 TCP 보안 채널을 연결하고 통신 내용에 대한 암호화를 통해 패킷을 보호하고 안전하게 서버에 접속해서 통신할 수 있도록 구성합니다. 오늘은 SSH 프로토콜을 통해 서버에 접속하는 과정에 대해서 정리해보면서 그저 서버 접속을 위한 PEM 파일을 받아서 접속할 뿐이었던 부분을 머리속에서 정리해보고자 합니다. 저와 함께 SSH 키 페어를 발급해보고 발급된 키 페어를 아마존 웹 서비스의 EC2 인스턴스 또는 깃허브 저장소에 등록한 후 원격 호스트에 연결하여 성공적으로 인증할 수 있는지를 확인해보시기 바랍니다.</p><h2 id="SSH-키-페어"><a href="#SSH-키-페어" class="headerlink" title="SSH 키 페어"></a>SSH 키 페어</h2><p>SSH 프로토콜을 사용하기 위해서는 SSH 키 페어라고 하는 공개키와 비밀키(퍼블릭 키와 프라이빗 키)로 구성된 키 페어를 만들고나서 서버에서는 공개키를 보유하도록 하고 서버에 접속 또는 인증하고자하는 클라이언트는 비밀키를 가지고 있음으로써 공개키 기반의 인증을 수행하여 보안 채널을 연결하게 됩니다. SSH 프로토콜을 사용해서 TCP 보안 채널을 연결하는 과정에 대해서는 본 글에서 다루고자하는 부분이 아니므로 자세히 설명된 다른 글들을 찾아보시기 바랍니다.</p><h3 id="SSH-키-페어-생성하기"><a href="#SSH-키-페어-생성하기" class="headerlink" title="SSH 키 페어 생성하기"></a>SSH 키 페어 생성하기</h3><p>아마존 웹 서비스를 이용하고 있는 개발자라면 웹 콘솔이나 AWS CLI의 create-key-pair 명령을 사용해서 RSA 또는 ED25519 기반의 키 페어를 생성할 수도 있습니다만, 일반적인 개발자라면 어떤 환경에 의존하지 않는 OpenSSH에 포함되는 ssh-keygen 도구를 사용해야 합니다. 자신이 사용하는 운영체제에 따라서 기본으로 포함된 OpenSSH를 사용하거나 설치하면 됩니다. 만약 윈도우 10을 사용하고 있다면 Git Bash를 설치하면 ssh-keygen이 포함되어있고 선택적 기능을 통해서 OpenSSH 클라이언트를 쉽게 설치할 수 있습니다.</p><p><img data-src="/images/posts/ssh/ssh-01.png" alt="윈도우 10의 선택적 기능을 통해서 설치한 OpenSSH 클라이언트"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># in Windows Terminal</span><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>VOpenSSH_for_Windows_7<span class="token punctuation">.</span>7p1<span class="token punctuation">,</span> LibreSSL 2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>5<span class="token comment"># in Git Bash</span>$ ssh <span class="token operator">-</span>VOpenSSH_9<span class="token punctuation">.</span>0p1<span class="token punctuation">,</span> OpenSSL 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1p  21 Jun 2022</code></pre><p>아무튼 OpenSSH를 확인했다면 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent</a>와 같은 문서를 참고해서 ssh-keygen으로 SSH 키 페어를 생성해보도록 하겠습니다.</p><p>먼저, RSA 알고리즘 기반의 키 페어를 만들때는 기본적으로 2048 비트 이상으로 만들어지게 되며 이 글을 작성하는 시점에서는 아마존 웹 서비스나 깃허브 저장소 모두 4096 비트를 지원하고 권장하는 편입니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>b 4096 <span class="token operator">-</span>m PEM <span class="token operator">-</span>f win-mambo-rsa-4096<span class="token punctuation">.</span>pemGenerating public/private rsa key pair<span class="token punctuation">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved in win-mambo-rsa-4096<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>Your public key has been saved in win-mambo-rsa-4096<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is:SHA256:F3ECBEjeXszb6ccTJ2EWz9eaxvZoAg4f6F4rU0aDYJY mambo@DESKTOP-OJJ4TB3The key's randomart image is:<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token namespace">[RSA 4096]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>o<span class="token punctuation">.</span>o o    <span class="token punctuation">|</span><span class="token punctuation">|</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Eo   <span class="token operator">+</span> <span class="token operator">+</span>  <span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>    <span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> o o<span class="token punctuation">|</span><span class="token punctuation">|</span>     <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>o= o <span class="token operator">+</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token punctuation">.</span> S<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>o B  <span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span> <span class="token operator">*</span>o+ <span class="token operator">*</span> o <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span>o= = o <span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span>o<span class="token punctuation">.</span> o <span class="token operator">+</span>   <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span>o<span class="token punctuation">.</span>      <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token namespace">[SHA256]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>4096 비트를 가지는 RSA 키 페어를 만들게되면 키의 길이가 너무 길어지게 되므로 ED25519 알고리즘을 지원하는 원격 호스트라면 ED25519 기반의 키 페어를 생성하고 사용하는게 더 좋습니다. 지난 <a href="/ed25519/">ed25519</a> 글을 읽어보시면 RSA 보다 ED25519를 사용하게 되는 이유에 대해서 알아가실 수 있습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh-keygen <span class="token operator">-</span>t ed25519 <span class="token operator">-</span>m PEM <span class="token operator">-</span>f win-mambo-ed25519<span class="token punctuation">.</span>pemGenerating public/private ed25519 key pair<span class="token punctuation">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved in win-mambo-ed25519<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>Your public key has been saved in win-mambo-ed25519<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is:SHA256:oad/A11tVJQFxRIDA63pozCFj/FsTCDh51hALNdFBVU mambo@DESKTOP-OJJ4TB3The key's randomart image is:<span class="token operator">+</span><span class="token operator">--</span><span class="token namespace">[ED25519 256]</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span>   o+o o+<span class="token operator">++</span><span class="token operator">+</span>E<span class="token punctuation">.</span><span class="token operator">+</span>BB<span class="token punctuation">|</span><span class="token punctuation">|</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span>o     <span class="token punctuation">.</span><span class="token punctuation">.</span>oo<span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>   o<span class="token punctuation">.</span><span class="token punctuation">.</span>oo<span class="token punctuation">.</span>  o o <span class="token punctuation">.</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>     =o<span class="token punctuation">.</span>o<span class="token punctuation">.</span>o <span class="token punctuation">.</span> o  <span class="token punctuation">|</span><span class="token punctuation">|</span>    <span class="token punctuation">.</span> oXSo <span class="token punctuation">.</span> <span class="token punctuation">.</span>   <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token operator">+</span>oB <span class="token operator">+</span>      <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token punctuation">.</span><span class="token operator">+</span> o <span class="token punctuation">.</span>     <span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span> o      <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>     <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token namespace">[SHA256]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><h3 id="깃허브-공개키-등록하기"><a href="#깃허브-공개키-등록하기" class="headerlink" title="깃허브 공개키 등록하기"></a>깃허브 공개키 등록하기</h3><p>사용자 계정 설정 &gt; 액세스 &gt; <a href="https://github.com/settings/keys">SSH and GPG Keys</a> 메뉴로 진입하면 SSH 키를 등록할 수 있는 기능을 제공하고 있습니다. 앞서 만들었던 ED25519 키 페어를 등록하고 깃허브에 접속할 수 있는지 테스트 해보겠습니다.</p><p><img data-src="/images/posts/ssh/ssh-02.png"></p><p><img data-src="/images/posts/ssh/ssh-03.png"></p><p><img data-src="/images/posts/ssh/ssh-04.png"></p><p>자 이제 깃허브에 등록한 공개키에 대한 비밀키를 사용해서 SSH 접속을 시도해보면 어떻게 될까요?</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i win-mambo-ed25519<span class="token punctuation">.</span>pem <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>comThe authenticity of host <span class="token string">'github.com (15.164.81.167)'</span> cannot be established<span class="token punctuation">.</span>ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM<span class="token punctuation">.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? yesWarning: Permanently added <span class="token string">'github.com,15.164.81.167'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts<span class="token punctuation">.</span>Hi kdevkr! You've successfully authenticated<span class="token punctuation">,</span> but GitHub does not provide shell access<span class="token punctuation">.</span></code></pre><h3 id="EC2-공개키-등록하기"><a href="#EC2-공개키-등록하기" class="headerlink" title="EC2 공개키 등록하기"></a>EC2 공개키 등록하기</h3><p>아마존 웹 서비스에서 EC2 인스턴스를 실행할 때 키 페어를 만들지 않아도 이미 만들어진 SSH 키 페어를 가져와서 등록할 수 있도록 제공하고 있습니다.</p><p><img data-src="/images/posts/ssh/ssh-05.png"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i win-mambo-ed25519<span class="token punctuation">.</span>pem ec2-user@15<span class="token punctuation">.</span>164<span class="token punctuation">.</span>219<span class="token punctuation">.</span>55The authenticity of host <span class="token string">'15.164.219.55 (15.164.219.55)'</span> cannot be established<span class="token punctuation">.</span>ECDSA key fingerprint is SHA256:64Ca/STwUWZkN+ggo5jx6BCvwyhNRcCY5/xjk0SkSjU<span class="token punctuation">.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? yesWarning: Permanently added <span class="token string">'15.164.219.55'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts<span class="token punctuation">.</span>       __<span class="token punctuation">|</span>  __<span class="token punctuation">|</span>_  <span class="token punctuation">)</span>       _<span class="token punctuation">|</span>  <span class="token punctuation">(</span>     <span class="token operator">/</span>   Amazon Linux 2 AMI      ___<span class="token punctuation">|</span>\___<span class="token punctuation">|</span>___<span class="token punctuation">|</span>https:<span class="token operator">/</span><span class="token operator">/</span>aws<span class="token punctuation">.</span>amazon<span class="token punctuation">.</span>com/amazon-linux-2/<span class="token namespace">[ec2-user@ip-10-0-2-243 ~]</span>$ <span class="token function">cat</span> ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/authorized_keysssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOy21gZ45To8FNf6hilxV51QqT9JCBjIpVKCRlup7m4D window-mambo</code></pre><p>퍼블릭 서브넷에 위치한 EC2 인스턴스에 SSH 접속이 가능함을 확인했습니다. </p><h2 id="AWS-ED25519-Invalid-Format"><a href="#AWS-ED25519-Invalid-Format" class="headerlink" title="AWS ED25519 Invalid Format"></a>AWS ED25519 Invalid Format</h2><p>지난 <a href="/ed25519">ED25519</a> 글을 잘 읽어보신 분들이라면 아마존 웹 서비스의 웹 콘솔이나 AWS CLI를 통해서 ED25519 키 페어를 발급하고 윈도우 환경에서 비밀키를 사용해서 인증을 시도하면 키 형식이 올바르지 않는 문제가 있다는 것을 확인할 수 있었을텐데요. 지난 글에서는 단순히 안되는 것 같다고 마무리 하였지만 이 문제에 대해서 왜 그런것인가에 대해서 궁금해져서 <a href="https://github.com/aws/aws-cli/discussions/7074">aws-cli&#x2F;discussions&#x2F;7074</a>로 관련 문제에 대해서 질문을 하였고 원인을 찾게 되었습니다.</p><p><img data-src="/images/posts/ssh/ssh-06.png"></p><p>윈도우 환경에서 AWS CLI를 통해 키 페어를 발급하고 비밀키를 파일로 만들면 위와 같이 UTF-16LE 인코딩 형식과 CRLF 개행 방식으로 되어있는 것을 확인할 수 있었습니다. OpenSSH의 ssh-keygen으로 만들어지는 키페어 파일을 UTF-8과 LF로 만들어집니다. Git Bash에 포함되어있는 dos2unix라는 도구를 통해서 UTF-16LE로 되어있는 인코딩 형식을 UTF-8로 변경해보고 시도해보았습니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ dos2unix aws-mambo.pemdos2unix: converting UTF-16LE file aws-mambo.pem to UTF-8 Unix format...</code></pre><p>윈도우 터미널을 통해서 UTF-16LE 및 CRLF로 되어있는 비밀키를 사용하면 올바르지 않았던 키 형식 문제가 해결되었고 다음과 같이 성공적으로 접속되었습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i aws-mambo<span class="token punctuation">.</span>pem ec2-user@3<span class="token punctuation">.</span>34<span class="token punctuation">.</span>188<span class="token punctuation">.</span>47       __<span class="token punctuation">|</span>  __<span class="token punctuation">|</span>_  <span class="token punctuation">)</span>       _<span class="token punctuation">|</span>  <span class="token punctuation">(</span>     <span class="token operator">/</span>   Amazon Linux 2 AMI      ___<span class="token punctuation">|</span>\___<span class="token punctuation">|</span>___<span class="token punctuation">|</span>https:<span class="token operator">/</span><span class="token operator">/</span>aws<span class="token punctuation">.</span>amazon<span class="token punctuation">.</span>com/amazon-linux-2/<span class="token namespace">[ec2-user@ip-10-0-2-42 ~]</span>$</code></pre><p>이 상태에서 윈도우 터미널이 아닌 Git Bash에서도 시도를 하면 다음과 같이 다시 키 형식이 올바르지 않다는 문제가 발생하게 됩니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ ssh -i aws-mambo.pem ec2-user@3.34.188.47Load key &quot;aws-mambo.pem&quot;: invalid formatec2-user@3.34.188.47: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</code></pre><p>이때는 CRLF로 되어있던 개행 형식을 LF로 변경하면 성공적으로 접속됨을 확인할 수 있습니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ ssh -i aws-mambo.pem ec2-user@3.34.188.47       __|  __|_  )       _|  (     &#x2F;   Amazon Linux 2 AMI      ___|\___|___|https:&#x2F;&#x2F;aws.amazon.com&#x2F;amazon-linux-2&#x2F;[ec2-user@ip-10-0-2-42 ~]$</code></pre><p>이렇게 SSH 키 페어를 발급하고 원격 호스트에 연결하는 과정에 대해서 알아보았고 지난 글에서 경험했던 문제에 대해서 다시한번 살펴보며 원인을 찾아보는 경험도 해보았습니다. 감사합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">Connect to your Linux instance using SSH</a>  </li><li><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">Connecting to GitHub with SSH</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;일반적으로 (원격 호스트인) 서버에 접속하기 위해서 사용자 계정과 비밀번호를 공유하기보다는 SSH 프로토콜을 사용하여 TCP 보안 채널을 연결하고 통신 내용에 대한 암호화를 통해 패킷을 보호하고 안전하게 서버에 접속해서 통신할 수 있도록 구성합니</summary>
      
    
    
    
    
    <category term="SSH" scheme="https://kdevkr.github.io/tags/SSH/"/>
    
    <category term="Key Pair" scheme="https://kdevkr.github.io/tags/Key-Pair/"/>
    
    <category term="RSA" scheme="https://kdevkr.github.io/tags/RSA/"/>
    
    <category term="ED25519" scheme="https://kdevkr.github.io/tags/ED25519/"/>
    
  </entry>
  
  <entry>
    <title>개발자가 알아야할 네트워크 지식</title>
    <link href="https://kdevkr.github.io/network/"/>
    <id>https://kdevkr.github.io/network/</id>
    <published>2022-05-27T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/network/01.jpg" alt="노란건 돌돌이..."></p><p><a href="https://roadmap.sh/backend">roadmap.sh</a>를 참고하면 프론트엔드와 백엔드 개발자 모두 인터넷이라는 기초 지식을 필요로 하다고 말합니다. 그렇다면 위 장비들이 인터넷을 사용하기 위해서 어떠한 용도로 사용되는 장비라는 것을 아는 개발자가 얼마나 될까요? 이미 이것들을 알거나 다루지 않는 경험 많은 개발자들은 “개발자는 저것을 사용할 일이 없어요”라고 할테지요. 물론 저도 위 장비들을 경험한 것은 개발자로 일하고 있는 지금이 아니라 컴퓨터공학과라는 이유로 가설병 보직을 받고나서 사단 내 유선 전화를 고치거나 신규로 다이렉트 전화선을 추가해야하는 요건이 있을때 사용해본 경험이 있을 뿐입니다.</p><blockquote><p>심지어는 유선병이라는 이유로 늘어진 통신선을 정리하기 위해서 전봇대도 타야하는 상황도…</p></blockquote><p>아무튼 위와 같은 경험이 없었더라면 인터넷을 사용하기 위해서 사용하는 <em>RJ45 커넥터 규격</em>이란 것을 떠올리거나 UTP 케이블을 커넥터와 결합할 때 일반적으로 나열하는 <em>색상의 순서가 표준으로 정해져있다</em>는 것을 알지 못했을 겁니다. 왜냐하면 현재 개발자로 일할때에는 인터넷 선에 대한 부분을 직접 다루어본다거나 이미 구성된 서버 인프라 환경을 통해서 애플리케이션을 배포하고 운영하기 때문이죠.</p><p><img data-src="/images/posts/network/02.png" alt="대한민국 해저 케이블 위치"></p><p>인터넷으로 전세계가 연결될 수 있다는 것을 알아도 우리나라에서 다른 나라로 트래픽이 전달되기 위해서는 수 많은 <a href="https://www.submarinecablemap.com/country/south-korea">해저 광 케이블</a>이 설치되고 경유한다는 것까지는 모를 수 있습니다. 실제로 개발자 또는 엔지니어가 아닌 사업팀에게 사용자의 클릭으로 인해 어떠한 요청이 서버로 전달되고 다시 돌아오는데까지 설명하더라도 바다를 통해서 다른 나라로 건너가서 서버로 들어오게 된다라고 설명하지는 않습니다.</p><blockquote><p>개인적으로 궁금할 수는 있지만 굳이 모른다고해도 일하거나 이해하는데 지장이 없기 때문이죠.</p></blockquote><h4 id="해저-케이블-관련-정보"><a href="#해저-케이블-관련-정보" class="headerlink" title="해저 케이블 관련 정보"></a>해저 케이블 관련 정보</h4><ul><li><a href="https://www.yna.co.kr/view/AKR20210108069100051">해저케이블 있기에 가능한 지구촌 소통</a></li><li><a href="https://brunch.co.kr/@go2hanoi/14">베트남 해저 케이블은 왜 자주 끊길까?</a></li><li><a href="http://www.goodmorningvietnam.co.kr/mobile/article.html?no=49888">해저 케이블 루트 2개에 문제가 있는데 여전히 고칠 수 없다</a></li></ul><p>조직내에 서버 인프라 엔지니어가 있거나 인프라 팀이 존재한다면 애플리케이션으로 트래픽이 전달되도록 <a href="https://aws.amazon.com/ko/route53/what-is-dns/">DNS</a>와 <a href="https://docs.microsoft.com/ko-kr/azure/rtos/netx-duo/netx-duo-nat/chapter1">NAT</a>와 같은 설정들을 개발자가 담당하지는 않을겁니다. AWS와 같은 클라우드 서비스에서는 개발자가 직접 웹 콘솔을 통해서 클릭만으로도 서버 인프라 구성에 대한 설정을 쉽게 할 수 있도록 제공하긴 합니다. 그래서 클라우드 인프라 환경을 직접 다루는 저와 같은 개발자들은 요구사항에 따라서 인프라 구성을 검토하거나 설정을 변경해야하는 작업도 해야할 수 있기에 어느정도의 인프라 지식도 필요하게 되죠.</p><blockquote><p>알아야하는 인프라 지식은 현재 조직에서 어떤 것을 경험하느냐에 따라 달라집니다.</p></blockquote><p>일반적으로는 HTTP라는 통신 프로토콜을 사용하지만 사업 분야에 따라서 <a href="https://mqtt.org/">MQTT 통신 프로토콜</a>를 통해 데이터가 전달된다거나 <a href="https://ko.wikipedia.org/w/index.php?title=%EB%AA%A8%EB%93%9C%EB%B2%84%EC%8A%A4&tableofcontents=0">Modbus TCP</a>를 통해 산업 자동화 장비와의 통신으로 데이터를 수집하고 심지어는 차량에서는 <a href="https://ko.wikipedia.org/wiki/CAN_%EB%B2%84%EC%8A%A4">CAN 통신</a>을 사용하고 OBD 모듈을 통해서 데이터를 전달받기도 하죠. 통신 프로토콜 뿐만 아니라 이더넷으로 인터넷에 접속하지 않고 프라이빗 네트워크 환경으로 연결하며 무선 통신을 통해서 인터넷으로 접속하는 인프라 환경을 경험해보지 않았다면 아마도 네트워크 우선 순위가 있다는 지식을 알지 못하고 있을 수 있씁니다.</p><blockquote><p>셀룰러 모듈이 포함된 클라이언트 장비를 전달하고나서 유선 연결을 시도한 순간 인터넷 연결이 끊어져서 원격이 해제되었던 것을 실제로 경험하기도 했죠.</p></blockquote><p>대부분의 개발자가 웹 서버 또는 애플리케이션에 SSL 인증서를 설치해서 HTTPS 통신을 할 수 있도록 구성할 수 있지만 AWS 클라우드 환경을 사용하지 않거나 ELB 중 NLB를 통해서 ECC 기반의 SSL 인증서를 설정하여 TLS 오프로드 기능을 설정하려고 시도하지 않았다면 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificates">2048 이상의 RSA 키 또는 EC 키가 포함된 인증서를 지원하지 않음</a>에 대한 것을 알지 못할 수 있습니다. </p><p>결국은 개발자라는 직무에서 알아야할 네트워크 지식은 정해져있지 않으며 현재 내가 조직에서 어떠한 요구사항을 처리하는가 또는 어떤 것까지 담당하고 경험하는가에 따라 그 깊이와 범위가 달라질 수 있다는 점을 인지해야할 것 같습니다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/network/01.jpg&quot; alt=&quot;노란건 돌돌이...&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roadmap.sh/backend&quot;&gt;roadmap.sh&lt;/a&gt;를 참고하면 프론트엔드와 백엔</summary>
      
    
    
    
    
    <category term="개발자" scheme="https://kdevkr.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
    <category term="네트워크" scheme="https://kdevkr.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
  </entry>
  
  <entry>
    <title>Gmail SMTP</title>
    <link href="https://kdevkr.github.io/gmail-smtp/"/>
    <id>https://kdevkr.github.io/gmail-smtp/</id>
    <published>2022-05-23T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>오래전에 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a>라는 주제로 구글 SMTP 서버를 사용해서 스프링 부트 애플리케이션에서 이메일을 발송하는 것을 다루어 보았었는데요. 구글의 보안 정책의 변경에 따라서 <a href="https://support.google.com/accounts/answer/6010255">2022년 5월 30</a>일부터는 보안 수준이 낮은 앱의 액세스가 활성된 계정으로는 SMTP 서버를 이용할 수 없게 되었습니다. 그러면 구글 SMTP 서버를 더이상 사용할 수 없는 것일까요?</p><h2 id="Gmail-SMTP"><a href="#Gmail-SMTP" class="headerlink" title="Gmail SMTP"></a>Gmail SMTP</h2><p>보안 수준이 낮은 앱의 액세스를 활성화한 계정에서는 사용자 이름과 비밀번호를 사용해서 Gmail SMTP와 같은 서드 파티 앱에 인증할 수 있었지만 이제는 사용자의 계정을 더 안전하게 보호하기 위해서 사용자 이름과 비밀번호를 사용해서 서드 파티 앱과 기기에 로그인 요청하는 것을 지원하지 않습니다. 이제는 Gmail SMTP 서버를 이용하기 위해서는 보안 수준이 높은 Gmail 계정을 만들고나서 사용자 이름과 비밀번호가 아닌 다른 방식으로 인증을 요청해야만 합니다.</p><h3 id="2단계-인증-활성화"><a href="#2단계-인증-활성화" class="headerlink" title="2단계 인증 활성화"></a>2단계 인증 활성화</h3><p>보안 수준이 높은 Gmail 계정을 만들기 위해서는 먼저 2단계 인증을 활성화하여야 합니다. 구글 계정 관리 &gt; 보안 메뉴에 들어가면 아래와 같이 2단계 인증을 사용중인지를 확인할 수 있습니다.</p><p><img data-src="/images/posts/gmail-smtp/02.png"></p><p>위와 같이 2단계 인증을 활성화 하지 않았다면 2단계 인증을 클릭해서 안내에 따라서 다음과 같이 인증을 완료하고 2단계 인증을 활성화합니다.</p><p><img data-src="/images/posts/gmail-smtp/03.png" alt="구글 계정에 입력된 전화번호로 인증"></p><p><img data-src="/images/posts/gmail-smtp/04.png" alt="전화 또는 문자메시지로 받은 인증번호 입력 후 인증 완료"></p><p><img data-src="/images/posts/gmail-smtp/05.png" alt="2단계 인증 활성화 완료"></p><h3 id="앱-비밀번호-추가"><a href="#앱-비밀번호-추가" class="headerlink" title="앱 비밀번호 추가"></a>앱 비밀번호 추가</h3><p>2단계 인증이 활성화 되고나서 앱 비밀번호라는 부분이 추가되었습니다. 앱 비밀번호를 추가하면 Gmail SMTP와 같은 2단계 인증을 지원하지 않는 앱에서도 로그인할 수 있다고 알려주는데요. 앞서 말한 사용자 이름과 비밀번호 방식이 아닌 다른 방식으로 인증할 수 있다는 이야기입니다.</p><p><img data-src="/images/posts/gmail-smtp/06.png"></p><p><img data-src="/images/posts/gmail-smtp/07.png"></p><p>이제 발급된 16자리의 앱 비밀번호를 잘 복사해두고 Gmail SMTP 인증에 사용하면 됩니다.</p><h3 id="이메일-발송"><a href="#이메일-발송" class="headerlink" title="이메일 발송"></a>이메일 발송</h3><p><a href="https://github.com/kdevkr/spring-demo-freemarker/tree/main/src/main/resources/config">Gmail SMTP를 사용하기 위한 정보</a>는 달라지지 않으며 우리가 수정해야할 부분은 구글 이메일 계정에 대한 비밀번호 대신에 앞서 발급한 16자리의 앱 비밀번호를 사용하는 것입니다. </p><p><img data-src="/images/posts/gmail-smtp/08.png"></p><p>더이상 보안 수준 낮은 앱의 액세스 활성화 없이도 Gmail SMTP 서버를 이용해볼 수 있는 것을 확인했습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오래전에 &lt;a href=&quot;/sending-mail-with-freemarker-template/&quot;&gt;프리마커 템플릿으로 이메일 발송하기&lt;/a&gt;라는 주제로 구글 SMTP 서버를 사용해서 스프링 부트 애플리케이션에서 이메일을 발송하는 것을 다루어 보았</summary>
      
    
    
    
    
    <category term="Gmail" scheme="https://kdevkr.github.io/tags/Gmail/"/>
    
    <category term="SMTP" scheme="https://kdevkr.github.io/tags/SMTP/"/>
    
  </entry>
  
  <entry>
    <title>EC2 Node Exporter</title>
    <link href="https://kdevkr.github.io/ec2-node-exporter/"/>
    <id>https://kdevkr.github.io/ec2-node-exporter/</id>
    <published>2022-05-21T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>조직에서 아마존 웹 서비스를 클라우드 환경으로 사용하곤 있지만 인프라 엔지니어로 구성된 인프라팀이 별도로 존재하지 않다보니 클라우드 서비스를 제대로 활용하지 않고 필요하다고 생각될 때 어떻게 사용해야하는가를 찾아보고 고민하게 되는 것 같습니다. 서버 인스턴스 모니터링에 대해서도 기본적으로는 웹 콘솔에서 지표를 확인할 수 있도록 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/monitoring_ec2.html">Amazon EC2 모니터링</a>기능을 제공하고 있지만 5분 단위로 수집되는 지표를 1분 단위로 수집하기 위해서는 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-cloudwatch-new.html">인스턴스에 대한 세부 모니터링 활성화</a>를 해야하고 더 많은 인스턴스에 대한 지표를 확인하기 위해서는 EC2 인스턴스에 <a href="https://docs.aws.amazon.com/ko_kr/AmazonCloudWatch/latest/monitoring/installing-cloudwatch-agent-ssm.html">CloudWatch 에이전트 설치</a>해야하고 별도의 비용이 추가적으로 든다는 점으로 인하여 사용하지는 않고 있습니다.</p><p>회사 사내 서버에 개인적으로 프로메테우스 및 그라파나 서버를 실행해두었기 때문에 Node Exporter를 활용해서 EC2 인스턴스에 접속할 수 있는 권한이 있다면 지표를 수집할 수 있는 방안을 마련할 수 있다고 생각되었습니다. 고객으로 부터 웹 콘솔을 접근할 수 있는 권한을 부여받기도 하고 어떤 고객은 보안 상 이유로 인하여 인프라 구성과 관리는 직접 담당하고 정해진 스펙에 따라서 생성한 EC2 인스턴스 접속 권한만 부여하기 때문에 CloudWatch를 공통적으로 사용하도록 할 수 없습니다.</p><blockquote><p>회사 사내 서버에 임시적으로 구성한 프로메테우스 및 그라파나는 모니터링 방안이 검토되면 조직내에서 운영중인 클라우드 환경으로 이전할 생각입니다.</p></blockquote><p>아무튼 현재 조직에서 모니터링 방안을 제대로 검토할 수 있는 단계는 아니지만 고객의 인프라 환경에 시스템을 배포하고 운영하고 있으므로 최소한 원인을 찾아가기 위한 지표는 남겨두어야한다고 생각하기에 Node Exporter를 일괄적으로 설치하는 작업을 수행했고 이에 대한 정보를 남기고자 합니다.</p><h2 id="Node-Exporter"><a href="#Node-Exporter" class="headerlink" title="Node Exporter"></a>Node Exporter</h2><p><a href="https://github.com/prometheus/node_exporter">Node Exporter</a>는 프로메테우스 프로젝트에서 공식적으로 지원하는 시스템 매트릭을 수집하는 방법을 제공하는 Exporter 입니다. <a href="https://prometheus.io/docs/guides/node-exporter/#installing-and-running-the-node-exporter">Installing and running the Node Exporter</a>와 같이 Node Exporter를 설치하고 실행하는 방법에 대한 가이드 문서도 제공하고 있습니다.</p><p>EC2 인스턴스는 상태가 정상적이지 않음이 확인되면 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-recover.html">인스턴스 복구</a> 기능으로 아마존 웹 서비스에서 자동으로 인스턴스 상태를 복원할 수 있습니다. 그래서 언제든지 EC2 인스턴스가 재부팅되어 실행중인 프로세스가 종료될 수 있습니다. 서버 인스턴스가 재부팅되어도 자동으로 프로세스가 실행되도록 유지하기 위해서 Systemd와 같은 서비스를 등록하도록 구성하는 것이 좋습니다.</p><h3 id="EC2-인스턴스-아키텍처"><a href="#EC2-인스턴스-아키텍처" class="headerlink" title="EC2 인스턴스 아키텍처"></a>EC2 인스턴스 아키텍처</h3><p>아마존 웹 서비스에서는 일반적으로 사용되는 amd64 기반의 아키텍처 뿐만 아니라 <a href="https://aws.amazon.com/ko/ec2/graviton/">Arm 기반의 AWS Graviton 프로세서</a>로 제공되는 인스턴스를 제공하고 최근에는 Arm 기반의 인스턴스를 통해 더 저렴한 가격으로 서버 인스턴스를 실행하므로 EC2 인스턴스의 아키텍처를 확인하고 사용할 수 있는 올바르게 빌드된 파일을 다운로드 받아서 설치해야합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -rmpo<span class="token number">4.14</span>.256-197.484.amzn2.aarch64 aarch64 aarch64 GNU/Linux</code></pre><h3 id="릴리즈-파일-다운로드-및-설치"><a href="#릴리즈-파일-다운로드-및-설치" class="headerlink" title="릴리즈 파일 다운로드 및 설치"></a>릴리즈 파일 다운로드 및 설치</h3><p>EC2 인스턴스의 아키텍처 유형을 확인했다면 <a href="https://github.com/prometheus/node_exporter/releases">릴리즈 파일</a>에서 위 아키텍처에 맞는 arm64가 포함된 릴리즈 파일을 다운로드합니다. 대부분의 예제는 일반적으로 사용하는 x86_64 아키텍처를 기준으로 하기 때문에 amd64를 다운로드 합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-arm64.tar.gz<span class="token function">tar</span> zxvf node_exporter-1.3.1.linux-arm64.tar.gz<span class="token function">sudo</span> <span class="token function">cp</span> node_exporter-1.3.1.linux-arm64/node_exporter /usr/local/bin/<span class="token function">sudo</span> <span class="token function">useradd</span> -M -r -s /bin/false node_exporter<span class="token function">sudo</span> <span class="token function">chown</span> node_exporter:node_exporter /usr/local/bin/node_exporter</code></pre><h4 id="Node-Exporter-용-사용자-추가"><a href="#Node-Exporter-용-사용자-추가" class="headerlink" title="Node Exporter 용 사용자 추가"></a>Node Exporter 용 사용자 추가</h4><p>인프라 엔지니어가 아니기에 사용자를 직접 추가해본적이 없어서 사용자를 추가하는 명령어에 대해서 알아보아야했습니다. 많은 예제들에서 사용자 추가 시 적용하는 옵션이 제각각이라서 더 혼란이 있었습니다. </p><ul><li><a href="https://linux.die.net/man/8/useradd">useradd(8) - Linux man page</a></li><li><a href="https://faq.hostway.co.kr/Linux_ETC/1624">&#x2F;bin&#x2F;false, &#x2F;sbin&#x2F;nologin 의 차이점</a></li><li><a href="https://linuxhint.com/add-user-linux/">How do I add a user in Linux without a home directory?</a></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo useradd --no-create-home --system --shell /bin/false node_exporter</span><span class="token function">sudo</span> <span class="token function">useradd</span> -M -r -s /bin/false node_exporter</code></pre><blockquote><p>시스템 계정을 생성하되 로그인이 불가능하도록 하면 되는 것 같습니다.</p></blockquote><h3 id="Systemd-서비스-등록"><a href="#Systemd-서비스-등록" class="headerlink" title="Systemd 서비스 등록"></a>Systemd 서비스 등록</h3><p>설치한 바이너리를 실행하기 위해서 Systemd 서비스를 등록하고 Systemctl 명령어를 통해 프로세스를 실행하고 서버가 부팅될 때 자동으로 시작되도록 활성화합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/systemd/system/node_exporter.service <span class="token operator">&lt;&lt;</span><span class="token string">"EOF"[Unit]Description=Node ExporterAfter=network.target[Service]User=node_exporterGroup=node_exporterExecStart=/usr/local/bin/node_exporter[Install]WantedBy=multi-user.targetEOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl start node_exporter<span class="token function">sudo</span> systemctl status node_exporter<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> node_exporter</code></pre><h3 id="매트릭-확인"><a href="#매트릭-확인" class="headerlink" title="매트릭 확인"></a>매트릭 확인</h3><p>Node Exporter 서비스가 정상적으로 실행됬다면 curl 명령어를 통해서 지표를 가져올 수 있는지 확인하고 종료합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -s localhost:9100/metrics</code></pre><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.vmware.com/en/VMware-vRealize-Operations-Management-Pack-for-Kubernetes/1.6/kubernetes-solution/GUID-A1B68BE5-EF38-48E1-AA80-FD71E6F19989.html">Node Exporter Setup on Linux Nodes</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04">How To Install Prometheus on Ubuntu 16.04</a></li><li><a href="https://devdojo.com/ruanbekker/getting-started-with-prometheus-and-node-exporter">Getting Started with Prometheus and Node Exporter</a></li><li><a href="https://devopscube.com/monitor-linux-servers-prometheus-node-exporter/">How To Monitor Linux Servers Using Prometheus Node Exporter</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;조직에서 아마존 웹 서비스를 클라우드 환경으로 사용하곤 있지만 인프라 엔지니어로 구성된 인프라팀이 별도로 존재하지 않다보니 클라우드 서비스를 제대로 활용하지 않고 필요하다고 생각될 때 어떻게 사용해야하는가를 찾아보고 고민하게 되는 것 같습니다. </summary>
      
    
    
    
    
    <category term="EC2" scheme="https://kdevkr.github.io/tags/EC2/"/>
    
    <category term="node-exporter" scheme="https://kdevkr.github.io/tags/node-exporter/"/>
    
  </entry>
  
  <entry>
    <title>스스로 괴롭히는 사이드 이펙트</title>
    <link href="https://kdevkr.github.io/side-effect-myself/"/>
    <id>https://kdevkr.github.io/side-effect-myself/</id>
    <published>2022-05-21T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글은 스스로 만들어낸 사이드 이펙트를 힘들게 찾아가고 사이드 이펙트가 만들어진 사유를 되돌아보고자 작성한 것입니다.</p></blockquote><p><img data-src="/images/posts/side-effect-myself/00.jpg"></p><p>완벽한 시스템을 만드는게 아니지만 최대한 노력해서 시스템에 문제가 발생하지 않도록 최선을 다하는데요. 그럼에도 불구하고 고객의 요구사항의 다양함과 원하는 일정으로 인하여 작업이 가능한 부분을 먼저 처리한다던가 요구사항에서 고려되지 않은 부분을 확인하고 피드백을 받고 작업 요건을 정리해서 처리하는 편입니다. 허나 애초에 고객 조차도 자신이 원하는 바가 무엇인지가 정리되기 힘들기 때문에 작업한 내용을 확인해보고 추가로 문제가 될 부분에 대해서 피드백이 오고 계속해서 추가하거나 수정되는 작업이 빈번한 경우도 발생합니다.</p><p><img data-src="/images/posts/side-effect-myself/01.jpg"></p><p>고객의 다양한 요구사항을 처리하다보면 관련없는 부분에 대해서도 문제를 일으킬 수 있는 사이드 이펙트가 발생하곤 합니다. 시스템의 모든 부분을 알고 있는 개발자는 드물기 때문에 어떤 요구사항을 처리하는 것에 있어서 어디까지 영향이 가는지는 검토 및 작업 과정에서도 판단이 안되기도 합니다. 심지어는 프로덕트 팀에서도 작업된 요건에 대해서만 검증하고 피드백을 전달하기 때문에 어디서 문제가 내재되었는지 검출이 되지 않을 가능성도 있습니다.</p><p><img data-src="/images/posts/side-effect-myself/02.jpg"></p><p>때로는 어떠한 문제를 파악하기 위해서 디버그할 수 있는 정보를 포함하여 핫픽스로 시스템을 재배포하고나서 실제로 수정된 코드는 없는데 발생하였던 버그가 나타지않을 때도 있습니다. 이번에 발생한 사이드 이펙트도 어떠한 과정을 거치게되서야 예상하지 못한 곳에서 그 과정으로 인해 생긴 정보로 인하여 제대로 된 결과를 가져오지 못하여 발생하였습니다.</p><p><img data-src="/images/posts/side-effect-myself/03.jpg"></p><p>처음에는 특정 환경에서만 발생하는 사유로 인하여 JDBC와 PostgreSQL 버전 사이의 문제로 예상했었습니다. 하지만 어찌저찌 트릭을 쓰면서까지 힘들게 찾은 원인은 전역 변수의 사용에 있었습니다. 문제가 확인되었던 곳에서는 정상적으로 전역 변수를 올바르게 사용하고 있었으나 일부 고객의 요구사항을 보완하는 과정에서 전역 변수임을 확인하지 않고 전역변수가 내부적으로 가지는 조회 기준 정보에 어떤 값을 넣는 코드가 추가됨에 따라 다른 작업에 의해서 현재 문제가 검토된 곳에서 검출이 된 것입니다.</p><p><img data-src="/images/posts/side-effect-myself/04.jpg"></p><p>문제를 일으킨 코드를 만든 사람은 바로 저였기에 스스로를 함정에 빠트리게 된 것이죠. 그나마 다행힌 점은 내가 작업한 코드로 인하여 다른 사람이 작업한 기능에 영향은 끼치지 않았다는 점입니다. 고객이 검증중인 기능에 제대로 동작하지 않는다는 문제를 보고받았고 고객이 피드백한 이슈는 아니지만 스스로 발견한 문제가 동일한 방식으로 전역 변수를 사용하는 코드가 포함되어있기에 결국에는 같은 원인으로 발생한 문제인 것까지 확인할 수 있었습니다.</p><p>이러한 문제가 발생했다는 것을 토대로 더 노력해야할 것 같습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글은 스스로 만들어낸 사이드 이펙트를 힘들게 찾아가고 사이드 이펙트가 만들어진 사유를 되돌아보고자 작성한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/posts/side-ef</summary>
      
    
    
    
    
    <category term="회고" scheme="https://kdevkr.github.io/tags/%ED%9A%8C%EA%B3%A0/"/>
    
    <category term="장애" scheme="https://kdevkr.github.io/tags/%EC%9E%A5%EC%95%A0/"/>
    
    <category term="버그" scheme="https://kdevkr.github.io/tags/%EB%B2%84%EA%B7%B8/"/>
    
    <category term="사이드 이펙트" scheme="https://kdevkr.github.io/tags/%EC%82%AC%EC%9D%B4%EB%93%9C-%EC%9D%B4%ED%8E%99%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>탄력적 볼륨을 지원하지 않음</title>
    <link href="https://kdevkr.github.io/not-support-ebs-modify-volume/"/>
    <id>https://kdevkr.github.io/not-support-ebs-modify-volume/</id>
    <published>2022-05-19T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<p>지난번에 공유한 <a href="https://kdevkr.github.io/reason-for-replacing-ec2-instance-type/">EC2 인스턴스 유형을 교체하는 이유</a>를 통해 최신 인스턴스 유형을 사용하면 비슷한 성능이지만 더 적은 비용으로 사용할 수 있다는 것을 소개했습니다. 이에 따라 조직에서 사용중인 시계열 데이터베이스용 인스턴스를 <a href="https://aws.amazon.com/ko/blogs/korea/new-amazon-ec2-r5b-instances-providing-3x-higher-ebs-performance/">Amazon EC2 R5b</a>로 변경하여 최신 인스턴스 유형으로 인한 비용 절감과 더 높은 EBS 성능을 제공받을 수 있었습니다.</p><p>그러나, 어떠한 사유로 인하여 더 높은 볼륨 처리 성능을 위해서 기존에 연결하였던 gp3 볼륨 대신에 io2 볼륨으로 대체하였고 확실이 프로비저닝된 볼륨의 처리 성능이 좋다는 것을 확인할 수 있었습니다. 다만, 이때는 알지 못했던 큰 제약사항이 최근에 발견되었으며 이에 대한 내용을 공유하고자 합니다.</p><h2 id="탄력적-볼륨"><a href="#탄력적-볼륨" class="headerlink" title="탄력적 볼륨"></a>탄력적 볼륨</h2><p><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-modify-volume.html">Amazon EBS 탄력적 볼륨</a>은 인스턴스가 사용중인 볼륨을 분리하지 않더라도 볼륨의 유형을 변경하거나 크기나 IOPS와 같은 성능을 조정할 수 있는 유용한 기능입니다. 일반적으로 사용되는 대부분의 인스턴스에서 탄력적 볼륨으로 인스턴스를 중지한다던가 볼륨을 분리하지 않아도 쉽게 볼륨의 크기 또는 성능을 확장할 수 있습니다. <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/modify-volume-requirements.html">모든 현재 세대 인스턴스에서 탄력적 볼륨을 지원한다</a>는 내용만 확인하고서는 최신 인스턴스 유형이라면 당연히 볼륨 수정이 가능할 것이라고 생각하게 되었습니다.</p><h3 id="Amazon-EC2-R5b"><a href="#Amazon-EC2-R5b" class="headerlink" title="Amazon EC2 R5b"></a>Amazon EC2 R5b</h3><p>Amazon EC2 R5b는 니트로 시스템 기반의 인스턴스로 연결되는 EBS 볼륨은 NVMe 스토리지 입니다. 인스턴스 유형을 변경했을 당시에 사용했던 볼륨은 gp3로 탄력적 볼륨으로 적재되는 데이터의 양이 많아지면서 디스크 용량이 부족해질때 인스턴스를 중지하지 않고서도 볼륨을 쉽게 확장할 수 있었습니다.</p><h3 id="io2-Block-Express-볼륨"><a href="#io2-Block-Express-볼륨" class="headerlink" title="io2 Block Express 볼륨"></a>io2 Block Express 볼륨</h3><blockquote><p>R5b, X2idn 및 X2iedn 인스턴스에 연결된 io2 볼륨의 크기 또는 프로비저닝된 IOPS는 수정할 수 없습니다.</p></blockquote><p>위 문장은 오늘의 핵심 내용입니다. Amazon EC2 R5b와 같은 일부 차세대 인스턴스 유형에서는 io2 볼륨을 사용하는 것에 주의해야합니다. R5b 인스턴스는 io2 볼륨을 사용하는 경우 더 좋은 성능을 충족하기 위해서 io2 Block Express라는 차세대 볼륨으로 연결되어 제공되기 때문입니다. <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-volume-types.html#io2-bx-considerations">io2 Block Express 볼륨은 탄력적 볼륨 작업을 지원하지 않음</a></p><p>Amazon EC2 R5b와 같은 일부 차세대 인스턴스 유형에서는 io2 볼륨을 사용하는 것에 주의해야합니다. 니트로 시스템 기반의 인스턴스에서 더 좋은 성능을 충족하기 위해서 io2 Block Express라는 차세대 볼륨으로 연결되기 때문입니다. 현재 시점에서는 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-volume-types.html#io2-bx-considerations">io2 Block Express 볼륨은 탄력적 볼륨 작업을 지원하지 않음</a>을 알아야합니다.</p><blockquote><p>다른 서비스와 기능과 마찬가지로 언젠가는 io2 Block Express 볼륨도 탄력적 볼륨이 가능하도록 변경될 수 있습니다.</p></blockquote><p>사용하고 있는 시계열 데이터베이스는 기본적으로는 메모리 엔진을 사용하지만 모든 데이터를 메모리에 유지할 수 없으므로 과거 데이터는 파일로 보관해두고 불러와서 사용하는 구조이기에 메모리와 디스크 성능이 모두 중요하다고 판단해서 더 좋은 성능의 io2 볼륨으로 교체한 것인데 탄력적 볼륨의 미지원에 대한 부분을 검토하지 않음으로 인하여 오히려 큰 제약이 발생하였습니다.</p><p>시스템에 등록되는 시계열 데이터를 계속 저장하고 유지하고 있어야하므로 디스크 볼륨의 크기를 확장할 수 없다는 점은 너무 비효율적이므로 io2 볼륨에서는 gp3 볼륨으로 전환이 가능하여 gp3 유형의 볼륨에 IOPS와 처리량을 높이는 정도로 사용하고자 변경했습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;지난번에 공유한 &lt;a href=&quot;https://kdevkr.github.io/reason-for-replacing-ec2-instance-type/&quot;&gt;EC2 인스턴스 유형을 교체하는 이유&lt;/a&gt;를 통해 최신 인스턴스 유형을 사용하면 비슷한 성능이</summary>
      
    
    
    
    
    <category term="AWS" scheme="https://kdevkr.github.io/tags/AWS/"/>
    
    <category term="EBS" scheme="https://kdevkr.github.io/tags/EBS/"/>
    
    <category term="R5b" scheme="https://kdevkr.github.io/tags/R5b/"/>
    
    <category term="io2 Block Express" scheme="https://kdevkr.github.io/tags/io2-Block-Express/"/>
    
  </entry>
  
  <entry>
    <title>신뢰할 수 있는 이메일 발송 도메인</title>
    <link href="https://kdevkr.github.io/email-spf-dkim-dmarc/"/>
    <id>https://kdevkr.github.io/email-spf-dkim-dmarc/</id>
    <published>2022-05-18T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>시스템을 개발하는 단계에서는 메일 발송 기능을 위해서 회사 내 서버 인프라 엔지니어분께 사내 메일 서버를 대신 이용할 수 있도록 요청하고 메일 서버를 이용할 수 있는 SMTP 서버와 사용자 인증 정보를 전달받아서 테스트하곤 했습니다. 그러나, 실제로 시스템을 운용하는 시점에 들어서자 회사 사내 메일 서버로 전달되는 전송 건들이 많아져서 회사 인프라 담당 엔지니어분으로부터 <a href="https://aws.amazon.com/ko/ses/">Amazon SES</a>로 메일 서버를 전환해달라는 요청을 받고 화사 사내 메일 서버 대신에 클라우드 환경에서 제공하는 SMTP 서버를 사용하도록 작업을 하였습니다. </p><h2 id="Amazon-SES"><a href="#Amazon-SES" class="headerlink" title="Amazon SES"></a>Amazon SES</h2><p>저는 서버 인프라 엔지니어는 아니기 때문에 인프라 영역에서 사용되는 모든 지식을 알지는 못하는데요. 개발자로써 이메일 발송 기능을 구현하는 방법에 대해서 찾아보면 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a>와 같이 SMTP 프로토콜을 사용하면 된다는 것을 알 수 있습니다. </p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-01.png"></p><p>Amazon SES는 SMTP 엔드포인트와 STARTTLS&#x2F;TLS 옵션에 따라 사용해야하는 포트와 SMTP 인증을 위한 크레덴셜을 발급하고 인증만 하면 사용할 수 있습니다. 간단한 클릭만으로도 SMTP 크레덴셜을 발급할 수 있기 때문에 개발자라면 누구나 쉽게 사용자 인증 정보를 가져와서 메일 서버를 이용할 수 있습니다. Amazon SES는 인증된 이메일 주소로 메일을 발송할 수 있거나 도메인을 인증하여 이메일 발송에 대한 신원을 검증할 수 있도록 제공하고 있는데요. 그래서 아래와 같이 이메일 수신이 가능한 발신 이메일이 존재한다면 간단하게 발신 주소를 등록할 수 있습니다.</p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-02.png"></p><h3 id="이메일에-대한-발신-주소를-신뢰할-수-없음"><a href="#이메일에-대한-발신-주소를-신뢰할-수-없음" class="headerlink" title="이메일에 대한 발신 주소를 신뢰할 수 없음"></a>이메일에 대한 발신 주소를 신뢰할 수 없음</h3><p>간단하게 SMTP 메일 서버를 전환할 수 있기 때문에 어려운 작업은 아니라고 생각했었는데 잠시 후 예상하지 못했던 문제가 파악되었어요. Amazon SES의 SMTP 서버를 사용하도록 전환하고나서 시스템에서 발송하는 이메일을 수신자가 받았을때 스팸 메일함으로 전달되는 것이었습니다. 그래서 원인을 찾아보니 <a href="https://aws.amazon.com/ko/premiumsupport/knowledge-center/ses-email-flagged-as-spam/">Amazon SES를 사용하여 전송하는 이메일이 스팸으로 표시되는 이유는 무엇입니까?</a>와 같은 가이드를 찾았습니다. SMTP 서버에 의해 전달되는 이메일을 신뢰할 수 있는지 검증하는 것은 Amazon SES가 보장할 수 없다는 부분과 다음의 요인이 있다는 것을 안내하고 있었습니다.</p><blockquote><p><a href="https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim.html">DomainKeys Identified Mail(DKIM)</a> 또는 <a href="https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-spf.html">Sender Policy Framework(SPF)</a>와 같은 이메일 인증 부족</p></blockquote><h3 id="발신-도메인-검증"><a href="#발신-도메인-검증" class="headerlink" title="발신 도메인 검증"></a>발신 도메인 검증</h3><p><a href="https://docs.aws.amazon.com/ses/latest/dg/configure-identities.html">Configuring identities in Amazon SES</a> 문서를 살펴보면 SMTP 프로토콜은 자체적으로 인증 기능이 없다는 것과 이러한 부분으로 인해 스패머가 발신 주소를 위장할 수 있다는 점을 알게 되었습니다. 그래서 SPF 또는 DKIM와 같은 인증 매커니즘을 사용하게 된다고 소개하고 있습니다. 이제껏 듣도보도 못한 새로운 용어가 나타나게 된거죠. <a href="https://blog.cloudflare.com/ko-kr/tackling-email-spoofing-ko-kr/">이메일 스푸핑과 피싱에 대처하기</a>에서 DNS의 도메인 레코드를 사용해서 스푸핑을 방지하기 위한 매커니즘을 구성한다는 점을 이해할 수 있었습니다. </p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-03.png"></p><p>수신된 이메일이 올바른 곳으로부터 발송된 것인지를 검증하기 위해서는 도메인 기반으로 신원을 검증하고 SPF, DKIM, DMARC와 같은 DNS 레코드를 도메인에 설정해야했습니다. 다행히도 Route53으로 도메인을 사용중이기에 Amazon SES에서 자동으로 DNS 레코드를 설정할 수 있었습니다. <a href="https://docs.aws.amazon.com/ko_kr/ses/latest/dg/send-email-authentication-dmarc.html">Amazon SES를 사용하여 DMARC 준수</a>에 따라 도메인 레코드에 DMARC 정책이 설정되었는지를 확인하고 Amazon SES가 도메인을 검증하기를 기다렸습니다.</p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-04.png"></p><h3 id="이메일-보안-DNS-레코드-질의"><a href="#이메일-보안-DNS-레코드-질의" class="headerlink" title="이메일 보안 DNS 레코드 질의"></a>이메일 보안 DNS 레코드 질의</h3><p>DKIM으로 도메인 검증을 하였음을 확인하였고 추가적으로 dig와 같은 DNS 질의 명령어 도구를 통해서 DNS 레코드가 반영되었는지 확인할 수 있었습니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># SPF 레코드 확인</span><span class="token function">dig</span> TXT example.com +short<span class="token string">"v=spf1 include:_spf.google.com ip4:xxx.xxx.xxx.xxx a:mail.example.com ~all"</span><span class="token comment"># DKIM 레코드 확인</span><span class="token function">dig</span> TXT google._domainkey.example.com +short<span class="token string">"v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoamWoQQ5zEdcFQnGaWN055oT3sEnCgN5bcAze5R6uvI1P"</span> <span class="token string">"X4d+CGbNDSVJqOmQPyrJdK2fOVG3hvjMkoilYcgWrGKDat2Nh29ftN5tTx5SVK/kl+5aPKRd9q6q9c9EWL7aRS2hqoGRyzW0Nb0ilKZc/"</span> <span class="token string">"odDbh3bgNhN6AJqIZwlE9BJgkYT5aT6TGJM/Vi4GJcYDEKm6yDexTJKzfZ8o8TCRDufCYDF8F+dKKyLvyaKrngfgIjRi5PiGVGbyNrIL7iMp1CkJ7ErpkYCJw5DeTQkXi8Gxt+Km61sIP2F8IZyd/"</span> <span class="token string">"WrEXJmk2pHzRfiJJqIiY4r3s4loR/sJ4hQPS6HEq7JQIDAQAB"</span><span class="token comment"># DMARC 레코드 확인</span><span class="token function">dig</span> TXT _dmarc.example.com +short<span class="token string">"v=DMARC1; p=quarantine; rua=mailto:postmaster@example.com; ruf=mailto:postmaster@example.com"</span></code></pre><h3 id="발신-도메인-신뢰-확인"><a href="#발신-도메인-신뢰-확인" class="headerlink" title="발신 도메인 신뢰 확인"></a>발신 도메인 신뢰 확인</h3><p>도메인 기반의 인증 매커니즘이 적용되고나서는 수신된 이메일이 스팸으로 분류되지 않게 되었고 원본 메일 정보를 확인하면 SPF, DKIM, DMARC에 대한 검증이 통과된 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-05.png"></p><blockquote><p>원본 메일을 확인하는 것은 서버 인프라 엔지니어분이 알려주셨어요! 😁</p></blockquote><p>SMTP 서버를 Amazon SES로 전환하는 경험을 통해서 이메일이 정상적인 곳으로부터 발신되었다는 것을 검증하기 위해서 도메인 레코드를 사용하는 매커니즘을 이용한다는 지식을 알게되었습니다. 수신된 이메일을 검증하는 과정을 더 자세하게 알고 싶다면 <a href="https://www.learndmarc.com/">이메일의 SPF&#x2F;DKIM&#x2F;DMARC가 어떻게 동작하는지 인터랙티브하게 보기</a>를 이용해보시기 바랍니다. </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://aws.amazon.com/ko/premiumsupport/knowledge-center/ses-email-flagged-as-spam/">Amazon SES를 사용하여 전송하는 이메일이 스팸으로 표시되는 이유는 무엇입니까?</a></li><li><a href="https://blog.cloudflare.com/ko-kr/tackling-email-spoofing-ko-kr/">이메일 스푸핑과 피싱에 대처하기</a></li><li><a href="https://www.learndmarc.com/">이메일의 SPF&#x2F;DKIM&#x2F;DMARC가 어떻게 동작하는지 인터랙티브하게 보기</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;시스템을 개발하는 단계에서는 메일 발송 기능을 위해서 회사 내 서버 인프라 엔지니어분께 사내 메일 서버를 대신 이용할 수 있도록 요청하고 메일 서버를 이용할 수 있는 SMTP 서버와 사용자 인증 정보를 전달받아서 테스트하곤 했습니다. 그러나, 실</summary>
      
    
    
    
    
    <category term="SPF" scheme="https://kdevkr.github.io/tags/SPF/"/>
    
    <category term="DKIM" scheme="https://kdevkr.github.io/tags/DKIM/"/>
    
    <category term="DMARC" scheme="https://kdevkr.github.io/tags/DMARC/"/>
    
  </entry>
  
  <entry>
    <title>개발자를 위한 인프라 지식</title>
    <link href="https://kdevkr.github.io/infrastructure/"/>
    <id>https://kdevkr.github.io/infrastructure/</id>
    <published>2022-05-15T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IT가 어렵다고 느끼게 되는 이유는 기술의 발전으로 예전에는 불가능했다거나 그러지 않았던 부분들이 변화해서 많은 선택지가 생기기 때문입니다. 온-프레미스 환경을 넘어서 클라우드 환경으로 인프라를 구성하게 되는 것도 동일합니다.</p></blockquote><p>IT 분야에서 반드시 그래야한다는 것이 보장되지 않는 것과 비슷하게 모든 회사 또는 조직이 시스템을 운영하기 위한 인프라를 어떻게 구성한다거나 인프라를 담당하기 위한 팀을 별도로 구성할 지 일부 인원들이 담당할지는 알 수 없습니다. 작은 조직에서는 인건비의 문제로 인하여 서버 인프라 엔지니어를 최소화하고 클라우드 환경을 통해 개발자가 스스로 인프라를 구성하고 운영하는 선택을 할 것입니다. 조직에서 만드는 시스템이나 서비스의 규모가 커지게되면 업무의 과중화로 인하여 <a href="https://tech.kakao.com/2020/12/07/kakao-infra-team/">카카오 서비스의 모든 시스템과 트래픽을 책임지는 ‘인프라팀’ 이야기</a> 또는 <a href="https://blog.toss.im/article/infraengineeringteam-interview">토스 서비스의 근간을 다지는 사람들, 인프라 엔지니어링 팀을 만나다</a>에서처럼 클라우드 환경의 인프라를 사용하더라도 더 효율적으로 인프라를 구성하고 중점적으로 관리하기 위해서 인프라 팀을 구성하게 될 것입니다. </p><h2 id="인프라스트럭처"><a href="#인프라스트럭처" class="headerlink" title="인프라스트럭처"></a>인프라스트럭처</h2><p>인프라 영역에 대해서 서버 인프라 엔지니어에게 원하는 바를 전달하기 위해서는 인프라 영역에 대한 지식을 어느정도 알고 있어야 합니다. 인프라 영역을 담당하는 것과 인프라 영역에 대한 지식을 알고 협업하는 것은 다르다고 생각됩니다. 솔루션 회사의 사업팀 인원들은 IT 분야 또는 시스템에서 사용되는 용어나 개념들을 학습하여 업무에 활용하는 것처럼 개발자도 개발 영역 뿐만 아니라 인프라 영역에 대한 개념을 알고 있는게 당연할 것 입니다. 개발 영역과 마찬가지로 인프라 영역에서 알아야할 지식도 무궁무진합니다. 클라우드 환경에서 가상의 네트워크 영역을 구성하기 위해서 사이더(CIDR) 블록 및 NAT와 같은 개념을 알아야하거나 시스템을 운영하기 위해서 적합한 <a href="https://aws.amazon.com/ko/ec2/instance-types/">EC2 인스턴스 유형</a>을 선택할 수 있어야합니다.</p><h3 id="서버-CPU-아키텍처"><a href="#서버-CPU-아키텍처" class="headerlink" title="서버 CPU 아키텍처"></a>서버 CPU 아키텍처</h3><p>온-프레미스 환경에서는 호환성을 위해서 일반적으로 인텔 제품군의 제온 프로세서와 같은 X86_64 아키텍처 기반의 서버용 CPU를 사용하는 경우가 많았을 것입니다. 클라우드 환경에서는 인텔과 AMD와 같은 amd64 아키텍처 기반의 프로세서 뿐만 아니라 arm64 아키텍처 기반의 프로세서를 사용할 수 있도록 지원하므로 선택지가 다양하고 서버 인스턴스에서 구동되는 프로세스의 목적에 따라서 선택하게 됩니다. 현재 조직에서는 <a href="/reason-for-replacing-ec2-instance-type/">EC2 인스턴스 유형을 교체하는 이유</a>에서처럼 서버 비용을 줄이기 위한 목적으로 일부 서버 인스턴스에 대해서 클라우드 서비스에서 제공하는 최신 인스턴스 유형으로 전환하기도 했죠. </p><p><img data-src="/images/posts/infrastructure/arm-01.png"></p><p>서버 CPU 아키텍처의 선택지가 다양해짐으로써 사용해야하는 프로세스나 도구에서 CPU 아키텍처를 지원하는지를 검토해야할 수 있습니다. 위 스크린샷처럼 <a href="https://github.com/prometheus/node_exporter/releases">Promethues Node Exporter</a>를 Arm 아키텍처 기반의 서버에서 사용하기 위해서는 <strong>arm64</strong>로 빌드된 바이너리를 다운로드해야합니다. 도커 컨테이너를 통해서 프로세스를 실행하는 것도 도커 이미지가 <a href="https://docs.docker.com/desktop/multi-arch/#build-multi-arch-images-with-buildx">Arm 아키텍처로 빌드된 이미지</a>를 지원하는지 확인해보고 사용해야합니다.</p><h4 id="서버-아키텍처-확인"><a href="#서버-아키텍처-확인" class="headerlink" title="서버 아키텍처 확인"></a>서버 아키텍처 확인</h4><p>클라우드 서비스 콘솔에 접속할 수 있다면 서버 인스턴스가 어떤 아키텍처 기반인지 쉽게 확인할 수 있을 것 입니다. 그러나 일반적으로는 SSH 접속을 통해서 서버에 접근할 수 있는 권한을 부여할 것이므로 현재 접속한 서버내에서 어떤 아키텍처를 사용하는지를 확인할 수 있어야합니다. 서버 내에서 아키텍처 정보를 확인하려면 커널 또는 CPU에 대한 정보를 조회하는 명령어나 도구를 사용하면 됩니다. 여러분들이 접속하는 서버에서 다음의 명령어를 확인해보세요.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -rmpo<span class="token number">4.14</span>.256-197.484.amzn2.aarch64 aarch64 aarch64 GNU/Linux$ <span class="token function">cat</span> /proc/versionLinux version <span class="token number">4.14</span>.256-197.484.amzn2.aarch64 <span class="token punctuation">(</span>mockbuild@ip-10-0-46-15<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">7.3</span>.1 <span class="token number">20180712</span> <span class="token punctuation">(</span>Red Hat <span class="token number">7.3</span>.1-13<span class="token punctuation">)</span> <span class="token punctuation">(</span>GCC<span class="token punctuation">))</span> <span class="token comment">#1 SMP Tue Nov 30 00:18:02 UTC 2021</span>$ hostnamectl   Static hostname: ip-192-168-53-1.ap-northeast-2.compute.internal         Icon name: computer-vm           Chassis: vm        Machine ID: ec2d229d0283ccced53f112dc3648f3a           Boot ID: 67c156512c204340b1ac01d60eb45b26    Virtualization: amazon  Operating System: Amazon Linux <span class="token number">2</span>       CPE OS Name: cpe:2.3:<span class="token punctuation">\</span>o:amazon:amazon_linux:2            Kernel: Linux <span class="token number">4.14</span>.256-197.484.amzn2.aarch64      Architecture: arm64$ lscpuArchitecture:        aarch64Byte Order:          Little EndianCPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:              <span class="token number">4</span>On-line CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span> list: <span class="token number">0</span>-3Thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per core:  <span class="token number">1</span>Core<span class="token punctuation">(</span>s<span class="token punctuation">)</span> per socket:  <span class="token number">4</span>Socket<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:           <span class="token number">1</span>NUMA node<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:        <span class="token number">1</span>Model:               <span class="token number">1</span>BogoMIPS:            <span class="token number">243.75</span>L1d cache:           64KL1i cache:           64KL2 cache:            1024KL3 cache:            32768KNUMA node0 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:   <span class="token number">0</span>-3Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm lrcpc dcpop asimddp ssbs</code></pre><blockquote><p>x86_64와 amd64는 X86 명령어 집합의 아키텍처이며 aarch64와 arm64는 arm 명령어 집합의 아키텍처입니다.</p></blockquote><h3 id="디스크-볼륨"><a href="#디스크-볼륨" class="headerlink" title="디스크 볼륨"></a>디스크 볼륨</h3><p>서버 인스턴스에서 사용하는 디스크 볼륨에 대한 부분에 대해서 이야기가 오고갈 수 있습니다. 클라우드 서비스는 다양한 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-volume-types.html">디스크 볼륨 유형</a>을 선택할 수 있도록 지원하므로 서버 인스턴스의 목적에 맞는 디스크 볼륨을 추가하여 사용하기 때문입니다. 현재 사용중인 디스크 볼륨 정보를 확인하고 어떤 파일시스템의 파티션인지를 확인하고 디스크 볼륨의 용량을 증설해야할 수도 있죠. </p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> -hTFilesystem     Type      Size  Used Avail Use% Mounted on/dev/root      ext4       30G  <span class="token number">8</span>.9G   21G  <span class="token number">31</span>% //dev/nvme1n1   xfs      1000G  629G  371G  <span class="token number">63</span>% /data/main/dev/nvme2n1   xfs       <span class="token number">2</span>.0T  306G  <span class="token number">1</span>.7T  <span class="token number">16</span>% /data/sub$ lsblk -fNAME        FSTYPE   LABEL           UUID                                 FSAVAIL FSUSE% MOUNTPOINTnvme1n1     xfs                      <span class="token number">18891124</span>-be54-415d-ba02-21dc6acf9e4f  <span class="token number">370</span>.9G    <span class="token number">63</span>% /data/mainnvme2n1     xfs                      5be85d99-8ed0-440b-a423-486bdef1b1b4    <span class="token number">1</span>.7T    <span class="token number">15</span>% /data/subnvme0n1└─nvme0n1p1 ext4     cloudimg-rootfs e8070c31-bfee-4314-a151-d1332dc23486   <span class="token number">20</span>.1G    <span class="token number">31</span>% /</code></pre><p>위 예시 결과를 보면 서버 인스턴스에 연결된 루트 볼륨은 NVMe 기반이며 ext4 파일시스템의 파티션으로 되어있음을 확인할 수 있습니다. 추가로 연결된 데이터 볼륨은 동일하게 NVMe 기반이지만 xfs 파일시스템으로 되어있는 것을 확인할 수 있습니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> --max-depth <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">sort</span> -nr<span class="token number">188679628</span> <span class="token builtin class-name">.</span><span class="token number">187045152</span> ./elasticsearch-7.3.2<span class="token number">1034772</span>   ./kibana-7.3.2<span class="token number">18756</span>     ./node_exporter-1.1.2.linux-amd64</code></pre><p>du 명령어를 통해서 현재 경로 기준에서 사용량이 많은 디렉토리 순서대로 출력했습니다. 디스크 볼륨의 용량이 부족해지면 사용량이 많은 디렉토리가 무엇인지 확인하고 불필요한 파일이 남아있는지를 먼저 확인하고 용량 확보가 불가능하다면 디스크 볼륨 증설을 요청하거나 작업을 수행할 것 입니다.</p><h3 id="네트워크"><a href="#네트워크" class="headerlink" title="네트워크"></a>네트워크</h3><p>인프라 영역 중 네트워크에 대한 부분은 외부 시스템과의 연동이 필요한 경우가 아니라면 생각보다 경험해볼 가능성이 적습니다. 외부 시스템의 IP 또는 호스트 주소로 트래픽이 전달되는지를 확인하거나 외부 API를 서버 내에서 직접 요청해볼 수도 있습니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 네트워크 인터페이스 조회</span><span class="token function">ifconfig</span><span class="token comment"># 내부 아이피 조회</span><span class="token function">hostname</span> -I<span class="token comment"># 외부 아이피 조회</span><span class="token function">curl</span> ipconfig.io<span class="token comment"># TCP 바인딩 포트 조회</span><span class="token function">netstat</span> -tnlp<span class="token comment"># 트래픽 경로 추적</span><span class="token function">traceroute</span> google.com<span class="token comment"># DNS 조회</span><span class="token function">nslookup</span> -type<span class="token operator">=</span>mx google.com<span class="token function">dig</span> google.com mx</code></pre><h3 id="시스템-로그"><a href="#시스템-로그" class="headerlink" title="시스템 로그"></a>시스템 로그</h3><p>인프라 엔지니어로 구성된 인프라 팀이 조직내에 있다면 서버 시스템에서 발생하는 다양한 로그 또는 지표를 모니터링할 수 있는 Zabbix, Datadog과 같은 솔루션을 도입할 것입니다. 서버에 기록된 시스템 로그는 서버에서 발생한 일련의 이벤트들의 기록이므로 어떠한 문제가 파악되었을때 원인을 찾아가기 위한 분석 용도로 사용할 수 있습니다. 모니터링 시스템이 구축되어있지 않아도 시스템 로그를 확인할 수 있는 방법은 알아야합니다. 사용자의 요청이 애플리케이션으로 전달되는 과정에서 서버 네트워크 트래픽이 로그로 기록된다거나 엔진엑스와 같은 웹서버에서 리버스 프록시를 수행하기 전에 요청에 대해 액세스 로그를 기록합니다. 심지어는 애플리케이션 서버에서도 자체적으로 액세스 로그를 남기거나 애플리케이션의 주요 기능에 대한 동작을 로그로 저장되도록 정의하기도 합니다. 서버 인프라 엔지니어가 있다면 더 상세하게 원인을 파악할 수 있는 방법을 시도하겠지만 개발자로써는 간단하게 로그를 확인할 수 있으면 됩니다.</p><h4 id="리눅스-로그-디렉토리"><a href="#리눅스-로그-디렉토리" class="headerlink" title="리눅스 로그 디렉토리"></a>리눅스 로그 디렉토리</h4><p>리눅스 시스템의 로그가 저장되는 기본 디렉토리는 <strong>&#x2F;var&#x2F;log</strong> 입니다. 별도로 설치한 프로세스의 로그가 아니라면 대부분의 로그들이 이 경로에 저장될 것입니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 접속 기록 조회</span>lastlog -t <span class="token number">1</span><span class="token comment"># systemd 로그 조회</span>journalctl -b<span class="token comment"># 커널 부트 메시지 조회</span><span class="token function">dmesg</span><span class="token comment"># 시스템 로그 조회</span><span class="token function">tail</span> /var/log/syslog</code></pre><blockquote><p>Zabbix와 같은 모니터링 솔루션을 도입하는 경우 <a href="https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/log_items">로그 파일 감시</a> 기능으로 예상되는 문제를 감지할 수 있습니다.</p></blockquote><h4 id="로그-관리"><a href="#로그-관리" class="headerlink" title="로그 관리"></a>로그 관리</h4><p>서버를 관리하는 인프라 엔지니어 입장에서는 로그 파일을 효율적으로 관리하기 위해서 logrotate라고하는 로그 관리 도구를 사용합니다. 서버에 저장되는 로그 파일을 일정한 패턴을 주기로 구분하여 저장함으로써 나중에 어떠한 문제가 발생하거나 감사를 위해서 특정 시점에 대한 로그를 요청했을때 쉽게 전달할 수 있도록 대비합니다. 예를 들어, Nginx에 대한 로테이션 설정 파일을 살펴보면 아래와 같이 되어있는 것을 확인할 수 있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/logrotate.d/nginx/var/log/nginx/*.log <span class="token punctuation">&#123;</span>        daily        missingok        rotate <span class="token number">52</span>        compress        delaycompress        notifempty        create <span class="token number">640</span> nginx adm        sharedscripts        postrotate                <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /var/run/nginx.pid <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                        <span class="token function">kill</span> -USR1 <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /var/run/nginx.pid<span class="token variable">`</span></span>                <span class="token keyword">fi</span>        endscript<span class="token punctuation">&#125;</span></code></pre><p>인프라 영역에서 로그 관리에 대한 개념을 알게된다면 개발자로써 애플리케이션 서버에서 기록되는 로그에 어떠한 정보를 남겨야하는가를 좀 더 고민하게 될 것입니다. 너무 불필요한 정보를 로그로 남기게 되어 서버의 디스크 볼륨의 용량을 너무 차지하게 되고 로그 분석도 힘들어질 수 있기 때문입니다.</p><p>개발자가 알아야할 기초적인 부분에 대해서 다루어보았습니다. 더 자세하게 들어간다면 시스템 성능의 지표를 확인하거나 시스템을 더 효율적으로 만드는 커널 튜닝에 대한 부분도 다루어보아야합니다. 인프라 영역에 대해서 더 많은 경험을 하게되면 이에 대한 부분도 공유해볼 수 있기를 바랍니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://aws.amazon.com/ko/ec2/graviton/">AWS Graviton 프로세서</a></li><li><a href="https://www.oracle.com/kr/cloud/compute/arm/what-is-arm/">ARM 프로세서를 선택해야 하는 이유</a></li><li><a href="https://www.epnc.co.kr/news/articleView.html?idxno=205714">미래 컴퓨팅 환경 반영하는 ARM 아키텍처 기술</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;IT가 어렵다고 느끼게 되는 이유는 기술의 발전으로 예전에는 불가능했다거나 그러지 않았던 부분들이 변화해서 많은 선택지가 생기기 때문입니다. 온-프레미스 환경을 넘어서 클라우드 환경으로 인프라를 구성하게 되는 것도 동일합니</summary>
      
    
    
    
    
    <category term="Infrastructure" scheme="https://kdevkr.github.io/tags/Infrastructure/"/>
    
    <category term="Microarchitecture" scheme="https://kdevkr.github.io/tags/Microarchitecture/"/>
    
  </entry>
  
  <entry>
    <title>CSV, Comma Separated Values</title>
    <link href="https://kdevkr.github.io/csv/"/>
    <id>https://kdevkr.github.io/csv/</id>
    <published>2022-05-07T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>데이터 기반의 웹 애플리케이션에서 데이터를 제공하는 방식은 다양합니다. 개발자들이 REST API를 통해 클라이언트와 서버 간의 데이터를 전달할 때 JSON 형식으로 주고받는 것을 선호하는 것과 별개로 시스템을 이용하는 일반 사용자들은 주로 사용하는 <a href="https://support.microsoft.com/ko-kr/office/excel%EC%97%90%EC%84%9C-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%ED%8C%8C%EC%9D%BC-%ED%98%95%EC%8B%9D-0943ff2c-6014-4e8d-aaea-b83d51d46247">엑셀 프로그램에서 읽을 수 있는 XLS 또는 XLSX</a>로 제공하기를 선호합니다.</p><p>개발자들은 엑셀 프로그램에서 사용할 수 있는 XLS 또는 XLSX 파일 형식으로 데이터를 제공하는 것을 좋아하지 않습니다. 엑셀 프로그램이 데이터를 활용하기 위한 많은 기능을 제공하여 편리한 방법이기는 하지만 자바에서 엑셀 파일 형식으로 저장하기 위해서 사용하는 Apach POI와 같은 라이브러리에서 엑셀 파일 형식에 따른 제약이나 성능 이슈가 있기 때문입니다. 엑셀 파일 형식에서 가장 기본적인 제약사항은 단일 시트에 대한 최대 행수 제한입니다. 그리고 엑셀 파일에 데이터를 기록하는 방식에 따라 서버에 부하가 발생할 수 있습니다.</p><p>현재 조직에서 개발하는 시스템은 시계열 데이터를 수집하고 이를 활용할 수 있는 기능을 제공하므로 고객이 등록한 시계열 데이터를 다운로드할 수 있는 방법도 제공하고 있습니다. 이 요건은 시계열 데이터를 집계하여 정제된 데이터를 제공하는 것이 아니므로 고객이 보유하는 에너지 자원 및 데이터 항목만큼 파일에 포함되어야하는 데이터의 건수가 기하급수적으로 늘어날 수 있으며 그에 대한 규모를 예상하기 힘듭니다. 아무리 자바 애플리케이션에서 SXSSF로 스트리밍 방식으로 엑셀 파일에 데이터를 기록하거나 어떠한 동작을 최소화하도록 코드를 최적화한다고해도 처리해야하는 데이터 건수가 많음으로 발생하는 소요 시간 및 애플리케이션 부하에 대한 이슈는 해결되지 않습니다.</p><p>이러한 대용량 데이터를 다운로드하는 요건에 대해서는 불필요한 작업을 최소하하는 방안이 중요합니다. 시계열 데이터에 대해 빠른 성능을 보여주는 시계열 데이터베이스에서 애플리케이션으로 전달되는 데이터의 양을 최대한 줄일 수 있도록 해야합니다. 시계열 데이터 특성 상 같은 시간대에 대한 데이터 항목들을 열로 표현할 수 있도록 <a href="https://code.kx.com/q/kb/pivoting-tables/">테이블을 피봇하는 방법</a>이 있으므로 이를 활용하면 엑셀 파일에 기록해야하는 데이터행 수를 줄일 수 있습니다.</p><p>피봇 테이블을 도입하더라도 엑셀 파일이 읽을 수 있는 바이너리 파일을 만드는 것이므로 일반적인 텍스트 파일을 기록하는 작업보다 많은 부하가 발생합니다. CSV는 <a href="https://datatracker.ietf.org/doc/html/rfc4180">RFC 4180</a> 표준으로 되어있는 데이터 형식으로 테이블 형식으로 되어있는 데이터를 표현하기에 적합한 방법입니다. 표준으로 정의되어있기에 대부분의 스프레드시트 프로그램에서는 CSV 파일에 포함된 데이터를 불러올 수 있는 기능을 제공합니다. 시스템에서 사용하는 시계열 데이터베이스에서 <a href="https://code.kx.com/q/learn/tour/csvs/">테이블을 CSV로 변환할 수 있는 방법</a>도 제공하고 있으므로 애플리케이션에서 데이터를 가공하는 별도의 작업을 하지 않고 고객에게 데이터를 전달할 수 있습니다.</p><p>시스템의 파일 다운로드 표준은 CSV이고 XLS 및 XLSX로도 다운로드할 수 있도록 인터페이스는 제공합니다만 실제로 소요되는 시간을 비교하면 극단적으로 CSV의 다운로드에 소요되는 시간이 적은 것을 확인할 수 있었습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;데이터 기반의 웹 애플리케이션에서 데이터를 제공하는 방식은 다양합니다. 개발자들이 REST API를 통해 클라이언트와 서버 간의 데이터를 전달할 때 JSON 형식으로 주고받는 것을 선호하는 것과 별개로 시스템을 이용하는 일반 사용자들은 주로 사용</summary>
      
    
    
    
    
    <category term="RFC 4180" scheme="https://kdevkr.github.io/tags/RFC-4180/"/>
    
    <category term="CSV" scheme="https://kdevkr.github.io/tags/CSV/"/>
    
  </entry>
  
  <entry>
    <title>재부팅 시 Crontab에 의해 프로세스를 자동으로 실행하기</title>
    <link href="https://kdevkr.github.io/autorun-process-using-crontab-on-reboot/"/>
    <id>https://kdevkr.github.io/autorun-process-using-crontab-on-reboot/</id>
    <published>2022-05-06T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🤪 재부팅 시 Crontab에 의해서 프로세스가 자동으로 실행되지 않은 이유</p></blockquote><p>크론탭(Crontab)은 리눅스에서 일정된 시점이나 주기적으로 명령어 또는 쉘 스크립트를 실행할 수 있는 스케줄러 또는 타이머입니다. 이전에 작성한 <a href="/maintaining-process-execution-in-linux">리눅스에서 프로세스 실행 유지하기</a>에서도 크론탭으로 프로세스를 실행하는 방법에 대해서 다루어본 적이 있습니다. 서버 시스템이 예기지 않은 상황에 의해서 재부팅되거나 종료되어 수동으로 실행될 수도 있으므로 Systemd 또는 Crontab으로 프로세스를 자동으로 실행할 수 있다고 공유했었습니다. </p><p>그런데 얼마전에 특정 고객 환경의 서버들을 고객이 지진과 같은 예기치 않은 장애로 인해서 서버가 재부팅되는 상황에서 프로세스가 자동으로 실행될 수 있음을 테스트하던 중 서버가 재부팅될 때 자동으로 실행되었어야할 프로세스들이 시작되지 않는다는 피드백이 전달되었습니다. 실제로 시스템이 재부팅될 때 프로세스가 자동으로 실행되지 않았음을 확인하였고 크론탭과 쉘 스크립트에 대한 이해가 부족했다는 점을 확인했습니다.</p><p>저는 서버에 대한 부분을 전문적으로 관리하는 서버 엔지니어는 아니므로 필요한 부분을 검색한 후 정리된 바를 토대로 작업을 할 수 밖에 없습니다. Crontab에 의해서 프로세스가 자동으로 실행되기 위해서 검토하지 않은 부분이 무엇인지를 공유해보겠습니다.</p><h2 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h2><p>크론탭에 대한 메뉴얼 페이지를 살펴보면 <a href="https://man7.org/linux/man-pages/man5/crontab.5.html#EXTENSIONS">EXTENSIONS</a>으로 시스템이 재부팅되었을때 실행할 수 있도록 시간을 지정할 수 있는 별칭이 있다는 것을 확인할 수 있습니다. <a href="https://phoenixnap.com/kb/crontab-reboot">Crontab Reboot: How to Execute a Job Automatically at Boot</a>와 같은 글에서도 간단하게 @reboot을 사용하면 시스템이 부팅되었을때 스크립트를 실행할 수 있다고 정리되어있습니다. 그래서 단순히 @reboot를 지정하기만 하면 시스템이 재부팅되었을때 정상적으로 쉘 스크립트가 실행될 것이라고 예상하였습니다.</p><h3 id="Interactive-and-Non-Interactive-Shell"><a href="#Interactive-and-Non-Interactive-Shell" class="headerlink" title="Interactive and Non-Interactive Shell"></a>Interactive and Non-Interactive Shell</h3><p>제가 검토하지 않은 부분은 쉘 스크립트가 실행되는 방식이 다양하다는 것에 있습니다. 일반적으로 SSH 접속으로 실행되는 쉘은 로그인 쉘입니다. 로그인 쉘 및 Bash로 실행되었을때는 다음과 같은 파일들이 자동으로 로드된다는 특징이 있습니다.</p><ul><li>&#x2F;etc&#x2F;profile</li><li>~&#x2F;.bash_profile</li><li>~&#x2F;.bashrc</li><li>~&#x2F;.profile</li></ul><p>일반적으로 쉘 스크립트를 작성하고 실행해보았을때는 로그인 쉘을 통해 실행하기 때문에 실행 스크립트에서 참조하는 많은 환경변수가 올바르게 지정되어있다는 것이 보장됩니다. 그러나 Crontab에 의해서 자동으로 실행되는 스크립트는 로그인 쉘에서 수행되는 것이 아니므로 환경변수가 제대로 지정된다는 것을 보장할 수 없는 문제를 간과한 것입니다.</p><h3 id="사용자-기본-쉘"><a href="#사용자-기본-쉘" class="headerlink" title="사용자 기본 쉘"></a>사용자 기본 쉘</h3><p>쉘 스크립트에 셔뱅(#!)을 Bash로 지정하더라도 크론탭에 의해서 실행되는 쉘 유형은 사용자의 기본 쉘로 고정됩니다. SSH 접속 후 로그인 쉘 상태로 스크립트를 실행하면 현재 쉘이 Bash인 것을 확인할 수 있습니다. 그러나, 리부트 명령을 수행하고나서 크론탭에 의해서 실행된 스크립트에 대한 로그를 확인하면 Bash가 아닌 기본 쉘이라고 기록되어있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">./a.sh<span class="token environment constant">SHELL</span><span class="token builtin class-name">:</span> /bin/bash<span class="token comment"># reboot with #!/bin/bash</span><span class="token function">tail</span> a.log<span class="token environment constant">SHELL</span><span class="token builtin class-name">:</span> /bin/sh<span class="token comment"># reboot with #!/bin/bash --login</span><span class="token function">tail</span> a.log<span class="token environment constant">SHELL</span><span class="token builtin class-name">:</span> /bin/sh<span class="token comment"># crontab -e &amp;&amp; SHELL=/bin/bash</span><span class="token environment constant">SHELL</span><span class="token builtin class-name">:</span> /bin/bash</code></pre><p>위 결과를 토대로 쉘 스크립트에서 셔뱅과 함께 로그인 쉘 옵션을 활성화하는 것과 상관없이 사용자의 기본 쉘을 변경하거나 크론탭 설정 시 쉘을 지정하도록 하여야한다는 것을 확인할 수 있습니다. </p><h3 id="환경변수-파일"><a href="#환경변수-파일" class="headerlink" title="환경변수 파일"></a>환경변수 파일</h3><p>쉘 스크립트에서 로그인 쉘 옵션(–login)을 지정하는 것은 정해진 환경변수 파일을 로드하기 위한 방법입니다. 다만, 로그인 쉘이 적용되었기에 다음과 같이 ~&#x2F;.bashrc는 로드되지 않는 것을 확인할 수 있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash --login</span><span class="token function">tail</span> a.logLoaded /etc/profileLoaded .profile<span class="token environment constant">SHELL</span><span class="token builtin class-name">:</span> /bin/bash</code></pre><blockquote><p>크론탭에 의해서 쉘 스크립트가 실행될 때에는 Non-Interactive Shell 방식으로 동작한다는 점을 인지해야합니다. 이는 로그인 쉘 옵션을 지정해도 .bashrc 파일이 로드되지 않았음을 확인할 수 있습니다.</p></blockquote><p>결과적으로, 재부팅시에도 크론탭에 의해서 쉘 스크립트를 통해 프로세스가 자동으로 실행되기 위해서는 다음의 방안 중에서 환경 변수가 올바르게 로드될 수 있도록 별도의 작업을 수행해야합니다.</p><ol><li>.profile에 환경 변수를 지정한 경우 –login 옵션 고려</li><li>.bashrc 또는 .bash_profile에 환경 변수를 지정한 경우 파일을 직접 명시하여 로드</li><li>프로세스 실행 시 필요한 환경변수를 수동으로 지정하는 스크립트 로드</li></ol><p>크론탭에 의해서 쉘 스크립트가 정상적으로 실행되지 않는다면 알맞은 쉘과 환경변수가 올바르게 로드되는 방식을 취하였는지 검토하시기 바랍니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://unix.stackexchange.com/a/46856">Difference between Login Shell and Non-Login Shell?</a>  </li><li><a href="https://www.geeksforgeeks.org/shell-scripting-interactive-and-non-interactive-shell/">Shell Scripting – Interactive and Non-Interactive Shell</a>  </li><li><a href="https://man7.org/linux/man-pages/man5/crontab.5.html">crontab(5) — Linux manual page</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🤪 재부팅 시 Crontab에 의해서 프로세스가 자동으로 실행되지 않은 이유&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;크론탭(Crontab)은 리눅스에서 일정된 시점이나 주기적으로 명령어 또는 쉘 스크립트를 실행할 수 있는 </summary>
      
    
    
    
    
    <category term="Autorun" scheme="https://kdevkr.github.io/tags/Autorun/"/>
    
    <category term="Crontab" scheme="https://kdevkr.github.io/tags/Crontab/"/>
    
    <category term="Interactive Shell" scheme="https://kdevkr.github.io/tags/Interactive-Shell/"/>
    
  </entry>
  
  <entry>
    <title>서비스 상태를 모니터링하는 이유</title>
    <link href="https://kdevkr.github.io/service-status/"/>
    <id>https://kdevkr.github.io/service-status/</id>
    <published>2022-05-04T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<p>현재 조직의 문제점은 일하는데 있어서 체계적으로 정해진 가이드가 없다는 점입니다. 고객마다 인프라 환경도 다르며 동일한 시스템을 다양한 방식으로 배포를 요구하기도 합니다. 심지어는 시스템을 구성하는 여러가지 인스턴스의 지표를 수집하거나 로그를 남기는 등의 방식도 정해 일해오던 조직이 아닙니다. 시스템에 대한 지표나 로그등을 어떤 기준에서 남기는 것이 정해지지 않는다면 추후 시스템 장애가 발생했을때 원인을 검토하고 분석하는데 어려움이 많습니다. 실제로 APM을 도입하지 않는 시스템에서 소 잃고 외양간 고치듯이 사업팀에서는 시스템의 문제를 파악하기 위한 정보를 알 수 있냐는 문의를 하는 것도 지켜보았습니다.</p><p>분야 또는 시장의 요건에 따라 필요한 시스템을 개발하는 것을 넘어서 시스템이 정상적으로 동작하도록 유지하는 노력도 중요한 부분입니다. 시스템을 설계하고 운영되는 인프라 영역을 구성할 때에는 시스템을 이용하는 규모에 맞게 수행합니다. 트래픽이 적더라도 시스템을 다수의 서버로 트래픽을 분산할 수 있도록 구성할 수는 있으나 인프라에 대한 비용이 비효율적인 방법입니다.</p><blockquote><p>IT 분야에서 서비스나 시스템을 운영하는데 들어가는 비용이 상당히 높습니다. 작은 규모의 조직일수록 비용에 더 민감할 수 밖에 없습니다. </p></blockquote><p>아무튼 시스템을 운영하기 위한 규모도 다르고 시스템을 구성하는 애플리케이션의 언어 뿐만 아니라 인프라 영역에 대한 구성도 다양합니다. 모든 서비스와 시스템이 동일하게 만들어지고 같은 방식으로 운영되지 않습니다. 그리고 정상적으로 동작하던 시스템이 어떠한 요구사항에 의한 수정에 의해 예상하지 못했던 장애의 원인을 만들기도 합니다. 그런데 중요하게 생각해야될 부분은 시스템을 만들고 운영하는 조직이 일하는 시간이 아닐 때에도 인터넷이 접속되는 환경이라면 언제 어디서든 서비스를 이용할 수 있다는 점입니다. 시스템이 제공하는 기능을 정상적으로 이용하지 못하는 시간이 길어질수록 고객은 사용중인 서비스나 시스템에 대한 신뢰를 잃게 됩니다. 다음은 구글에 시스템 오류라는 키워드로 검색을 하여 수 많은 오류로 인한 장애와 고객의 불만에 대해 알리는 기사들입니다.</p><ul><li><a href="https://www.edaily.co.kr/news/read?newsId=01092246629281144&mediaCodeNo=257">쿠팡, ‘마이 페이지’ 오류…“불편끼쳐 드려 죄송”</a></li><li><a href="https://imnews.imbc.com/news/2021/econo/article/6169999_34887.html">카카오톡 내부 시스템 오류로 장애…”긴급 점검 중”</a></li><li><a href="https://www.donga.com/news/Society/article/all/20210716/107987824/1">카카오톡 잔여백신 예약 ‘무한로딩’…당국 “시스템 오류 해결”</a></li><li><a href="https://www.koreapost.co.kr/news/articleView.html?idxno=61208">위메프, 새벽 중 시스템 오류로 지급된 5만 포인트 미회수 결정</a></li><li><a href="https://biz.newdaily.co.kr/site/data/html/2022/01/24/2022012400113.html">네이버, 연이은 접속 오류… 보상은 ‘미미’</a></li><li><a href="https://m.mk.co.kr/news/it/view/2021/12/1219484/">네이버페이 이용자 자산정보 유출…시스템 오류</a></li><li><a href="https://www.topstarnews.net/news/articleView.html?idxno=14686520">“불편 드린 점 사과”…음원 사이트 멜론(Melon), 실시간 차트→탐색 시스템 오류 발생</a></li><li><a href="https://www.thedailypost.kr/news/articleView.html?idxno=86942">혁신 아이콘 카카오의 ‘민낯’…국내 3위 다음 ‘먹통’ 브랜드 이미지 ‘실추’</a></li><li><a href="https://www.mk.co.kr/news/society/view/2022/04/327578/">전국 고속버스 발권 시스템 1시간 20분 가량 장애(종합)</a></li><li><a href="https://biz.sbs.co.kr/article/20000059393">다음 메일 6시간 넘게 ‘먹통’…내부 시스템 오류 때문</a></li><li><a href="https://fetv.co.kr/news/article.html?no=113781">“하필 일요일 점심 때” 쿠팡이츠 시스템 오류</a></li><li><a href="https://www.edaily.co.kr/news/read?newsId=01787606632294808&mediaCodeNo=257">롯데렌탈 ‘그린카’, 서버 오류로 앱 먹통…”고객 불만 폭주”</a></li><li><a href="https://www.mk.co.kr/news/economy/view/2022/01/82495/">국세청 연말정산 오류로 821명 개인정보 유출</a></li></ul><blockquote><p>제가 이용하지 않는 서비스들에서 생각보다 많은 시스템 장애가 발생한 것을 확인할 수 있습니다. </p></blockquote><p>위처럼 시스템 장애에 대한 원인은 다양합니다. 당시에 심각한 사고였던 <a href="https://m.etnews.com/20211025000215">KT 통신 장애</a>와 같이 인터넷 트래픽을 전달하는 장비의 설정 문제로 일부 네트워크 환경이 모두 마비되는 혼돈이 발생할 수도 있습니다. 이러한 문제라면 서버 인스턴스가 정상적이고 애플리케이션 코드에도 문제가 없더라도 인프라 영역의 장애이기 때문에 예상할 수 없는 장애입니다. 심지어는 클라우드 인프라 서비스를 활용해서 시스템을 운영하게 되는 시대이므로 <a href="https://www.inews24.com/view/1353037">클라우드 서비스 조차도 시스템 장애의 발생 가능성이 없는 것은 아닌점</a>도 인지해야합니다. 그래서 시스템을 만들고 운영하는 조직에서도 시스템이 정상적으로 동작할 수 있도록 고객과 같은 외부 환경에서 지속적으로 서비스 상태를 체크하고 모니터링하여 서비스에 대한 가용성을 유지하는데 노력해야합니다. 실제로 아래와 같이 자신들이 제공하는 서비스 기능에 대한 상태 정보를 제공하는 페이지를 제공하는 곳이 꽤 많습니다.</p><ul><li><a href="https://www.githubstatus.com/">Github Status</a></li><li><a href="https://status.slack.com/">Slack System Status</a></li><li><a href="https://status.spring.io/">Spring Status</a></li><li><a href="https://developers.naver.com/notice/apistatus/">Naver API Status</a></li></ul><blockquote><p>서비스 상태 정보를 제공하는 이유는 서비스 가용성을 유지하여 고객에게 신뢰성을 제공하기 위함입니다.</p></blockquote><p>조직에서 만든 시스템을 자체적으로 하나의 플랫폼으로 운영했다면 시스템 모니터링에 대한 중요성을 공유하고 시스템을 구성하는 각 인스턴스들의 <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/cloudwatch-monitoring.html">지표 모니터링</a> 뿐만 아니라 <a href="https://www.datadoghq.com/">Datadog</a>와 같은 상용 모니터링 솔루션 도입을 검토했을 것이라 생각합니다. A 라는 고객은 자체적으로 서버 인프라를 구축하고 관리하고 시스템 개발과 유지보수만 위임하고, B 라는 고객은 시스템 개발 및 유지보수 그리고 서버 인프라에 대한 관리도 할 수 있도록 권한을 부여해주기도 합니다. A 고객은 스스로의 경험에 따라 <a href="https://www.zabbix.com/">Zabbix</a>로 서버 인프라를 모니터링하도록 구축했으며 B 라는 고객은 아마존 웹 서비스의 <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/cloudwatch-monitoring.html">클라우드 와치 지표 모니터링</a>과 여러가지 로그가 S3에 저장되도록 구성합니다.</p><blockquote><p>B 고객은 대기업 규모로 자체 가이드가 존재하지만 현재 조직에 공유된 사항은 없으므로 최소한의 설정으로 구성하고 피드백을 받아서 추가 조치를 하고 있습니다. 고객마다 보안을 신경쓰는 부분이나 수준도 다릅니다.</p></blockquote><p>떠오르는 <a href="https://www.datadoghq.com/">Datadog</a>과 같은 상용 모니터링 솔루션을 도입해보면 좋겠지만 생각보다 비용이 상당히 비싼것으로 보입니다. 개인적으로 오픈소스 모니터링 솔루션인 <a href="https://prometheus.io/">Promethues</a>와 <a href="https://github.com/louislam/uptime-kuma">Uptime Kuma</a>같은 오픈소스 모니터링 도구를 활용해서 간단하게나마 <a href="/struggle-with-unknown-service-failures/">서비스 장애의 원인을 찾기위한 시도</a>에 활용해보고 있습니다. 실제로 근무 시간이 아닌 시간대에 시스템의 응답 시간이 늘어남을 확인할 수 있던 부분을 통해서 예상하지 못했던 원인을 찾게되면서 모니터링의 중요성을 다시한번 알게되는 경험을 하였습니다.</p><p><img data-src="https://images.mysetting.io/upload/user_image/2021/f3240207-fe1e-472b-bdb8-508b1332d8f6.jpeg?d=512x"></p><p>우리는 시스템을 개발하는데 그치지 않고 시스템을 정상적으로 운영하는 것을 유지하는데 많은 노력이 필요한 것 같습니다. 조직에서 정해진 방식이 없더라도 누군가는 시도해보고 중요성을 공유해야할 것으로 보입니다. 조직 세미나에서 모니터링 중요성에 대한 내용을 전달해보려고 준비해야겠습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 조직의 문제점은 일하는데 있어서 체계적으로 정해진 가이드가 없다는 점입니다. 고객마다 인프라 환경도 다르며 동일한 시스템을 다양한 방식으로 배포를 요구하기도 합니다. 심지어는 시스템을 구성하는 여러가지 인스턴스의 지표를 수집하거나 로그를 남</summary>
      
    
    
    
    
    <category term="Service Status" scheme="https://kdevkr.github.io/tags/Service-Status/"/>
    
    <category term="Uptime" scheme="https://kdevkr.github.io/tags/Uptime/"/>
    
    <category term="Synthetic Monitoring" scheme="https://kdevkr.github.io/tags/Synthetic-Monitoring/"/>
    
  </entry>
  
  <entry>
    <title>서비스 장애의 원인을 찾아가기 위한 여러가지 시도</title>
    <link href="https://kdevkr.github.io/struggle-with-unknown-service-failures/"/>
    <id>https://kdevkr.github.io/struggle-with-unknown-service-failures/</id>
    <published>2022-05-01T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<p>현재 조직에서 하나의 시스템을 여러 고객이 보유한 환경에서 이용할 수 있도록 전환하다보니 자체적으로 운영 시 정상적으로 동작했던 시스템에서 여러가지 서비스 장애가 발생하였고 이에 대한 원인을 파악하기 힘들어서 스트레스까지 받는 상황이 벌어졌습니다. 여러가지 서비스 장애의 원인을 찾아가기 위해 시도한 여러가지 방법에 대해서 기록하려고 합니다. 조직에서 만드는 서비스가 규모가 작은 시스템일지라도 수 많은 고객의 요구사항으로 인해 많은 기능이 수정되고 추가됨에 따라서 사이드 이펙트로 인한 장애가 지속적으로 발생하였고 심지어는 이유를 쉽게 파악할 수 없는 인프라로 인한 문제 또는 여러가지 기술에 관해서 문제를 일으키기도 했습니다. 우리가 흔히 이용하는 지하철에서도 임베디드형으로 보이는 윈도우 XP가 계속해서 재부팅하고 있다거나 블루스크린 화면을 보여주는 경우를 간간히 경험할 수 있습니다. 얼마전에는 공영 주차장의 사전 정산기 시스템에 오류가 발생해서 재부팅을 요구하는 알림창을 보여주었으나 터치스크린의 먹통으로 인해 고객 입장에서 할 수 있는 방안은 없었습니다. 이처럼 개발자 입장에서 서비스를 만들어도 시스템을 실제로 이용하는 고객의 입장에서 지속적으로 서비스를 이용할 수 있는 가용성을 유지하는 것도 굉장히 중요한 부분이라고 생각됩니다.</p><h2 id="서비스-장애"><a href="#서비스-장애" class="headerlink" title="서비스 장애"></a>서비스 장애</h2><p>서비스 장애는 애플리케이션 코드에 의해서만 발생하지 않습니다. 요구사항을 반영하기 위해서 코드를 수정하고 추가한 개발자의 실수부터 시작으로 시스템을 구성하는 인프라에서도 예상하지 못한 문제가 발생합니다. 이와같이 서비스 장애는 정말 다양한 영역에서 발생하기 때문에 이러한 장애에 대한 경험이 없다면 쉽게 파악하기 힘들고 해결해나가는 과정이 어려울 수 있습니다. 저는 현재 조직에서 어떤 장애를 경험하였을까요?</p><ol><li>AWS S3 SDK의 크레덴셜 만료</li><li>쿼츠 스케줄러에 의한 스레드 무한 증식</li><li>KDB+ 시계열 데이터베이스 프로세스가 요청을 처리할 수 없음</li></ol><blockquote><p>사소한 문제를 포함한 수 많은 장애중에서 대표적인 이슈는 위와 같습니다.</p></blockquote><h3 id="AWS-S3-SDK-크레덴셜-만료"><a href="#AWS-S3-SDK-크레덴셜-만료" class="headerlink" title="AWS S3 SDK 크레덴셜 만료"></a>AWS S3 SDK 크레덴셜 만료</h3><p>주 애플리케이션 서버와 별개로 사용자의 요청을 직접적으로 처리하지는 않지만 별도의 백그라운드 작업을 수행하는 모듈 서버에서 아마존 웹 서비스의 S3 SDK를 사용하는 코드에서 크레덴셜 만료로 인해 특정 스케줄 동작 시 오류가 발생하는 이슈가 확인되었습니다. EC2 인스턴스에 IAM Role을 지정하면 EC2 메타데이터에 의해 크레덴셜을 애플리케이션에서 사용할 수 있는데요. 기본적으로는 크레덴셜 프로바이더 체인에 의해서 여러가지 방식으로 크레덴셜을 가져오도록 코드를 작성합니다. 애플리케이션에서 사용하는 크레덴셜이 자동으로 갱신되는 옵션은 <a href="https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-roles.html">SDK 이용 시 InstanceProfileCredentailsProvider 또는 체인을 생성자로 전달해야만 활성화</a>된다는 정보가 있습니다.</p><blockquote><p>The automatic credentials refresh happens only when you use the default client constructor, which creates its own InstanceProfileCredentialsProvider as part of the default provider chain, or when you pass an InstanceProfileCredentialsProvider instance directly to the client constructor. If you use another method to obtain or pass instance profile credentials, you are responsible for checking for and refreshing expired credentials.</p></blockquote><p>위 정보를 토대로 모듈 서버의 코드를 검수한 결과 공통 모듈에서 정의된 크레덴셜을 가져오는 유틸 클래스로부터 크레덴셜 프로바이더 체인을 가져와서 S3 인스턴스를 생성한 것이 아닌 크레덴셜을 프로바이더에 의해 발급하고 전달하여 사용했던 것을 확인하였습니다. 이는 리팩토링 과정에서 검수되지 않은 개발자의 명백한 실수이며 애플리케이션에서 크레덴셜이 자동으로 갱신되기 위해서는 InstanceProfileCredentialsProvider가 포함된 프로바이더 체인을 사용해야한다는 정보를 숙지하게 되었던 장애 경험이었습니다.</p><h3 id="쿼츠-스케줄러에-의한-스레드-무한-증식"><a href="#쿼츠-스케줄러에-의한-스레드-무한-증식" class="headerlink" title="쿼츠 스케줄러에 의한 스레드 무한 증식"></a>쿼츠 스케줄러에 의한 스레드 무한 증식</h3><p>애플리케이션 배포 후 정상적으로 동작하던 애플리케이션이 사용자의 요청을 처리할 수 없는 상태가 되어버리는 문제를 확인하였습니다. 현재 조직은 모니터링 솔루션을 도입해서 사용해오던 조직은 아닙니다. 다만, 프로메테우스 및 그라파나 조합으로 모니터링 시스템을 구축하는 많은 글을 보고나서 개인적으로 사내 서버에 시스템을 구축해놓고 사용해왔는데요. 프로메테우스는 기본적으로 직접 HTTP 요청을 통해 지표를 수집하는 방식이므로 외부에서 접근이 불가능하도록 되어있는 애플리케이션의 지표를 수집하기 위해서 <a href="https://kdevkr.github.io/using-pushgateway-to-monitor-private-network-instance/">Promethues Pushgateway</a>로 지표를 전달하도록 에이전트를 실행해놓고 모니터링을 시작했습니다. 해당 현상이 다시 발생한 시점에서 수집된 지표를 그라파나 대시보드를 통해 확인해본 결과 스레드의 수가 점점 증가하는 것을 보았고 스프링 부트 액추에이터의 스레드 덤프 엔드포인트를 통해 스레드를 분석해보니 SMS 발송 및 발송 상태 확인을 위한 스케줄에 의한 스레드가 수 없이 생성된 것을 확인했습니다. 해당 스케줄의 코드를 검토해본 결과 쿼츠 스케줄러 동작 방식을 고려하지 않고 스케줄 잡을 구현한 클래스에서 별도의 스레드를 생성하도록 코드가 작성되어 있는 것을 확인하게 되었습니다. 이 경험을 통해 쿼츠 스케줄러에 의해 스케줄이 동작할 때 이미 만들어져있는 빈 클래스를 사용하지 않고 스케줄러에 의해 동적으로 생성되어 처리된다는 점을 확인하게 되었습니다. </p><h3 id="KDB-시계열-데이터베이스-프로세스가-요청을-처리할-수-없음"><a href="#KDB-시계열-데이터베이스-프로세스가-요청을-처리할-수-없음" class="headerlink" title="KDB+ 시계열 데이터베이스 프로세스가 요청을 처리할 수 없음"></a>KDB+ 시계열 데이터베이스 프로세스가 요청을 처리할 수 없음</h3><p>가장 크리티컬한 장애입니다. KDB+ 시계열 데이터베이스는 국내에서는 사용하지 않는 것처럼 보이는 상용 시계열 데이터베이스로써 KDB+ 프로세스가 요청을 처리할 수 없는 상태가 되나 프로세스가 종료되거나 별도로 프로세스에 의해 로그가 남는 것이 없으므로 이 문제에 대해 기술적인 도움을 요청하기에도 어려운 부분이었습니다. 프로세스가 사용자의 요청을 처리할 수 없는 상태가 되는 원인을 검토하기 위해서 여러가지 방법을 도입했습니다. </p><ol><li>애플리케이션 슬로우 쿼리 로그</li><li>서비스 상태 모니터링 솔루션</li></ol><p>첫번째 방법은 애플리케이션으로 요청되는 KDB 쿼리 중 많은 시간이 소요되는 것들을 슬랙 채널로 메시지를 전송하는 것입니다. 그런데 수 많은 요청이 메시지 채널로 전달되는 문제가 확인되었습니다. 눈에는 보이지 않았지만 생각보다 많은 요청들이 밀리는 현상이 있었던 부분입니다. 두번째 방법은 Synthetic Monitoring라고 하는 서비스 상태 모니터링 솔루션을 도입하는 것이었습니다. 조직에서 일하지 않는 시간에도 서비스가 정상적으로 동작하는 상태인지를 확인하기 위한 방법으로 이전 프로메테우스를 통한 지표 모니터링과는 관점이 다릅니다. </p><p><img data-src="/images/posts/struggle-with-unknown-service-failures/uptime-kuma-01.png"></p><p>위는 서비스 상태 모니터링 도입 후 확인된 KDB+ 시계열 데이터베이스에 대한 연결 상태를 나타내는 지표입니다. 새벽 시간대에 응답 시간이 상당히 높아짐을 확인할 수 있었고 간간히 시계열 데이터베이스에 대한 연결 상태를 확인할 수 없게 됨을 확인할 수 있습니다. 특정 고객 환경에서 발생하는 현상이었으므로 해당 시간대에 어떤 요청을 수행하는 게 있는지 확인해보니 외부 업체에서 데이터를 수집하기 위해서 순간적으로 수 많은 API 요청을 하는 것을 알게 되었습니다. 해당 업체가 데이터를 조회할 때 많은 기간을 조회하면서 복수로 조건을 전달할 수 있음에도 불구하고 한 건씩 요청하다보니 서버에 많은 부하가 발생하게 된 부분입니다.</p><blockquote><p>위와 같은 부분은 A예상하지 못한 API 부하이므로 작은 시스템 규모 상 디도스라고 자체 판단하여 API를 호출을 줄이도록 요청하였습니다.</p></blockquote><p><img data-src="/images/posts/struggle-with-unknown-service-failures/uptime-kuma-02.png"></p><p>API 요청 방식을 변경하고나서 응답 시간이 상당히 줄었으나 그대로 높다고 판단할 수 있는 지표입니다. 해당 업체가 사용하는 API에서 내부적으로 수행하는 KDB+ 쿼리를 검토해보니 다른 쿼리에 비해 상당히 성능이 느린점을 확인하였고 데이터 조회 및 불필요한 연산을 줄이는 방법을 채택하여 쿼리를 개선하고나서 현재는 다음과 같은 응답 시간을 보여주고 있습니다.</p><p><img data-src="/images/posts/struggle-with-unknown-service-failures/uptime-kuma-03.png"></p><blockquote><p>위의 결과를 보여주는 KDB+ 시계열 데이터베이스의 쿼리 최적화는 임시적인 대안일 뿐 프로세스가 기본적으로 사용자의 요청을 순차적으로 처리한다는 부분을 확인하게 되어 이를 개선할 수 있는 방안을 지속적으로 검토하고 있습니다.</p></blockquote><p>이러한 장애에 대한 경험 공유는 현재 조직에는 이롭지 않은 부분일 수 있습니다. 그러나 개인적인 입장에서는 이러한 경험을 토대로 더 서비스를 성장할 수 있도록 만들어 갈 수 있다고 생각하는 바입니다. 많은 개발자가 자신이 경험한 문제와 어떻게 해결하였는지를 공유했으면 하는 바램입니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://techblog.woowahan.com/4886/">우아~한 장애대응 - 우아한형제들 기술블로그</a></li><li><a href="https://engineering.linecorp.com/ko/blog/line-failure-reporting-and-follow-up-process-culture/">LINE의 장애 보고와 후속 절차 문화 - LINE Engineering</a></li><li><a href="https://tech.inflab.com/202201-event-postmortem/">2022년 1월 100% 할인 이벤트 장애 부검 - 인프런</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 조직에서 하나의 시스템을 여러 고객이 보유한 환경에서 이용할 수 있도록 전환하다보니 자체적으로 운영 시 정상적으로 동작했던 시스템에서 여러가지 서비스 장애가 발생하였고 이에 대한 원인을 파악하기 힘들어서 스트레스까지 받는 상황이 벌어졌습니다</summary>
      
    
    
    
    
    <category term="Synthetic Monitoring" scheme="https://kdevkr.github.io/tags/Synthetic-Monitoring/"/>
    
    <category term="Service Failure" scheme="https://kdevkr.github.io/tags/Service-Failure/"/>
    
  </entry>
  
  <entry>
    <title>KDB Tick</title>
    <link href="https://kdevkr.github.io/kdb-tick/"/>
    <id>https://kdevkr.github.io/kdb-tick/</id>
    <published>2022-04-30T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>에너지 분야는 나노초 또는 밀리초 단위의 시계열 데이터가 빠르게 생성되는 특수한 시장입니다. 시계열 데이터는 금융(Financial) 시장에서부터 중요성이 부각되었으나 이제는 다양한 분야에서 발생하고 이를 활용한 많은 서비스가 만들어지고 있습니다. 최소한 초 단위로 만들어지는 시계열 데이터를 빠르게 등록하고 조회할 수 있는 것을 목적으로하는 시계열 데이터베이스의 입지도 중요해지고 있고 많은 오픈소스 시계열 데이터베이스 솔루션도 만들어지고 있습니다. 현재 조직에서는 해외 금융 분야에서 어느정도 입지를 보이고 있는 시계열 데이터베이스인 KDB+를 도입하여 서비스에 사용중입니다. 라이센스 비용이 생각보다 비싸기는 하지만 고객들이 보유하는 데이터를 빠르게 수집하고 등록하기 위해서는 어쩔수 없는 선택이기도 합니다. </p><h2 id="KDB"><a href="#KDB" class="headerlink" title="KDB+"></a>KDB+</h2><p><a href="https://kx.com/blog/what-makes-time-series-database-kdb-so-fast/">What Makes Time-Series Database kdb+ So Fast?</a>  </p><p>KX Systems의 블로그 또는 <a href="https://code.kx.com/q/">Kdb+ and q documentation</a> 사이트에서 제공하는 정보를 토대로 KDB+ 프로세스에 대해서 간단하게 이해하고 활용해볼 수 있습니다. 더 나아가서는 <a href="https://code.kx.com/q/wp/">White Paper</a>를 통해서 KDB+ 프로세스를 더 효율적으로 사용하기 위한 방안을 확인할 수 있습니다. 본 글에서는 KDB+ 시계열 데이터베이스를 사용하기 위해 최소한 알아야할 부분을 다룹니다.</p><h3 id="데이터베이스-구조"><a href="#데이터베이스-구조" class="headerlink" title="데이터베이스 구조"></a>데이터베이스 구조</h3><p>KDB+ 프로세스에서 데이터는 기본적으로 테이블이라는 변수에 저장되며 메모리에 유지됩니다. 그러나, 서버의 메모리 자원은 한정적이므로 모든 데이터를 메모리에 유지하기에는 현실적으로 불가능합니다. KDB+ 프로세스가 사용할 수 있는 메모리가 부족하게되면 <code>&#39;wsfull</code> 오류를 보고하고 프로세스는 종료됩니다. 프로세스가 종료되면 메모리에 저장된 데이터가 모두 유실되므로 이를 보완하기 위한 방법이 필요합니다.</p><p>KDB+ 시계열 데이터베이스는 서버 메모리 자원보다 큰 데이터를 저장하기 위해서 디스크 파일을 활용합니다. 테이블의 데이터 규모에 따라 단일 바이너리 파일로 기록하거나 테이블의 컬럼에 대한 데이터를 <a href="https://code.kx.com/q/database/#splayed-table">각 컬럼 이름을 가진 파일을 가지는 폴더</a>로 저장합니다. 더 나아가서는 <a href="https://code.kx.com/q4m3/14_Introduction_to_Kdb+/#1432-partition-domain">숫자 또는 날짜와 같은 가상의 파티션</a>을 두어서 더 효율적으로 사용자가 데이터를 쿼리할 수 있도록 지원합니다.</p><h4 id="스플레이-테이블"><a href="#스플레이-테이블" class="headerlink" title="스플레이 테이블"></a>스플레이 테이블</h4><p>스플레이 테이블(Splayed Table)는 심볼과 같은 기호가 없는 완전히 열거된 테이블이어야합니다. 테이블에 심볼 형식의 컬럼이 존재한다면 <a href="https://code.kx.com/q/kb/splayed-tables/#enumerating-symbol-columns">Enumerating symbol columns</a>에서처럼 심볼 데이터가 sym 파일이라고하는 별도의 파일에 열거된 상태로 테이블을 저장해야함을 인지해야합니다.</p><h4 id="파티션-테이블"><a href="#파티션-테이블" class="headerlink" title="파티션 테이블"></a>파티션 테이블</h4><p>일반적으로 KDB+ 프로세스에서 스플레이 테이블을 그대로 사용하기보다는 가상의 파티션 폴더 밑에 두어서 <a href="https://code.kx.com/q/database/#partitioned-table">파티션 테이블</a>을 구성하여 로드하도록 구성합니다. 파티션 테이블(Partitioned Table)은 KDB+ 시계열 데이터베이스에서 일반적으로 구성하는 티커플랜트 아키텍처에서 HDB 프로세스를 구성하기 위해서 사용하므로 반드시 이해해야할 부분입니다.</p><ul><li><a href="https://code.kx.com/q4m3/14_Introduction_to_Kdb%2B/#142-splayed-tables">Splayed Tables</a>  </li><li><a href="https://code.kx.com/q4m3/14_Introduction_to_Kdb+/#143-partitioned-tables">Partitioned Tables</a>  </li><li><a href="https://code.kx.com/q/wp/data-management/#attributes-on-splayed-partitioned-tables">Attributes on splayed partitioned tables</a></li></ul><blockquote><p>파티션 테이블의 각 스플레이 테이블에 `p# 또는 `g# 속성을 적용하여 저장하는 것은 파일 데이터를 로드하여 사용하는 HDB 프로세스에 대한 쿼리 최적화를 수행할 수 있도록 지원하는 부분으로 필요에 따라 적용해야할 수 있습니다.</p></blockquote><h3 id="프로세스-통신"><a href="#프로세스-통신" class="headerlink" title="프로세스 통신"></a>프로세스 통신</h3><p>KDB+ 시계열 데이터베이스는 사용자 요청을 순차적으로 처리하는 단일 스레드를 사용하는 프로세스입니다. 아키텍처적인 관점에서는 단일 프로세스를 실행하여 활용하기보다는 용도와 목적에 맞는 여러개의 프로세스를 실행하고 <a href="https://code.kx.com/q/learn/startingkdb/ipc/#interprocess-communications">프로세스 간 통신(IPC)</a>를 통해 서로 유기적인 요청과 응답을 통해 원하는 결과를 제공할 수 있도록 구성하게 됩니다.</p><p>일반적으로 다음과 같이 <a href="https://code.kx.com/q/ref/hopen/#one-shot-request">One-shot request</a> 형태로 사용할 수 있습니다.</p><pre class="language-q" data-language="q"><code class="language-q"><span class="token symbol">`::5011</span> <span class="token string">"trade"</span><span class="token symbol">`::5011</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>trade<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token verb operator">::</span><span class="token punctuation">)</span></code></pre><blockquote><p>다른 프로세스로 다수의 요청을 수행하는 경우에는 hopen 및 hclose를 통해 명시적으로 소켓을 열고 닫는것이 더 효율적입니다. 장시간 소켓을 열어두고 사용하는 것은 다양한 문제를 야기한 경험이 있으므로 개인적으로 추천하지 않습니다.</p></blockquote><h2 id="틱-아키텍처"><a href="#틱-아키텍처" class="headerlink" title="틱 아키텍처"></a>틱 아키텍처</h2><p>KDB+ 시계열 데이터베이스를 학습하는 단계에서는 단일 프로세스로도 충분합니다. 그러나, 실제로 시스템을 운용하기 위해서는 다수의 프로세스로 구성된 <a href="https://code.kx.com/q/architecture/">아키텍처</a>를 도입해야할 필요성이 있습니다. KDB+ 시계열 데이터베이스 시스템을 구성하는 가장 일반적인 아키텍처는 티커플랜트이며 금융 시장에서 사용하기 용이하도록 구성됩니다.</p><h3 id="티커플랜트"><a href="#티커플랜트" class="headerlink" title="티커플랜트"></a>티커플랜트</h3><p>티커플랜트(Tickerplant)는 데이터를 수집하기 위한 진입점을 제공하는 프로세스로 데이터 등록 함수에 대한 요청을 <strong>TP 로그</strong> 파일에 기록하여 시스템이 예기치 않은 상황으로 문제가 발생했을 때 복구할 수 있는 방안을 제공합니다. 또한, <a href="https://cloud.google.com/pubsub/docs/overview?hl=ko">Pub&#x2F;Sub</a>으로 데이터 피드 구독자로 등록되어있는 프로세스로 등록된 데이터를 전달하고 삭제함으로써 티커플랜트가 메모리 사용을 최소화할 수 있도록하여 경량 프로세스로 구동됩니다.</p><h3 id="실시간-데이터"><a href="#실시간-데이터" class="headerlink" title="실시간 데이터"></a>실시간 데이터</h3><p>실시간 데이터베이스(Realtime DB) 프로세스는 티커플랜트 프로세스에 데이터 피드 구독자로 등록되는 클라이언트 중 하나이며 티커플랜트로부터 전달받은 데이터를 메모리에 유지합니다. 그리고 티커플랜트가 전달하는 <strong>EOH(End of hour) 또는 EOD(End of day)</strong> 이벤트를 받아서 메모리에 유지했던 데이터를 현재 시간 또는 일자에 대한 파티션 테이블로 기록하고 다시 티커플랜트로부터 데이터 수신이 가능하도록 준비합니다.</p><blockquote><p>EOH 또는 EOD 이벤트가 발생하는 시점에는 메모리에 있는 데이터를 파일로 저장해야하므로 데이터 규모에 따라 CPU 연산 및 디스크 I&#x2F;O 작업에 대한 부하가 야기될 수 있습니다. 따라서, 메모리에 상주되는 데이터의 규모를 예상하고 서버 성능을 결정해야합니다.<br>KDB+ 프로세스가 파일로 기록하는 것은 디스크 I&#x2F;O 성능에 의존하므로 RDB 프로세스에 대한 병목 현상을 최소화하기 위해서는 높은 I&#x2F;O 성능을 가지는 스토리지를 고려하는게 좋습니다.</p></blockquote><h3 id="과거-파티션-데이터"><a href="#과거-파티션-데이터" class="headerlink" title="과거 파티션 데이터"></a>과거 파티션 데이터</h3><p>과거 파티션 데이터베이스(Historical DB)는 RDB 프로세스가 파티션 테이블 형태의 폴더로 기록한 과거 데이터를 로드하여 사용자 쿼리에 대한 조회 및 결과를 제공할 수 있도록 지원합니다. 데이터 규모 및 서버 자원에 따라 시간 또는 일자별 파티션으로 구성되므로 시스템이 쿼리를 수행하기에 효율적인 구조를 가지도록 고려해야합니다. 예를 들어, 시간별 파티션을 구성하는 경우에는 원하는 기간에 대한 시간 폴더의 데이터만 활용하므로 메모리를 효율적으로 사용할 수 있습니다. 그러나, 사용자 쿼리에 대한 조회 범위가 많아질수록 디스크 I&#x2F;O 작업을 수행해야하는 비효율적인 부분으로 인해 오히려 조회 시간이 늘어날 수 있습니다.</p><blockquote><p>KDB+ 프로세스는 기본적으로 순차처리임을 인지해야하며 많은 파티션을 조회하는 쿼리가 자주 요청될 가능성이 있다면 하나의 프로세스에서 시간 및 일자별 파티션을 동시에 사용할 수 있도록 지원하지 않으므로 일자별 파티션을 구성하는 별도의 HDB 프로세스를 도입하는 것을 고려해야합니다.</p></blockquote><p>사용자 요청에 대한 쿼리가 여러개의 파티션을 조회해야하는 작업이라면 <a href="https://code.kx.com/q/basics/cmdline/#-s-secondary-threads">프로세스 실행 시 지정된 보조 스레드</a>를 통해서 파티션별 조회를 병렬로 수행하도록 프로시저를 작성하여 쿼리 소요 시간을 어느정도는 최적화할 수 있습니다. 꽤 많은 쿼리가 병렬 작업을 수행하는 코드를 도입함으로써 극단적으로 쿼리 수행시간이 줄어듬을 확인할 수 있었습니다. 일반적인 케이스를 예를 들자면 단일 스레드 및 순차 처리에 의해 200ms가 소요되는 프로시저가 병렬 연산 작업 및 비효율적인 반복 작업을 수행하는 방식을 개선하고서 30ms가 소요되도록 개선되었습니다.</p><blockquote><p>개인적인 쿼리 경험에 의하면 데이터 조회에 대한 반복 작업을 최소화하는 것을 고려하고 데이터 조회시에는 병렬 작업을 수행하는 것이 효율적인지를 검토하는게 좋습니다. 그리고 일반적으로 사용되는 키워드 보다 더 적은 시간이나 메모리를 사용할 수 있는 방식을 사용하는 것이 중요합니다.</p></blockquote><p>예를 들어, Left Join을 반복 수행해야하는 경우라면 다음과 같이 연결하여 수행하도록 작성할 수 있습니다.</p><pre class="language-q" data-language="q"><code class="language-q">R<span class="token verb operator">:</span>A <span class="token keyword">lj</span> B<span class="token punctuation">;</span>R<span class="token verb operator">:</span>R <span class="token keyword">lj</span> C<span class="token punctuation">;</span>R<span class="token verb operator">:</span>R <span class="token keyword">lj</span> D<span class="token punctuation">;</span>R<span class="token verb operator">:</span><span class="token punctuation">(</span><span class="token keyword">lj</span><span class="token adverb function">/</span><span class="token punctuation">)</span><span class="token punctuation">(</span>A<span class="token punctuation">;</span>B<span class="token punctuation">;</span>C<span class="token punctuation">;</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="장애-및-보완"><a href="#장애-및-보완" class="headerlink" title="장애 및 보완"></a>장애 및 보완</h2><p>이제까지 경험했던 장애 또는 현재 경험하고 있는 부분을 공유하고 어떻게 보완할 수 있을까를 정리합니다.</p><h3 id="순차-처리로-인한-병목-현상"><a href="#순차-처리로-인한-병목-현상" class="headerlink" title="순차 처리로 인한 병목 현상"></a>순차 처리로 인한 병목 현상</h3><p>KDB+ 프로세스는 기본적으로 싱글 스레드로 동작하므로 <code>모든 동기 요청을 순차적으로 처리한다는 제약</code>이 있습니다. 그래서 트랜잭션을 지원하지 않더라도 현재 사용자의 요청에 대한 작업 결과가 다음 요청에 반영됨을 보장합니다. 그러나, 현재 수행중인 요청에 대한 작업이 길어질수록 다른 요청이 대기해야하는 시간이 많아질 수 있습니다. KDB+ 프로세스의 구성이 복잡하고 각 요청에 대한 쿼리가 복잡해짐에 따라서 빠르게 요청되는 쿼리가 순차적으로 밀리는 현상으로 인하여 많은 어려움을 경험하고 있습니다. 사용자 요청에 대한 쿼리 최적화는 일시적인 대안일 뿐이며 결론적으로는 아키텍처적인 관점에서 다음의 정보를 고려해야합니다.</p><ul><li><a href="https://code.kx.com/q/kb/multithreaded-input/">Multithreaded input queue mode</a>  </li><li><a href="https://code.kx.com/q/kb/deferred-response/">Deferred response</a> </li><li><a href="https://code.kx.com/q/wp/gateway-design/">Common design principles for kdb+ gateways</a></li><li><a href="https://code.kx.com/q/wp/query-routing/">Query Routing: A kdb+ framework for a scalable, load balanced system</a></li></ul><blockquote><p>현재 조직에서는 위의 방안들은 검토하였으나 여러가지 제약이나 이해하기 힘든 부분으로 인하여 KDB+ 시스템을 구성하는 각 프로세스에 대한 의존성을 분산하는 작업을 먼저 시도해보기로 결정했습니다. 다수의 프로세스가 서로 유기적으로 통신하면서 발생하는 병목 현상을 최소화하도록 재구성하는게 목적입니다.</p></blockquote><h3 id="단일-디스크-I-x2F-O-작업으로-인한-병목-현상"><a href="#단일-디스크-I-x2F-O-작업으로-인한-병목-현상" class="headerlink" title="단일 디스크 I&#x2F;O 작업으로 인한 병목 현상"></a>단일 디스크 I&#x2F;O 작업으로 인한 병목 현상</h3><p>하나의 서버에 KDB+ 프로세스를 여러개 구성하더라도 특정 프로세스에서 디스크 I&#x2F;O 작업을 수행하는 경우 동일한 폴더나 파일에 대한 작업을 수행해야하는 경우 일시적으로 대기하는 병목 현상이 야기될 수 있습니다. 파티션에 저장된 데이터가 정렬되지 않았다거나 주요 컬럼에 속성이 부여되지 않은 부분을 위해 파티션을 보정하는 프로세스가 작업중일때 동일한 파티션 폴더를 로드해야하는 HDB 프로세스에서 사용자 요청에 대한 작업이 일시적으로 많이 소요되는 문제를 경험했습니다.</p><blockquote><p>티커플랜트 아키텍처에서는 현재 시간 또는 일자에 대한 시계열 데이터가 등록되어야하지만 과거에 대한 시계열 데이터가 실시간으로 등록됨에 따라 올바른 파티션으로 데이터를 병합하는 작업으로 인해 디스크 I&#x2F;O로 인한 병목 현상이 야기되고 있습니다. 데이터 연동을 시작한 특정 고객이 가지고 있던 과거 데이터를 한번에 등록하게 됨으로써 이로 인해 프로세스에 대한 요청이 느려짐이 보고되고 있습니다.</p></blockquote><h3 id="프로세스-의존성으로-인한-멈춤-현상"><a href="#프로세스-의존성으로-인한-멈춤-현상" class="headerlink" title="프로세스 의존성으로 인한 멈춤 현상"></a>프로세스 의존성으로 인한 멈춤 현상</h3><p><img data-src="https://code.kx.com/q/img/architecture.png"></p><p>KDB+ 시스템 아키텍처는 다수의 프로세스가 유기적으로 통신하며 시스템을 구성한다고 하였습니다. 간단하게 실행되었던 시스템이 여러가지 이유에 의해서 별도의 프로세스가 추가됨에 따라서 시간 또는 일자별 파티션을 사용하는 HDB 프로세스들이 하나의 RDB 프로세스와 동일한 별도의 프로세스를 의존함에 따라서 서로 요청이 병목되어 프로세스가 요청을 처리중인데도 불구하고 프로세스가 멈추는 것 같아 보이는 현상을 확인했습니다. 각 HDB 프로세스들이 실시간 데이터 조회를 위해서 실시간 데이터를 유지만하는 별도의 읽기 전용 RDB 프로세스를 의존하도록 재구성하였고 이러한 현상이 점차적으로 줄어들고 있습니다.</p><h3 id="EOH-다운타임"><a href="#EOH-다운타임" class="headerlink" title="EOH 다운타임"></a>EOH 다운타임</h3><p>티커플랜트는 시간 또는 일과가 종료되면 EOH 또는 EOD 이벤트를 데이터 피드 구독자에게 전달합니다. 그리고 특정 RDB 프로세스는 시간 또는 일과 데이터를 현재 파티션에 기록합니다. 프로세스에서 데이터를 파일로 기록하기전에 정렬을 시도하므로 데이터 규모와 서버 성능에 따라서 <a href="https://code.kx.com/q/wp/intraday-writedown/#downtime">Downtime</a>이 발생할 수 있습니다. 이러한 다운타임을 최소화하기 위해서 RDB 프로세스에서 데이터를 저장할때는 데이터 정렬이나 스플레이 테이블에 대한 속성 부여를 최소화하고 파티션 보정을 수행하는 별도의 프로세스를 두어서 파티션 데이터를 정렬하고 쿼리 최적화를 위한 컬럼에 속성을 부여하는 작업을 수행하도록 추가 구성했습니다.</p><blockquote><p>실시간 데이터에 과거의 시계열 데이터가 많이 존재할 수 있는 케이스가 발생하면서 파티션을 다시 보정하는 작업을 수행하는 프로세스에 대한 작업도 과중화되는 것을 확인하고 있습니다.</p></blockquote><hr><p>아무리 빠른 성능을 자랑하는 기술이어도 어떤 환경에서 사용되는지와 어떻게 구성하여 사용하는지에 따라서 많은 문제나 제약이 발생할 수 있습니다. 간단했던 시스템이 복잡해지면서 장애가 발생하면 그것을 보완하기 위하여 여러가지 시도를 해보아야합니다. 이전의 경험을 토대로 그럴리 없다, 그럴 가능성은 없다라는 관점은 우리를 힘들게할 수 있습니다. 기술을 사용하는 방식이 동일하지 않음을 인정하고 그것으로부터 야기되는 문제점은 없는지 지속적으로 검토해야합니다. 그것을 우리는 장애 대응 또는 후속 조치라고 말합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://kx.com/blog/what-makes-time-series-database-kdb-so-fast/">What Makes Time-Series Database kdb+ So Fast?</a></li><li><a href="https://code.kx.com/q/kb/kdb-tick/">Kdb+tick configuration</a>  </li><li><a href="https://code.kx.com/q/wp/rt-tick/">Building real-time tick subscribers</a></li><li><a href="https://github.com/kdevkr/kdb">Learning KDB+</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;에너지 분야는 나노초 또는 밀리초 단위의 시계열 데이터가 빠르게 생성되는 특수한 시장입니다. 시계열 데이터는 금융(Financial) 시장에서부터 중요성이 부각되었으나 이제는 다양한 분야에서 발생하고 이를 활용한 많은 서비스가 만들어지고 있습니다</summary>
      
    
    
    
    
    <category term="KDB+/q" scheme="https://kdevkr.github.io/tags/KDB-q/"/>
    
    <category term="TP" scheme="https://kdevkr.github.io/tags/TP/"/>
    
  </entry>
  
  <entry>
    <title>자바 날짜 및 시간 포맷</title>
    <link href="https://kdevkr.github.io/java-datetime-format/"/>
    <id>https://kdevkr.github.io/java-datetime-format/</id>
    <published>2022-03-19T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>여러 국가를 대상으로 해야하는 서비스를 만들어가게 되는 경우 언어 뿐만 아니라 시간을 다루는 것도 중요합니다. 단순하게 말해서 한국에서 서비스를 제공한다고해서 한국 시간으로 모든 시간 데이터를 다루는 것은 좋은 방식이 아닙니다. 기본적으로는 UTC라고 하는 세계 협정 시간을 기준으로 시간을 저장해야합니다. PostgreSQL과 같은 데이터베이스에서도 Timestamp를 저장하게 되는 경우 내부적으로는 UTC로 저장됩니다. 따라서, 2022년 3월 19일 12시 라는 시간은 <code>2022년 3월 19일 03시</code>로 저장되는것이죠.</p><blockquote><p>애플리케이션 뿐만 아니라 서버 그리고 데이터베이스 모두 UTC로 설정하여 사용하는게 일반적입니다. 예를 들어, 아마존 웹 서비스의 EC2는 한국 리전인데도 불구하고 한국 시간대가 아닌 UTC로 설정되어있습니다.</p></blockquote><p>그리고 시간 데이터를 전달할 때는 <code>2022-03-19 12:00</code>과 같은 문자열 형태가 아닌 <a href="https://www.unixtimestamp.com/">Unix Timestamp</a>의 밀리초가 부여된 상태로 서버와 클라이언트간 요청과 응답에 사용됩니다. 가끔씩 국내 시간만 다루던 개발자들이 UTC 또는 Unix Timestamp에 대해서 모르는 경우도 꽤 많았습니다. 밀리초 형식의 Unix Timestamp를 전달받았으나 실제로 변환해보니 9시간이 빠진게 아니라 오히려 9시간이 더해진 상태로 전달하던 경험도 있습니다.</p><h2 id="Java-Date-Format"><a href="#Java-Date-Format" class="headerlink" title="Java Date Format"></a>Java Date Format</h2><p>서버와 클라이언트 간에 시간 데이터를 전달하거나 개발자 사이에 API를 제공할 때에는 앞서 이야기한 Unix Timestamp로 전달하도록 스펙을 맞출 수 있습니다. 그러나 개발자가 아닌 일반 사용자가 서비스 내에서 CSV 또는 엑셀 파일 형식으로 데이터를 업로드하거나 다운로드 받을때에는 숫자값인 Unix Timestamp가 아닌 <code>2022-03-19 12:00:00</code>과 같은 어떠한 문자 형태이어야합니다. 왜냐하면 일반인들은 UTC가 무엇인지 Unix Timestamp가 무엇인지 모르는 사람이 많으니까요. 심지어는 개발자들 중에서도…</p><blockquote><p>자바 8의 Date&#x2F;Time API에 대해서는 네이버 D2에 공유된 <a href="%5Bhttps://d2.naver.com/helloworld/645609">Java의 날짜와 시간 API</a>를 참고하시면 좋을 것 같습니다.</p></blockquote><h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>자바 8의 날짜 및 시간 클래스에 대해서 날짜 포맷을 적용해야하는 경우 <a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html">DateTimeFormatter</a>를 사용해야합니다. 그리고 일반적으로 다음과 같은 코드로 날짜 데이터를 변환할 수 있죠.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TimeZone</span> tzSeoul <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"Asia/Seoul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token string">"2022-03-19 12:00:00"</span><span class="token punctuation">;</span><span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span>tzSeoul<span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> dateTimeFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s -> %s%n"</span><span class="token punctuation">,</span> dateStr<span class="token punctuation">,</span> dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>위 코드는 이해하기에는 쉬우나 한가지 문제점은 어떤 특정한 형태의 문자열로 구성된 데이터만 변환할 수 있다는 점입니다.</p></blockquote><p>만약, 서비스 사용자가 2022년 3월 19일 0시의 시간을 표현하고자 한다면 2022-03-19 00:00:00과 같이 불필요하게 00:00:00을 붙여야하는 단점이 생기게 됩니다. 이를 보완하기 위해서는 여러가지 형식의 날짜 포맷을 처리할 수 있는 코드가 필요합니다.</p><h3 id="DateTimeFormatterBuilder"><a href="#DateTimeFormatterBuilder" class="headerlink" title="DateTimeFormatterBuilder"></a>DateTimeFormatterBuilder</h3><p>여러가지 형태의 날짜 형식을 지원해야하는 경우에는 <strong>Optional 패턴</strong>을 적용해서 처리할 수 있습니다. DateTimeFormatter에 그대로 적용할수도 있으나 DateTimeFormatterBuilder를 통해 여러가지 처리 방식에 대한 옵션이 적용된 형태로 DateTimeFormatter를 만들 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TimeZone</span> tzSeoul <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"Asia/Seoul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeFormatterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">appendPattern</span><span class="token punctuation">(</span><span class="token string">"[yyyy-MM-dd HH:mm:ss]"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">appendPattern</span><span class="token punctuation">(</span><span class="token string">"[yyyy-MM-dd HH:mm]"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">appendPattern</span><span class="token punctuation">(</span><span class="token string">"[yyyy-MM-dd]"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parseDefaulting</span><span class="token punctuation">(</span><span class="token class-name">ChronoField</span><span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parseDefaulting</span><span class="token punctuation">(</span><span class="token class-name">ChronoField</span><span class="token punctuation">.</span>MINUTE_OF_HOUR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parseDefaulting</span><span class="token punctuation">(</span><span class="token class-name">ChronoField</span><span class="token punctuation">.</span>SECOND_OF_MINUTE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span>tzSeoul<span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dateStrArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"2022-03-19 00:00:00"</span><span class="token punctuation">,</span> <span class="token string">"2022-03-19 00:00"</span><span class="token punctuation">,</span> <span class="token string">"2022-03-19"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dateStr <span class="token operator">:</span> dateStrArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> dateTimeFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s -> %s%n"</span><span class="token punctuation">,</span> dateStr<span class="token punctuation">,</span> dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2022-03-19 00:00:00 -> 2022-03-19T00:00+09:00[Asia/Seoul]</span><span class="token comment">// 2022-03-19 00:00 -> 2022-03-19T00:00+09:00[Asia/Seoul]</span><span class="token comment">// 2022-03-19 -> 2022-03-19T00:00+09:00[Asia/Seoul]</span></code></pre><h4 id="Unable-to-obtain-LocalTime-from-TemporalAccessor"><a href="#Unable-to-obtain-LocalTime-from-TemporalAccessor" class="headerlink" title="Unable to obtain LocalTime from TemporalAccessor"></a>Unable to obtain LocalTime from TemporalAccessor</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TimeZone</span> tzSeoul <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"Asia/Seoul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"[yyyy-MM-dd HH:mm:ss][yyyy-MM-dd HH:mm][yyyy-MM-dd]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span>tzSeoul<span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dateStrArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"2022-03-19 00:00:00"</span><span class="token punctuation">,</span> <span class="token string">"2022-03-19 00:00"</span><span class="token punctuation">,</span> <span class="token string">"2022-03-19"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dateStr <span class="token operator">:</span> dateStrArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> dateTimeFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s -> %s%n"</span><span class="token punctuation">,</span> dateStr<span class="token punctuation">,</span> dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>위와 같이 DateTimeFormatterBuilder를 사용하지 않고서도 DateTimeFormatter 패턴 자체로 날짜 포맷 체이닝을 구성할 수 있습니다. 그러나, 2022-03-19와 같이 시간 부분이 없는 형태의 경우에는 다음과 같이 처리할 수 없다는 예외가 발생하게 됩니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>DateTimeParseException</span><span class="token operator">:</span> <span class="token class-name">Text</span> '<span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">19</span>' could not be parsed<span class="token operator">:</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">obtain</span> <span class="token class-name">ZonedDateTime</span> from <span class="token class-name">TemporalAccessor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ISO<span class="token punctuation">,</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Seoul</span> resolved <span class="token keyword">to</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">19</span> of type <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>Parsed</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2017</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1952</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">598</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">test<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>DateTimeException</span><span class="token operator">:</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">obtain</span> <span class="token class-name">ZonedDateTime</span> from <span class="token class-name">TemporalAccessor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ISO<span class="token punctuation">,</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Seoul</span> resolved <span class="token keyword">to</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">19</span> of type <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>Parsed</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">566</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>DateTimeException</span><span class="token operator">:</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">obtain</span> <span class="token class-name">ZonedDateTime</span> from <span class="token class-name">TemporalAccessor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ISO<span class="token punctuation">,</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Seoul</span> resolved <span class="token keyword">to</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">19</span> of type <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>Parsed</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>Parsed</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Parsed</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">235</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1948</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">2</span> more<span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>DateTimeException</span><span class="token operator">:</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">obtain</span> <span class="token class-name">LocalTime</span> from <span class="token class-name">TemporalAccessor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ISO<span class="token punctuation">,</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Seoul</span> resolved <span class="token keyword">to</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">19</span> of type <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>Parsed</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>DateTimeException</span><span class="token operator">:</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">obtain</span> <span class="token class-name">LocalTime</span> from <span class="token class-name">TemporalAccessor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ISO<span class="token punctuation">,</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Seoul</span> resolved <span class="token keyword">to</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">19</span> of type <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span>Parsed</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>LocalTime</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">431</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">561</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">4</span> more</code></pre><blockquote><p>따라서, DateTimeFormatterBuilder로 문자열로 구성된 날짜 및 시간 데이터에 구성되지 않는 부분을 어떻게 처리할 것인가에 대한 옵션을 적용하여 DateTimeFormatter를 만들어서 사용하는게 좋아보입니다.</p></blockquote><p>만약, 이 글을 보시는 여러분들이 여러가지 형태의 날짜 포맷을 처리하기 위해서 아래와 같이 DateTimeFormattter를 여러개 만들어서 처리하는 코드를 작성했다면 DateTimeFormatterBuilder로 하나의 DateTimeFormatter를 사용해서 좀 더 깔끔한 형태의 코드로 만들어보시기를 추천해드립니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token string">"2022-03-19"</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span>tzSeoul<span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DateTimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span>tzSeoul<span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> tzSeoul<span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;여러 국가를 대상으로 해야하는 서비스를 만들어가게 되는 경우 언어 뿐만 아니라 시간을 다루는 것도 중요합니다. 단순하게 말해서 한국에서 서비스를 제공한다고해서 한국 시간으로 모든 시간 데이터를 다루는 것은 좋은 방식이 아닙니다. 기본적으로는 UT</summary>
      
    
    
    
    
    <category term="TimeZone" scheme="https://kdevkr.github.io/tags/TimeZone/"/>
    
    <category term="ZoneId" scheme="https://kdevkr.github.io/tags/ZoneId/"/>
    
    <category term="Instant" scheme="https://kdevkr.github.io/tags/Instant/"/>
    
    <category term="ZonedDateTime" scheme="https://kdevkr.github.io/tags/ZonedDateTime/"/>
    
    <category term="DateTimeFormatter" scheme="https://kdevkr.github.io/tags/DateTimeFormatter/"/>
    
  </entry>
  
  <entry>
    <title>프리마커 템플릿</title>
    <link href="https://kdevkr.github.io/freemarker-template/"/>
    <id>https://kdevkr.github.io/freemarker-template/</id>
    <published>2022-03-05T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글은 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a>에 이어서 프리마커 템플릿에 대해서 조금 더 학습해보고 정리하였습니다.<br>이 글에서 알아보는 내용을 코드로 확인하고 싶다면 <a href="https://github.com/kdevkr/spring-demo-freemarker">spring-demo-freemarker</a>를 참고하세요.</p></blockquote><h2 id="프리마커-템플릿"><a href="#프리마커-템플릿" class="headerlink" title="프리마커 템플릿"></a>프리마커 템플릿</h2><p><a href="https://freemarker.apache.org/">프리마커(FreeMarker)</a> 템플릿 엔진은 스프링 부트에서 공식적으로 지원하는 템플릿 엔진 중 하나입니다. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals">템플릿 리터럴</a>처럼 미리 정의된 템플릿 파일을 만들어서 어떠한 데이터 모델을 결합하여 동적으로 컨텐츠를 만들기 위해서 사용합니다. 여러가지 <a href="https://github.com/jreijn/spring-comparing-template-engines">템플릿 엔진과 비교</a>해서도 준수한 렌더링 성능을 보여주고 있습니다.</p><p><img data-src="https://freemarker.apache.org/images/overview.png" alt="Template + data-model = output"></p><h3 id="템플릿-로더"><a href="#템플릿-로더" class="headerlink" title="템플릿 로더"></a>템플릿 로더</h3><p>프리마커 템플릿 엔진은 다양항 방식으로 템플릿을 관리할 수 있도록 <a href="https://freemarker.apache.org/docs/api/freemarker/cache/TemplateLoader.html">TemplateLoader</a> 인터페이스를 사용합니다. 기본적으로 내장되어있는 구현체도 존재하며 프리마커 템플릿 엔진을 공식적으로 지원하는 스프링 프레임워크에는 SpringTemplateLoader라는 구현체를 포함하고 있습니다. 본 글에서 다루는 TemplateLoader는 아래와 같습니다.</p><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/ui/freemarker/SpringTemplateLoader.html">SpringTemplateLoader</a></li><li><a href="https://freemarker.apache.org/docs/api/freemarker/cache/StringTemplateLoader.html">StringTemplateLoader</a></li><li><a href="https://freemarker.apache.org/docs/api/freemarker/cache/MultiTemplateLoader.html">MultiTemplateLoader</a></li></ul><blockquote><p>스프링 프레임워크에서 제공하는 SpringTemplateLoader는 ResourceLoader를 통해 템플릿을 로드합니다.</p></blockquote><h3 id="국제화"><a href="#국제화" class="headerlink" title="국제화"></a>국제화</h3><p>국제화(Internationalization)는 구글처럼 다양한 언어를 사용하는 서비스 사용자가 있다면 다국어 서비스를 위해서 필수적으로 지원해야하는 기능입니다. 스프링 프레임워크에서는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/MessageSource.html">메시지 소스</a>를 통해 다국어 메시지 처리를 지원합니다. 프리마커 템플릿 엔진은 스프링의 메시지 소스와는 연관성이 없으므로 스프링 프레임워크에서는 프리마커 템플릿에서 메시지 소스를 사용할 수 있도록 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/resources/org/springframework/web/servlet/view/freemarker/spring.ftl">spring.ftl</a>를 포함하고 있습니다. </p><p>따라서, 프리마커 템플릿에서 스프링 메시지 처리하는 방법을 찾아보면 다음과 같이 해야한다는 정보를 확인할 수 있습니다.</p><pre class="language-ftl" data-language="ftl"><code class="language-ftl"><span class="token ftl language-ftl"><span class="token ftl-directive"><span class="token punctuation">&lt;</span><span class="token directive keyword">#import</span><span class="token content ftl"> <span class="token string">"/spring.ftl"</span> <span class="token keyword">as</span> spring</span><span class="token punctuation">/></span></span></span><span class="token ftl language-ftl"><span class="token ftl-directive"><span class="token punctuation">&lt;</span><span class="token directive keyword">@spring</span><span class="token content ftl"><span class="token punctuation">.</span>message <span class="token string">"messageKey"</span></span><span class="token punctuation">/></span></span></span></code></pre><blockquote><p>단, 메시지 소스를 사용할 수 있도록 정의된 FTL 파일은 RequestContext를 필요로하기 때문에 사용자의 요청에 대해 응답하는 뷰가 아닌 경우에는 사용할 수 없습니다. 따라서, 백그라운드 작업의 스레드에는 RequestContext가 존재하지 않기 때문에 메시지 소스로 다국어 메시지 처리가 불가능합니다.</p></blockquote><h4 id="ResourceBundleModel"><a href="#ResourceBundleModel" class="headerlink" title="ResourceBundleModel"></a>ResourceBundleModel</h4><p>사용자의 요청에 대한 응답이 아닌 백그라운드 작업에서 프리마커 템플릿 엔진을 사용할 때 다국어 메시지를 제공하기 위해서는 프리마커 템플릿 엔진에서 지원하는 방법을 사용해야만 합니다. 프리마커 템플릿 엔진은 리소스 번들을 모델로 사용해서 다국어를 처리할 수 있는 <strong>ResourceBundleModel</strong>을 제공하고 있습니다.</p><p>예를 들어, 클래스패스에 리소스 번들을 구성하고 ResourceBundleModel로 변환하여 데이터 모델로 전달하면 메시지 처리가 가능해집니다.</p><p><img data-src="/images/posts/freemarker-template/resource-bundle.png" alt="Resource Bundle"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>ROOT<span class="token punctuation">;</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> configurationFactoryBean<span class="token punctuation">.</span><span class="token function">createConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringTemplateLoader</span> stringTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringTemplateLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> <span class="token string">"$&#123;bundle(\"application.name\")&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configuration<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>stringTemplateLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Template</span> template <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResourceBundle</span> resourceBundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"messages"</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleModel</span><span class="token punctuation">(</span>resourceBundle<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeansWrapperBuilder</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span><span class="token punctuation">.</span>DEFAULT_INCOMPATIBLE_IMPROVEMENTS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">FreeMarkerTemplateUtils</span><span class="token punctuation">.</span><span class="token function">processTemplateIntoString</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>기본적으로는 프로퍼티 파일로 리소스 번들을 만들지만 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/ResourceBundle.Control.html">XML</a> 또는 <a href="https://github.com/akkinoc/yaml-resource-bundle">YAML</a>로 리소스 번들을 만들어서 사용할 수도 있습니다.</p></blockquote><h3 id="템플릿-체이닝"><a href="#템플릿-체이닝" class="headerlink" title="템플릿 체이닝"></a>템플릿 체이닝</h3><p><a href="https://freemarker.apache.org/docs/api/freemarker/cache/MultiTemplateLoader.html">MultiTemplateLoader</a>를 사용하면 여러가지 방식의 <a href="https://freemarker.apache.org/docs/pgui_config_templateloading.html">템플릿 로딩</a>을 통해 템플릿 로더에 의해 로드되는 템플릿을 함께 사용할 수 있습니다. 또한, MultiTemplateLoader에 전달되는 템플릿 로더의 순서에 따라 SpringTemplateLoader로 기본 템플릿 레이아웃을 만들고 실제 템플릿 내용은 StringTemplateLoader로 재정의할 수도 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringTemplateLoader</span> stringTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringTemplateLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"email.ftlh"</span><span class="token punctuation">,</span> <span class="token string">"$&#123;bundle(\"application.name\")&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringTemplateLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> <span class="token string">"&lt;#include \"email.ftlh\" >"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> configurationFactoryBean<span class="token punctuation">.</span><span class="token function">createConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SpringTemplateLoader</span> springTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringTemplateLoader</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MultiTemplateLoader</span> multiTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiTemplateLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateLoader</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>stringTemplateLoader<span class="token punctuation">,</span> springTemplateLoader<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configuration<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>multiTemplateLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Template</span> template <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>MultiTemplateLoader의 생성자에 전달되는 템플릿 로더의 순서대로 템플릿을 찾도록 위임한다는 것에 주의해야합니다.</p></blockquote><p>사용자의 요청에 대한 응답을 뷰로 처리하기 위해서 템플릿 엔진을 적용하기도 하지만 이메일 발송과 같은 백그라운드 작업에서도 프리마커 템플릿 엔진을 다양한 방식으로 활용할 수 있다는 것을 알게되었습니다. 프리마커 템플릿을 동적으로 처리하는 방법에 대해서 고민하게 되면서 알아본 내용이지만 많은 분들에게 도움이 되었으면 합니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글은 &lt;a href=&quot;/sending-mail-with-freemarker-template/&quot;&gt;프리마커 템플릿으로 이메일 발송하기&lt;/a&gt;에 이어서 프리마커 템플릿에 대해서 조금 더 학습해보고 정리하였습니다.&lt;br&gt;이 글</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>X509 Certificate Signed by Unknown Authority</title>
    <link href="https://kdevkr.github.io/docker-registry-certificate/"/>
    <id>https://kdevkr.github.io/docker-registry-certificate/</id>
    <published>2022-02-26T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Error response from daemon: Get https://registry.domain.com&#x2F;v2&#x2F;: x509: certificate signed by unknown authority</p></blockquote><p>생각보다 많은 조직에서 사내 정책이나 도커 허브의 <a href="https://docs.docker.com/docker-hub/download-rate-limit/">다운로드 제한량</a>을 경험하고 도커에서 제공하는 <a href="https://hub.docker.com/_/registry">레지스트리 이미지</a>로 사설 도커 레지스트리 서버를 구축하는 것 같습니다. 위 오류는 도커 레지스트리 서버에 로그인을 시도할 때 나타날 수 있습니다. 우리가 사용하는 도커 엔진이라고하는 클라이언트가 도커 레지스트리 서버가 전달해준 인증서를 신뢰할 수 없다는 의미입니다. 그러면 위와 같이 내 컴퓨터에 설치된 도커 엔진에서 사설로 구축한 도커 레지스트리 서버의 인증서를 신뢰할 수 없는 문제가 발생하면 어떻게 해결하는지를 알아보도록 하죠.</p><h2 id="도커-레지스트리-인증서"><a href="#도커-레지스트리-인증서" class="headerlink" title="도커 레지스트리 인증서"></a>도커 레지스트리 인증서</h2><p>도커 엔진에서 참조하는 레지스트리 서버에 대한 인증서 폴더는 <strong>certs.d</strong> 입니다.</p><ul><li>Windows: C:&#x2F;ProgramData&#x2F;Docker&#x2F;certs.d&#x2F;</li><li>Linux: &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;</li><li>Mac: ~&#x2F;.docker&#x2F;certs.d&#x2F;</li></ul><pre class="language-sh" data-language="sh"><code class="language-sh">&#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;         &lt;-- Certificate directory└── registry.domain.com:5000 &lt;-- Hostname:port   ├── client.cert           &lt;-- Client certificate   ├── client.key            &lt;-- Client key   └── ca.crt                &lt;-- Certificate authority that signed the registry certificate</code></pre><h3 id="안전하지-않은-레지스트리"><a href="#안전하지-않은-레지스트리" class="headerlink" title="안전하지 않은 레지스트리"></a>안전하지 않은 레지스트리</h3><p>HTTPS로 실행된 도커 레지스트리 서버에 대해서 도커 엔진이 신뢰할 수 없는 인증서를 무시하도록 <a href="https://docs.docker.com/registry/insecure/">insecure-registries</a>옵션을 지정할 수 있습니다. 다만, 이 방법은 해당 도메인 주소의 레지스트리 서버가 올바른 인증서를 사용하는지 검증하지 않기 때문에 보안적인 부분을 생각한다면 일반적으로 사용해서는 안되는 방법입니다.</p><h3 id="신뢰할-수-있는-인증-기관"><a href="#신뢰할-수-있는-인증-기관" class="headerlink" title="신뢰할 수 있는 인증 기관"></a>신뢰할 수 있는 인증 기관</h3><p>도커 엔진은 기본적으로 시스템에 등록된 신뢰할 수 있는 인증 기관의 인증서 목록으로 도커 레지스트리 서버의 클라이언트 인증서를 검증합니다. 이는 크롬과 같은 브라우저에서 HTTPS 통신 시 서버에서 전달하는 인증서가 유효한지를 확인하는 것과 다르지 않습니다. 저는 <strong>신뢰할 수 있는 인증 기관으로부터 발급받은 도메인 인증서를 사용</strong>하여 도커 레지스트리 서버를 구축하였는데도 불구하고 도커 엔진에서는 회사 도메인 주소로된 도커 레지스트리 서버에서 전달된 인증서가 올바르지 않다며 동일하게 <code>x509: certificate signed by unknown authority</code> 오류를 알려주었습니다.</p><h3 id="CA-인증서-체인"><a href="#CA-인증서-체인" class="headerlink" title="CA 인증서 체인"></a>CA 인증서 체인</h3><p>도커 엔진에서 레지스트리 서버의 인증서를 신뢰할 수 없다는 것은 몇가지 사항에 대한 의미를 가질 수 있습니다. 첫번째로, 도커 레지스트리 서버 구축 시 사용한 CA 인증서가 클라이언트 인증서와 인증 기관들에 대한 인증서가 연결된 CA 인증서 체인이 아닐 수 있다는 것입니다. 실제로 지금은 UI 기반의 사용자 및 이미지 관리를 위해 <a href="https://goharbor.io/">Harbor</a>로 도커 레지스트리 서버를 재구축하였으나 기존 도커 레지스트리 서버에 사용된 CA 인증서 파일에는 클라이언트 인증서만 존재했던 문제가 있었습니다. 그래서 조직 내 개발자들에게 레지스트리 서버에서 사용된 CA 인증서 파일과 클라이언트 인증서 및 키를 전달하고 도커 레지스트리 인증서 폴더에 저장하여 사용해달라고 안내했었습니다. 결국은 도커 엔진이 도커 레지스트리 서버를 신뢰할 수 없으므로 CA 인증서 체인을 신뢰할 수 있는 인증서 목록에 포함시키면 됩니다.</p><p>예를 들어, <a href="https://support.apple.com/ko-kr/guide/keychain-access/kyca2431/mac">Mac용 키체인 접근을 사용하여 키체인에 인증서 추가하기</a>에 따라 CA 인증서를 추가하면 다음과 같이 유효한 인증서임이 표시됨을 확인할 수 있었습니다.</p><p><img data-src="/images/posts/docker-registry-certificate/trust-certificate.png"></p><pre class="language-sh" data-language="sh"><code class="language-sh">docker login registry.domain.com -u &#39;username&#39; -p &#39;password&#39;WARNING! Using --password via the CLI is insecure. Use --password-stdin.Login Succeeded</code></pre><blockquote><p>도커 레지스트리 서버의 CA 인증서 체인을 시스템 인증서로 등록하고나서는 도커 엔진이 신뢰할 수 있는 인증서 목록에 따라 인증서가 유효함을 확인함으로 정상적으로 HTTPS 통신이 이루어지고 로그인에 성공하였습니다. 레지스트리 서버에 대한 로그인 예시이므로 CLI 경고 문구는 무시해주세요.</p></blockquote><h4 id="시스템-및-사용자-정의-CA-인증서-병합"><a href="#시스템-및-사용자-정의-CA-인증서-병합" class="headerlink" title="시스템 및 사용자 정의 CA 인증서 병합"></a>시스템 및 사용자 정의 CA 인증서 병합</h4><p><em>On Linux any root certificates authorities are merged with the system defaults, including the host’s root CA set. If you are running Docker on Windows Server, or Docker Desktop for Windows with Windows containers, the system default certificates are only used when no custom root certificates are configured.</em></p><p><a href="https://docs.docker.com/engine/security/certificates/#understand-the-configuration">공식문서</a>에 따르면 위와 같이 사용자 정의 인증서(certs.d)는 시스템 인증서와 CA 인증서가 합쳐져서 등록된다는 내용이 있습니다. 따라서, 도커 레지스트리 서버의 CA 인증서 체인을 <strong>시스템 인증서 목록</strong>이나 <strong>certs.d</strong> 폴더에 두면 된다는 이야기입니다. 실제로 시스템 인증서로 등록하지 않아도 certs.d 폴더에 ca.crt라는 이름으로 CA 인증서 체인을 두게되면 동일하게 동작함을 확인할 수 있었습니다.</p><blockquote><p>한가지 흥미로운 점은 이 글을 작성하기 위해 Docker Desktop for Windows 에서도 테스트를 해본 결과 도커 레지스트리 서버의 CA 인증서 체인을 굳이 등록하지 않아도 정상적으로 로그인이 되었다는 점입니다. 이점으로 보았을때 모든 운영체제에서 동일하게 동작하지는 않는 것 같아보입니다. 따라서, 도커 엔진에서 레지스트리 서버를 신뢰할 수 없다고 한다면 레지스트리 서버 관리자에게 인증서 체인을 전달받아서 등록하는게 좋을 것 같습니다.</p></blockquote><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Error response from daemon: Get https://registry.domain.com&amp;#x2F;v2&amp;#x2F;: x509: certificate signed by unknown authority&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Docker Registry" scheme="https://kdevkr.github.io/tags/Docker-Registry/"/>
    
    <category term="Harbor" scheme="https://kdevkr.github.io/tags/Harbor/"/>
    
    <category term="Certificate" scheme="https://kdevkr.github.io/tags/Certificate/"/>
    
  </entry>
  
  <entry>
    <title>HTTP/2를 사용하는 개발 환경</title>
    <link href="https://kdevkr.github.io/local-for-http2/"/>
    <id>https://kdevkr.github.io/local-for-http2/</id>
    <published>2022-02-22T00:00:00.000Z</published>
    <updated>2022-07-17T10:38:44.404Z</updated>
    
    <content type="html"><![CDATA[<p>지난 <a href="/ssl-certificate">SSL 인증서</a>와 <a href="/tls-offload">TLS 오프로드</a>라는 글을 통해 HTTPS에 대해서 살펴본 적이 있습니다. 이처럼 HTTPS는 사용자의 요청이 안전하게 서버로 전달되는 것을 목적으로 도입하지만 <a href="https://developers.google.com/web/fundamentals/performance/http2?hl=ko">HTTP&#x2F;2</a>를 사용하기 위함도 있습니다. 일반 사용자의 컴퓨터나 모바일 디바이스에 대한 성능이 좋아지면서 TLS 핸드쉐이킹에 대한 비용은 그다지 크지 않습니다. 그러나 HTTP 1.1에서의 Keep Alive 도입은 이미 연결중인 TCP를 다시 사용하므로 어느정도의 TLS 핸드쉐이킹에 대한 비용을 줄일 수 있지만 수 많은 요청이 발생하는 애플리케이션에서는 이미 응답을 기다리는 요청이 끝나기를 현재 요청이 대기해야하는 문제를 가지고 있습니다.</p><blockquote><p>HTTP 1.1은 keep-alive 커넥션을 통해 여러개의 TCP 연결을 일정 시간 열어놓고 요청을 차례대로 수행하기 때문에 브라우저에서는 <a href="https://stackoverflow.com/a/985704">HTTP 1.1를 사용할 때 도메인 당 최대 연결 수를 제한</a>합니다.</p></blockquote><h2 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h2><p>HTTP 1.1이 이미 연결된 TCP 커넥션을 다시 재사용한다면 HTTP2는 단일 TCP 연결을 수행하고 수 많은 요청을 스트림으로 처리합니다. 그렇기에 꽤 많은 요청을 동시에 수행해도 브라우저는 이를 제한하지 않습니다. 예를 들어, 자바스크립트에서 <strong>프로미스로 여러개 요청을 동시에 수행하도록</strong> 코드를 작성하더라도 다른 요청이 끝나기까지 요청이 대기하는 현상이 줄어들게되며, 웹팩을 통해 클라이언트 UI를 구성하는 에셋 파일들을 <strong>여러개의 작은 사이즈로 나누는 청크를 수행</strong>하고 웹 페이지 로딩 시 분할된 청크를 빠르게 응답받을 수 있습니다.</p><blockquote><p>브라우저에서 HTTP&#x2F;2도 도메인 당 TCP 연결을 수행합니다. 그리고 대부분의 브라우저와 서버에서는 HTTP&#x2F;2 연결을 위해 TLS 사용을 요구합니다.</p></blockquote><h3 id="ALPN"><a href="#ALPN" class="headerlink" title="ALPN"></a>ALPN</h3><p>HTTP2.Pro 사이트를 사용해서 <a href="https://http2.pro/check?url=https://naver.com/">네이버</a>와 <a href="https://http2.pro/check?url=https://okky.kr/">오키</a> 서비스 주소를 입력해보면 ALPN 지원 여부에 대한 정보가 표시됩니다. ALPN은 TLS 핸드쉐이크를 수행하고 서버와 클라이언트간 연결에서 어떤 HTTP 프로토콜을 사용할 것인지를 결정하기 위한 정책입니다. 아마존 웹 서비스는 <a href="https://aws.amazon.com/ko/about-aws/whats-new/2020/05/network-load-balancer-now-supports-tls-alpn-policies/">NLB</a>에서도 TLS ALPN 정책을 지원하기도 하죠.</p><blockquote><p>HTTP&#x2F;2 연결을 우선적으로 요구하고 클라이언트가 불가능하다면 HTTP 1.1로 연결할 수 있습니다.</p></blockquote><h3 id="Local-CA-with-mkcert"><a href="#Local-CA-with-mkcert" class="headerlink" title="Local CA with mkcert"></a>Local CA with mkcert</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.webserver.configure-http2.undertow">스프링 부트 애플리케이션</a> 뿐만 아니라 <a href="/reverse-proxy-using-nginx">엔진엑스</a>에서도 TLS 구성을 위해서는 인증서가 필요합니다. 그래서 지난 SSL 인증서 글에서는 <a href="/ssl-certificate/#%EC%9E%90%EC%B2%B4-%EC%84%9C%EB%AA%85-CA-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EB%B0%9C%EA%B8%89">자체 서명 CA 인증서 발급</a>을 한것처럼 로컬 개발 환경을 위한 인증서를 만들고 적용하는 과정을 공유했습니다. 이 과정들은 생각보다 까다롭고 불편한 부분이 많습니다. 결국 불편한 것을 극히 싫어하는 개발자들은 <a href="https://github.com/FiloSottile/mkcert">mkcert</a>라고 하는 로컬 환경을 위한 CA 인증서를 자동으로 신뢰 기관에 등록하는 도구를 만들어냅니다.</p><pre class="language-ps" data-language="ps"><code class="language-ps">PS C:\Users\Mambo\cert&gt; mkcert -installThe local CA is now installed in the system trust store! ⚡️PS C:\Users\Mambo\docker\nginx.conf&gt; mkcert -ecdsa localhost 127.0.0.1 ::1 mambo.krCreated a new certificate valid for the following names 📜 - &quot;localhost&quot; - &quot;127.0.0.1&quot; - &quot;::1&quot; - &quot;mambo.kr&quot;The certificate is at &quot;.&#x2F;localhost+3.pem&quot; and the key at &quot;.&#x2F;localhost+3-key.pem&quot; ✅It will expire on 22 May 2024 🗓</code></pre><blockquote><p>간단하게 CA 인증서를 신뢰 기관에 등록하고 로컬 컴퓨터를 위한 인증서를 발급했습니다.<br>로컬 컴퓨터를 위한 인증서에 대한 신뢰 인증서를 등록한다는 점을 잊지 마세요.</p></blockquote><h2 id="로컬-개발-환경"><a href="#로컬-개발-환경" class="headerlink" title="로컬 개발 환경"></a>로컬 개발 환경</h2><p>일반적으로 TLS 핸드쉐이크를 수행하는 이후의 트래픽 전달에는 TLS 연결을 수행하도록 하지 않도록 구성합니다. 일부 엔지니어들은 모든 트래픽 전달에 TLS 연결을 해야한다고 말합니다. 어느정도의 보안적인 구성을 하느냐는 조직에서 결정해야할 일입니다. 현재 조직은 아마존 웹 서비스의 로드밸런서에서 TLS 핸드쉐이크를 수행하도록 하고 내부적인 트래픽 전달에는 TLS를 사용하여 패킷을 보호하지 않습니다. </p><p>TLS 오프로드 및 리버스 프록시를 위한 엔진엑스를 구성하고 HTTP로 실행된 애플리케이션에 트래픽을 전달하며 HTTP&#x2F;2를 사용할 수 있게 만들겠습니다. 이미 사용중인 엔진엑스가 없다면 제 깃허브 리파지토리 <a href="https://github.com/kdevkr/nginx.conf">nginx.conf</a>의 코드를 활용해서 도커 컴포즈로 엔진엑스 컨테이너를 실행하셔도 좋습니다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>   <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.21.3<span class="token punctuation">-</span>alpine    <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf      <span class="token punctuation">-</span> ./localhost+3.pem<span class="token punctuation">:</span>/etc/nginx/server.crt      <span class="token punctuation">-</span> ./localhost+3<span class="token punctuation">-</span>key.pem<span class="token punctuation">:</span>/etc/nginx/server.key      <span class="token punctuation">-</span> ./static<span class="token punctuation">:</span>/etc/nginx/static  <span class="token key atrule">app</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> amazoncorretto<span class="token punctuation">:</span>11<span class="token punctuation">-</span>alpine    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">'java -jar /etc/app.jar'</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./demo<span class="token punctuation">-</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT.jar<span class="token punctuation">:</span>/etc/app.jar</code></pre><blockquote><p>저는 리파지토리에 있는 사설 인증서 대신에 mkcert를 통해 만들어진 인증서를 사용하도록 변경했습니다.</p></blockquote><p>리파지토리에 저장된 샘플 애플리케이션을 그대로 사용했지만 로컬 호스트에서 인텔리제이와 같은 개발 도구로 애플리케이션을 실행하셨다면 nginx.conf 파일의 백엔드 스트림에 대한 주소를 <code>host.docker.internal</code>로 변경하세요. 컨테이너로 실행된 엔진엑스에서 로컬 호스트로 트래픽이 전달되게 됩니다.</p><p><img data-src="/images/posts/local-for-http2/security-overview.png" alt="TLS Handshake"><br><img data-src="/images/posts/local-for-http2/network-overview.png" alt="HTTP/2"></p><blockquote><p>mkcert가 자동으로 신뢰 기관 목록에 자신의 CA 인증서를 등록하였기 때문에 브라우저는 인증서를 신뢰할 수 있다고 판단했고 HTTPS 연결이 정상적으로 수행되었습니다.</p></blockquote><p>이제 여러분들도 로컬 환경에서 개발하실때 HTTPS와 그리고 HTTP 1.1이 아닌 HTTP&#x2F;2를 사용해보시기 바랍니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;지난 &lt;a href=&quot;/ssl-certificate&quot;&gt;SSL 인증서&lt;/a&gt;와 &lt;a href=&quot;/tls-offload&quot;&gt;TLS 오프로드&lt;/a&gt;라는 글을 통해 HTTPS에 대해서 살펴본 적이 있습니다. 이처럼 HTTPS는 사용자의 요청이 안전하게 서</summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
    <category term="Nginx" scheme="https://kdevkr.github.io/tags/Nginx/"/>
    
    <category term="TLS" scheme="https://kdevkr.github.io/tags/TLS/"/>
    
    <category term="HTTP2" scheme="https://kdevkr.github.io/tags/HTTP2/"/>
    
    <category term="mkcert" scheme="https://kdevkr.github.io/tags/mkcert/"/>
    
  </entry>
  
</feed>
