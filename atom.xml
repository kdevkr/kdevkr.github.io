<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2024-01-01T01:22:22.873Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>가독성 있는 개발자 이력서</title>
    <link href="https://kdevkr.github.io/resume-fonts/"/>
    <id>https://kdevkr.github.io/resume-fonts/</id>
    <published>2024-01-01T00:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<iframe width="520" height="310" src="https://www.youtube.com/embed/ZRTJxA3UDWk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>좋은 이력서에 대해서 찾아보면 대부분의 HR 전문가들은 가독성이 있게 작성해야한다고 피드백을 하는 편인 것 같다. 개발자 이력서는 이렇게 작성해야한다고 잘 알려진 <a href="https://wonny-log.notion.site/Wonny-Public-c2f8051bfb574f349406a30d2bc71a45">데이터로 일하는 개발자</a> 에서도 가독성을 높이기 위해 여러가지를 조언해주고 있다. 위 유튜브 영상에서는 휴먼명조체가 신뢰감과 안정감을 주긴 하지만 <strong>디지털 타입의 문서에는 적합하지 않다</strong>고 이야기하며 고딕체를 권장하는 걸 볼 수 있는데 우리가 PDF 파일로 전달하는 이력서는 어디에 해당될까?</p><blockquote><p><a href="https://fonts.google.com/noto/specimen/Noto+Sans+KR/tester">Google Fonts Type tester</a>로 본고딕(Noto Sans KR) 결과와 구글 워드 문서에서 작성해본 결과가 다르지만 확실하게 워드 문서에서 보이는 결과는 명조체보다는 고딕체가 가독성이 있어보이게 작성되었습니다.</p></blockquote><p>기업마다 이력서를 출력해서 검토하는 곳이 이제는 없다고 생각할 순 없지만 개발자 지원자가 수도 없다는 소식으로 볼때는 이력서를 검토할 때 출력해서 볼 가능성은 적지 않을까 싶다. 그렇다면 위 영상에서 알려주는 것과 같이 고딕체를 써야 가독성이 있을 것 같다고 생각할 수 있겠다.</p><ul><li>노션 이력서 : Sans Serif</li><li>원티드 또는 랠릿 : Pretendard</li></ul><p>일반적으로 많이 작성한다고 볼 수 있는 노션 이력서는 Sans Serif 로 알고 있고 원티드나 랠릿 같은 서비스에서는 Pretendard 로 보여주는 것 같다. 그런데 아무리 신경써서 고민하고 작성해도 <strong>PDF로 변환한 결과는 생각보다 전혀 다른 모습을 보여</strong>준다. 구글 워드 문서로 이력서를 작성하려고 했을때는 명조체 보다는 고딕체가 더 깔끔하다고 보여지지만 PDF로 다운로드한 순간 명조체가 더 가독성이 있게 출력됨을 볼 수 있다.</p><ul><li>웹 기반 이력서 : 고딕체</li><li>이력서 PDF 파일 : 명조체</li></ul><p>백엔드 개발자라서 잘 몰랐지만 찾아보니 노션 이력서의 sans-serif는 고딕에 해당된다고 한다. 그리고 serif는 명조에 해당된다고 하니 노션 이력서를 사용하더라도 기본이 아닌 <strong>세리프로 변경한 후 PDF로 내보내는 게 필요</strong>해보인다. 그리고 노션 이력서를 PDF로 변환했을때 A4 크기보다는 A3 크기로 선택했을때 PDF 파일을 연 결과가 깔끔했다.</p><blockquote><p>면접관으로써 이력서를 검토하는 것도 어려운 일이지만 지원자로써 가독성 있는 이력서를 작성하는 건 쉽지 않을 일 같습니다. 폰트에 따라서 디스플레이와 문서 상에서 보이는 결과가 다르다는 것에 새삼 놀라게 되네요. 개발자도 문서화에 대해서는 중요하다고 인지하고는 있지만 문서를 전문적으로 작성하는 인력은 아니기 때문에 그다지 신경쓰지 않았던 것 같습니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe width=&quot;520&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/ZRTJxA3UDWk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-w</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Simple Java Mail 로 이메일 보내기</title>
    <link href="https://kdevkr.github.io/gmail-smtp-with-simplejavamail/"/>
    <id>https://kdevkr.github.io/gmail-smtp-with-simplejavamail/</id>
    <published>2023-12-30T14:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/gmail-smtp/">Gmail SMTP</a> 을 작성하면서 구글 계정으로 이메일을 발송하는 것을 다룬 것도 1년이 넘게 지났다. 스프링 부트 기반의 프로젝트에서 spring-boot-starter-mail 모듈을 통해 JavaMailSender로 이메일을 보낼 수 있는 구현을 쉽게 찾아볼 수 있다. 우연히 알게된 <a href="https://www.simplejavamail.org/">Simple Java Mail</a> 라이브러리는 JavaMailSender 와 MimeMessageHelper와 같은 클래스에 익숙하지 않은 초보 개발자들에게 간단하게 메일 발송을 할 수 있도록 API를 제공해준다.</p><h4 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h4><p>이메일 발송에 대한 설정을 깊게 들어가면 어려울 수 있으나 초보 개발자에게 적합한 특징은 아래와 같다.</p><ul><li><a href="https://www.simplejavamail.org/features.html#section-builder-api">Fluent API</a></li><li><a href="https://www.simplejavamail.org/configuration.html#section-spring-support">Spring Support</a></li><li><a href="https://www.simplejavamail.org/features.html#section-reusable-mailer">Thread-Safe</a></li><li><a href="https://www.simplejavamail.org/features.html#section-email-validation">이메일 검증 지원</a></li></ul><h4 id="SSL-and-TLS-with-Google-mail"><a href="#SSL-and-TLS-with-Google-mail" class="headerlink" title="SSL and TLS with Google mail"></a>SSL and TLS with Google mail</h4><p>기존에 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a> 에서 처럼 Gmail SMTP 서버를 이용할 때 STARTTLS 방식을 사용했었던 것처럼 어떻게 설정해야하는지를 <a href="https://www.simplejavamail.org/features.html#section-gmail">SSL and TLS with Google mail</a>에서 설명해주고 있다. STARTTLS 방식은 <a href="https://www.simplejavamail.org/security.html#section-transport-strategy-tls">SMTP_TLS</a>를 사용해야함을 알 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">SimpleJavaMailSpringSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMailApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleMailApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">simplejavamail.javaxmail.debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">simplejavamail.smtp.host</span><span class="token punctuation">:</span> smtp.gmail.com<span class="token key atrule">simplejavamail.smtp.port</span><span class="token punctuation">:</span> <span class="token number">587</span><span class="token key atrule">simplejavamail.transportstrategy</span><span class="token punctuation">:</span> SMTP_TLS<span class="token key atrule">simplejavamail.smtp.username</span><span class="token punctuation">:</span> kdevkr@gmail.com<span class="token key atrule">simplejavamail.smtp.password</span><span class="token punctuation">:</span> <span class="token string">'앱 비밀번호'</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">GmailSmtpTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">Mailer</span> mailer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> mailer<span class="token punctuation">.</span><span class="token function">testConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Email</span> email <span class="token operator">=</span> <span class="token class-name">EmailBuilder</span><span class="token punctuation">.</span><span class="token function">startingBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Mambo &lt;kdevkr@gmail.com>"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">"kdevkr@gmail.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSubject</span><span class="token punctuation">(</span><span class="token string">"Java Mail Test with simplejavamail"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withPlainText</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">buildEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> mailer<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>앱 비밀번호 발급은 <a href="/gmail-smtp/">Gmail SMTP</a> 글을 참고하세요.</p></blockquote><h4 id="Convert-Email-to-MimeMessage"><a href="#Convert-Email-to-MimeMessage" class="headerlink" title="Convert Email to MimeMessage"></a>Convert Email to MimeMessage</h4><p>EmailConverter, MailerHelper, JMail 클래스를 통해 유용한 기능을 제공하는데 EmailConverter를 이용하면 Email 을 MimeMessage로 변환하는 것을 제공해주기 때문에 JavaMailSender와의 통합도 유용해보인다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Email</span> email <span class="token operator">=</span> <span class="token class-name">EmailBuilder</span><span class="token punctuation">.</span><span class="token function">startingBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MimeMessage</span> mimeMessage <span class="token operator">=</span> <span class="token class-name">EmailConverter</span><span class="token punctuation">.</span><span class="token function">emailToMimeMessage</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>더 자세히 spring-boot-starter-mail 과 비교해보고 싶다면 <a href="https://www.simplejavamail.org/feature-matrix.html">Feature Comparison Matrix</a> 문서를 참고해보세요.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/gmail-smtp/&quot;&gt;Gmail SMTP&lt;/a&gt; 을 작성하면서 구글 계정으로 이메일을 발송하는 것을 다룬 것도 1년이 넘게 지났다. 스프링 부트 기반의 프로젝트에서 spring-boot-starter-mail 모듈을 통해 Ja</summary>
      
    
    
    
    
    <category term="Gmail SMTP" scheme="https://kdevkr.github.io/tags/Gmail-SMTP/"/>
    
    <category term="Simple Java Mail" scheme="https://kdevkr.github.io/tags/Simple-Java-Mail/"/>
    
  </entry>
  
  <entry>
    <title>Couldn&#39;t Find FilterChainProxy</title>
    <link href="https://kdevkr.github.io/spring-security-gh-14370/"/>
    <id>https://kdevkr.github.io/spring-security-gh-14370/</id>
    <published>2023-12-29T09:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/spring-projects/spring-security/issues/14370">https://github.com/spring-projects/spring-security/issues/14370</a><br><a href="https://github.com/spring-projects/spring-security/commit/7cd626fe2569346b945feec40fa16f231a558fde">https://github.com/spring-projects/spring-security/commit/7cd626fe2569346b945feec40fa16f231a558fde</a></p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanCreationException</span><span class="token operator">:</span> <span class="token class-name">Error</span> creating bean <span class="token keyword">with</span> <span class="token namespace">name</span> 'springSecurityFilterChain'<span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">instantiate</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span>WebMvcSecurityConfiguration</span>$<span class="token class-name">CompositeFilterChainProxy</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token class-name">Constructor</span> threw exceptionat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ConstructorResolver</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">ConstructorResolver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">322</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ConstructorResolver</span><span class="token punctuation">.</span><span class="token function">autowireConstructor</span><span class="token punctuation">(</span><span class="token class-name">ConstructorResolver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">310</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">autowireConstructor</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1354</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">createBeanInstance</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1191</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">561</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">521</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractBeanFactory</span><span class="token punctuation">.</span>lambda$doGetBean$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">325</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">DefaultSingletonBeanRegistry</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">234</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractBeanFactory</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">323</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractBeanFactory</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">199</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractBeanFactory</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">312</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractBeanFactory</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">199</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>DefaultListableBeanFactory</span><span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">975</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractApplicationContext</span><span class="token punctuation">.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span><span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">960</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>AbstractApplicationContext</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">625</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>ServletWebServerApplicationContext</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token class-name">ServletWebServerApplicationContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">146</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>SpringApplication</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>SpringApplication</span><span class="token punctuation">.</span><span class="token function">refreshContext</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">464</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">334</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1358</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1347</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>uptime<span class="token punctuation">.</span></span>SpringBootUptimeApplication</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">SpringBootUptimeApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>main<span class="token operator">/</span><span class="token operator">:</span>na<span class="token punctuation">]</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>BeanInstantiationException</span><span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">instantiate</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span>WebMvcSecurityConfiguration</span>$<span class="token class-name">CompositeFilterChainProxy</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token class-name">Constructor</span> threw exceptionat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">223</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>SimpleInstantiationStrategy</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">SimpleInstantiationStrategy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>ConstructorResolver</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">ConstructorResolver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">319</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">21</span> common frames omitted<span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalStateException</span><span class="token operator">:</span> <span class="token class-name">Couldn</span>'t find <span class="token class-name">FilterChainProxy</span> in <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span>HandlerMappingIntrospector</span>$$<span class="token class-name">Lambda</span>$<span class="token number">881</span><span class="token operator">/</span><span class="token number">0x000001d78949a2d0</span><span class="token annotation punctuation">@6b2fdffc</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>debug<span class="token punctuation">.</span></span>DebugFilter</span><span class="token annotation punctuation">@2ca3d826</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span>WebMvcSecurityConfiguration</span>$<span class="token class-name">CompositeFilterChainProxy</span><span class="token punctuation">.</span><span class="token function">findFilterChainProxy</span><span class="token punctuation">(</span><span class="token class-name">WebMvcSecurityConfiguration</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">302</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>security<span class="token operator">-</span>config<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span>WebMvcSecurityConfiguration</span>$<span class="token class-name">CompositeFilterChainProxy</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">WebMvcSecurityConfiguration</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">214</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>security<span class="token operator">-</span>config<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.2</span><span class="token number">.1</span><span class="token punctuation">]</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeConstructorAccessorImpl</span><span class="token punctuation">.</span><span class="token function">newInstance0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span>na<span class="token punctuation">]</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeConstructorAccessorImpl</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">NativeConstructorAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">77</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span>na<span class="token punctuation">]</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>DelegatingConstructorAccessorImpl</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">DelegatingConstructorAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span>na<span class="token punctuation">]</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Constructor</span><span class="token punctuation">.</span><span class="token function">newInstanceWithCaller</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">499</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span>na<span class="token punctuation">]</span>at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Constructor</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">480</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span>na<span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">210</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">6.1</span><span class="token number">.2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">23</span> common frames omitted</code></pre><h4 id="오류원인"><a href="#오류원인" class="headerlink" title="오류원인"></a>오류원인</h4><p>스프링 부트 3.1.5 부터 3.2.1 까지의 버전에서 @EnableWebSecurity의 debug 옵션을 활성화하는 경우 FilterChainProxy 가 아닌 DebugFilter가 등록되어 애플리케이션 컨텍스트 구성 시 오류가 발생하는 문제가 있다는 소식이다. 스프링 부트와 함께 스프링 시큐리티에 대해서 학습하는 개발자에게는 생각보다 큰 이슈일 수도 있어보인다.</p><h4 id="해결방안"><a href="#해결방안" class="headerlink" title="해결방안"></a>해결방안</h4><pre class="language-groovy" data-language="groovy"><code class="language-groovy">ext<span class="token punctuation">[</span><span class="token string">'spring-security.version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'6.2.2'</span></code></pre><p>이 글을 작성하는 2023년 12월 29일 기준으로 스프링 시큐리티 6.1.7 또는 6.2.2 버전이 릴리즈 되지 않은 상태이다. 그래서 급하게 문제를 해결하고 싶다면 아래와 같은 임시 조치가 필요하다.</p><ul><li>@EnableWebSecurity의 debug 옵션을 사용하지 않음 (로그 레벨로 대체)</li><li>Spring Boot 3.1.4 이하의 버전을 사용</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/14370&quot;&gt;https://github.com/spring-projects/spring-security</summary>
      
    
    
    
    
    <category term="Spring Security" scheme="https://kdevkr.github.io/tags/Spring-Security/"/>
    
    <category term="issue-14370" scheme="https://kdevkr.github.io/tags/issue-14370/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Commons-Logging Conflicts</title>
    <link href="https://kdevkr.github.io/spring-boot-commons-logging-conflicts/"/>
    <id>https://kdevkr.github.io/spring-boot-commons-logging-conflicts/</id>
    <published>2023-12-28T14:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Standard</span> <span class="token class-name">Commons</span> <span class="token class-name">Logging</span> discovery in action <span class="token keyword">with</span> <span class="token namespace">spring</span><span class="token operator">-</span>jcl<span class="token operator">:</span> please remove commons<span class="token operator">-</span>logging<span class="token punctuation">.</span>jar from classpath in order <span class="token keyword">to</span> <span class="token namespace">avoid</span> potential conflicts</code></pre><p>신규 프로젝트에서 스프링 부트 3 기반으로 프로젝트를 생성하고 개발하니 위와 같은 로그가 출력되는 것을 인지하였다. 스프링 부트는 내부적으로 commons-logging 을 사용하고 있으나 <a href="https://docs.spring.io/spring-framework/reference/core/spring-jcl.html">spring-jcl</a> 모듈을 통해 Slf4j 로 동작할 수 있도록 되어있고 기본적으로 Logback 을 사용하고 있는 걸로 알고 있었기에 의아했다. 위 로그는 스프링 프레임워크 6.0 부터 클래스 패스에 commons-logging 라이브러리가 포함되어 있을경우 출력되는데 <a href="https://github.com/spring-projects/spring-framework/blob/b1b6b544a2b374d3f84ffff73bdca119251de42c/spring-jcl/src/main/java/org/apache/commons/logging/LogFactoryService.java#L39-L42">LogFactoryService.java</a> 에서 System.out.println을 사용하고 있다.</p><h4 id="commons-logging-가-포함되는-라이브러리"><a href="#commons-logging-가-포함되는-라이브러리" class="headerlink" title="commons-logging 가 포함되는 라이브러리"></a>commons-logging 가 포함되는 라이브러리</h4><p>commons-logging 모듈이 포함되는 라이브러리는 생각보다 많은데 대략적으로 아래와 같다. AWS 클라우드 서비스에 의존하는 경우 많이 사용하는 AWS Java SDK 에도 commons-logging 을 포함하고 있어 쉽게 출력될 수 있을 것 같다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'commons-beanutils:commons-beanutils:1.9.4'</span>    implementation <span class="token string">'org.apache.httpcomponents:httpclient:4.5.14'</span>    implementation <span class="token string">'org.apache.commons:commons-dbcp2:2.11.0'</span>    implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">'com.amazonaws:aws-java-sdk-bom:1.12.529'</span><span class="token punctuation">)</span>    implementation <span class="token string">'com.amazonaws:aws-java-sdk-ec2'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="해결방안"><a href="#해결방안" class="headerlink" title="해결방안"></a>해결방안</h4><p>해당 로그는 클래스패스에 commons-logging 이 포함될 때 출력되므로 commons-logging 모듈이 포함되지 않도록 제외하면 된다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">configurations<span class="token punctuation">.</span>all <span class="token punctuation">&#123;</span>    exclude group<span class="token punctuation">:</span> <span class="token string">'commons-logging'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'commons-logging'</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Standard&lt;/span&gt; &lt;span class=&quot;toke</summary>
      
    
    
    
    
    <category term="Spring" scheme="https://kdevkr.github.io/tags/Spring/"/>
    
    <category term="Logging" scheme="https://kdevkr.github.io/tags/Logging/"/>
    
  </entry>
  
  <entry>
    <title>Amazon Linux 2023 Docker Compose 플러그인 설치</title>
    <link href="https://kdevkr.github.io/install-docker-compose-in-amazon-linux-2023/"/>
    <id>https://kdevkr.github.io/install-docker-compose-in-amazon-linux-2023/</id>
    <published>2023-12-17T10:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<p>Amazon Linux 2023 에서는 Extra를 제공하지는 않지만 Docker는 기본적으로 포함되어있다. Amazon Linux 2 에서와 동일하게 Docker Compose Plugin 은 별도로 포함해주지 않으므로 직접 수동으로 설치해야한다. 다만, docker-compose 명령어로 별도로 사용하기 보다는 최신 버전에 맞춰 Docker <a href="https://docs.docker.com/compose/install/linux/#install-the-plugin-manually">Compose 플러그인</a>으로 설치해보도록 하자. <a href="https://github.com/docker/compose/releases">Docker Compose Releases</a> 사이트에서 다운로드 받은 docker-compose 를 cli-plugins 폴더 아래에 복사하면 된다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash"><span class="token comment"># Docker</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">docker</span><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> ec2-user<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> <span class="token function">docker</span><span class="token builtin class-name">exec</span> <span class="token function">bash</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># Compose Plugin</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/lib/docker/cli-plugins/<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-SL</span> <span class="token string">"https://github.com/docker/compose/releases/latest/download/docker-compose-linux-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/lib/docker/cli-plugins/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/lib/docker/cli-plugins/docker-compose<span class="token function">docker</span> compose version</code></pre><h4 id="Compose-플러그인을-docker-compose-명령어로-사용하기"><a href="#Compose-플러그인을-docker-compose-명령어로-사용하기" class="headerlink" title="Compose 플러그인을 docker-compose 명령어로 사용하기"></a>Compose 플러그인을 docker-compose 명령어로 사용하기</h4><p>Docker Compose 플러그인을 설치했으나 기존 스크립트가 docker-compose로 되어있어서 명령어 호환성을 맞추고 싶다면 docker-compose를 심볼릭 링크 또는 alias로 등록하면 된다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash"><span class="token comment"># sudo ln -s /usr/local/lib/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose</span><span class="token builtin class-name">alias</span> docker-compose<span class="token operator">=</span><span class="token string">'docker compose --compatibility "$@"'</span><span class="token function">docker-compose</span> version</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Amazon Linux 2023 에서는 Extra를 제공하지는 않지만 Docker는 기본적으로 포함되어있다. Amazon Linux 2 에서와 동일하게 Docker Compose Plugin 은 별도로 포함해주지 않으므로 직접 수동으로 설치해야한</summary>
      
    
    
    
    
    <category term="AL2023" scheme="https://kdevkr.github.io/tags/AL2023/"/>
    
    <category term="Docker" scheme="https://kdevkr.github.io/tags/Docker/"/>
    
    <category term="Docker Compose" scheme="https://kdevkr.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Beanstalk Java SE 플랫폼으로 스프링 부트 배포하기</title>
    <link href="https://kdevkr.github.io/deploy-spring-boot-with-beanstalk-java-se-platform/"/>
    <id>https://kdevkr.github.io/deploy-spring-boot-with-beanstalk-java-se-platform/</id>
    <published>2023-12-17T07:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>오래 전 2017년에 작성한 <a href="/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment">AWS Elastic Beanstalk Java SE 플랫폼 환경으로 애플리케이션 배포하기</a> 글이 지금에서는 참고할 만한 정보가 아니게 된 부분이 많아서 2023년 기준으로 올바른 정보들을 정리하여 작성한 글입니다. </p></blockquote><p><img data-src="/images/posts/beanstalk-java-se-platform/aws-elastic-beanstalk-logo.jpg#compact"></p><p>아마존 웹 서비스의 Elastic Beanstalk 에서 제공하는 <code>Java SE 플랫폼</code>은 <code>실행 가능하도록 패키징되는 Jar와 War 파일</code>을 통해 스프링 부트 애플리케이션을 배포할 수 있도록 지원하는 환경이다. AWS 인프라 환경에서 Elastic Beanstalk 서비스는 개발자가 애플리케이션이 실행되는 환경을 빠르고 쉽게 구성하면서 애플리케이션을 배포하고난 후 성능 지표에 따라 오토스케일링 또는 프로비저닝할 수 있는 기능을 쉽게 적용할 수 있다. 본 글을 토대로 Elastic Beanstalk 경험이 부족한 초보 개발자 또는 회사에서 서비스를 담당하지 않았던 개발자들은 Elastic Beanstalk 환경으로 자바 웹 애플리케이션을 배포할 수 있는 환경을 구성하고 어떤 과정으로 애플리케이션을 배포할 수 있는지 이해할 수 있을 것이다.</p><h4 id="Elastic-Beanstalk-UI-Console"><a href="#Elastic-Beanstalk-UI-Console" class="headerlink" title="Elastic Beanstalk UI Console"></a>Elastic Beanstalk UI Console</h4><p><a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/eb-cli3.html">EB CLI</a>는 Elastic Beanstalk 콘솔 대신에 로컬에서 CLI 명령어를 사용하여 프로젝트에 대한 Beanstalk 환경 구성을 할 수 있게 지원한다. 하지만 Elastic Beanstalk에 대한 상세한 용어들을 이해하고 있어야하므로 처음에 익숙하지 않은 개발자들은 UI 콘솔에 의존하기를 바란다. UI 콘솔을 이용해도 처음에는 수 많은 오류들을 경험하고 환경을 종료한 뒤 다시 만들어야할 수 있다.</p><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/00.png"></p><blockquote><p>위와 같이 몇 분 만에 웹 애플리케이션을 손쉽게 배포하기 어려울 수 있는데 그 주된 이유에는 선택하는 옵션에 따른 제한과 올바르지 않은 구성에 대해서 개발자에게 알려주지 않는다. 예를 들어, 프리티어 사용자의 경우 사전 설정으로 단일 인스턴스를 선택할 수 있다고는 되어있지만 인스턴스 서브넷이 위치하는 AZ에 따라 프리티어 대상인 t2.micro 선택이 불가능할 수 있다. 프리티어 개념에 대해서 잘 이해하고 있지 않은 개발자가 t3.micro를 선택해버리면 프리티어 환경이 아닌 사용자 정의 환경으로 안내 메시지 없이 전환된다.</p></blockquote><h4 id="샘플-애플리케이션으로-시작하기"><a href="#샘플-애플리케이션으로-시작하기" class="headerlink" title="샘플 애플리케이션으로 시작하기"></a>샘플 애플리케이션으로 시작하기</h4><p>자바 웹 애플리케이션을 배포하기 위해서 <code>웹 서버 환경</code>과 <code>Java 플랫폼 유형</code>을 선택하고 프로젝트에 맞는 자바 버전과 함께 <code>Amazon Linux 2023</code> 그리고 <code>샘플 애플리케이션</code>으로 시작하는 것을 권장한다. Elastic Beanstalk 에 대해서 경험이 있어도 CloudFormation에 의존하는 Beanstalk 구성의 특성 상 처음부터 환경이 구성되지 않을 수도 있다. </p><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/02.png"></p><blockquote><p>참고로 <strong>Amazon Linux 2은 2025년 지원 종료(EOL) 예정</strong> 이므로 환경 구성 확장 시 패키지 설치가 어렵다면 Amazon Linux 2를 선택해도 아직까지는 괜찮습니다. 또한, Elastic Beanstalk 환경 구성을 완료했어도 여러번 환경을 재 구성해보기를 바랍니다.</p></blockquote><h4 id="애플리케이션-소스-번들"><a href="#애플리케이션-소스-번들" class="headerlink" title="애플리케이션 소스 번들"></a>애플리케이션 소스 번들</h4><p>애플리케이션을 배포하는 경우 단일 Jar 파일 보다는 애플리케이션 소스 번들을 구성하여 업로드하는 것을 권장한다. 일반적으로 JVM Option 을 적용할 필요가 생기므로 Procfile에 기본적인 자바 애플리케이션 명령어를 정의해놓고 환경 속성을 통해 사용자 정의하는 구성을 추천한다.</p><pre class="language-config" data-language="config"><div class="caption"><span>Procfile</span></div><code class="language-config">web: java -Dfile.encoding&#x3D;UTF-8 -Djava.net.preferIPv4Stack&#x3D;true -Xmx1g -jar app.jar</code></pre><blockquote><p>공식 문서에 포함되어있는 내용은 아니지만 자바 옵션은 _<strong>JAVA_OPTIONS</strong> 또는 <strong>JAVA_TOOL_OPTIONS</strong> 환경 속성으로 대체할 수 있습니다. 그러므로 굳이 자바 옵션을 조정하기 위해서 애플리케이션 소스 번들의 Procfile을 수정할 필요는 없답니다. <a href="https://woowabros.github.io/woowabros/2017/08/07/ebextension.html">Elastic Beanstalk Configuration files(.ebextensions)</a>에서도 뉴렐릭 자바 에이전트를 실행하기 위해서 Procfile에 정의하지만 JAVA_TOOL_OPTIONS 환경 속성을 이용하는 것이 더 유연한 구성이 될 겁니다.</p></blockquote><h4 id="서비스-액세스-구성"><a href="#서비스-액세스-구성" class="headerlink" title="서비스 액세스 구성"></a>서비스 액세스 구성</h4><p>Elastic Beanstalk 이 개발자 대신에 EC2 인스턴스를 만들고 오토스케일링이 가능한 인프라를 구성하기 위해서는 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/concepts-roles-service.html">서비스 역할</a> 뿐만 아니라 E2 인스턴스 프로파일에 대한 IAM 이 필요하다. 예전에는 EC2 인스턴스 프로파일에 사용될 역할도 자동으로 만들어주었으나 AWS 보안 정책 변경으로 인해 <code>aws-elasticbeanstalk-ec2-role</code>을 만들어주지 않는다고 한다. (참고 - <a href="https://stackoverflow.com/a/76620598">https://stackoverflow.com/a/76620598</a>)</p><h5 id="aws-elasticbeanstalk-service-role"><a href="#aws-elasticbeanstalk-service-role" class="headerlink" title="aws-elasticbeanstalk-service-role"></a>aws-elasticbeanstalk-service-role</h5><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/05.png"></p><blockquote><p>서비스 역할을 자동 생성하는 경우에도 위 이미지와 다르게 AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy 가 정책으로 포함되는 것 같네요. AWSElasticBeanstalkService 가 포함되어있다면 오래전에 이미 생성했음을 의미합니다.</p></blockquote><h5 id="aws-elasticbeanstalk-ec2-role"><a href="#aws-elasticbeanstalk-ec2-role" class="headerlink" title="aws-elasticbeanstalk-ec2-role"></a>aws-elasticbeanstalk-ec2-role</h5><p>EC2 인스턴스 프로파일로 지정하는 IAM 역할에는 신뢰할 수 있는 엔터티로 ec2.amazonaws.com 서비스를 등록해야하며 구성하고자 하는 환경에 따라 아래의 세가지 정책을 권한으로 등록해야한다. 이에 대한 정보는 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/iam-instanceprofile.html">Elastic Beanstalk 인스턴스 프로파일 관리</a>에 설명되어있다.</p><ul><li>AWSElasticBeanstalkWebTier</li><li>AWSElasticBeanstalkWorkerTier</li><li>AWSElasticBeanstalkMulticontainerDocker</li></ul><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/06.png"></p><blockquote><p>기본적으로는 aws-elasticbeanstalk-service-role 과 aws-elasticbeanstalk-ec2-role 이라는 이름의 역할을 찾아 선택해주는 것 같습니다. 만약 별도의 이름을 가진 IAM 역할을 만드는 경우에는 잘못 선택하지 않도록 주의해야합니다. 웹 UI 콘솔에서는 잘못된 IAM 역할을 선택하는 걸 검증해주지 않습니다.</p></blockquote><h4 id="퍼블릭-서브넷"><a href="#퍼블릭-서브넷" class="headerlink" title="퍼블릭 서브넷"></a>퍼블릭 서브넷</h4><p>단일 인스턴스가 아닌 로드 밸런서를 통해 오토스케일링이 가능한 환경을 구성하고자 하는 경우라면 퍼블릭 서브넷을 지정하는 것에 주의해야할 필요가 있다. UI 콘솔도 모든 것에 친절하지는 않아서 가시성을 퍼블릭으로 선택하더라도 인터넷 게이트웨이가 연결되지 않은 프라이빗 서브넷도 선택 옵션으로 노출되므로 퍼블릭 서브넷이 아닌 것을 선택하지 않도록 주의해야한다.</p><ul><li>단일 인스턴스이면서 인스턴스 서브넷이 프라이빗 서브넷으로 지정되는 경우 - 환경 생성 불가</li><li>고가용성 설정이면서 로드밸런서 서브넷이 프라이빗 서브넷으로 지정되는 경우 - 환경 생성 가능</li></ul><blockquote><p>올바른 가용 영역의 서브넷으로 구성했는지 VPC 구성을 검토하셔야합니다. 인스턴스 서브넷과 로드밸런서 서브넷 모두 잘못된 서브넷을 선택하는 것을 UI 웹 콘솔에서는 검증해주지 않습니다. 환경이 만들어지더라도 Elastic Beanstalk 에서도 올바른 전환이 어려울 수 있어 주의해야할 선택 항목입니다.</p></blockquote><h4 id="인스턴스-루트-볼륨"><a href="#인스턴스-루트-볼륨" class="headerlink" title="인스턴스 루트 볼륨"></a>인스턴스 루트 볼륨</h4><p>인스턴스 트래픽 및 크기 조정 구성 메뉴에서 선택사항이긴 하나 루트 볼륨의 크기가 8GB 인 것에 주의할 필요가 있다. 일반적으로 8GB 이어도 충분하다고 생각되지만 예기치 않은 상황을 방지하기 위해서 범용 3(SSD) 및 30GB 이상의 크기를 가지는 것을 권장한다. </p><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/07.png"></p><blockquote><p>인스턴스 메타데이터 서비스(IMDS)는 IMDSv2를 사용하도록 IMDSv1 비활성화 선택 기본값을 그대로 유지하는 걸 권장합니다. 인스턴스 메타데이터 서비스는 플랫폼 확장 시 인스턴스 정보를 조회하는데 사용할 수 있습니다. 더 자세한 내용이 궁금하다면 <a href="/beanstalk-platforms-linux-extend/">Beanstalk Linux 플랫폼 확장에 대해서</a> 글을 참조하세요.</p></blockquote><h4 id="EC2-인스턴스-확인"><a href="#EC2-인스턴스-확인" class="headerlink" title="EC2 인스턴스 확인"></a>EC2 인스턴스 확인</h4><p>Elastic Beanstalk 환경의 이벤트에 환경 구성에 대한 성공 메시지를 확인했다면 도메인 주소를 클릭하여 샘플 애플리케이션에 의한 Congratulations 화면이 노출되는지 확인해야한다. 환경이 생성되었어도 구성 상 이상한 설정이 있다면 EC2 인스턴스에 접속하여 eb-engine(&#x2F;var&#x2F;log&#x2F;eb-engine.log)를 살펴보아야 한다. 다음과 같이 &#x2F;opt&#x2F;elasticbeanstalk&#x2F;bin&#x2F;get-config 도구로 EC2 컨테이너에서 살펴보아야할 로그 파일 목록을 알 수 있다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>/opt/elasticbeanstalk/bin/get-config</span></div><code class="language-bash"><span class="token punctuation">[</span>root@ip-10-0-2-119 ~<span class="token punctuation">]</span><span class="token comment"># /opt/elasticbeanstalk/bin/get-config --output YAML container</span>common_log_list:    - /var/log/eb-engine.log    - /var/log/eb-hooks.logdefault_log_list:    - /var/log/nginx/access.log    - /var/log/nginx/error.log    - /var/log/web.stdout.logenvironment_name: Ss-envinstance_port: <span class="token string">"80"</span>log_group_name_prefix: /aws/elasticbeanstalkproxy_server: nginxstatic_files:    - <span class="token string">""</span>xray_enabled: <span class="token string">"false"</span></code></pre><blockquote><p>환경 생성이 완료되었을때도 eb-engine 로그를 살펴보고 어떻게 애플리케이션을 배포했는지 확인해보는게 좋습니다. Java SE 플랫폼 환경에서는 Nginx를 리버스 프록시로 구성하고 애플리케이션이 5000 포트로 실행된다는 가정으로 트래픽을 전달합니다. 참고로 샘플 애플리케이션은 EC2 인스턴스 내에서 빌드되어 실행되는 것으로 확인할 수 있습니다.</p></blockquote><h4 id="애플리케이션-빌드-및-배포"><a href="#애플리케이션-빌드-및-배포" class="headerlink" title="애플리케이션 빌드 및 배포"></a>애플리케이션 빌드 및 배포</h4><p>샘플 애플리케이션 배포가 완료되었다면 우리가 개발한 자바 웹 애플리케이션을 빌드하고 배포해야한다. 아직까지는 플랫폼 확장이 필요하지 않다는 가정하에 애플리케이션을 패키징하고 애플리케이션 소스 번들을 압축 파일로 만드는 것을 알아보자. 애플리케이션 소스 번들에는 Procfile과 실행 가능하도록 패키징된 Jar 또는 War 파일을 포함하여야 한다.</p><ul><li>Procfile</li><li>application.jar</li></ul><p>애플리케이션 소스 번들은 압축 명령어로도 만들 수 있으나 Gradle 을 사용중이라면 Zip 태스크를 이용해서 Beanstalk 배포를 위한 빌드 태스크를 만들어서 실행할 수 있다. 다음은 gradle-8.5 기준으로 작성한 태스크 예시이다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'procfile'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bootJar<span class="token punctuation">.</span>archiveFileName<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'application.jar'</span><span class="token punctuation">)</span>    dependsOn <span class="token string">'bootJar'</span>    doFirst <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"build/libs"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"Procfile"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"web: java -jar </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">bootJar<span class="token punctuation">.</span>archiveFileName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'zipSourceBundle'</span><span class="token punctuation">,</span> Zip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dependsOn <span class="token string">'clean'</span>    dependsOn <span class="token string">'procfile'</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'build/libs'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'application.jar'</span><span class="token punctuation">)</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'Procfile'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    archiveBaseName <span class="token operator">=</span> <span class="token string">'beanstalk'</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash">./gradlew zipSourceBundle</code></pre><blockquote><p>다른 Elastic Beanstalk 관련 글과는 다르게 Procfile에 JVM 옵션을 정의하지 않았는데 Java SE 플랫폼의 JVM 특성 상 자바 환경 변수를 통해 별도로 주입이 가능하기 때문입니다. Elastic Beanstalk 문서에는 별도로 기재되어있지는 않지만 JVMTI 표준 스펙인 JAVA_TOOL_OPTIONS 또는 _JAVA_OPTIONS 환경 변수를 이용할 수 있습니다.</p></blockquote><h4 id="애플리케이션-환경-속성"><a href="#애플리케이션-환경-속성" class="headerlink" title="애플리케이션 환경 속성"></a>애플리케이션 환경 속성</h4><p>애플리케이션 소스 번들을 업로드하기 전에 샘플 애플리케이션을 배포중인 상태에서 환경 속성을 먼저 등록하는 것을 추천한다. 앞서 애플리케이션 소스 번들에는 프로파일 지정이나 JVM 옵션을 정의하지 않았기 때문에 올바르게 실행될 수 있도록 해야한다. 구성 → 업데이트, 모니터링 및 로깅 → 플랫폼 소프트웨어 → 환경 속성에 JAVA_TOOL_OPTIONS를 추가하자. 환경 속성을 추가하는 것은 EC2 인스턴스를 종료하지 않고 애플리케이션 배포 과정만 다시 수행하게 된다.</p><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/08.png"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-10-0-2-119 ~<span class="token punctuation">]</span><span class="token comment"># jps -v</span><span class="token number">6226</span> Jps <span class="token parameter variable">-Dapplication.home</span><span class="token operator">=</span>/usr/lib/jvm/java-17-amazon-corretto.x86_64 <span class="token parameter variable">-Xms8m</span> <span class="token parameter variable">-Djdk.module.main</span><span class="token operator">=</span>jdk.jcmd<span class="token number">6148</span> sample-app-1.0-jar-with-dependencies.jar <span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>UTF-8 <span class="token parameter variable">-Djava.net.preferIPv4Stack</span><span class="token operator">=</span>true <span class="token parameter variable">-Xms250m</span> <span class="token parameter variable">-Xmx250m</span></code></pre><blockquote><p>위 이미지 상에는 JAVA_TOOL_OPTIONS 와 _JAVA_OPTIONS를 활용할 수 있음을 보여주기 위해 별도로 나누어서 사용했습니다. 혼용해서 사용하는 경우 JAVA_TOOL_OPTIONS이 먼저 나열되고 그 다음에 _JAVA_OPTIONS 이 적용되므로 순서에 주의해야할 필요가 있습니다. 개인적으로는 JAVA_TOOL_OPTIONS 만 사용하는 것을 권장합니다.</p></blockquote><h4 id="플랫폼-확장-리버스-프록시-구성"><a href="#플랫폼-확장-리버스-프록시-구성" class="headerlink" title="플랫폼 확장 - 리버스 프록시 구성"></a>플랫폼 확장 - 리버스 프록시 구성</h4><p>애플리케이션이 5000 포트를 사용하지 않는다면 PORT 환경 변수로 지정하거나 리버스 프록시 구성으로 제공하는 기본 Nginx 설정을 대체할 수 있다. <a href="/beanstalk-platforms-linux-extend/">Beanstalk Linux 플랫폼 확장에 대해서</a> 처럼 아래의 두개의 파일을 애플리케이션 소스 번들에 포함시켜도 된다.</p><pre class="language-conf" data-language="conf"><div class="caption"><span>.platform/nginx/conf.d/upstream.conf</span></div><code class="language-conf">upstream web &#123;    server 127.0.0.1:5000;    keepalive 1024;&#125;</code></pre><pre class="language-conf" data-language="conf"><div class="caption"><span>.platform/nginx/conf.d/elasticbeanstalk/00_application.conf</span></div><code class="language-conf">location &#x2F; &#123;  proxy_pass          http:&#x2F;&#x2F;web;  proxy_http_version  1.1;  proxy_set_header    Connection          $connection_upgrade;  proxy_set_header    Upgrade             $http_upgrade;  proxy_set_header    Host                $host;  proxy_set_header    X-Real-IP           $remote_addr;  proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;&#125;</code></pre><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'zipSourceBundle'</span><span class="token punctuation">,</span> Zip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dependsOn <span class="token string">'clean'</span>    dependsOn <span class="token string">'procfile'</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'build/libs'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'application.jar'</span><span class="token punctuation">)</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'Procfile'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'beanstalk'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'.platform/nginx/conf.d/upstream.conf'</span><span class="token punctuation">)</span>        <span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'.platform/nginx/conf.d/elasticbeanstalk/00_application.conf'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    archiveBaseName <span class="token operator">=</span> <span class="token string">'beanstalk'</span><span class="token punctuation">&#125;</span></code></pre><p>기본으로 제공하는 nginx.conf 에 의존하되 미리 정의되어있는 00_application.conf 파일이 대체되도록 zipSourceBundle 태스크를 수정하였다. 애플리케이션 배포에 성공하였다면 도메인 주소 또는 EC2 인스턴스에 접속해보면 샘플 애플리케이션에서 우리가 패키징하여 전달한 애플리케이션 파일이 실행되고 있음을 확인할 수 있다.</p><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/09.png"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ip-10-0-2-119 ~<span class="token punctuation">]</span><span class="token comment"># jps -v</span><span class="token number">6964</span> application.jar <span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>UTF-8 <span class="token parameter variable">-Djava.net.preferIPv4Stack</span><span class="token operator">=</span>true <span class="token parameter variable">-Xms250m</span> <span class="token parameter variable">-Xmx250m</span><span class="token number">7109</span> Jps <span class="token parameter variable">-Dapplication.home</span><span class="token operator">=</span>/usr/lib/jvm/java-17-amazon-corretto.x86_64 <span class="token parameter variable">-Xms8m</span> <span class="token parameter variable">-Djdk.module.main</span><span class="token operator">=</span>jdk.jcmd</code></pre><blockquote><p>여러분의 애플리케이션 배포를 완료했다면 <a href="/beanstalk-platforms-linux-extend/">Beanstalk Linux 플랫폼 확장에 대해서</a>를 참고해보세요. 애플리케이션에 더 적합한 환경을 구성할 수 있는 방법을 알 수 있습니다.</p></blockquote><h4 id="Elastic-Beanstalk-시작하기-트러블-슈팅"><a href="#Elastic-Beanstalk-시작하기-트러블-슈팅" class="headerlink" title="Elastic Beanstalk 시작하기 트러블 슈팅"></a>Elastic Beanstalk 시작하기 트러블 슈팅</h4><h5 id="인스턴스-서브넷의-가용-영역에서-지원하지-않는-EC2-유형-문제"><a href="#인스턴스-서브넷의-가용-영역에서-지원하지-않는-EC2-유형-문제" class="headerlink" title="인스턴스 서브넷의 가용 영역에서 지원하지 않는 EC2 유형 문제"></a>인스턴스 서브넷의 가용 영역에서 지원하지 않는 EC2 유형 문제</h5><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/10.png"></p><p>Elastic Beanstalk 환경 구성 시 인스턴스 서브넷으로 선택한 가용 영역 목록에 따라서 지원하지 않는 EC2 유형은 선택할 수 없다. 다만, x86_64 아키텍처를 선택해두어도 arm 아키텍처에 해당하는 XXg 인스턴스 유형이 목록에 표시되어 선택할 수 있지만 환경 생성 시 오류가 발생하여 확인을 요구한다. 또한, 프리티어 사용자의 경우 단일 인스턴스(프리티어 사용 가능) 사전 설정을 선택하는 경우에도 인스턴스 서브넷이 ap-northeast-2a 만 선택되어있지 않는다면 프리티어 대상인 t2.micro 유형을 선택할 수 없다.</p><blockquote><p>프리티어 사용자가 단일 인스턴스로 선택하고나서 인스턴스 서브넷을 잘못 지정하더라도 t3.micro 와 t3.small 을 기본적으로 선택하고 있습니다. 사용자 경험 상 ap-northest-2a 를 선택하더라도 t2.micro를 기본으로 부여해주지 않기 때문에 주의해야할 선택 항목에 해당합니다.</p></blockquote><p>환경 생성 이후에는 프로세서 아키텍처를 변경할 수 없으므로 인스턴스 유형이 제한된다는 것을 알고 있어야 한다. 환경을 생성할 당시에는 선택된 아키텍처 이외에 지원하지 않는 EC2 인스턴스 유형도 선택할 수 있도록 목록에는 표시되고 있어 주의가 필요하다. 프로세서 아키텍처를 arm64 로 선택하는 경우에도 선택된 AZ에 ap-northeast-2d 가 포함되어있다면 지원하지 않는 유형에 t4g가 포함되어 있기 때문에 t4g.micro를 기본으로 선택해주지 않는다.</p><h4 id="인스턴스-서브넷과-로드밸런서-서브넷의-퍼블릭-여부-문제"><a href="#인스턴스-서브넷과-로드밸런서-서브넷의-퍼블릭-여부-문제" class="headerlink" title="인스턴스 서브넷과 로드밸런서 서브넷의 퍼블릭 여부 문제"></a>인스턴스 서브넷과 로드밸런서 서브넷의 퍼블릭 여부 문제</h4><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/11.png"></p><p>인스턴스 서브넷과 로드밸런서 서브넷 모두 퍼블릭으로 선택하는 것은 인터넷 요청을 처리하기 위함이므로 인터넷 게이트웨이에 연결되어있는 퍼블릭 서브넷을 지정해야한다. 웹 UI 콘솔 상 선택하는 서브넷이 인터넷 게이트웨이가 연결되었는지까지는 확인해주지 않으므로 올바르지 않은 구성으로 환경 생성을 시작할 수 있다. 만일, 단일 인스턴스로 퍼블릭 체크를 한 후 인스턴스 서브넷을 인터넷 게이트웨이가 연결되지 않은 프라이빗 서브넷으로 선택하는 경우 Elastic Beanstalk 이 환경 생성을 시도하다가 멈추는 상황을 만날 수 있다.</p><pre class="language-none"><code class="language-none">The EC2 instances failed to communicate with AWS Elastic Beanstalk, either because of configuration problems with the VPC or a failed EC2 instance. Check your VPC configuration and try launching the environment again.</code></pre><blockquote><p>Elastic Beanstalk 이 환경 생성에 문제가 있는 경우 개발자가 직접 CloudFormation 에서 해당 스택을 찾아 삭제를 시도해야합니다. Elastic Beanstalk 서비스가 CloudFormation 에 의한 코드 기반 구성에 의존하기 때문이며 Elastic Beanstalk 이 환경을 업데이트하는 도중에는 웹 UI 콘솔 기능이 제한해두었기 때문입니다.</p></blockquote><h5 id="상태-보고-기본-선택-시-관리형-업데이트-설정-불가"><a href="#상태-보고-기본-선택-시-관리형-업데이트-설정-불가" class="headerlink" title="상태 보고 기본 선택 시 관리형 업데이트 설정 불가"></a>상태 보고 기본 선택 시 관리형 업데이트 설정 불가</h5><p><img data-src="/images/posts/deploy-spring-boot-with-beanstalk-java-se-platform/12.png"></p><p>상태 보고 옵션을 <code>시스템 강화됨</code>에서 기본으로 선택하고나서 <code>관리형 업데이트</code>를 활성화를 유지하는 경우 UI 콘솔 상 설명을 제공하지 않아도 환경 생성 시도 시 오류가 발생한다. 관리형 업데이트를 설정하고자 하는 경우에는 반드시 상태 보고를 시스템 강화됨으로 설정해야한다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>상태 보고 시스템 기본 선택 시 관리형 업데이트 불가</span></div><code class="language-bash">Invalid option specification <span class="token punctuation">(</span>Namespace: <span class="token string">'aws:elasticbeanstalk:managedactions'</span>, OptionName: <span class="token string">'ManagedActionsEnabled'</span><span class="token punctuation">)</span>: Managed platform updates require enhanced health reporting <span class="token punctuation">(</span>option SystemType <span class="token keyword">in</span> namespace aws:elasticbeanstalk:healthreporting:system<span class="token punctuation">)</span>.</code></pre><h4 id="Elastic-Beanstalk-환경-구성에-대하여"><a href="#Elastic-Beanstalk-환경-구성에-대하여" class="headerlink" title="Elastic Beanstalk 환경 구성에 대하여"></a>Elastic Beanstalk 환경 구성에 대하여</h4><p>많은 개발자들이 Elastic Beanstalk 환경을 구성하는 것에 대한 글을 참고하며 따라하겠지만 리눅스 커널 튜닝이나 리버스 프록시 구성과 같은 플랫폼 확장에 대해서는 단순히 따라하기보다는 그것이 반드시 필요한지를 고민해볼 필요가 있다. 오래된 글이 많기 때문에 최신 리눅스 커널의 경우에는 리눅스 커널 파라미터 조정이 필요하지 않을 정도로 기본값이 설정되어있다. 애플리케이션 운영에 문제가 없는데도 불구하고 리눅스 시스템을 최적화한다고 시도해놓으면 왜 그 설정이 필요한지 이해하지 못하는 환경을 만들게 된다.</p><p>또한, 언제나 Elastic Beanstalk 에 의한 애플리케이션 운영 시 예기치 않은 상황이 발생할 수 있으므로 문제에 대한 원인을 찾아가기 쉽도록 어떤 정보들을 참고할 수 있는지를 미리 인지하는게 좋다. 가장 기본적으로는 Elastic Beanstalk 에서 제공하는 이벤트 정보로 구별할 수 있고 더 나아가서는 직접 EC2 인스턴스까지 접근할 수 있는 방안을 마련해두는 것이 필요하다. <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/using-features.logging.html?icmpid=docs_elasticbeanstalk_console">Elastic Beanstalk 환경에서 Amazon EC2 인스턴스 로그 보기</a>는 직접 EC2 인스턴스에 접근하지 않아도 일련의 로그들을 조회할 수 있는 좋은 방법이다.</p><p>모든 개발자가 어떤 기술을 사용한다고해서 동일한 경험을 할 수 있는게 아니므로 지속적인 학습은 중요한 듯 싶다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;오래 전 2017년에 작성한 &lt;a href=&quot;/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment&quot;&gt;AWS Elastic Beanstalk</summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
    <category term="Elastic Beanstalk" scheme="https://kdevkr.github.io/tags/Elastic-Beanstalk/"/>
    
  </entry>
  
  <entry>
    <title>아이패드 에어에서 무선 네트워크가 표시되지 않은 이유</title>
    <link href="https://kdevkr.github.io/ipad-air-not-found-wifi-network/"/>
    <id>https://kdevkr.github.io/ipad-air-not-found-wifi-network/</id>
    <published>2023-12-12T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>개발 관련 트러블슈팅은 아니지만 오랜만에 경험하는 한글 인코딩 문제가 포함되어있어 공유하려고 합니다. 여자친구에게 선물해준 아이패드 에어 5세대에서 사용중인 공유기의 무선 네트워크가 와이파이 목록에 표시되지 않는다고 하여 원인을 찾아 해결하는 과정에서 일어난 이야기입니다.</p></blockquote><h4 id="공유기-와이파이가-아이패드에-표시되지-않는다"><a href="#공유기-와이파이가-아이패드에-표시되지-않는다" class="headerlink" title="공유기 와이파이가 아이패드에 표시되지 않는다"></a>공유기 와이파이가 아이패드에 표시되지 않는다</h4><p>아이패드 에어 5세대를 수령하고나서 생각보다 많은 불량 테스트를 해야한다고 영상을 공유해줬는데 별다른 문제는 없다고 했지만 뜬금없이 <code>사무실의 공유기가 와이파이 목록에 표시되지 않는다</code>는 이야기를 들었다. 조금은 이해되지 않는 문제이기도 하고 전자 장비의 네트워크 문제는 일개 웹 개발자가 해결할 수 있는 영역의 문제가 아닐 수도 있어서 ChatGTP 에도 물어보고 이리저리 검색을 해보았지만 네트워크 연결에 대한 이슈는 있어도 무선 네트워크 자체가 표시되지 않는다는 문의는 딱히 보이지 않았다.</p><p><img data-src="/images/posts/ipad-air-not-found-wifi/07.jpg" alt="문제의 현상을 만난 아이패드 에어 5세대 핑크"></p><h4 id="네트워크-이름-숨김의-문제는-아니다"><a href="#네트워크-이름-숨김의-문제는-아니다" class="headerlink" title="네트워크 이름 숨김의 문제는 아니다"></a>네트워크 이름 숨김의 문제는 아니다</h4><p>네트워크가 표시되지 않는다는 물음에 처음으로 생각했던 원인은 혹시나 <code>공유기의 무선 네트워크 이름(SSID)을 숨긴 상태</code>는 아닐까였다. 팀뷰어 프로그램으로 원격을 시도해서 공유기 설정(192.168.0.1)로 들어가 확인해보았지만 네트워크 이름 알림은 제대로 체크가 되어있는 상황이었다. 아이패드 이외에 갤럭시와 같은 휴대폰에서는 정상적으로 네트워크가 표시되고 연결할 수 있는 상황이었다.</p><p><img data-src="/images/posts/ipad-air-not-found-wifi/08.png" alt="인터넷 속도 26Mbps?..."></p><h4 id="와이파이-규격의-호환성-문제일까"><a href="#와이파이-규격의-호환성-문제일까" class="headerlink" title="와이파이 규격의 호환성 문제일까"></a>와이파이 규격의 호환성 문제일까</h4><p>아이패드 에어 5세대의 와이파이 규격은 <code>Wi-Fi 6</code>로 최신 와이파이 규격이기에 혹시나 사무실에서 사용중인 <code>공유기가 오래되어 지원하지 않는 와이파이 규격인가</code>를 의심했다. 공유기의 제품명을 확인해보니 <a href="https://namu.wiki/w/ipTIME%20N704BCM">ipTIME N704BCM</a> 이었고 무려 2012년에 출시해서 아직도 판매하는 업체가 존재하는 것을 확인할 수 있었다. 와이파이 지원 규격은 <code>Wi-Fi 4</code>이기 때문에 <a href="https://support.apple.com/ko-kr/guide/deployment/depf9bb7e412/web">아이패드 에어의 와이파이 호환성</a> 정보를 찾아본 결과 <code>802.11n(Wi-Fi 4)를 지원</code>하는 것으로 나타났다. 그러면 왜 나오지 않는건데?!</p><h4 id="네트워크-표시가-되지-않은-원인은-인증-및-암호화-방식"><a href="#네트워크-표시가-되지-않은-원인은-인증-및-암호화-방식" class="headerlink" title="네트워크 표시가 되지 않은 원인은 인증 및 암호화 방식"></a>네트워크 표시가 되지 않은 원인은 인증 및 암호화 방식</h4><p>와이파이 목록에 표시되지 않는 원인을 찾아가기 위해 이리 저리 검색해보던 중에 <a href="https://support.apple.com/ko-kr/HT202068">라우터에서 피해야 할 취약한 보안 설정</a>으로 <code>WPA/WPA2 혼합 모드는 더이상 사용되지 않는 구형 보안 프로토콜에 속한다</code>는 것이다. 보안이 취약한 네트워크라는 경고가 표시되더라도 네트워크 목록에 나타나야하고 연결할 수는 있어야하는데 <a href="https://support.apple.com/ko-kr/guide/security/sec8a67fa93d/web">무선 네트워크에 대한 보안 연결</a> 정보에서 <code>전환형 WPA/WPA2 는 향후 소프트웨어 버전에서 제거될 수 있다</code>는 문구를 확인할 수 있어서 혹시 몰라 사용중이었던 공유기의 무선 설정을 확인해보니 <code>WPAPSK/WPA2PSK + AES</code>로 선택되어있어 권장 설정에 해당하는 <code>WPA2PSAK + AES</code>로 변경했다.</p><p><img data-src="/images/posts/ipad-air-not-found-wifi/01.png" alt="WPA/WPA2 혼합 모드"></p><p><img data-src="/images/posts/ipad-air-not-found-wifi/02.png" alt="개인용 WPA2"></p><blockquote><p>인증 및 암호화 방식을 변경하고나서도 네트워크 목록에 표시되지 않는다고 했으나 알고보니 네트워크 이름의 한글이 깨진 상태로 표시되고 있어서 인지를 못했던 것이다. 여자친구는 개발자가 아닌 일반인에 해당하므로 평소에 알고 있는 한글로 된 이름을 찾고 있었던 것이다.</p></blockquote><h4 id="네트워크-이름의-한글이-깨지는-문제"><a href="#네트워크-이름의-한글이-깨지는-문제" class="headerlink" title="네트워크 이름의 한글이 깨지는 문제"></a>네트워크 이름의 한글이 깨지는 문제</h4><p><img data-src="/images/posts/ipad-air-not-found-wifi/04.jpg" alt="세모???로 표시되는 한글"></p><p>웹 개발자 입장에서 오랜만에 경험하는 한글 인코딩 문제인데 공유기가 오래되고 펌웨어 업데이트를 수행하지 않은지 오래되다보니 <code>UTF-8</code> 인코딩이 아닌 <code>EUC-KR</code>로 되어있던 것 같다. 공유기의 펌웨어 버전은 9.26 이었는데 아이피타임 웹사이트에서 찾아보니 2014년 8월에 업데이트된 버전으로 무려 약 10년이나 지난 버전에 해당된다. 아이피타임 공유기 설정 상 네트워크 이름(SSID)의 인코딩을 설정할 수 있도록 제공하는 부분은 없으므로 한글을 제대로 표시하기 위해서는 최신의 펌웨어 버전으로 업그레이드하는 방법 뿐이다.</p><p><img data-src="/images/posts/ipad-air-not-found-wifi/04.png" alt="ipTIME N704BCM 펌웨어 업데이트 일자"></p><blockquote><p>해당 제품으로 지원하는 가장 최신 펌웨어 버전으로 업그레이드 해도 인코딩 문제가 해결되는지는 명확하지 않다. 또한, 원격으로 설정해주려고 하기 때문에 펌웨어 업데이트 실패에 대한 상황에 대비할 수 없어서 한글이 깨지는 것을 보완하기 위해 영어도 함께 이름에 표기하는 것으로 조치해주려고 한다.</p></blockquote><p>그럼에도 이상한 부분은 갤럭시와 아이폰에서도 네트워크와 한글이 정상적으로 표시된다고 하기에 아이폰은 EUC-KR에 대한 호환을 지원하지만 아이패드의 경우 UTF-8 인코딩만 지원한다고 생각하는 편이 좋을 것 같다. 아무래도 남자친구가 개발자이기에 어떻게든 해결하게 되었던 것 같은데 포기한 사람들도 꽤나 많을 것 같은 문제로 생각되어 정리했다.  </p><p><img data-src="/images/posts/ipad-air-not-found-wifi/05.jpg" alt="아무튼 해결! &lt;span class=&quot;emoji&quot; alias=&quot;smile&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8&quot;&gt;&#x1f604;&lt;/span&gt;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;개발 관련 트러블슈팅은 아니지만 오랜만에 경험하는 한글 인코딩 문제가 포함되어있어 공유하려고 합니다. 여자친구에게 선물해준 아이패드 에어 5세대에서 사용중인 공유기의 무선 네트워크가 와이파이 목록에 표시되지 않는다고 하여 </summary>
      
    
    
    
    
    <category term="아이패드 에어" scheme="https://kdevkr.github.io/tags/%EC%95%84%EC%9D%B4%ED%8C%A8%EB%93%9C-%EC%97%90%EC%96%B4/"/>
    
    <category term="ipTIME 공유기" scheme="https://kdevkr.github.io/tags/ipTIME-%EA%B3%B5%EC%9C%A0%EA%B8%B0/"/>
    
    <category term="WPA2PSK" scheme="https://kdevkr.github.io/tags/WPA2PSK/"/>
    
    <category term="EUC-KR" scheme="https://kdevkr.github.io/tags/EUC-KR/"/>
    
  </entry>
  
  <entry>
    <title>Beanstalk Linux 플랫폼 확장에 대해서</title>
    <link href="https://kdevkr.github.io/beanstalk-platforms-linux-extend/"/>
    <id>https://kdevkr.github.io/beanstalk-platforms-linux-extend/</id>
    <published>2023-12-10T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>오랜만에 신규 프로젝트로 인하여 아마존 웹 서비스의 빈스톡 환경 구성에 대해서 살펴볼 기회가 있어 리눅스 플랫폼의 확장에 대해 더 자세하게 학습하고 어떻게 이용할 수 있는지 정리해보고자 한다. 예전과 다르게 변경되는 부분이 생각보다 많아서 오래전에 정리했던 <a href="/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment/">AWS Elastic Beanstalk Java SE 플랫폼 환경으로 애플리케이션 배포하기</a>라는 글은 올바르지 않은 내용을 포함하고 있음을 알린다.</p></blockquote><p>AWS Elastic Beanstalk 은 애플리케이션을 운영하기 위한 인프라를 쉽게 구성하고 배포할 수 있도록 관리해준다. 개발자가 인프라에 대해서 신경쓰지 않아도 트래픽이나 일정 임계값 기반으로 스케일 아웃이 가능하도록 설정할 수 있으며 다양한 언어로 작성되는 애플리케이션에 대해서 지원하고 심지어는 도커 컨테이너 내에서 실행하는 환경까지도 제공한다. Amazon EKS와 같은 쿠버네티스 인프라 환경을 구성할 필요가 없는 작은 규모의 프로젝트라면 AWS Elastic Beanstalk은 좋은 선택에 해당할 수 있다.</p><blockquote><p>개발 조직에서 쿠버네티스를 고민하고 있다면 정말로 쿠버네티스가 필요한 규모인가에 대해서 고민해볼 필요가 있다. 개인적으로 쿠버네티스가 필요해보이는 규모의 프로젝트는 생각보다 많지 않을거라고 생각하는 편이다. 최소한 쿠버네티스를 제대로 관리할 수 있는 운영 조직을 구성할 수 있어야한다.</p></blockquote><h4 id="샘플-애플리케이션"><a href="#샘플-애플리케이션" class="headerlink" title="샘플 애플리케이션"></a>샘플 애플리케이션</h4><p>AWS Elastic Beanstalk 을 사용하면 애플리케이션을 쉽게 배포할 수 있는 환경을 만들 수 있지만 개인적인 경험을 기반으로 이야기해보자면 처음에 환경을 구성해보고자하는 경우 생각보다 많은 오류를 경험하고 실패해서 환경을 지웠다가 새로 생성하는 경우가 많을 것이다. 빈스톡 환경에 대한 경험이 있더라도 최소한 처음에는 샘플 애플리케이션을 사용해서 환경을 시작하는 것을 권장한다. AWS CloudFormation 을 이용하여 Elastic Beanstalk 환경 스택을 구성하기 때문에 빈스톡 서비스에서 조차 해결할 수 없는 상태가 된다면 CloudFormation 에서 직접 스택을 수정하거나 삭제해야한다.</p><h4 id="애플리케이션-소스-번들"><a href="#애플리케이션-소스-번들" class="headerlink" title="애플리케이션 소스 번들"></a>애플리케이션 소스 번들</h4><p>플랫폼 확장에 대해서 이야기하기 앞서 빈스톡 환경에 애플리케이션 배포 시 사용되는 애플리케이션 소스 번들에 대해서 정리해보자. <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/applications-sourcebundle.html">애플리케이션 소스 번들</a>에 대한 주의사항으로 인해 애플리케이션 배포가 실패하여 롤백되는 경우도 있기 때문이다.</p><ul><li>단일 ZIP 파일 또는 WAR 파일이어야 한다.</li><li>소스 번들의 크기는 500 MB를 초과하지 않아야 한다.</li></ul><blockquote><p>단일 애플리케이션을 배포하더라도 ZIP 파일로 구성된 소스 번들을 사용하여 Procfile을 반드시 이용하기를 권장한다.</p></blockquote><h4 id="Elastic-Beanstalk-Linux-플랫폼-확장"><a href="#Elastic-Beanstalk-Linux-플랫폼-확장" class="headerlink" title="Elastic Beanstalk Linux 플랫폼 확장"></a>Elastic Beanstalk Linux 플랫폼 확장</h4><p><a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/platforms-linux.html">Elastic Beanstalk Linux 플랫폼</a>은 아마존 웹 서비스에서 제공하는 Amazon Linux를 기반으로 리눅스를 구성하는 환경을 말한다. 기본적으로 일반적인 리눅스 환경 설정을 제공하기는 하지만 애플리케이션 요구사항에 따라 보안 조치를 해야하거나 시간 설정 또는 모니터링 솔루션과의 연계를 위해 별도의 에이전트나 패키지를 설치하여 환경 구성을 확장해야할 수 있다. Elastic Beanstalk Linux 플랫폼 에서는 애플리케이션 소스 번들에 포함되는 .platform 또는 .ebextensions 폴더를 통해 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/platforms-linux-extend.html">플랫폼에 대해서 확장을 지원</a>한다.</p><blockquote><p>2023년 10월 19일부터 Amazon Liunx 2와 Amazon Linux 2023을 지원하고 있으며 AL2에 대해서는 2025년 6월 30일까지 지원 예정이다. AL2023 으로의 마이그레이션을 충분히 제공하기 위해 Amazon Linux 2 지원 종료 날짜(EOL)가 2023년 6월 30일에서 2025년 6월 30일로 2년 연장되었다.</p></blockquote><p>본 글에서는 자바 스프링 기반의 백엔드 개발자 기준의 Java SE 플랫폼에 대해서만 설명한다. 나머지 플랫폼에 대해서는 경험할 기회가 없기에 플랫폼 구성 확장 시 발생할 수 있는 여러가지 트러블슈팅에 대해서 공유하기가 어렵다. 아무튼 Elastic Beanstalk 에서 애플리케이션을 배포하기 위한 환경을 구성하는 과정, 애플리케이션을 배포하는 과정에 대해서 이해한다면 어떤 문제가 발생했을 때 어떤 부분의 로그를 확인해야하는지를 알 수 있다.</p><h4 id="리버스-프록시를-위한-Nginx-웹서버-구성"><a href="#리버스-프록시를-위한-Nginx-웹서버-구성" class="headerlink" title="리버스 프록시를 위한 Nginx 웹서버 구성"></a>리버스 프록시를 위한 Nginx 웹서버 구성</h4><p>Elastic Beanstalk Java SE 플랫폼에는 리버스 프록시 역할을 하며 캐시된 정적 콘텐츠를 제공하고 요청을 애플리케이션에 전달하는 nginx 서버가 포함되어 있다. 기본적인 설정을 제공하고 있어 .conf 파일을 포함시킬수도 있고 nginx.conf 파일을 완전히 대체할 수도 있다. Nginx 웹서버 구성을 확장하기 전에 기본적인 설정을 어떻게 제공하며 불필요한 확장을 수행하는 건 아닌지 확인하는 것이 좋다. <a href="https://jojoldu.tistory.com/322">AWS Beanstalk을 이용한 성능 튜닝 시리즈의 Nginx 튜닝</a> 에서 확인할 수 있는 <a href="https://nginx.org/en/docs/events.html">커넥션 처리를 위한 방식</a>을 epoll로 선택하고자 하는 경우는 고려해볼만 하다.</p><blockquote><p>events 디렉티브 위치 상 epoll 방식을 적용하기 위해서는 .platform&#x2F;nginx&#x2F;nginx.conf로 완전히 대체할 수 밖에 없다.</p></blockquote><p>다음은 Amazon Linux 2023 기반에서의 기본값을 토대로 일부 옵션을 적용한 것이다. include 위치에 따라서 어느 폴더에 설정 파일을 둘 수 있는지 잘 살펴보기를 바란다. 어차피 nginx.conf로 대체할 것이라면 nginx.conf 파일에 모든 설정을 두어도 상관이 없다.</p><pre class="language-conf" data-language="conf"><div class="caption"><span>.platform/nginx/nginx.conf</span></div><code class="language-conf">user                    nginx;error_log               &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;pid                     &#x2F;var&#x2F;run&#x2F;nginx.pid;worker_processes        auto;worker_rlimit_nofile    200000;events &#123;    use epoll;    worker_connections  1024;    multi_accept on;&#125;http &#123;    server_tokens off;    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type  application&#x2F;octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    include       conf.d&#x2F;*.conf;    map $http_upgrade $connection_upgrade &#123;        default     &quot;upgrade&quot;;    &#125;    server &#123;        listen        80 default_server;        access_log    &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main;        client_header_timeout 60;        client_body_timeout   60;        keepalive_timeout     60;        gzip                  off;        gzip_comp_level       4;        gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript application&#x2F;x-javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;        # Include the Elastic Beanstalk generated locations        include conf.d&#x2F;elasticbeanstalk&#x2F;*.conf;    &#125;&#125;</code></pre><pre class="language-conf" data-language="conf"><div class="caption"><span>.platform/nginx/conf.d/upstream.conf</span></div><code class="language-conf">upstream web &#123;    server 127.0.0.1:5000;    keepalive 1024;&#125;</code></pre><pre class="language-conf" data-language="conf"><div class="caption"><span>.platform/nginx/conf.d/elasticbeanstalk/00_application.conf</span></div><code class="language-conf">location &#x2F; &#123;  proxy_pass          http:&#x2F;&#x2F;web;  proxy_http_version  1.1;  proxy_set_header    Connection          $connection_upgrade;  proxy_set_header    Upgrade             $http_upgrade;  proxy_set_header    Host                $host;  proxy_set_header    X-Real-IP           $remote_addr;  proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;&#125;</code></pre><h4 id="플랫폼-스크립트-도구"><a href="#플랫폼-스크립트-도구" class="headerlink" title="플랫폼 스크립트 도구"></a>플랫폼 스크립트 도구</h4><p><code>/opt/elasticbeanstalk/bin/get-config</code>는 Amazon Linux 플랫폼을 사용하는 환경에 대해 AWS Elastic Beanstalk가 제공하는 도구이다. 플랫폼 혹은 컨테이너 정보를 조회하거나 환경 변수를 가져오는데 사용할 수 있다. 만약, 빈스톡에 의해 만들어진 EC2 인스턴스에 접속하여 현재 실행중인 애플리케이션 번들이 위치하는 폴더 또는 확인하고자 하는 로그가 어떤 위치에 있는지 알고 싶다면 아래와 같이 명령어를 수행하여 확인할 수 있다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /opt/elasticbeanstalk/bin/get-config --output YAML platformconfig</span>generalconfig:    appuser: webapp    appdeploydir: /var/app/current/    appstagingdir: /var/app/staging/    proxyserver: nginx    defaultinstanceport: <span class="token string">"80"</span>platformspecificconfig:    ApplicationPort: <span class="token string">"5000"</span>    JavaVersion: <span class="token string">"11"</span><span class="token comment"># /opt/elasticbeanstalk/bin/get-config --output YAML container</span>common_log_list:    - /var/log/eb-engine.log    - /var/log/eb-hooks.logdefault_log_list:    - /var/log/nginx/access.log    - /var/log/nginx/error.log    - /var/log/web.stdout.logenvironment_name: test-envinstance_port: <span class="token string">"80"</span>log_group_name_prefix: /aws/elasticbeanstalkproxy_server: nginxstatic_files:    - <span class="token string">""</span>xray_enabled: <span class="token string">"false"</span></code></pre><blockquote><p>AWS Elastic Beanstalk 환경에서 뉴렐릭 인프라 및 자바 에이전트를 설치하는 과정에서 활용할 예정이다.</p></blockquote><h4 id="인스턴스-메타데이터-서비스-구성"><a href="#인스턴스-메타데이터-서비스-구성" class="headerlink" title="인스턴스 메타데이터 서비스 구성"></a>인스턴스 메타데이터 서비스 구성</h4><p>현재 사용하고 있는 플랫폼 버전과 설정에 따라서 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/environments-cfg-ec2-imds.html#environments-cfg-ec2-imds.plat">IMDS에 대한 플랫폼 지원 여부</a>를 확인해보는게 좋다. 플랫폼 확장 구성 시 인스턴스 메타데이터 서비스를 이용해야할 필요성이 요구된다면 <code>IMDSv2</code>를 이용해야하는 환경에서는 인스턴스 메타데이터 서비스 접근을 위한 토큰을 먼저 발급한 뒤에 인스턴스 메타데이터 서비스에 요청해야한다.</p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>.ebextensions/00_init.config</span></div><code class="language-yaml"><span class="token key atrule">option_settings</span><span class="token punctuation">:</span>  <span class="token key atrule">aws:autoscaling:launchconfiguration</span><span class="token punctuation">:</span>    <span class="token key atrule">DisableIMDSv1</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>.ebextensions/02_newrelic-infra.config</span></div><code class="language-yaml"><span class="token key atrule">commands</span><span class="token punctuation">:</span>  <span class="token key atrule">02_configure-newrelic-infra</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      NEW_RELIC_LICENSE_KEY=`/opt/elasticbeanstalk/bin/get-config environment -k NEW_RELIC_LICENSE_KEY`      METADATA_TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`      INSTANCE_ID=`curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" http://169.254.169.254/latest/meta-data/instance-id`      ENVIRONMENT_NAME=`/opt/elasticbeanstalk/bin/get-config container -k environment_name`      NEW_RELIC_HOSTNAME="$&#123;ENVIRONMENT_NAME&#125;_$&#123;INSTANCE_ID&#125;"</span>      <span class="token key atrule">sudo sed -i "s/^license_key:.*/license_key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>NEW_RELIC_LICENSE_KEY<span class="token punctuation">&#125;</span>/g" /etc/newrelic<span class="token punctuation">-</span>infra.yml      <span class="token key atrule">sudo sed -i "s/^display_name:.*/display_name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>NEW_RELIC_HOSTNAME<span class="token punctuation">&#125;</span>/g" /etc/newrelic<span class="token punctuation">-</span>infra.yml      sudo systemctl restart newrelic<span class="token punctuation">-</span>infra      sudo rm <span class="token punctuation">-</span>r /etc/newrelic<span class="token punctuation">-</span>infra.<span class="token important">*.bak</span></code></pre><blockquote><p>조직에서 구성한 Beanstalk 환경마다 IMDSv1 옵션 설정이 다름을 확인했으나 다행히도 인스턴스 메타데이터 서비스를 활용하는 부분은 없었다. 참고로, IMDSv1의 경우 권한을 요구하지 않으므로 보안 취약점에 해당하므로 IMDSv1 옵션을 비활성화하는 것을 권고한다.</p></blockquote><h4 id="인스턴스-배포-워크플로우"><a href="#인스턴스-배포-워크플로우" class="headerlink" title="인스턴스 배포 워크플로우"></a>인스턴스 배포 워크플로우</h4><p><a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/platforms-linux-extend.html#platforms-linux-extend.workflow">인스턴스 배포 워크플로우</a>를 살펴보면 빈스톡에서 어떠한 과정으로 배포 단계를 거치는지를 설명한다. 구성 파일(.ebextensions)으로 뉴렐릭 에이전트를 설치할수도 있으나 플랫폼 확장(.platform)의 플랫폼 후크 스크립트로도 설치 명령어를 수행할 수 있다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>.platform/hooks/predeploy/01_newrelic.sh</span></div><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">NEW_RELIC_LICENSE_KEY</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/opt/elasticbeanstalk/bin/get-config environment <span class="token parameter variable">-k</span> NEW_RELIC_LICENSE_KEY<span class="token variable">`</span></span><span class="token assign-left variable">NEW_RELIC_APP_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/opt/elasticbeanstalk/bin/get-config environment <span class="token parameter variable">-k</span> NEW_RELIC_APP_NAME<span class="token variable">`</span></span><span class="token assign-left variable">METADATA_TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> PUT <span class="token string">"http://169.254.169.254/latest/api/token"</span> <span class="token parameter variable">-H</span> <span class="token string">"X-aws-ec2-metadata-token-ttl-seconds: 21600"</span><span class="token variable">`</span></span><span class="token assign-left variable">INSTANCE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-H</span> <span class="token string">"X-aws-ec2-metadata-token: <span class="token variable">$METADATA_TOKEN</span>"</span> http://169.254.169.254/latest/meta-data/instance-id<span class="token variable">`</span></span><span class="token assign-left variable">ENVIRONMENT_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/opt/elasticbeanstalk/bin/get-config container <span class="token parameter variable">-k</span> environment_name<span class="token variable">`</span></span><span class="token assign-left variable">NEW_RELIC_HOSTNAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;ENVIRONMENT_NAME&#125;</span>_<span class="token variable">$&#123;INSTANCE_ID&#125;</span>"</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/^license_key:.*/license_key: <span class="token variable">$&#123;NEW_RELIC_LICENSE_KEY&#125;</span>/g"</span> /var/app/newrelic/newrelic.yml<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/^app_name:.*/app_name: <span class="token variable">$&#123;NEW_RELIC_APP_NAME&#125;</span>/g"</span> /var/app/newrelic/newrelic.yml<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/^hostname:.*/hostname: <span class="token variable">$NEW_RELIC_HOSTNAME</span>/g"</span> /var/app/newrelic/newrelic.yml</code></pre><h4 id="뉴렐릭-인프라스트럭처-및-자바-에이전트-설치해보기"><a href="#뉴렐릭-인프라스트럭처-및-자바-에이전트-설치해보기" class="headerlink" title="뉴렐릭 인프라스트럭처 및 자바 에이전트 설치해보기"></a>뉴렐릭 인프라스트럭처 및 자바 에이전트 설치해보기</h4><pre class="language-yaml" data-language="yaml"><div class="caption"><span>.ebextensions/01_newrelic.config</span></div><code class="language-yaml"><span class="token key atrule">files</span><span class="token punctuation">:</span>  <span class="token key atrule">"/var/app/newrelic/newrelic.jar"</span><span class="token punctuation">:</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"000755"</span>    <span class="token key atrule">owner</span><span class="token punctuation">:</span> webapp    <span class="token key atrule">group</span><span class="token punctuation">:</span> webapp    <span class="token key atrule">source</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//download.newrelic.com/newrelic/java<span class="token punctuation">-</span>agent/newrelic<span class="token punctuation">-</span>agent/current/newrelic.jar  <span class="token key atrule">"/var/app/newrelic/newrelic.yml"</span><span class="token punctuation">:</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"000755"</span>    <span class="token key atrule">owner</span><span class="token punctuation">:</span> webapp    <span class="token key atrule">group</span><span class="token punctuation">:</span> webapp    <span class="token key atrule">source</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//download.newrelic.com/newrelic/java<span class="token punctuation">-</span>agent/newrelic<span class="token punctuation">-</span>agent/current/newrelic.yml<span class="token key atrule">commands</span><span class="token punctuation">:</span>  <span class="token key atrule">01_configure_newrelic</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      NEW_RELIC_LICENSE_KEY=`/opt/elasticbeanstalk/bin/get-config environment -k NEW_RELIC_LICENSE_KEY`      NEW_RELIC_APP_NAME=`/opt/elasticbeanstalk/bin/get-config environment -k NEW_RELIC_APP_NAME`      sed -i "s/&lt;%= license_key %>/$&#123;NEW_RELIC_LICENSE_KEY&#125;/g" /var/app/newrelic/newrelic.yml      sed -i "s/My Application/$&#123;NEW_RELIC_APP_NAME&#125;/g" /var/app/newrelic/newrelic.yml</span>  <span class="token key atrule">02_configure_newrelic_instance</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      METADATA_TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`      INSTANCE_ID=`curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" http://169.254.169.254/latest/meta-data/instance-id`      ENVIRONMENT_NAME=`/opt/elasticbeanstalk/bin/get-config container -k environment_name`      NEW_RELIC_HOSTNAME="$&#123;ENVIRONMENT_NAME&#125;_$&#123;INSTANCE_ID&#125;"      sed -i "s/^hostname:.*/hostname: $NEW_RELIC_HOSTNAME/g" /var/app/newrelic/newrelic.yml</span>  <span class="token key atrule">03_clear_newrelic_bak_files</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> sudo rm <span class="token punctuation">-</span>r /var/app/newrelic/newrelic.<span class="token important">*.bak</span></code></pre><p><img data-src="/images/posts/beanstalk-platforms-linux-extend/00.png" alt="NEW_RELIC_APP_NAME 과 NEW_RELIC_LICENSE_KEY 예시">  </p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>.ebextensions/02_newrelic-infra.config</span></div><code class="language-yaml"><span class="token key atrule">files</span><span class="token punctuation">:</span>  <span class="token key atrule">"/etc/newrelic-infra.yml"</span> <span class="token punctuation">:</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">"000644"</span>    <span class="token key atrule">owner</span><span class="token punctuation">:</span> root    <span class="token key atrule">group</span><span class="token punctuation">:</span> root    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      license_key:      display_name:</span><span class="token key atrule">commands</span><span class="token punctuation">:</span>  <span class="token key atrule">01_install-newrelic-infra</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      source "/etc/os-release"      ARCH=`uname -m`      sudo curl -o /etc/yum.repos.d/newrelic-infra.repo "https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/$VERSION_ID/$ARCH/newrelic-infra.repo"      sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'      sudo yum install newrelic-infra -y</span>  <span class="token key atrule">02_configure-newrelic-infra</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      NEW_RELIC_LICENSE_KEY=`/opt/elasticbeanstalk/bin/get-config environment -k NEW_RELIC_LICENSE_KEY`      METADATA_TOKEN=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`      INSTANCE_ID=`curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" http://169.254.169.254/latest/meta-data/instance-id`      ENVIRONMENT_NAME=`/opt/elasticbeanstalk/bin/get-config container -k environment_name`      NEW_RELIC_HOSTNAME="$&#123;ENVIRONMENT_NAME&#125;_$&#123;INSTANCE_ID&#125;"</span>      <span class="token key atrule">sudo sed -i "s/^license_key:.*/license_key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>NEW_RELIC_LICENSE_KEY<span class="token punctuation">&#125;</span>/g" /etc/newrelic<span class="token punctuation">-</span>infra.yml      <span class="token key atrule">sudo sed -i "s/^display_name:.*/display_name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>NEW_RELIC_HOSTNAME<span class="token punctuation">&#125;</span>/g" /etc/newrelic<span class="token punctuation">-</span>infra.yml      sudo systemctl restart newrelic<span class="token punctuation">-</span>infra      sudo rm <span class="token punctuation">-</span>r /etc/newrelic<span class="token punctuation">-</span>infra.<span class="token important">*.bak</span></code></pre><blockquote><p>뉴렐릭 인프라 에이전트 설치 시 Amazon Linux 버전과 ARM 아키텍처도 확인하여 설치될 수 있도록 하였다. </p></blockquote><pre class="language-bash" data-language="bash"><div class="caption"><span>.platform/confighooks/prebuild/00_hostname.sh</span></div><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">ENVIRONMENT_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/opt/elasticbeanstalk/bin/get-config container <span class="token parameter variable">-k</span> environment_name<span class="token variable">`</span></span><span class="token assign-left variable">METADATA_TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> PUT <span class="token string">"http://169.254.169.254/latest/api/token"</span> <span class="token parameter variable">-H</span> <span class="token string">"X-aws-ec2-metadata-token-ttl-seconds: 21600"</span><span class="token variable">`</span></span><span class="token assign-left variable">INSTANCE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-H</span> <span class="token string">"X-aws-ec2-metadata-token: <span class="token variable">$METADATA_TOKEN</span>"</span> http://169.254.169.254/latest/meta-data/instance-id<span class="token variable">`</span></span><span class="token function">sudo</span> hostnamectl set-hostname <span class="token string">"<span class="token variable">$&#123;ENVIRONMENT_NAME&#125;</span>_<span class="token variable">$&#123;INSTANCE_ID&#125;</span>"</span></code></pre><pre class="language-bash" data-language="bash"><div class="caption"><span>.platform/hooks/predeploy/01_newrelic.sh</span></div><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">NEW_RELIC_LICENSE_KEY</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/opt/elasticbeanstalk/bin/get-config environment <span class="token parameter variable">-k</span> NEW_RELIC_LICENSE_KEY<span class="token variable">`</span></span><span class="token assign-left variable">NEW_RELIC_APP_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/opt/elasticbeanstalk/bin/get-config environment <span class="token parameter variable">-k</span> NEW_RELIC_APP_NAME<span class="token variable">`</span></span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/^license_key:.*/license_key: <span class="token variable">$&#123;NEW_RELIC_LICENSE_KEY&#125;</span>/g"</span> /var/app/newrelic/newrelic.yml<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/^app_name:.*/app_name: <span class="token variable">$&#123;NEW_RELIC_APP_NAME&#125;</span>/g"</span> /var/app/newrelic/newrelic.yml</code></pre><blockquote><p><a href="https://docs.newrelic.com/docs/apm/agents/java-agent/configuration/hostname-logic-java/">호스트이름 로직</a>에 대해서는 조금 더 살펴보아야할 부분 같다. 문서 상으로는 newrelic.yml 에 process_host.display_name 속성을 추가로 기재해야한다. 기본적으로 host:port 를 참조하므로 EC2 인스턴스의 호스트이름 자체를 변경하였다.</p></blockquote><h4 id="Elastic-Beanstalk-주의사항-정리"><a href="#Elastic-Beanstalk-주의사항-정리" class="headerlink" title="Elastic Beanstalk 주의사항 정리"></a>Elastic Beanstalk 주의사항 정리</h4><ul><li>애플리케이션 소스 번들에 항상 Procfile을 포함시키기</li><li>소스 번들 크기가 500MB를 넘지 않도록 체크하기</li><li>환경 구성 시 샘플 애플리케이션으로 시작하기</li><li>환경 속성을 최대한 활용하도록 플랫폼 확장 스크립트 정의하기</li></ul><blockquote><p>Elastic Beanstalk 배포 시 전환이 완료되기 까지 상당한 시간이 소요되는 건 너무 큰 단점 같다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;오랜만에 신규 프로젝트로 인하여 아마존 웹 서비스의 빈스톡 환경 구성에 대해서 살펴볼 기회가 있어 리눅스 플랫폼의 확장에 대해 더 자세하게 학습하고 어떻게 이용할 수 있는지 정리해보고자 한다. 예전과 다르게 변경되는 부분이</summary>
      
    
    
    
    
    <category term="AWS Beanstalk" scheme="https://kdevkr.github.io/tags/AWS-Beanstalk/"/>
    
    <category term="Java SE Platform" scheme="https://kdevkr.github.io/tags/Java-SE-Platform/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 SQL 코드 스타일</title>
    <link href="https://kdevkr.github.io/intellij-sql-code-style/"/>
    <id>https://kdevkr.github.io/intellij-sql-code-style/</id>
    <published>2023-12-02T05:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<p>인텔리제이 얼티메이트 버전에서는 데이터베이스 대한 기능을 내장하고 있고 <a href="https://www.jetbrains.com/help/idea/settings-code-style-sql.html">SQL 코드 서식</a>에 대한 포맷팅 기능도 제공해주고 있다. 하지만, 기본적인 SQL 코드 스타일에서는 키워드나 컬럼 유형에 대해서는 대문자로 변경해주지 않는데 개인적으로 키워드들은 대문자로 표현하는 것을 선호하는 편이므로 이에 대한 설정 방법을 공유하고자 한다.</p><h4 id="SQL-코드-스타일-설정하기"><a href="#SQL-코드-스타일-설정하기" class="headerlink" title="SQL 코드 스타일 설정하기"></a>SQL 코드 스타일 설정하기</h4><p><img data-src="/images/posts/intellij-sql-code-style/01.png" alt="Case → Word Case">  </p><p>코드 스타일 설정 메뉴에서 <a href="https://www.jetbrains.com/help/idea/configure-the-sql-code-style.html">The Database Tools and SQL plugin</a> 에 대한 코드 서식을 지정할 수 있다. <code>설정 → 에디터 → 코드 스타일 → SQL → 일반</code> 에서 키워드를 대문자로 설정하는 옵션을 찾아볼 수 있다. 위 이미지는 키워드를 대문자로 설정하고 컬럼 유형을 키워드로 인식될 수 있도록 변경한 것을 보여준다.</p><h4 id="Optional-SELECT-쿼리-시-콤마-위치-선택하기-🤔"><a href="#Optional-SELECT-쿼리-시-콤마-위치-선택하기-🤔" class="headerlink" title="(Optional) SELECT 쿼리 시 콤마 위치 선택하기 🤔"></a>(Optional) SELECT 쿼리 시 콤마 위치 선택하기 🤔</h4><p><img data-src="/images/posts/intellij-sql-code-style/02.png" alt="Queries → Place comma">  </p><p><code>Queries → Common → Place comma</code> 옵션으로 SELECT 쿼리 시 결과물이 되는 필드에 대해서 콤마 위치를 앞에 오도록 선택할 수 있다. 개발자마다 선호하는 스타일이 다를 수 있는데 개인적으로 콤마가 앞에 오는 경우 복사 및 붙여넣기 시 들여쓰기 이슈가 발생할 수 있어 콤마가 뒤에 오도록 작성하는 편이다.</p><p>SQL 코드 포맷팅을 많이 수행해왔지만 최근까지도 나는 대&#x2F;소문자 변환 단축키를 사용해서 이쁘게 키워드 부분들을 변환해왔다. 나와 같은 개발자가 있었다면 불편함에서 벗어나길 바란다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;인텔리제이 얼티메이트 버전에서는 데이터베이스 대한 기능을 내장하고 있고 &lt;a href=&quot;https://www.jetbrains.com/help/idea/settings-code-style-sql.html&quot;&gt;SQL 코드 서식&lt;/a&gt;에 대한 포맷팅 </summary>
      
    
    
    
    
    <category term="SQL" scheme="https://kdevkr.github.io/tags/SQL/"/>
    
    <category term="Code Style" scheme="https://kdevkr.github.io/tags/Code-Style/"/>
    
  </entry>
  
  <entry>
    <title>서버 시간 동기화</title>
    <link href="https://kdevkr.github.io/server-time-sync/"/>
    <id>https://kdevkr.github.io/server-time-sync/</id>
    <published>2023-12-01T05:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 개발자에게도 중요한 서버 시간에 대한 동기화를 알아보도록 하자. AWS 클라우드에 의존하는 개발자들은 <a href="https://aws.amazon.com/ko/blogs/korea/keeping-time-with-amazon-time-sync-service/">Amazon Time Sync Service</a>를 참조하도록 설정된 EC2 인스턴스를 활용하고 있기 때문에 시간 동기화에 대해 신경써야할 부분은 적다. 하지만, 클라우드 시대에 살고 있지만 많은 이유로 인하여 온-프레미스 환경에서 동작해야하는 시스템은 상당히 많다. 온-프레미스 인프라 구성에서는 인터넷 통신이 제한되는 경우가 많기 때문에 자체적인 타임 서버를 구성하고 의존하도록 되어있을 것이다.</p><p>신규 프로젝트를 마무리하기 위해 검수하는 과정에서 전달받은 피드백 중 하나는 기존에 사용하고 있던 시스템의 데이터 시간과 일치하지 않는다는 것이었는데 이것은 보안 상의 이유로 개발중인 시스템이 본래 시스템의 네트워크에 연결되도록 고려하거나 계약되지 않았기 때문이다. 따라서, 인터넷 통신이 되지 않으므로 공개적인 NTP 서버와의 통신이 불가능하므로 컴퓨터 메인보드에 존재하는 RTC(Real Time Clock) 에 의존하고 있을 것이기에 조금씩 시간 차이가 많이 나게 될 수 있다.</p><h4 id="Linux-인스턴스의-시간-설정"><a href="#Linux-인스턴스의-시간-설정" class="headerlink" title="Linux 인스턴스의 시간 설정"></a><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/set-time.html#configure-amazon-time-service-ubuntu">Linux 인스턴스의 시간 설정</a></h4><ul><li><code>timedatectl</code>: 시간 정보</li><li><code>chronyc tracking</code>: 시간 동기화 지표</li><li><code>chronyc -a makestep</code>: 즉시 동기화</li></ul><p>리눅스에서 어떻게 시간을 동기화하고 있는지 확인하고자 하는 경우 <code>timedatectl</code> 명령어를 사용할 수 있다. 아래와 같이 시스템 클럭에 동기화되며 NTP 서비스도 활성화되어있음을 알 수 있다. 만약, NTP 서버 주소를 추가하거나 변경했는데 반영되지 않는다면 즉시 동기화 명령어를 수행해보자.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 시간 정보</span>$ timedatectl               Local time: Fri <span class="token number">2023</span>-12-01 <span class="token number">11</span>:57:48 UTC           Universal time: Fri <span class="token number">2023</span>-12-01 <span class="token number">11</span>:57:48 UTC                 RTC time: Fri <span class="token number">2023</span>-12-01 <span class="token number">11</span>:57:49                    Time zone: Etc/UTC <span class="token punctuation">(</span>UTC, +0000<span class="token punctuation">)</span>       System clock synchronized: <span class="token function">yes</span>                                      NTP service: active                               RTC <span class="token keyword">in</span> <span class="token builtin class-name">local</span> TZ: no<span class="token comment"># 동기화 지표</span>$ chronyc trackingReference ID    <span class="token builtin class-name">:</span> 0356046A <span class="token punctuation">(</span>ec2-3-86-4-106.compute-1.amazonaws.com<span class="token punctuation">)</span>Stratum         <span class="token builtin class-name">:</span> <span class="token number">5</span>Ref <span class="token function">time</span> <span class="token punctuation">(</span>UTC<span class="token punctuation">)</span>  <span class="token builtin class-name">:</span> Fri Dec 01 <span class="token number">12</span>:04:57 <span class="token number">2023</span>System <span class="token function">time</span>     <span class="token builtin class-name">:</span> <span class="token number">0.000258254</span> seconds fast of NTP <span class="token function">time</span>Last offset     <span class="token builtin class-name">:</span> <span class="token parameter variable">-0.000113504</span> secondsRMS offset      <span class="token builtin class-name">:</span> <span class="token number">0.002757813</span> secondsFrequency       <span class="token builtin class-name">:</span> <span class="token number">451.939</span> ppm slowResidual freq   <span class="token builtin class-name">:</span> +0.044 ppmSkew            <span class="token builtin class-name">:</span> <span class="token number">22.140</span> ppmRoot delay      <span class="token builtin class-name">:</span> <span class="token number">0.185094610</span> secondsRoot dispersion <span class="token builtin class-name">:</span> <span class="token number">0.001233191</span> secondsUpdate interval <span class="token builtin class-name">:</span> <span class="token number">16.5</span> secondsLeap status     <span class="token builtin class-name">:</span> Normal<span class="token comment"># 즉시 동기화 수행</span>$ chronyc <span class="token parameter variable">-a</span> makestep<span class="token comment"># chrony 설정 파일</span>$ <span class="token function">cat</span> /etc/chrony/chrony.conf<span class="token punctuation">..</span>.server time.aws.com prefer iburst minpoll <span class="token number">4</span> maxpoll <span class="token number">4</span>pool <span class="token number">1</span>.kr.pool.ntp.org iburstpool <span class="token number">1</span>.asia.pool.ntp.org iburstpool <span class="token number">2</span>.asia.pool.ntp.org iburstserver time.bora.net iburstserver time.google.com iburst<span class="token punctuation">..</span>.</code></pre><h4 id="윈도우-서버-동기화하기"><a href="#윈도우-서버-동기화하기" class="headerlink" title="윈도우 서버 동기화하기"></a><a href="https://customer.gabia.com/manual/cloud/7700/7720">윈도우 서버 동기화하기</a></h4><p>만약, 윈도우 서버를 사용하고 있다면 <code>시간 및 날짜 설정</code> 기능에서 <code>인터넷 시간 서버</code>를 변경하도록 하자. 그리고 더 자세한 설정이 필요하다면 관련 레지스트리 설정을 검색해서 적용해야한다.</p><h4 id="시간-동기화-관련-깨알지식"><a href="#시간-동기화-관련-깨알지식" class="headerlink" title="시간 동기화 관련 깨알지식"></a>시간 동기화 관련 깨알지식</h4><p>컴퓨터 메인보드에는 하드웨어 시계를 위해 시간 정보를 저장하는 RTC(Real Time Clock) 배터리가 존재한다. 자동차 블랙박스에서도 RTC 배터리를 내장하고 있고 (GPS 연동이 없는 경우) 시간이 조금씩 맞지 않는 문제를 경험할 수 있다. 그리고 타임 서버 구성을 위한 시간 동기화용 GPS 서버도 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오늘은 개발자에게도 중요한 서버 시간에 대한 동기화를 알아보도록 하자. AWS 클라우드에 의존하는 개발자들은 &lt;a href=&quot;https://aws.amazon.com/ko/blogs/korea/keeping-time-with-amazon-time</summary>
      
    
    
    
    
    <category term="NTP" scheme="https://kdevkr.github.io/tags/NTP/"/>
    
    <category term="chrony" scheme="https://kdevkr.github.io/tags/chrony/"/>
    
  </entry>
  
  <entry>
    <title>AWS SDK for Java BOM</title>
    <link href="https://kdevkr.github.io/aws-sdk-for-java-bom/"/>
    <id>https://kdevkr.github.io/aws-sdk-for-java-bom/</id>
    <published>2023-10-22T06:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.869Z</updated>
    
    <content type="html"><![CDATA[<p>AWS 경험이 많지 않은 개발자 혹은 신규 프로젝트를 위한 구성 시 종종 신경쓰지 않아 발생하는 문제는 AWS 서비스와의 연동을 위한 자바 라이브러리를 사용하기 위해 AWS Java SDK 를 추가하는 것으로 인한 과도하된 애플리케이션 용량이다. 처음부터 공식 문서를 제대로 참고한다면 Java SDK 를 위한 Maven BOM 을 추가하는 방식으로 구성했을 것이다. 그렇지 않은 경우라면 아래와 같이 AWS Java SDK 전체를 추가했을 것이다.</p><h4 id="애플리케이션-빌드-용량-문제"><a href="#애플리케이션-빌드-용량-문제" class="headerlink" title="애플리케이션 빌드 용량 문제"></a>애플리케이션 빌드 용량 문제</h4><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'software.amazon.awssdk:aws-sdk-java:2.21.4'</span>    implementation <span class="token string">'com.amazonaws:aws-java-sdk:1.12.570'</span><span class="token punctuation">&#125;</span></code></pre><p>위의 경우는 연동하려는 서비스마다 참고한 코드가 다름으로 인해 V1과 V2 라이브러리를 혼재한 경우를 의미할지도 모른다. 만약, 정말로 프로젝트에서 추가하는 방식이 위와 같다면 여러분이 인텔리제이와 같은 IDE 도구로 프로젝트를 열었을때 수 많은 라이브러리들을 다운받기 위해서 열일하는 프로그램을 볼 수 있게 될 것이다.</p><p>사실 오랫동안 기다려서 한번 다운로드 받게되면 캐시하여 사용하게 되므로 딱히 문제점을 인지하지 못할지도 모른다. 메이븐이나 그래들로 다운받는 라이브러리들은 프로젝트 폴더에 위치하는게 아니기 때문이다. 내재된 문제에 대해서는 빌드 과정에서 인지하게 된다. 빌드된 애플리케이션 실행 파일을 살펴보면 무려 800 메가를 넘는 용량을 가진다.</p><p><img data-src="/images/posts/aws-sdk-for-java-bom/01.png">  </p><h4 id="애플리케이션에-최적화된-빌드-용량"><a href="#애플리케이션에-최적화된-빌드-용량" class="headerlink" title="애플리케이션에 최적화된 빌드 용량"></a>애플리케이션에 최적화된 빌드 용량</h4><p>애플리케이션 빌드 시 정상적인 결과를 가질 수 있도록 Java SDK for Java 를 위한 Maven BOM 으로 버전을 관리하고 애플리케이션에서 사용하는 라이브러리만을 추가하도록 하자. </p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">'software.amazon.awssdk:bom:2.21.4'</span><span class="token punctuation">)</span>    implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">'com.amazonaws:aws-java-sdk-bom:1.12.570'</span><span class="token punctuation">)</span>    implementation <span class="token string">'software.amazon.awssdk:ec2'</span>    implementation <span class="token string">'com.amazonaws:aws-java-sdk-s3'</span><span class="token punctuation">&#125;</span></code></pre><p><img data-src="/images/posts/aws-sdk-for-java-bom/02.png">  </p><p>오래전에 발생하여 공유했던 트러블슈팅인데 시간이 지나면서 신규 프로젝트에서도 동일한 상황이 발생해서 정리하여 공유해본다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;AWS 경험이 많지 않은 개발자 혹은 신규 프로젝트를 위한 구성 시 종종 신경쓰지 않아 발생하는 문제는 AWS 서비스와의 연동을 위한 자바 라이브러리를 사용하기 위해 AWS Java SDK 를 추가하는 것으로 인한 과도하된 애플리케이션 용량이다.</summary>
      
    
    
    
    
    <category term="Maven BOM" scheme="https://kdevkr.github.io/tags/Maven-BOM/"/>
    
    <category term="aws-java-sdk" scheme="https://kdevkr.github.io/tags/aws-java-sdk/"/>
    
    <category term="aws-sdk-java" scheme="https://kdevkr.github.io/tags/aws-sdk-java/"/>
    
  </entry>
  
  <entry>
    <title>Cross Site Request Forgery (CSRF)</title>
    <link href="https://kdevkr.github.io/spring-boot-security-csrf/"/>
    <id>https://kdevkr.github.io/spring-boot-security-csrf/</id>
    <published>2023-10-21T00:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>프론트엔드와 백엔드 애플리케이션이 분리되어있어도 <a href="https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html">Cross Site Request Forgery (CSRF)</a>를 비활성화하지 말자.</p></blockquote><p>CSRF 자체에 대해서 잘 모르는 개발자라면 <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">Cross-Site Request Forgery Prevention Cheat Sheet</a>를 참고해보도록 하자. 애플리케이션 보안 가이드에서 <a href="https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html#csrf-considerations">로그인과 로그아웃 행위에 대해서는 CSRF 토큰을 사용한 검증을 요구</a>하는 편이다. 스프링 시큐리티에서는 <a href="https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection">CSRF 공격에 방어하는 매커니즘</a>을 제공하여 쉽게 CSRF 토큰을 적용할 수 있다.</p><ul><li>HttpSessionCsrfTokenRepository</li><li>CookieCsrfTokenRepository</li><li>XorCsrfTokenRequestAttributeHandler</li><li>XorCsrfChannelInterceptor</li><li>CsrfFilter</li><li>CsrfLogoutHandler</li></ul><p>스프링 시큐리티의 SecurityFilterChain을 구성하는 과정의 <code>CsrfConfigurer</code>를 살펴보면 <code>CsrfFilter</code>를 필터에 등록하는데 CsrfTokenRepository와 CsrfTokenRequestHandler가 사용되도록 전달된다. 공식 문서를 참고해보면 기본적으로는 스프링 시큐리티 6 부터 <code>HttpSessionCsrfTokenRepository</code>와 <code>XorCsrfTokenRequestAttributeHandler</code>가 사용되도록 되어있으며 HTTP가 아닌 웹소켓을 위한 보안 설정 시(@EnableWebSocketSecurity)에는 <code>XorCsrfChannelInterceptor</code>이 적용되어 동작한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>       http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span>csrf <span class="token operator">-></span> csrf<span class="token punctuation">.</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span><span class="token class-name">CookieCsrfTokenRepository</span><span class="token punctuation">.</span><span class="token function">withHttpOnlyFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="CSRF-토큰-API-엔드포인트"><a href="#CSRF-토큰-API-엔드포인트" class="headerlink" title="CSRF 토큰 API 엔드포인트"></a>CSRF 토큰 API 엔드포인트</h4><p>백엔드와 프론트엔드 애플리케이션이 분리되어있다고 해서 HttpOnly 속성이 지정되지 않은 CSRF 쿠키를 전달하기 위해 <code>CookieCsrfTokenRepository</code>를 사용할 필요는 없다. 프론트엔드 애플리케이션을 위한 CSRF 토큰이 필요하다면 아래와 같은 CSRF 토큰을 응답해주는 API를 만들어서 제공하자. 기본적으로 GET 요청은 안전한 메소드로 간주하여 스프링 시큐리티는 CSRF 토큰에 대한 검증을 처리하지 않는다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CsrfController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/csrf"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CsrfToken</span> <span class="token function">csrf</span><span class="token punctuation">(</span><span class="token class-name">CsrfToken</span> csrfToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> csrfToken<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://www.data.go.kr/data/15049185/fileData.do">애플리케이션 보안 가이드</a>에서는 로그인과 로그아웃 요청에 대해 CSRF 공격에 대한 방어를 요구한다. 간혹 백엔드와 프론트엔드 애플리케이션이 분리되어 JWT와 같은 토큰 기반 인증을 수행한다면 비활성화하거나 조치할 필요가 없다는 것을 기록한 블로그가 보이는데 이것은 잘못된 정보이다. 브라우저에서 토큰을 전달할 방법은 쿠키나 별도의 헤더 뿐이며 쿠키도 사실 상 헤더 중 하나일 뿐이다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRequiresCsrfMatcher</span> <span class="token keyword">implements</span> <span class="token class-name">RequestMatcher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowedMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token string">"TRACE"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowedMethods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>스프링 시큐리티에서는 기본적으로 <code>GET, HEAD, TRACE, OPTIONS</code>에 대해서는 안전한 메소드로 판단하여 CSRF 검증을 무시한다. 만약, GET을 안전하지 않는 행위로 사용한다면 CSRF 검증을 별도로 수행해야한다. 예를 들어, 쉽게 로그아웃 하기 위해서 POST 요청이 아닌 GET 요청으로 구현했다면 CSRF 필터에서 무시되고 넘어가므로 <code>requireCsrfProtectionMatcher</code> 를 수정하자.</p><h4 id="CSRF-토큰을-전달하는-방법"><a href="#CSRF-토큰을-전달하는-방법" class="headerlink" title="CSRF 토큰을 전달하는 방법"></a>CSRF 토큰을 전달하는 방법</h4><p>CSRF 토큰은 일반적으로 HTML 폼 전송 시 _csrf 파라미터로 전달하는데 X-CSRF-TOKEN 또는 X-XSRF-TOKEN 헤더로도 전달할 수 있도록 스프링 시큐리티에서 지원한다. 기본적으로는 HttpSessionCsrfTokenRepository 가 사용되는데 <code>X-CSRF-TOKEN</code> 이라는 헤더를 CookieCsrfTokenRepository는 <code>X-XSRF-TOKEN</code> 헤더를 매칭한다. 그러니까, 기본적으로는 X-CSRF-TOKEN 헤더로 전달해야하지만 쿠키 기반의 CookieCsrfTokenRepository를 적용했다면 X-XSRF-TOKEN 헤더로 요청 시 전달해야 CSRF 토큰을 제대로 검증할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CsrfTokenRequestHandler</span> <span class="token keyword">extends</span> <span class="token class-name">CsrfTokenRequestResolver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CsrfToken</span><span class="token punctuation">></span></span> csrfToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">resolveCsrfTokenValue</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">CsrfToken</span> csrfToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"request cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>csrfToken<span class="token punctuation">,</span> <span class="token string">"csrfToken cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> actualToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>csrfToken<span class="token punctuation">.</span><span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>actualToken <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            actualToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>csrfToken<span class="token punctuation">.</span><span class="token function">getParameterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> actualToken<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>앞서 CSRF 토큰을 응답하는 API 에서는 토큰 뿐만 아니라 요청 파라미터를 전달할 이름과 헤더를 함께 제공해준다. 따라서, Axios와 같은 HTTP 요청 라이브러리를 통해 XHR 요청을 수행한다면 아래와 같이 전달할 수 있다. </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/csrf'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> csrf <span class="token operator">=</span> res<span class="token punctuation">.</span>data    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span>csrf<span class="token punctuation">.</span>headerName<span class="token punctuation">]</span> <span class="token operator">=</span> csrf<span class="token punctuation">.</span>token    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>put<span class="token punctuation">[</span>csrf<span class="token punctuation">.</span>headerName<span class="token punctuation">]</span> <span class="token operator">=</span> csrf<span class="token punctuation">.</span>token    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>delete<span class="token punctuation">[</span>csrf<span class="token punctuation">.</span>headerName<span class="token punctuation">]</span> <span class="token operator">=</span> csrf<span class="token punctuation">.</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;프론트엔드와 백엔드 애플리케이션이 분리되어있어도 &lt;a href=&quot;https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html&quot;&gt;Cross Site </summary>
      
    
    
    
    
    <category term="Spring Security" scheme="https://kdevkr.github.io/tags/Spring-Security/"/>
    
    <category term="Axios" scheme="https://kdevkr.github.io/tags/Axios/"/>
    
    <category term="CSRF" scheme="https://kdevkr.github.io/tags/CSRF/"/>
    
    <category term="XSRF" scheme="https://kdevkr.github.io/tags/XSRF/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트 보안 설정</title>
    <link href="https://kdevkr.github.io/spring-boot-security/"/>
    <id>https://kdevkr.github.io/spring-boot-security/</id>
    <published>2023-10-17T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글은 스프링 부트 프로젝트로 만들어진 애플리케이션에서 스프링 시큐리티 모듈을 적용하는 경우에 보안 설정에 대해 정리한 것 입니다. 일반적으로 오해하고 있거나 신경쓰지 않는 부분에 대해서 다루고자 합니다.</p></blockquote><h4 id="더-안전한-CSRF-토큰-설정"><a href="#더-안전한-CSRF-토큰-설정" class="headerlink" title="더 안전한 CSRF 토큰 설정"></a>더 안전한 CSRF 토큰 설정</h4><p>리액트나 뷰와 같은 프론트엔드 개발 환경이어도 서버 애플리케이션에서 CSRF 토큰을 프론트엔드로 전달하기 위해 쿠키를 이용할 필요는 없다. 자바스크립트에서 쿠키에 저장된 XSRF-TOKEN 값을 가져올 수 있도록 httpOnly 설정을 비활성화하지 말자. 이것에 대안으로 CSRF 토큰을 제공하는 API를 만들어서 응답하면 된다.</p><pre class="language-java" data-language="java"><div class="caption"><span>WebSecurityConfig.java</span></div><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CsrfTokenRepository</span> <span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Session<span class="token punctuation">.</span>Cookie</span> cookie <span class="token operator">=</span> serverProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CookieCsrfTokenRepository</span> tokenRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieCsrfTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenRepository<span class="token punctuation">.</span><span class="token function">setCookieCustomizer</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">secure</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">httpOnly</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getHttpOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sameSite</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getSameSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tokenRepository<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span>csrf <span class="token operator">-></span> csrf<span class="token punctuation">.</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>CsrfController.java</span></div><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CsrfController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CsrfTokenRepository</span> csrfTokenRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/csrf"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CsrfToken</span> <span class="token function">csrf</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> csrfTokenRepository<span class="token punctuation">.</span><span class="token function">loadDeferredToken</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>자바스크립트 애플리케이션을 위한 더 다양한 방법은 <a href="https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html#csrf-integration-javascript">공식 문서를 참고</a>하세요.</p></blockquote><p>애플리케이션 보안에서 더 중요한 것은 로그인 및 로그아웃 요청에 대해 CSRF를 사용해서 로그인 시도를 위조하지 못하도록 하는 것이다. 스프링 시큐리티의 기본 폼 로그인이나 HTTP 베이직 인증이 아니라 별도의 API를 작성한다면 반드시 <a href="https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html#csrf-testing">CSRF 토큰이 적용되는지 검증</a>하도록 하자.</p><h4 id="리버스-프록시-보안"><a href="#리버스-프록시-보안" class="headerlink" title="리버스 프록시 보안"></a>리버스 프록시 보안</h4><p>스프링 시큐리티는 기본적으로 <a href="https://docs.spring.io/spring-security/reference/features/exploits/headers.html">보안을 위한 응답 헤더</a>를 추가해준다. 다만, <a href="https://docs.spring.io/spring-security/reference/features/exploits/headers.html#headers-hsts">HSTS</a>의 경우는 애플리케이션 자체가 HTTPS 프로토콜로 실행되었을때 활성화된다. 따라서, 엔진엑스와 같은 웹 서버나 로드밸런서를 통해 리버스 프록시를 구성하는 경우에는 HTTP 포트를 사용해서 애플리케이션을 실행하므로 <code>엔진엑스와 같은 웹 서버에서 HSTS 헤더를 응답</code>하도록 하자.</p><pre class="language-conf" data-language="conf"><div class="caption"><span>nginx.conf</span></div><code class="language-conf">server &#123;    listen 443 ssl http2;    add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubDomains&quot;;    location &#x2F;api&#x2F; &#123;        limit_except GET POST PUT DELETE OPTIONS &#123;            deny all;        &#125;    &#125;&#125;</code></pre><blockquote><p>리액트 또는 뷰의 빌드 에셋을 애플리케이션이 배포하지 않는다면 웹 서버에서 보안 응답 헤더를 동일하게 전달되도록 구성해야합니다.</p></blockquote><h4 id="웹소켓-보안"><a href="#웹소켓-보안" class="headerlink" title="웹소켓 보안"></a>웹소켓 보안</h4><p>스프링 시큐리티는 기본적으로 HTTP 통신에 대한 보안 설정을 제공한다. 만약, 애플리케이션 기능 요구사항을 위해 웹소켓 프로토콜을 사용한다면 <a href="https://docs.spring.io/spring-security/reference/servlet/integrations/websocket.html">웹소켓에 대한 보안</a>에 대해 별도로 체크해야한다. 스프링 시큐리티 모듈을 사용한다면 일반적인 웹소켓 구현보다는 STOMP 방식의 웹소켓 연결을 구성하는 것이 좋다. <a href="https://docs.spring.io/spring-security/reference/servlet/integrations/websocket.html#websocket-sameorigin-csrf">CSRF</a>을 적용하거나 SockJS를 위한 <a href="https://docs.spring.io/spring-security/reference/servlet/integrations/websocket.html#websocket-sockjs-sameorigin">iFrame</a> 옵션을 체크하도록 하자.</p><pre class="language-java" data-language="java"><div class="caption"><span>WebSocketSecurity.java</span></div><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSocketSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketSecurity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthorizationManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">messageAuthorizationManager</span><span class="token punctuation">(</span><span class="token class-name">MessageMatcherDelegatingAuthorizationManager<span class="token punctuation">.</span>Builder</span> messages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: Failed to send message to ExecutorSubscribableChannel[clientInboundChannel]: Access Denied</span>        messages                <span class="token punctuation">.</span><span class="token function">nullDestMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">simpDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/app/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">simpSubscribeDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/queue/error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">simpSubscribeDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">,</span> <span class="token string">"/topic/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">denyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messages<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>SockJS의 웹소켓 연결을 위해 사전에 요청하는 &#x2F;info 엔드포인트는 일반적인 HTTP 통신임에 주의하도록 해야합니다.</p></blockquote><p>애플리케이션 보안 점검으로 인해 다시 한번 학습하는 것은 안 비밀이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글은 스프링 부트 프로젝트로 만들어진 애플리케이션에서 스프링 시큐리티 모듈을 적용하는 경우에 보안 설정에 대해 정리한 것 입니다. 일반적으로 오해하고 있거나 신경쓰지 않는 부분에 대해서 다루고자 합니다.&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    
    <category term="Spring Security" scheme="https://kdevkr.github.io/tags/Spring-Security/"/>
    
    <category term="Protection Aganinst Exploits" scheme="https://kdevkr.github.io/tags/Protection-Aganinst-Exploits/"/>
    
  </entry>
  
  <entry>
    <title>Invalid SockJS Path.</title>
    <link href="https://kdevkr.github.io/invalid-sockjs-path/"/>
    <id>https://kdevkr.github.io/invalid-sockjs-path/</id>
    <published>2023-10-16T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Invalid SockJS path ‘XXX’ required to have 3 path segments.</p></blockquote><p>구글에 <a href="https://www.google.com/search?q=Invalid+SockJS+path">Invalid SockJS path</a> 라는 키워드로 검색해보면 이와 같은 오류 로그에 대한 조치로 <a href="https://stackoverflow.com/a/64576478">Stomp 클라이언트를 사용하라는 답변</a>이나 <a href="https://github.com/spring-projects/spring-framework/issues/28103">스택 오버플로우에 질문하라는 답변</a>을 찾아볼 수 있다. 아무튼 위 상황에 대한 원인은 명확히 알 수 없는 상황에서 아래와 같은 구조에서 해당 오류가 발생했다.</p><ol><li>Nginx Websocket Proxy</li><li>Spring WebSocket with Stomp + SockJS</li><li><code>sockjs-client@1.6.1</code></li><li><code>@stomp/stompjs@7.0.0</code></li></ol><h4 id="이슈-파악"><a href="#이슈-파악" class="headerlink" title="이슈 파악"></a>이슈 파악</h4><p><a href="https://github.com/kdevkr/nginx.conf">nginx.conf</a>와 같이 엔진엑스에서 웹소켓 주소 패턴에 대해 백엔드 애플리케이션으로의 리버스 프록시 구성을 아래와 같이 해둔 상태였다. 그리고 Stomp 방식의 웹 소켓 연결을 수행하는 엔드포인트는 <code>/ws/stomp</code> 로 정의되어있었다. 본래 <code>/ws</code> 는 일반적인 웹 소켓 연결을 수행하고 <code>/ws/stmop</code>로 시작되는 것은 Stomp로 동작하는 것을 의도한 것이다.</p><pre class="language-conf" data-language="conf"><div class="caption"><span>nginx.conf</span></div><code class="language-conf">http &#123;    upstream backend &#123;        server app:8080;        keepalive 128;    &#125;    server &#123;        location &#x2F;ws&#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;backend;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            # hop-by-hop            proxy_http_version 1.1;            proxy_set_header Connection &quot;upgrade&quot;;            proxy_set_header Upgrade $http_upgrade;            proxy_read_timeout 65s;        &#125;    &#125;&#125;</code></pre><blockquote><p>Vite 개발 서버에서의 Proxy 구성의 경우 올바르게 Stomp 방식의 웹소켓 연결을 수행된다.</p></blockquote><p>하지만, 엔진엑스와 함께 동작중인 배포 환경에서는 Stomp 클라이언트가 SockJS를 사용하여 연결을 수행하려고 할때 <code>/ws/stomp/info?t=0</code> 엔드포인트에 대해 404 응답을 받게되고 애플리케이션 로그에는 <code>Invalid SockJS path ...</code>가 출력되는 것을 확인했다.</p><h4 id="솔루션"><a href="#솔루션" class="headerlink" title="솔루션"></a>솔루션</h4><p>이리저리 시도해본 결과 해결책은 일반적인 웹 소켓 연결과 Stomp 방식의 연결을 아예 분리하는 것이다. <code>/ws/</code> 이외에 <code>/ws-stomp/</code>로 Stomp 방식의 웹 소켓 연결을 위한 별도의 엔드포인트 패턴을 사용하고 리버스 프록시 구성을 하고나니 해당 증상은 발생하지 않았다.</p><pre class="language-conf" data-language="conf"><div class="caption"><span>nginx.conf</span></div><code class="language-conf">http &#123;    upstream backend &#123;        server app:8080;        keepalive 128;    &#125;    server &#123;        location ~ ^&#x2F;(ws|ws-stomp)&#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;backend;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            # hop-by-hop            proxy_http_version 1.1;            proxy_set_header Connection &quot;upgrade&quot;;            proxy_set_header Upgrade $http_upgrade;            proxy_read_timeout 65s;        &#125;    &#125;&#125;</code></pre><p>아무튼 정확한 원인에 대해서는 별도로 찾아보아야겠지만 기록으로 남기고자 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Invalid SockJS path ‘XXX’ required to have 3 path segments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;구글에 &lt;a href=&quot;https://www.google.com/search?</summary>
      
    
    
    
    
    <category term="Nginx" scheme="https://kdevkr.github.io/tags/Nginx/"/>
    
    <category term="Spring" scheme="https://kdevkr.github.io/tags/Spring/"/>
    
    <category term="SockJS" scheme="https://kdevkr.github.io/tags/SockJS/"/>
    
    <category term="Stomp" scheme="https://kdevkr.github.io/tags/Stomp/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹소켓</title>
    <link href="https://kdevkr.github.io/spring-boot-websocket/"/>
    <id>https://kdevkr.github.io/spring-boot-websocket/</id>
    <published>2023-10-14T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글에서 언급하는 관련 코드는 <a href="https://github.com/kdevkr/spring-boot-demo/tree/main/websocket-demo">github.com&#x2F;kdevkr&#x2F;spring-boot-demo&#x2F;websocket-demo</a>에서 확인할 수 있습니다.</p></blockquote><p>일반적인 스프링 부트 스타터와는 다르게 스타터 웹소켓 모듈에는 웹소켓 연결에 대한 자동 구성을 수행하지는 않는다. 웹소켓 관련한 자동 구성(WebSocketServletAutoConfiguration)은 프로젝트에서 사용중인 서블릿 컨테이너에 따라 웹소켓에 대해 처리할 수 있도록 확장하며 WebSocketMessagingAutoConfiguration 에서는 Stomp 방식의 웹소켓을 위한 메시지 브로커를 구성할 때 사용되는 메시지 컨버터를 설정한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"/ws"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpSessionHandshakeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://docs.spring.io/spring-framework/reference/web/websocket/server.html">WebSocket API</a>의 WebSocketConfigurer 인터페이스를 구현하여 웹소켓 연결에 대해서 처리할 수 있는 핸들러를 추가할 수 있다. 그러나, 일반적인 웹소켓 연결 방식에는 여러가지 단점이 있는데 세션과 시큐리티와 같은 부가적인 기능과의 연계를 직접적으로 구현해야한다는 것이다.</p><h4 id="SockJS-Fallback"><a href="#SockJS-Fallback" class="headerlink" title="SockJS Fallback"></a>SockJS Fallback</h4><p><a href="https://docs.spring.io/spring-framework/reference/web/websocket/fallback.html">SockJS</a>는 웹소켓 연결에 대한 문제를 보완하기 위해서 도입하는 기술이며 SockJS 클라이언트는 웹소켓 연결 주소를 기준으로 서버에게 &#x2F;info 엔드포인트를 요청하여 웹소켓 연결 방식에 대해 질의를 하고 응답받은 결과를 토대로 연결을 시도한다. 스프링 웹소켓 모듈의 DefaultSockJsService 에서는 아래와 같은 연결을 지원한다.</p><pre class="language-java" data-language="java"><div class="caption"><span>DefaultSockJsService.java</span></div><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransportHandler</span><span class="token punctuation">></span></span> <span class="token function">getDefaultTransportHandlers</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransportHandler</span><span class="token punctuation">></span></span> overrides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransportHandler</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XhrPollingTransportHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XhrReceivingTransportHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XhrStreamingTransportHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventSourceTransportHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlFileTransportHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketTransportHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultHandshakeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>overrides <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>overrides<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># http://localhost:8080/ws/info?t=1696757550304</span><span class="token punctuation">&#123;</span>  <span class="token string">"entropy"</span><span class="token builtin class-name">:</span> <span class="token number">1279751018</span>,  <span class="token string">"origins"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token string">"*:*"</span>  <span class="token punctuation">]</span>,  <span class="token string">"cookie_needed"</span><span class="token builtin class-name">:</span> true,  <span class="token string">"websocket"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment"># &#123;websocket-protocol&#125;://&#123;host&#125;:&#123;port&#125;/&#123;websocket-endpoint&#125;/&#123;server-id&#125;/&#123;session-id&#125;/&#123;transport&#125;</span>ws://localhost:8080/ws/712/yyfmvviz/websocket</code></pre><blockquote><p>기본적으로 SockJsServiceRegistration의 웹소켓 연결 설정이 활성화되어있고 일부 로드밸런서에서 웹소켓을 지원하지 않는다면 비활성화할 수 있도록 지원한다.</p></blockquote><h4 id="Stomp-over-WebSocket"><a href="#Stomp-over-WebSocket" class="headerlink" title="Stomp over WebSocket"></a>Stomp over WebSocket</h4><h4 id="Webjars"><a href="#Webjars" class="headerlink" title="Webjars"></a>Webjars</h4><p>리액트나 뷰와 같은 프론트엔드 개발 환경을 구성한다면 자체적으로 라이브러리 패키지를 설치하고 관리하겠지만 백엔드 애플리케이션에서 라이브러리를 제공하고 싶다면 Webjars를 이용할 수도 있다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.webjars:webjars-locator-core:0.53'</span>    implementation <span class="token string">'org.webjars:sockjs-client:1.5.1'</span>    implementation <span class="token string">'org.webjars:stomp-websocket:2.3.4'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="스프링-세션과의-통합"><a href="#스프링-세션과의-통합" class="headerlink" title="스프링 세션과의 통합"></a>스프링 세션과의 통합</h4><p>Stomp 방식의 웹 소켓 연결을 구성하는 경우에는 WebSocketMessageBrokerConfigurer를 직접 구현하기보다 스프링 세션 모듈에 포함되어있는 AbstractSessionWebSocketMessageBrokerConfigurer를 확장하는 것이 더 편리하다. 스프링 세션과 연계되는 미리 구현된 클래스들을 빈으로 등록하여 웹소켓 세션(WebSocketSession)에서 사용자 정보를 주입하고 쉽게 가져올 수 있도록 지원한다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-websocket'</span>    implementation <span class="token string">'org.springframework.session:spring-session-core'</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSocketMessageBroker</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StompConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSessionWebSocketMessageBrokerConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapSession</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"/ws/stomp"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: /topic: Broadcast, /queue: Unicast</span>        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">"/topic"</span><span class="token punctuation">,</span> <span class="token string">"/queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">setPreservePublishOrder</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>StompController.java</span></div><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StompController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SimpMessagingTemplate</span> template<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">"/topic/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">GenericMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> message<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"simpSessionId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> wsSessionId<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"simpSessionAttributes"</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> sessionAttributes<span class="token punctuation">,</span>                                     <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">SessionRepositoryMessageInterceptor</span><span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span>sessionAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>principal <span class="token keyword">instanceof</span> <span class="token class-name">Authentication</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            username <span class="token operator">=</span> principal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payload<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello, %s"</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payload<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> <span class="token string">"StompController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// NOTE: similar @SendToUser</span>        template<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>wsSessionId<span class="token punctuation">,</span> <span class="token string">"/queue/hello"</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="스프링-시큐리티와의-통합"><a href="#스프링-시큐리티와의-통합" class="headerlink" title="스프링 시큐리티와의 통합"></a>스프링 시큐리티와의 통합</h4><p>Stomp 방식의 웹 소켓 연결의 경우 스프링 세션과의 통합처럼 스프링 시큐리티와의 통합도 지원한다. 스프링 시큐리티가 기본 HTTP 보안을 설정한다면 @EnableWebSocketSecurity가 선언된 구성 클래스를 통해서 Stomp 메시지에 대해 보안 규칙을 설정할 수 있다. 일반적인 웹 소켓 연결을 구성하는 경우에 보안적인 로직을 직접 구현해야하지만 더 간단하게 적용할 수 있다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-security'</span>    implementation <span class="token string">'org.springframework.security:spring-security-messaging'</span>    testImplementation <span class="token string">'org.springframework.security:spring-security-test'</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>WebSocketSecurity.java</span></div><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSocketSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketSecurity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthorizationManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">messageAuthorizationManager</span><span class="token punctuation">(</span><span class="token class-name">MessageMatcherDelegatingAuthorizationManager<span class="token punctuation">.</span>Builder</span> messages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: Failed to send message to ExecutorSubscribableChannel[clientInboundChannel]: Access Denied</span>        messages                <span class="token punctuation">.</span><span class="token function">nullDestMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">simpDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/app/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">simpSubscribeDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/queue/error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">simpSubscribeDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">,</span> <span class="token string">"/topic/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">denyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messages<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="WebSocketSession-Management"><a href="#WebSocketSession-Management" class="headerlink" title="WebSocketSession Management"></a>WebSocketSession Management</h4><p>스케줄링 기능을 통해 특정 상황에서 웹소켓에 연결된 사용자에게 메시지를 전달할 필요성이 있다. 웹 소켓 연결에 대한 세션 관리를 해주지만 세션이 연결중인 WebSocketSession 목록은 관리해주지 않는다. 앞서, WebSocketRegistryListener를 통해 연결과 해지 그리고 메시지 수신 구독에 대한 이벤트를 처리할 핸들러를 구현할 수 있으므로 웹 소켓 세션을 저장하는 클래스를 구현해보도록 하자.</p><ul><li><a href="https://github.com/kdevkr/spring-boot-demo/blob/main/websocket-demo/src/main/java/kr/kdev/demo/WebSocketRepository.java">WebSocketRepository.java</a></li><li><a href="https://github.com/kdevkr/spring-boot-demo/blob/main/websocket-demo/src/main/java/kr/kdev/demo/WebSocketEventHandler.java">WebSocketEventHandler.java</a></li></ul><p>일부 예제에서는 WebSocketHandlerDecorator 클래스를 확장하여 웹 소켓 세션 관리를 구현하는 것을 찾아볼 수 있으나 이미 구현되어있고 굳이 핸들러를 교체할 필요가 없이 위와 같이 이벤트만을 받아서 처리하는게 더 간단하다. 또한, 굳이 핸들러 위치가 아니더라도 SimpMessagingTemplate를 통해 <a href="https://docs.spring.io/spring-framework/reference/web/websocket/stomp/handle-send.html">메시지를 송신</a>할 수 있다. SessionSubscribeEvent 와 SessionUnsubscribeEvent는 세션 자체를 전달해주지는 않지만 웹소켓 세션 아이디를 가져올 수 있으므로 특정 패턴의 구독 주소를 감지하여 세션 아이디 목록을 관리하고 애플리케이션에서 어떠한 데이터를 전달할 수 있도록 구현할 수 있을 것이다.</p><blockquote><p>스프링 세션 모듈과 연계된 웹소켓 연결을 구성하는 경우에 SimpMessaingTemplate를 통해 웹소켓 세션 아이디가 아닌 사용자 이름으로도 전달할 수 있다.</p></blockquote><h4 id="웹-소켓-관련-문서"><a href="#웹-소켓-관련-문서" class="headerlink" title="웹 소켓 관련 문서"></a>웹 소켓 관련 문서</h4><ul><li><a href="https://docs.spring.io/spring-framework/reference/web/websocket.html">Spring Framework - WebSockets</a></li><li><a href="https://docs.spring.io/spring-session/reference/web-socket.html">Spring Session - WebSocket Integration</a></li><li><a href="https://docs.spring.io/spring-security/reference/servlet/integrations/websocket.html">Spring Security - WebSocket Security</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에서 언급하는 관련 코드는 &lt;a href=&quot;https://github.com/kdevkr/spring-boot-demo/tree/main/websocket-demo&quot;&gt;github.com&amp;#x2F;kdevkr&amp;#x2F;</summary>
      
    
    
    
    
    <category term="SockJS" scheme="https://kdevkr.github.io/tags/SockJS/"/>
    
    <category term="WebSocket" scheme="https://kdevkr.github.io/tags/WebSocket/"/>
    
    <category term="STOMP" scheme="https://kdevkr.github.io/tags/STOMP/"/>
    
  </entry>
  
  <entry>
    <title>Systemd 서비스로 자바 애플리케이션 실행하기</title>
    <link href="https://kdevkr.github.io/java-app-service-with-systemd/"/>
    <id>https://kdevkr.github.io/java-app-service-with-systemd/</id>
    <published>2023-10-12T14:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.873Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.baeldung.com/linux/run-java-application-as-service">Run a Java Application as a Service on Linux</a> 를 참고해보니 <code>Systemd</code> 서비스를 사용해서 자바 애플리케이션을 실행하고 관리하는 서비스를 등록할 수 있다는 것을 알게되었다. 그동안 자바 애플리케이션을 배포하기 위한 <code>쉘 스크립트</code>를 작성하여 실행하고 종료하고 배포해오곤 했다. 반면에 Nginx의 경우 패키지로 설치하여 자동으로 서비스가 만들어져서 쉽게 실행할 수 있었다. 신규 프로젝트로 인해 데모용 애플리케이션을 새롭게 배포해야하는 요구사항이 생겼기에 이번에는 Systemd 서비스로 등록하여 관리해보자.</p><h4 id="Systemd-서비스-등록하기"><a href="#Systemd-서비스-등록하기" class="headerlink" title="Systemd 서비스 등록하기"></a>Systemd 서비스 등록하기</h4><p><code>/etc/systemd/system/</code> 폴더 하위에 <code>vi</code> 명령어를 사용해서 아래와 같이 서비스 파일을 만들어야 한다. <code>애플리케이션 또는 서비스 이름</code>을 파일명으로 작성하는 것을 추천한다. </p><pre class="language-bash" data-language="bash"><div class="caption"><span>/etc/systemd/system/app.service</span></div><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Java application <span class="token function">service</span><span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>simple<span class="token assign-left variable">SuccessExitStatus</span><span class="token operator">=</span><span class="token number">143</span><span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span>10s<span class="token assign-left variable">User</span><span class="token operator">=</span>ubuntu<span class="token assign-left variable">Group</span><span class="token operator">=</span>ubuntu<span class="token assign-left variable">WorkingDirectory</span><span class="token operator">=</span>/home/ubuntu/<span class="token assign-left variable">Environment</span><span class="token operator">=</span>JAVA_HOME<span class="token operator">=</span>/home/ubuntu/.sdkman/candidates/java/current<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/bin/java <span class="token parameter variable">-jar</span> /home/ubuntu/app.jar<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-15</span> <span class="token variable">$MAINPID</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target</code></pre><blockquote><p>리눅스 서버에 여러개의 자바 버전을 혼용하는 경우 애플리케이션 실행 시 필요한 JDK 버전을 사용할 수 있도록 환경 변수를 지정하도록 하자. 예기치 않은 상황으로 애플리케이션이 종료되는 경우 다시 실행될 수 있도록 Restart 옵션을 적용하는 것을 고려하자.</p></blockquote><h4 id="Systemd-서비스-실행하기"><a href="#Systemd-서비스-실행하기" class="headerlink" title="Systemd 서비스 실행하기"></a>Systemd 서비스 실행하기</h4><p><code>service</code> 명령어를 통해 자바 애플리케이션 서비스를 실행하고 종료할 수 있으나 <code>systemctl</code> 명령어를 통해 서비스를 반영하고 리눅스 서버가 다시 실행되어 systemd 서비스가 실행되면 자동으로 시작될 수 있도록 <code>enable</code> 명령어를 수행하는 것이 좋다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Termianl</span></div><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token comment"># Systemd 서비스 시작 시 자동 실행 등록</span>ubuntu@ubuntu:~$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> app.serviceCreated symlink /etc/systemd/system/multi-user.target.wants/app.service → /etc/systemd/system/app.service.<span class="token function">sudo</span> systemctl status app.service <span class="token comment"># sudo service app status</span>ubuntu@ubuntu:~$ <span class="token function">sudo</span> <span class="token function">service</span> app status● app.service - Java application <span class="token function">service</span>     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/app.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Thu <span class="token number">2023</span>-10-12 <span class="token number">14</span>:01:24 UTC<span class="token punctuation">;</span> 22min ago   Main PID: <span class="token number">25835</span> <span class="token punctuation">(</span>java<span class="token punctuation">)</span>      Tasks: <span class="token number">23</span> <span class="token punctuation">(</span>limit: <span class="token number">2256</span><span class="token punctuation">)</span>     Memory: <span class="token number">150</span>.6M     CGroup: /system.slice/app.service             └─25835 /bin/java <span class="token parameter variable">-jar</span> /home/ubuntu/app.jar</code></pre><blockquote><p>가끔씩 패키지로 설치한 서비스들이 예기치 않은 상황으로 리눅스 서버가 재실행되었을때 자동으로 실행되지 않는 상황이 종종 발생한다.<br>애플리케이션이 정상적으로 동작하는 것에 그치지 않고 다양한 문제에 대해 고민해야할 필요성이 있는 것 같다.</p></blockquote><h4 id="애플리케이션-로그-조회하기"><a href="#애플리케이션-로그-조회하기" class="headerlink" title="애플리케이션 로그 조회하기"></a>애플리케이션 로그 조회하기</h4><p>일반적으로 애플리케이션이 생성한 로그 파일을 <code>tail</code> 명령어를 사용하여 살펴보았으나 애플리케이션 서비스로 등록하였기에 별도의 파일로 저장하는 옵션을 두지 않았다면 <code>journalctl</code> 명령어를 사용해서 로그를 조회해야한다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash"><span class="token function">sudo</span> journalctl <span class="token parameter variable">-u</span> app.service <span class="token parameter variable">-f</span></code></pre><blockquote><p>운영중인 애플리케이션이나 서비스의 경우 잘 동작하는 쉘 스크립트를 굳이 서비스 방식으로 바꾸지는 말자.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/linux/run-java-application-as-service&quot;&gt;Run a Java Application as a Service on Linux&lt;/a&gt; 를 참고해보니 &lt;code&gt;S</summary>
      
    
    
    
    
    <category term="Systemd" scheme="https://kdevkr.github.io/tags/Systemd/"/>
    
    <category term="Java" scheme="https://kdevkr.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx로 Vite 프로젝트 배포하기</title>
    <link href="https://kdevkr.github.io/deploy-vite/"/>
    <id>https://kdevkr.github.io/deploy-vite/</id>
    <published>2023-10-10T11:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Q. 프론트엔드 애플리케이션은 어떻게 배포를 해야할까?</p></blockquote><p>오래전부터 기본적으로는 백엔드 애플리케이션에서 프론트 UI 구성을 위한 에셋들을 관리하고 함께 빌드되어 배포되는 방식을 취해왔다. 그러나, 백엔드 개발자와 프론트엔드 개발자로 나누어지더니 하나의 서비스를 구성하는 프론트엔드 애플리케이션과 백엔드 애플리케이션이 나누어지고 각 애플리케이션을 개발할 수 있는 환경이 만들어지고 있다. 보통 백엔드 애플리케이션을 빌드하면서 UI 에셋 파일들을 포함하므로 배포 과정은 백엔드 개발자가 담당했던 조직이 많았을 것 같다.</p><p>만약, 조직 구성으로 인해 프론트엔드 애플리케이션 개발을 위한 프론트엔드 팀이 있는 곳이라면 프론트엔드 개발자가 배포를 직접 수행할 수도 있어보인다. 회사마다 일하는 방식은 다를 수 있기 때문에 릴리즈에 대한 부분은 QA 엔지니어가 담당하기도 한다. 아무튼 Vite 기반 프로젝트를 배포하는 방안에 대해서 정리해보자.</p><blockquote><p><a href="https://vitejs.dev/guide/static-deploy.html#deploying-a-static-site">Deploying a Static Site</a><br>It is important to note that vite preview is intended for previewing the build locally and not meant as a production server.</p></blockquote><p>로컬 환경에서 정적 페이지를 배포할 수 있는 웹 서버를 실행하는 preview 명령어를 제공하지만 위와 같이 프로덕션 환경을 위한 배포 서버는 아님에 주의해야한다. 기본적인 개념은 정적 배포를 위한 빌드 파일을 만들고나서 백엔드 서버 또는 웹 서버를 통해 정적 파일에 대한 응답을 처리하는 것이다.</p><ul><li><a href="https://ko.vitejs.dev/guide/build.html">Vite 프로덕션 버전으로 빌드하기</a></li><li><a href="https://ko.vitejs.dev/guide/backend-integration.html">Vite 백엔드 프레임워크와 함께 사용하기</a></li></ul><p>두번째 방식은 일반적으로 많이 사용되는 편으로 백엔드 서버가 스프링 부트 프로젝트라면 <a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-config/static-resources.html">정적 리소스 경로에 포함</a>될 수 있도록 하면 된다. 백엔드 애플리케이션 빌드 시 클래스패스에 포함되어도 되고 애플리케이션 프로퍼티를 통해 특정 파일 경로를 지정해도 된다. 본 글에서 정리하고자 하는 건 첫번째 방식으로 프로덕션 배포를 위한 정적 파일을 빌드하고나서 Nginx와 같은 웹서버를 통해 정적 파일을 배포하는 것이다.</p><blockquote><p>Nginx 웹서버에서 정적 파일을 배포하고 백엔드 API 요청에 대해서는 리버스 프록시 구성을 하면 된다. 리버스 프록시 구성의 장점은 백엔드 애플리케이션의 포트를 감출 수 있게 되어 조금은 보안적인 인프라 구성이 될 수 있다는 것이다. 참고로 Vite 개발 서버에서도 <a href="https://ko.vitejs.dev/config/server-options.html#server-proxy">프록시 구성</a>을 할 수 있게 제공한다.</p></blockquote><h4 id="Nginx-웹서버로-Vite-정적-파일-배포"><a href="#Nginx-웹서버로-Vite-정적-파일-배포" class="headerlink" title="Nginx 웹서버로 Vite 정적 파일 배포"></a>Nginx 웹서버로 Vite 정적 파일 배포</h4><pre class="language-javascript" data-language="javascript"><div class="caption"><span>vite.config.js</span></div><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-bash" data-language="bash"><div class="caption"><span>Windows Terminal</span></div><code class="language-bash">$ <span class="token function">yarn</span> <span class="token parameter variable">--cwd</span> <span class="token string">'frontend'</span> <span class="token function">install</span>$ <span class="token function">yarn</span> <span class="token parameter variable">--cwd</span> <span class="token string">'frontend'</span> run build <span class="token parameter variable">--mode</span> productionvite v4.4.11 building <span class="token keyword">for</span> production<span class="token punctuation">..</span>.</code></pre><p>빌드 명령어를 수행하면 아래와 같이 dist 폴더 아래에 정적 파일들이 생성된다.</p><ul><li>dist&#x2F;assets : 정적 에셋 모음</li><li>dist&#x2F;index.html : 진입점(EntryPoint) 파일</li><li>manifest.json : 매니페스트 파일</li></ul><p>생성된 정적 빌드 파일들을 <a href="https://github.com/kdevkr/nginx.conf">nginx.conf</a> 의 static 폴더로 대체하여 테스트를 해보자. 제대로 동작하지 않을텐데 Nginx의 설정 파일의 구성이 백엔드 애플리케이션으로 기본적인 요청을 전달하도록 되어있기 때문이다. <code>/</code> 경로에 대해서는 index.html을 응답하도록 변경해야하고 백엔드에 대한 요청이 나중에 전달되도록 수정해야한다.</p><pre class="language-conf" data-language="conf"><div class="caption"><span>nginx-vite.conf</span></div><code class="language-conf">server &#123;  index index.html;  root &#x2F;etc&#x2F;nginx&#x2F;static;  try_files $uri &#x2F;index.html &#x3D;404;  # 리버스 프록시  location ~ ^&#x2F;(api|version) &#123;      proxy_pass http:&#x2F;&#x2F;backend;      proxy_redirect off;      proxy_buffering off;      proxy_set_header Host $host;      proxy_set_header X-Real-IP $remote_addr;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;  &#125;&#125;</code></pre><p><img data-src="/images/posts/deploy-vite/01.png">  </p><p>기본적인 요청에 대해서는 static 폴더 기준으로 정적 파일을 사용해 응답하며 &#x2F;api 및 &#x2F;version 에 대해서만 백엔드 애플리케이션 요청으로 처리되도록 수정했다. 이제 아래와 같이 데모 애플리케이션이 정상적으로 보이며 &#x2F;version에 대한 요청을 전달하면 백엔드 애플리케이션에서 해당 경로가 매핑되지 않아서 스프링 부트의 화이트라벨 페이지로 404 응답을 볼 수 있다. 프론트 요청과 백엔드 요청을 효율적으로 구분할 수 있는 방안은 더 연구하고 찾아보고 학습해야할 부분이다.  </p><p>사실 상 백엔드 애플리케이션에 프론트엔드에 대한 정적 파일을 포함시키는 게 간단하지만 정적 파일을 배포하는 경량의 웹 서버를 두는 게 백엔드 애플리케이션의 부하를 줄일 수 있는 방안이다. 정적 파일에 대한 요청을 처리하기 위해서 스레드 풀에서 스레드를 사용하는 것은 생각보다 영향이 클 수도 있다. <code>선택은 여러분의 몫이다.</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Q. 프론트엔드 애플리케이션은 어떻게 배포를 해야할까?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오래전부터 기본적으로는 백엔드 애플리케이션에서 프론트 UI 구성을 위한 에셋들을 관리하고 함께 빌드되어 배포되는 방식을 취해왔다.</summary>
      
    
    
    
    
    <category term="Deployment" scheme="https://kdevkr.github.io/tags/Deployment/"/>
    
    <category term="Nginx" scheme="https://kdevkr.github.io/tags/Nginx/"/>
    
    <category term="Vite" scheme="https://kdevkr.github.io/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>윈도우 환경에서 사설 루트 CA 인증서 등록하는 방법</title>
    <link href="https://kdevkr.github.io/windows-certlm/"/>
    <id>https://kdevkr.github.io/windows-certlm/</id>
    <published>2023-10-09T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.877Z</updated>
    
    <content type="html"><![CDATA[<p>윈도우 운영체제 환경에서 사설로 만들어진 루트 CA 인증서를 컴퓨터 인증서의 신뢰할 수 있는 루트 기관으로 등록할 수 있는 방법은 두가지가 있다. 첫번째로는 MMC(certlm.msc) 프로그램의 인증서 가져오기 마법사를 이용하는 방법과 크롬 또는 엣지 브라우저의 인증서 관리 메뉴를 통해 인증서 가져오기 마법사를 수행하는 방법이다. 이 글을 보는 개발자 또는 엔지니어라면 명령 프롬프트를 통해 certutil 도구로 명령어 기반으로 루트 CA 인증서를 등록할 수도 있다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Windows Terminal</span></div><code class="language-bash">certutil <span class="token parameter variable">-addstore</span> <span class="token string">"Root"</span> <span class="token string">"locaCA.crt"</span>Root <span class="token string">"신뢰할 수 있는 루트 인증 기관"</span>서명이 공개 키와 일치합니다.<span class="token string">"XXX"</span> 인증서가 저장소에 추가되었습니다.CertUtil: <span class="token parameter variable">-addstore</span> 명령이 성공적으로 완료되었습니다.</code></pre><h4 id="Microsoft-Management-Console를-통해-인증서-관리"><a href="#Microsoft-Management-Console를-통해-인증서-관리" class="headerlink" title="Microsoft Management Console를 통해 인증서 관리"></a>Microsoft Management Console를 통해 인증서 관리</h4><ul><li>윈도우: 찾기 &gt; 컴퓨터 인증서 관리(certlm.msc) 또는 실행(Window 키 + R)</li><li>크롬: 설정 - 개인 정보 보호 및 보안 - 보안(세이프 브라우징 및 기타 보안 설정) - 고급 - 기기 인증서 관리(기기에서 HTTPS&#x2F;SSL 인증서 관리)</li></ul><p>인증서 가져오기 마법사가 실행하고 나서 신뢰할 수 있는 루트 인증서 기관 저장소에 사설 루트 CA 인증서를 선택하여 등록하면 된다.</p><p><img data-src="/images/posts/windows-certlm/01.png">  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;윈도우 운영체제 환경에서 사설로 만들어진 루트 CA 인증서를 컴퓨터 인증서의 신뢰할 수 있는 루트 기관으로 등록할 수 있는 방법은 두가지가 있다. 첫번째로는 MMC(certlm.msc) 프로그램의 인증서 가져오기 마법사를 이용하는 방법과 크롬 또</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>젠킨스 그리고 S3와 함께하는 배포 자동화</title>
    <link href="https://kdevkr.github.io/automated-deployment-using-s3/"/>
    <id>https://kdevkr.github.io/automated-deployment-using-s3/</id>
    <published>2023-10-09T11:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>회사 내 QA 엔지니어 퇴사로 인해 수동 배포를 수행해왔던 테스트 환경에 대해 자동화 배포로 변경하고자 학습한 내용이다. 솔루션 형태로 전달되어 고객이 직접 배포를 수행하는 프로젝트로 배포에 대한 과정도 변경사항에 포함될 수 있으므로 QA 엔지니어가 테스트 항목으로 수동 배포를 수행했다.</p></blockquote><h4 id="S3를-통한-배포-파일-다운로드-스크립트"><a href="#S3를-통한-배포-파일-다운로드-스크립트" class="headerlink" title="S3를 통한 배포 파일 다운로드 스크립트"></a>S3를 통한 배포 파일 다운로드 스크립트</h4><p>애플리케이션에 대한 릴리즈 빌드는 젠킨스 도구로 수행하며 젠킨스 서버에서 조직 내 AWS 릴리즈 버킷에 서비스 환경 폴더에 배포 파일이 저장되도록 구성되어 있다. S3 업로드하는 것은 <a href="https://plugins.jenkins.io/s3/">S3 publisher</a> 플러그인을 이용할 수 있다. </p><pre class="language-bash" data-language="bash"><div class="caption"><span>auto_deployment.sh</span></div><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">FILE_KEY</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>aws s3 <span class="token function">ls</span> <span class="token parameter variable">--recursive</span> s3://app-release/japan/module/ <span class="token operator">|</span> <span class="token function">grep</span> module-jp-bundle <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $4&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">FILE_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $FILE_KEY <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">"s/japan\/module\///"</span><span class="token variable">`</span></span>aws s3 <span class="token function">sync</span> s3://app-release/<span class="token variable">$FILE_KEY</span> /home/ec2-user/prepare/<span class="token function">sleep</span> <span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] current zip file : <span class="token variable">$FILE_NAME</span>"</span><span class="token function">cp</span> <span class="token parameter variable">-p</span> /home/ec2-user/prepare/<span class="token variable">$FILE_NAME</span> /home/ec2-user/prepare/backup/<span class="token variable">$FILE_NAME</span><span class="token function">unzip</span> <span class="token parameter variable">-o</span> /home/ec2-user/prepare/<span class="token variable">$FILE_NAME</span> <span class="token parameter variable">-d</span> /home/ec2-user/prepare/ <span class="token operator">></span> /dev/null</code></pre><blockquote><p>젠킨스 서버에 의해 빌드 시 AWS Elastic Beanstalk 서비스에 의해 배포되는 번들과 같이 실행가능한 war 파일을 포함하여 압축 파일로 S3 버킷에 업로드 되어있다. 본 테스트 환경에서는 애플리케이션 실행 시 참조될 프로퍼티 파일은 별도로 관리하고 있다.</p></blockquote><h4 id="자동-실행을-위한-크론탭-비•활성화-스크립트"><a href="#자동-실행을-위한-크론탭-비•활성화-스크립트" class="headerlink" title="자동 실행을 위한 크론탭 비•활성화 스크립트"></a>자동 실행을 위한 크론탭 비•활성화 스크립트</h4><p>수동 배포를 수행하는 프로세스에는 예기치 않은 상황에 의해 애플리케이션 종료 시 자동으로 실행되도록 스크립트화 되어 활성화되어있는 크론탭을 비활성화하고 배포 완료 시 크론탭에 의해 동작하도록 활성화하는 방안이 필요하다. 아래의 스크립트는 <a href="https://stackoverflow.com/a/14011095">스택오버플로우 답변</a>을 참고했다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>disable_cron.sh</span></div><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment"># crontab -l | sed '/^[^#].*check.sh/s/^/#/'</span><span class="token function">crontab</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^[^#].*check.sh/s/^/#/'</span> <span class="token operator">|</span> <span class="token function">crontab</span> -<span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Disable cron of check.sh"</span></code></pre><pre class="language-bash" data-language="bash"><div class="caption"><span>enable_cron.sh</span></div><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment">#crontab -l | sed '/^#.*check.sh/s/^#//'</span><span class="token function">crontab</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^#.*check.sh/s/^#//'</span> <span class="token operator">|</span> <span class="token function">crontab</span> -<span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Enable cron of check.sh"</span></code></pre><h4 id="배포-자동화-스크립트"><a href="#배포-자동화-스크립트" class="headerlink" title="배포 자동화 스크립트"></a>배포 자동화 스크립트</h4><pre class="language-bash" data-language="bash"><div class="caption"><span>auto_deployment.sh</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ec2-user/<span class="token assign-left variable">OLD_FILENAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> /home/ec2-user/ <span class="token operator">|</span> <span class="token function">grep</span> .war <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> .old<span class="token variable">)</span></span><span class="token assign-left variable">FILENAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> /home/ec2-user/prepare/ <span class="token operator">|</span> <span class="token function">grep</span> .war<span class="token variable">)</span></span><span class="token assign-left variable">UPD_OLD</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> %Y $OLD_FILENAME<span class="token variable">)</span></span><span class="token assign-left variable">UPD_NEW</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> %Y /home/ec2-user/prepare/$FILENAME<span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] old file : <span class="token variable">$OLD_FILENAME</span>(<span class="token variable">$UPD_OLD</span>)"</span><span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] new file : <span class="token variable">$FILENAME</span>(<span class="token variable">$UPD_NEW</span>)"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$UPD_NEW</span> <span class="token parameter variable">-gt</span> <span class="token variable">$UPD_OLD</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Start deployment using the <span class="token variable">$FILENAME</span>"</span>  <span class="token comment"># 자동 실행 스크립트 비활성화</span>  /bin/sh /home/ec2-user/disable_cron.sh    <span class="token comment"># 기존 배포 파일 백업</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /home/ec2-user/<span class="token variable">$OLD_FILENAME</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">mv</span> /home/ec2-user/<span class="token variable">$OLD_FILENAME</span> /home/ec2-user/<span class="token variable">$OLD_FILENAME</span>.old  <span class="token keyword">fi</span>    <span class="token comment"># 신규 배포 파일 복사</span>  <span class="token function">cp</span> /home/ec2-user/prepare/<span class="token variable">$FILENAME</span> /home/ec2-user/    <span class="token comment"># 애플리케이션 종료 및 실행</span>  <span class="token function">sh</span> /home/ec2-user/stop.sh  <span class="token function">sleep</span> <span class="token number">10</span>  <span class="token function">sh</span> /home/ec2-user/start.sh  <span class="token comment"># 자동 실행 스크립트 활성화</span>  /bin/sh /home/ec2-user/disable_cron.sh    <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Deployment completed"</span>  <span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [WARN] There are no new deployment file"</span><span class="token keyword">fi</span></code></pre><h4 id="젠킨스-서버에서-배포-자동화-스크립트-수행"><a href="#젠킨스-서버에서-배포-자동화-스크립트-수행" class="headerlink" title="젠킨스 서버에서 배포 자동화 스크립트 수행"></a>젠킨스 서버에서 배포 자동화 스크립트 수행</h4><p>한단계 더 나아가서는 EC2 서버에서 접속해서 배포 스크립트를 실행하는 것도 젠킨스 서버에서 수행할 수 있도록 구성할 수 있다. <a href="https://plugins.jenkins.io/publish-over-ssh/">Publish over SSH</a> 플러그인을 통해 EC2 서버 접속을 위한 배스천 호스트에 SSH 연결을 수행하고 배스천 호스트에 존재하는 EC2 키 페어 파일을 통해 SSH 명령과 함께 배포 자동화 스크립트를 실행하는 명령어를 전달하면 된다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> a.pem ec2-user@<span class="token punctuation">&#123;</span>ec2-ip<span class="token punctuation">&#125;</span> <span class="token string">'sh /home/ec2-user/auto_deployment.sh'</span></code></pre><blockquote><p>테스트 환경이라 할지라도 보안 상 관점으로 EC2 서버에 직접 접근하도록 포트를 오픈하는 것은 권장하지 않는다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;회사 내 QA 엔지니어 퇴사로 인해 수동 배포를 수행해왔던 테스트 환경에 대해 자동화 배포로 변경하고자 학습한 내용이다. 솔루션 형태로 전달되어 고객이 직접 배포를 수행하는 프로젝트로 배포에 대한 과정도 변경사항에 포함될 </summary>
      
    
    
    
    
    <category term="Jenkins" scheme="https://kdevkr.github.io/tags/Jenkins/"/>
    
    <category term="S3" scheme="https://kdevkr.github.io/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>Amazon Linux 2를 VirtualBox에서 실행하기</title>
    <link href="https://kdevkr.github.io/amazonlinux2-virtualbox/"/>
    <id>https://kdevkr.github.io/amazonlinux2-virtualbox/</id>
    <published>2023-10-04T13:00:00.000Z</published>
    <updated>2024-01-01T01:22:22.869Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html">Amazon Linux 2를 온프레미스 가상 머신으로 실행</a> 문서를 참고하여 Amazon Linux 2 가상 머신 이미지를 통해 온프레미스 개발 및 테스트를 위한 환경을 실행할 수 있다. 참고로 AL2을 대체하는 Amazon Linux 2023에 대해서는 <a href="https://github.com/amazonlinux/amazon-linux-2023/issues/102">아직 가상 머신 이미지를 제공하지 않는</a> 것 같다. 그래서 AL2이 2025-06-30 일자로 EOL이 되더라도 VirtualBox에서 Amazon Linux 2를 실행해보고자 한다.</p><h4 id="Amazon-Linux-2-가상-머신-이미지-다운로드"><a href="#Amazon-Linux-2-가상-머신-이미지-다운로드" class="headerlink" title="Amazon Linux 2 가상 머신 이미지 다운로드"></a>Amazon Linux 2 가상 머신 이미지 다운로드</h4><p>우분투와 같이 Amazon Linux 2에 대한 설치 파일을 제공하는 것이 아니므로 부팅을 위한 이미지와 미리 정의된 가상 머신 이미지를 다운받아야 한다.</p><ul><li><a href="https://drive.google.com/file/d/17iBVLBLLJahQDb-3kgsWRCh72hzt1FIp/view?usp=sharing">seed.iso 부팅 이미지</a>  </li><li><a href="https://cdn.amazonlinux.com/os-images/2.0.20230926.0/virtualbox/amzn2-virtualbox-2.0.20230926.0-x86_64.xfs.gpt.vdi">Amazon Linux 2 LTS 2.0.20230926.0 x86_64 VirtualBox image</a></li></ul><h4 id="가상-머신-만들기-및-실행"><a href="#가상-머신-만들기-및-실행" class="headerlink" title="가상 머신 만들기 및 실행"></a>가상 머신 만들기 및 실행</h4><p><img data-src="/images/posts/amazonlinux2-virtualbox/01.png" alt="1. 가상 머신 만들기">  </p><p>새로 만들기 버튼을 눌러 가상 머신을 만듭니다. 리눅스 유형에 대한 운영 체제 종류는 공식 문서에 나와있는대로 Red Hat (64-bit)를 선택하자. 그리고 가상 디스크는 미리 정의된 가상 머신 이미지로 추가해야 한다. 위 스크린샷에 나와있는 듯이 <a href="https://cdn.amazonlinux.com/os-images/latest/">Amazon Linux 2 가상 머신 이미지</a> 페이지에서 다운로드 받은 이미지를 선택하면 된다.</p><p><img data-src="/images/posts/amazonlinux2-virtualbox/02.png" alt="2. 부팅 이미지 디스크 추가">  </p><p>가상 머신을 실행하기 전에 호스트 이름과 사용자 계정 정의를 위한 부팅 이미지를 가상 광학 디스크에 추가해야한다. Amazon Linux 2 가상 머신 이미지 페이지에서 다운받을 수 있는 seed.iso 파일이 <code>VERR_NOT_SUPPORTED</code> 사유로 가상 광학 디스크에 추가할 수 없을 수 있는데 본 글에서 제공하는 seed.iso 부팅 이미지 링크를 통해 <code>기본 사용자(ec2-user:amazon)</code>만 정의된 파일을 다운로드할 수 있으니 참고하도록 하자.</p><p>※ 본 글에서 제공하는 seed.iso 파일은 아래와 같이 정의되어있다.</p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>user-data</span></div><code class="language-yaml"><span class="token comment">#cloud-config</span><span class="token comment">#vim:syntax=yaml</span><span class="token key atrule">users</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> default<span class="token key atrule">chpasswd</span><span class="token punctuation">:</span>  <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    ec2-user:amazon</span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>meta-data</span></div><code class="language-yaml"><span class="token key atrule">local-hostname</span><span class="token punctuation">:</span> amazonlinux</code></pre><blockquote><p>부팅 이미지 파일은 MacOS 환경에서 hdiutil 도구를 사용하여 생성하였다.<br>$ hdiutil makehybrid -o seed.iso -hfs -joliet -iso -default-volume-name cidata seedconfig&#x2F;</p></blockquote><p><img data-src="/images/posts/amazonlinux2-virtualbox/03.png" alt="3. 사용자 계정 구성">  </p><p>가상 머신을 실행하고 맨처음 기본 사용자 계정인 ec2-user를 입력하면 사용자 계정에 대한 구성을 수행한다.</p><p><img data-src="/images/posts/amazonlinux2-virtualbox/04.png" alt="4. ec2-user 로그인">  </p><p>다시한번 로그인 화면이 출력되면 ec2-user와 amazon을 입력하면 위와 같이 Amazon Linux 2에 대한 로고를 확인할 수 있다. 처음 로그인에 성공했다면 그 이후에는 부팅 이미지가 필요하지 않다. 가상 머신을 종료하고 부팅 이미지를 가상 광학 디스크에서 제거하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html&quot;&gt;Amazon Linux 2를 온프레미스 가상 머신으로 실행&lt;</summary>
      
    
    
    
    
    <category term="AL2" scheme="https://kdevkr.github.io/tags/AL2/"/>
    
    <category term="Oracle VirtualBox" scheme="https://kdevkr.github.io/tags/Oracle-VirtualBox/"/>
    
  </entry>
  
</feed>
