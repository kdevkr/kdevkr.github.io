<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2023-01-24T10:13:55.540Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>화이트리스트 IP 범위를 통한 액세스 제한</title>
    <link href="https://kdevkr.github.io/whitelist-ip-ranges/"/>
    <id>https://kdevkr.github.io/whitelist-ip-ranges/</id>
    <published>2023-01-23T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>일반적으로 IT 시스템에서 특정 IP 대역에 대한 접근 제한을 설정하는 것은 인프라 영역에서 수행하는 편인데요. 예를 들어, 국내 사용자를 대상으로 하는 서비스에서는 웹 방화벽을 통해서 필리핀 혹은 중국과 같은 일부 국가에서 임의로 접근하는 트래픽을 애플리케이션까지 도달하지 않도록 합니다. 애플리케이션 레벨에서의 IP 보안 기능은 구현하지 않는 편이지만 일부 고객의 보안 요구사항에 의해서 네트워크 제한 기능을 적용하기도 합니다. 애플리케이션 레벨에서는 클라이언트 IP를 무작정 신뢰할 수는 없기 때문에 2차 비밀번호와 같은 2FA를 도입하는 것을 요구했지만 고객 입장에서는 기존에 사용하던 방식을 그대로 요구하는 것 같습니다.</p><h4 id="다양한-웹-서비스의-IP-보안-기능"><a href="#다양한-웹-서비스의-IP-보안-기능" class="headerlink" title="다양한 웹 서비스의 IP 보안 기능"></a>다양한 웹 서비스의 IP 보안 기능</h4><p>네이버부터 깃허브까지 알게 모르게 IP 주소 범위를 통해서 액세스를 제한하는 기능을 제공하고 있습니다. 고객의 요구사항에 따라서 특정 하위 사용자에 대한 로그인 시도 시 화이트리스트로 정해진 IP 주소 범위를 검증하는 것을 추가하고자 합니다.</p><ul><li><a href="https://privacy.naver.com/protection_activity/ip_security?menu=protection_activity_service_naver_info">네이버 IP 보안</a></li><li><a href="https://serviceguide.cafe24.com/ko_KR/SH.SG.IP.html">카페24 IP 접속제한설정</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/reference_policies_examples_aws_deny-ip.html">소스 IP를 바탕으로 AWS에 대한 액세스 거부</a></li><li><a href="https://support.google.com/a/answer/60751?hl=ko">Gmail의 허용 목록에 IP 주소 추가하기</a></li><li><a href="https://docs.github.com/ko/enterprise-cloud@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/managing-allowed-ip-addresses-for-your-organization">깃허브 조직에 허용되는 IP 주소 관리</a></li></ul><h4 id="IP-주소-범위-체크를-위한-자바-라이브러리"><a href="#IP-주소-범위-체크를-위한-자바-라이브러리" class="headerlink" title="IP 주소 범위 체크를 위한 자바 라이브러리"></a>IP 주소 범위 체크를 위한 자바 라이브러리</h4><p>PostgreSQL에서는 <a href="https://www.postgresql.org/docs/current/functions-net.html">Network Address Functions and Operators</a>를 통해 CIDR 표기에 대한 IP 범위를 체크할 수 있으며 비즈니스 로직을 수행하는 애플리케이션 레벨에서는 아래와 같은 라이브러리들을 활용할 수 있을 것 같습니다. 현재 시스템은 스프링 시큐리티를 사용하고 있으므로 굳이 다른 라이브러리는 필요하지 않을 것으로 생각됩니다</p><ul><li><a href="https://github.com/spring-projects/spring-security/blob/main/web/src/main/java/org/springframework/security/web/util/matcher/IpAddressMatcher.java">IpAddressMatcher</a></li><li><a href="https://commons.apache.org/proper/commons-net/">Apache Commons Net</a></li><li><a href="https://seancfoley.github.io/IPAddress/">IPAddress</a></li></ul><h4 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h4><p>시스템에 접근 가능한 IP 범위를 화이트리스트로 등록하고 로그인을 제한하는 비즈니스 로직을 구현하는 것은 다른 주니어 개발자들에게 맡기려고 합니다. 그 이유는 IP와 CIDR 표기법 등 인프라 영역에서 네트워크 지식을 알아가기 위한 좋은 요구사항이라고 생각되기 때문입니다. 제가 완성된 기능을 리뷰하더라도 개인적으로 생각되는 주의사항에는 다음의 항목들이 있습니다.</p><ul><li>X-Forwarded-For</li><li>-Djava.net.preferIPv4Stack&#x3D;true</li></ul><p>오늘날의 인프라 구성 상 HttpServletRequest.getRemoteAddr() 함수의 결과는 클라이언트 아이피가 아닐 가능성이 많으며 로드밸런서 등을 거치면서 전달되는 XFF와 같은 프록시 헤더에 의존해야만 한다는 점입니다. 만약, AWS VPC 아이피 대역이 클라이언트 아이피로 파악된다면 모든 로그인이 가능한 취약점이 발생할지도 모릅니다. 두번째는 아직까지 IPv4에 대한 CIDR로 판단하는 경우가 많다는 것이겠지만 IPv6가 전달되었을때 검증할 수 있는지도 고려하고 테스트해야할 중요한 부분이라고 생각됩니다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;일반적으로 IT 시스템에서 특정 IP 대역에 대한 접근 제한을 설정하는 것은 인프라 영역에서 수행하는 편인데요. 예를 들어, 국내 사용자를 대상으로 하는 서비스에서는 웹 방화벽을 통해서 필리핀 혹은 중국과 같은 일부 국가에서 임의로 접근하는 트래</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Testcontainers for Java</title>
    <link href="https://kdevkr.github.io/testcontainers-java/"/>
    <id>https://kdevkr.github.io/testcontainers-java/</id>
    <published>2023-01-13T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>현재 회사는 빠른 업무 처리를 위해서 간단한 방식을 취해왔고 이로 인해 최근에는 제품 품질 강화를 고민하는 상황이 발생했다. 조직에서 당장 나에게 요구하는 것은 테스트 환경에 대한 방안에 대한 도입하는 것이다. 작은 조직으로써 간단한 방식을 취했기 때문에 제품 코드에 대한 단위 테스트를 작성한 부분이 생각보다 많지 않다. 조직 내의 개발자들은 테스트 코드 작성을 강제하지 않기 때문에 스스로 중요하다고 생각하지 않는다면 굳이 작성하지 않는 편이었고 개발자마다 다른 방식으로 테스트를 수행하도록 코드가 작성되어 있었다. 아무튼 테스트 코드가 작성되지 않았는데 테스트 환경을 준비하는 것에 의아한 부분이 있긴 하지만 요구하므로 시도해보기로 한다.</p><h4 id="기술-스택"><a href="#기술-스택" class="headerlink" title="기술 스택"></a>기술 스택</h4><p>현재 조직에서 만드는 제품에서 사용되는 기술 스택은 대부분의 회사들에서도 도입하는 일반적인 기술들이다.</p><ul><li>Spring Boot 2.3 (JDK 11)</li><li>Postgresql 12.3</li><li>Elasticsearch 7.3.2</li><li>Redis 5.0.3</li><li>KDB+ 4.0</li></ul><p>시간이 많이 흘러서 지금은 버전이 많이 낮지만 생각보다 기술 스택은 나쁘지 않다고 생각된다. 사용하는 대부분의 기술 스택에 대해서는 <a href="https://www.testcontainers.org/">Testcontainers</a>에서 테스트 컨테이너 모듈이나 예제를 제공하고 있다. 그러나, 상용 시계열 데이터베이스로 사용중인 KDB+에 대한 의존성으로 인해 테스트 환경을 준비하는게 생각보다 까다롭지만 KDB+에 대한 도커 컴포즈 환경을 만든다면 <a href="https://www.testcontainers.org/modules/docker_compose/">도커 컴포즈 모듈</a>로 실행할 수 있다는 것이다.</p><h4 id="요구사항"><a href="#요구사항" class="headerlink" title="요구사항"></a>요구사항</h4><p><a href="https://www.testcontainers.org/supported_docker_environment/">Docker v17.0.3+</a> 버전을 요구하며 <a href="https://www.testcontainers.org/test_framework_integration/junit_5/">Jupiter&#x2F;JUnit 5</a> 프레임워크를 지원하므로 테스트 코드에 대한 작성은 JUnit5로 작성되도록 가이드하면 될 것 같다.</p><h4 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h4><p>기본적으로 <a href="https://github.com/testcontainers/testcontainers-java/tree/main/examples">testcontainers-java&#x2F;examples</a>를 제공하며 본 글을 작성하면서 확인해본 예제는 <a href="https://github.com/kdevkr/spring-demo-testcontainers">kdevkr&#x2F;spring-demo-testcontainers</a>에서 확인할 수 있다.</p><h4 id="트러블슈팅"><a href="#트러블슈팅" class="headerlink" title="트러블슈팅"></a>트러블슈팅</h4><h5 id="1-PostgreSQL-컨테이너가-중복으로-실행된-문제"><a href="#1-PostgreSQL-컨테이너가-중복으로-실행된-문제" class="headerlink" title="1. PostgreSQL 컨테이너가 중복으로 실행된 문제"></a>1. PostgreSQL 컨테이너가 중복으로 실행된 문제</h5><p>JDBC 테스트를 위해 PostgreSQL 컨테이너를 적용해보는 과정에서 <a href="https://github.com/kdevkr/spring-demo-testcontainers/pull/8#issuecomment-1374673165">max_connections 옵션 설정</a>이 되지 않는 현상이 있었는데 <a href="https://github.com/testcontainers/testcontainers-java/discussions/6398">Discussions를 통한 문의</a>를 통해 Testcontainers의 개발자분에게 도움을 받았다. 내가 잘못한 부분은 <a href="https://www.testcontainers.org/modules/databases/jdbc/">Database containers launched via JDBC URL scheme</a>으로 자동 생성되는 컨테이너 방식과 수동으로 생성하는 것을 혼용하고 있었던 것이다. JDBC URL 방식으로 테스트 컨테이너를 실행할 것이 아니라면 PostgreSQL 컨테이너를 생성하고 일반적인 JDBC URL을 사용하면 된다.</p><h5 id="2-테스트-컨테이너-공유"><a href="#2-테스트-컨테이너-공유" class="headerlink" title="2. 테스트 컨테이너 공유"></a>2. 테스트 컨테이너 공유</h5><p>여러개의 테스트 함수를 포함하는 클래스에서 테스트 컨테이너를 공유하고자 한다면 @Testcontainers와 @Container를 활용하면 된다.</p><h5 id="3-테스트-컨테이너에-대한-로그백-설정"><a href="#3-테스트-컨테이너에-대한-로그백-설정" class="headerlink" title="3. 테스트 컨테이너에 대한 로그백 설정"></a>3. 테스트 컨테이너에 대한 로그백 설정</h5><p><a href="https://www.testcontainers.org/supported_docker_environment/logging_config/">Recommended logback configuration</a>를 제공하므로 스프링 부트에서 기본적으로 제공하는 로그백에 대한 설정을 참고할 수 있다. 로그백에 대한 설정을 하지 않는다면 불필요하게 컨테이너 실행에 대한 로그가 출력될 것이다. 테스트 컨테이너에 대한 이슈가 발생할 경우에만 아래와 같은 패키지의 로그 레벨을 DEBUG로 설정하자.</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.testcontainers<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="4-테스트-컨테이너-환경에-대한-프로퍼티-적용"><a href="#4-테스트-컨테이너-환경에-대한-프로퍼티-적용" class="headerlink" title="4. 테스트 컨테이너 환경에 대한 프로퍼티 적용"></a>4. 테스트 컨테이너 환경에 대한 프로퍼티 적용</h5><p>JUnit5 테스트 코드를 제대로 작성하지 않다보니 테스트 프로파일에 대한 파일을 만들고 환경 변수를 통해 프로파일을 지정하였으나 테스트 컨테이너를 실행하는 경우 컨테이너의 호스트와 포트가 원래 포트와 달라지는 부분으로 인하여 아래와 같은 유틸 클래스들을 사용해야했다.</p><ul><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-test/src/main/java/org/springframework/test/context/DynamicPropertySource.java">@DynamicPropertySource</a></li><li><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-test/src/main/java/org/springframework/test/context/DynamicPropertyRegistry.java">DynamicPropertyRegistry</a></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Container</span><span class="token keyword">static</span> <span class="token class-name">GenericContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">DockerImageName</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"redis:6.2-alpine"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DynamicPropertySource</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerRedisProperties</span><span class="token punctuation">(</span><span class="token class-name">DynamicPropertyRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    registry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"spring.redis.host"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> redis<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"spring.redis.port"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> redis<span class="token punctuation">.</span><span class="token function">getMappedPort</span><span class="token punctuation">(</span>REDIS_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 회사는 빠른 업무 처리를 위해서 간단한 방식을 취해왔고 이로 인해 최근에는 제품 품질 강화를 고민하는 상황이 발생했다. 조직에서 당장 나에게 요구하는 것은 테스트 환경에 대한 방안에 대한 도입하는 것이다. 작은 조직으로써 간단한 방식을 취했</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>깃허브 풀 리퀘스트 상태 검사</title>
    <link href="https://kdevkr.github.io/github-pr-status-checks/"/>
    <id>https://kdevkr.github.io/github-pr-status-checks/</id>
    <published>2023-01-09T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.536Z</updated>
    
    <content type="html"><![CDATA[<p>현재 회사에서 새해 목표는 빠른 업무 처리를 위해서 간단한 방식을 취함에 따라서 지속적인 성장을 이루어냈으나 제품에 대한 신뢰성의 문제를 경험하고나서는 제품 품질을 강화하기 위한 코드 품질 또는 테스트 자동화에 대한 환경 구축의 필요성을 느끼고 많은 것들을 시도하고 있다. 깃허브 풀 리퀘스트를 수행하고 있었으나 코드 리뷰가 주요 테크 기업이나 스타트업처럼 개발 문화로 정착되어있지 않음으로 인해서 단위 테스트 코드를 작성하도록 요구한다거나 정적 분석 도구를 통해 코드 품질에 대해서 분석하고 리팩토링을 수행하는 과정이 없다보니 개발자들이 스스로 편한 방식을 사용해서 작업 요건에 대해서 처리해왔다.</p><p>페어 프로그래밍을 선호하는 시니어 개발자도 깃허브 코드리뷰에 대해서는 습관화 되어있지 않았기에 비록 브랜치 보호 기능을 통해 리뷰어 승인을 받도록 강제하더라도 상세하게 코드 변경사항을 검토하지 않고 승인만 해버리는 상황이 발생했었다. 그럼에도 브랜치 보호 기능으로 불편함을 강제함으로써 작업에 대해 브랜치를 만들어서 작업하고 풀 리퀘스트를 요청하는 방법에 대해서는 모든 개발자들이 익숙해졌다고 생각이 든다. 아무튼 깃허브 풀 리퀘스트를 활용함에도 제대로 된 코드 리뷰 문화가 이루어지지 않기 때문에 최소한 코드 품질에 대해서 개발자들이 인지할 수 있도록 깃허브 풀 리퀘스트 시 상태 검사를 통해 리뷰 이외에도 상태 검사가 통과되어야만 원하는 브랜치에 머지할 수 있도록 강제하고자 한다. </p><blockquote><p>풀 리퀘스트에 대해 제대로 리뷰해야한다고 말했으나 당장 업무를 처리하는데 불편함이 있으므로 받아들여지지 않았다.</p></blockquote><p>데브옵스에 이어 GitOps가 떠오르던 시기에 확인했던 것은 풀 리퀘스트에 대해 상태 체크를 수행할 수 있도록 설정할 수 있다는 것이었다. 실제로 다음과 같이 대부분의 오픈소스에서는 풀 리퀘스트로 변경되는 부분에 대해서 상태 체크를 수행하도록 깃허브 액션을 통해 워크플로우를 구성해놓은 것을 확인할 수 있다.</p><p><img data-src="/images/posts/github-pr-status-check/01.png"></p><p>풀 리퀘스트 시 코드 상태 검사를 수행하는 것에 대한 이점은 무엇이 있을까? 현재 조직의 기준에서는 제대로 된 코드 리뷰 문화가 갖추어져 있지 않기 때문에 기본적인 코드 품질에 대해서는 Checkstyle 또는 ESLint를 수행하여 정적 분석을 수행하고 자동으로 컨벤션을 맞추도록 강제할 수 있다는 것에 있다. 자신만의 코딩 컨벤션이 갖추어지지 않은 신입 개발자들에게는 시니어 개발자들이 리뷰하지 않더라도 컨벤션에 대한 중요성을 인지시키고 가이드할 수 있기 때문이다.</p><h4 id="깃허브-액션"><a href="#깃허브-액션" class="headerlink" title="깃허브 액션"></a>깃허브 액션</h4><p>풀 리퀘스트 시 상태 검사를 수행할 수 있도록 깃허브 액션을 통해 워크플로우를 작성할 수 있다. 많은 개발자들이 공유하여 사용하는 액션들 중에서 상태 검사를 위해 <a href="https://github.com/reviewdog/reviewdog">reviewdog</a>를 기반으로 수행하는 아래의 두가지 워크플로우를 적용해보기로 하였다. 조직 내에서 결정한 자바 코딩 컨벤션이 없어도 기본적인 구글 자바 스타일을 통해서 상태 검사를 수행할 수 있으며 프론트엔드 코드에 대해서도 ESLint를 수행하도록 되어있으므로 위 두가지 워크플로우만 수행하더라도 충분히 코드 품질을 향상시키고 유지할 수 있을 것이라 생각된다.</p><ul><li><a href="https://github.com/marketplace/actions/run-java-checkstyle">Run java checkstyle</a></li><li><a href="https://github.com/marketplace/actions/run-eslint-with-reviewdog">Run eslint with reviewdog</a></li></ul><blockquote><p>깃허브 액션 워크플로우 파일 : <a href="https://github.com/kdevkr/mambo-box/blob/main/.github/workflows/pr-checks.yml">.github&#x2F;workflows&#x2F;pr-checks.xml</a></p></blockquote><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> PR Checks<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> main    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'**.java'</span>      <span class="token punctuation">-</span> <span class="token string">'**.js'</span>      <span class="token punctuation">-</span> <span class="token string">'**.vue'</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">checks</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Checks    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># ubuntu-22.04</span>    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">java</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span>        <span class="token key atrule">node</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> dorny/paths<span class="token punctuation">-</span>filter@v2        <span class="token key atrule">id</span><span class="token punctuation">:</span> changes        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            java:              - '**.java'            vuejs:              - '**.vue'              - '**.js'</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token comment">###########################################</span>      <span class="token comment">## Java Checkstyle</span>      <span class="token comment">###########################################</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.java == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up JDK $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.Java <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>java@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">distribution</span><span class="token punctuation">:</span> corretto          <span class="token key atrule">java-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.java <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">'gradle'</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.java == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Run checkstyle        <span class="token key atrule">uses</span><span class="token punctuation">:</span> nikitasavinov/checkstyle<span class="token punctuation">-</span>action@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">reporter</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>pr<span class="token punctuation">-</span>check          <span class="token key atrule">tool_name</span><span class="token punctuation">:</span> <span class="token string">'checkstyle'</span>          <span class="token key atrule">checkstyle_version</span><span class="token punctuation">:</span> <span class="token number">10.3</span>          <span class="token key atrule">checkstyle_config</span><span class="token punctuation">:</span> checkstyle.xml      <span class="token comment">###########################################</span>      <span class="token comment">## Node ESLint</span>      <span class="token comment">###########################################</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">'npm'</span>          <span class="token key atrule">cache-dependency-path</span><span class="token punctuation">:</span> npm<span class="token punctuation">-</span>shrinkwrap.json      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache Dependencies        <span class="token key atrule">id</span><span class="token punctuation">:</span> npm<span class="token punctuation">-</span>cache        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'**/node_modules'</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> runner.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>node<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> hashFiles('<span class="token important">**/npm-shrinkwrap.json')</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            $&#123;&#123; runner.os &#125;&#125;-node-</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true' <span class="token important">&amp;&amp;</span> steps.npm<span class="token punctuation">-</span>cache.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Run eslint        <span class="token key atrule">uses</span><span class="token punctuation">:</span> reviewdog/action<span class="token punctuation">-</span>eslint@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">reporter</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>pr<span class="token punctuation">-</span>check          <span class="token key atrule">eslint_flags</span><span class="token punctuation">:</span> <span class="token string">'--ext .js,.vue ./src/main/resources/static/js'</span></code></pre><p>처음에는 간단하게 풀 리퀘스트가 생성되고 커밋이 푸시되었을때 <strong>체크스타일</strong>과 <strong>ESLint</strong>가 동작하도록 작성하였으나 백엔드 작업시에도 불필요하게 ESLint를 수행하고 프론트엔드 작업시에도 불필요하게 자바 파일에 대한 체크스타일을 수행하는 비효율적인 동작을 수행하는 구조였다. 추가적인 개선을 통해 풀 리퀘스트 시 <a href="https://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore">paths</a> 문법을 활용해서 .java, .js, .vue 파일에 대한 변경사항이 있을때만 상태 검사에 대한 워크플로우가 실행될 수 있도록 변경했으며 <a href="https://github.com/dorny/paths-filter">dorny&#x2F;paths-filter</a>를 통해서 자바 파일에 대한 변경사항이 있다면 체크스타일을 수행하고 프론트 파일에 대한 변경사항이 있다면 ESLint가 개별적으로 수행할 수 있도록 하였다.</p><blockquote><p>구글 체크스타일은 회사 코드에 적합하지 않다고 판단되어 가장 간단한 규칙으로 수행할 수 있도록 커스터마이징 된 체크스타일 파일을 추가했습니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 회사에서 새해 목표는 빠른 업무 처리를 위해서 간단한 방식을 취함에 따라서 지속적인 성장을 이루어냈으나 제품에 대한 신뢰성의 문제를 경험하고나서는 제품 품질을 강화하기 위한 코드 품질 또는 테스트 자동화에 대한 환경 구축의 필요성을 느끼고 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>젠킨스에 Amazon Corretto JDK 추가하기</title>
    <link href="https://kdevkr.github.io/add-jdk-installations-jenkins/"/>
    <id>https://kdevkr.github.io/add-jdk-installations-jenkins/</id>
    <published>2022-12-31T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.536Z</updated>
    
    <content type="html"><![CDATA[<p>최근에는 <a href="https://www.youtube.com/watch?v=iLqGzEkusIw">깃허브 액션의 워크플로우 활용</a>하는 경우가 늘고 있는 것 같지만 대부분의 회사에서는 <a href="https://www.youtube.com/watch?v=0Emq5FypiMM">CI&#x2F;CD</a> 도구로 젠킨스를 많이 사용할 것이다. 그런데 대부분 어떤 개발자에 의해서 젠킨스가 이미 구성되어있기 때문에 신입 또는 주니어 개발자가 직접 경험하는 부분이 없을 수 있다. 리눅스 서버에 JDK를 설치하고 젠킨스를 실행하더라도 운영되는 환경에 따라 사용되는 JDK를 사용하여 애플리케이션을 빌드하도록 구성해야한다.</p><h4 id="JDK-Installations"><a href="#JDK-Installations" class="headerlink" title="JDK Installations"></a>JDK Installations</h4><p>Jenkins 관리 &gt; Global Tool Configuration &gt; JDK installations 에서 젠킨스 시스템에서 사용될 JDK 목록을 관리할 수 있도록 제공하고 있다. 이를 활용해서 각 프로젝트에서 사용될 JDK을 설치해서 운영 환경에서 사용될 JVM 버전과 동일한 JDK 벤더를 사용해서 애플리케이션을 빌드할 수 있다.</p><ul><li><a href="https://github.com/adoptium/temurin17-binaries/releases">https://github.com/adoptium/temurin17-binaries/releases</a></li><li><a href="https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz">https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</a></li></ul><p>일반적으로 범용적인 목적으로는 Temurin이라는 OpenJDK를 사용하고 회사에서는 운영 환경인 CSP와 동일한 Amazon Corretto JDK를 사용하고 있다. 기본적으로는 젠킨스가 설치된 서버 시스템에 <a href="https://www.youtube.com/watch?v=qx3XK82BZPk">여러개의 JDK를 설치</a>해서 사용하는 것으로 설명한다. 다행히도 JDK Tool Plugin 에서는 다운로드 링크를 지정해서 추가할 수 있는 <a href="https://stackoverflow.com/a/55244659">Extract .zip&#x2F;.tar.gz</a>을 제공하고 있다. </p><blockquote><p>Downloads a tool archive and installs it within Jenkins’s working directory.<br>Example: https:&#x2F;&#x2F;downloads.apache.org&#x2F;ant&#x2F;binaries&#x2F;apache-ant-1.10.12-bin.zip and specify a subdir of apache-ant-1.10.12 .</p></blockquote><p>위 설명에 따라서 다운로드 링크에 의해서 압축이 해제될 폴더를 지정해야한다.</p><p><img data-src="/images/posts/add-jdk-installations-jenkins/01.png"></p><h4 id="프로젝트에서-Amazon-Corretto-JDK-사용하기"><a href="#프로젝트에서-Amazon-Corretto-JDK-사용하기" class="headerlink" title="프로젝트에서 Amazon Corretto JDK 사용하기"></a>프로젝트에서 Amazon Corretto JDK 사용하기</h4><p>프로젝트 빌드 유형에 따라서 설치한 JDK를 지정하는 방법을 공유하고자 한다. 회사에서는 Freestyle Project로 간단하게 사용하고 있는데 인터넷에서는 파이프라인도 많이 활용하고 있는 것 같다.</p><p><img data-src="/images/posts/add-jdk-installations-jenkins/02.png" alt="Freestyle Project"></p><pre class="language-bash" data-language="bash"><code class="language-bash">Started by user mamboRunning as SYSTEM<span class="token punctuation">[</span>EnvInject<span class="token punctuation">]</span> - Loading <span class="token function">node</span> environment variables.Building <span class="token keyword">in</span> workspace /var/jenkins_home/workspace/Test<span class="token punctuation">[</span>Test<span class="token punctuation">]</span> $ /bin/sh -xe /tmp/jenkins17925040181999271110.sh+ <span class="token function">which</span> java/var/jenkins_home/tools/hudson.model.JDK/Amazon_Corretto_11/amazon-corretto-11.0.17.8.1-linux-x64/bin/java+ java --versionopenjdk <span class="token number">11.0</span>.17 <span class="token number">2022</span>-10-18 LTSOpenJDK Runtime Environment Corretto-11.0.17.8.1 <span class="token punctuation">(</span>build <span class="token number">11.0</span>.17+8-LTS<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM Corretto-11.0.17.8.1 <span class="token punctuation">(</span>build <span class="token number">11.0</span>.17+8-LTS, mixed mode<span class="token punctuation">)</span>Finished: SUCCESS</code></pre><p>위와 같이 Execute Shell 커맨드를 사용해서 현재 빌드 환경에 대한 자바 버전을 확인해보니 정상적으로 JDK로 지정한 Amazon Corretto 11을 사용중인 것으로 출력되었다. 그리고 파이프라인 프로젝트에서는 어떻게 지정하는지 검색해보니 아래와 같이 문법을 작성한다고 한다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">pipeline <span class="token punctuation">&#123;</span>    agent any        tools <span class="token punctuation">&#123;</span>        jdk <span class="token interpolation-string"><span class="token string">"Amazon Corretto 11"</span></span>    <span class="token punctuation">&#125;</span>        environment <span class="token punctuation">&#123;</span>        JAVA_HOME <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"tool Amazon Corretto 11"</span></span>    <span class="token punctuation">&#125;</span>    stages <span class="token punctuation">&#123;</span>        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'Java Version'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            steps <span class="token punctuation">&#123;</span>                sh <span class="token string">'java -version'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>프론트엔드 빌드에 사용될 Node 버전을 설치하기 위해서는 NodeJS 플러그인을 설치하면 동일하게 Global Tool Configuration 기능에 NodeJS installations 항목이 추가됩니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;최근에는 &lt;a href=&quot;https://www.youtube.com/watch?v=iLqGzEkusIw&quot;&gt;깃허브 액션의 워크플로우 활용&lt;/a&gt;하는 경우가 늘고 있는 것 같지만 대부분의 회사에서는 &lt;a href=&quot;https://www.youtube</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>인텔리제이 자바 에이전트 실행하기</title>
    <link href="https://kdevkr.github.io/idea-javaagent/"/>
    <id>https://kdevkr.github.io/idea-javaagent/</id>
    <published>2022-12-28T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글의 APM 자바 에이전트 적용 예제는 <a href="https://github.com/kdevkr/spring-demo-apm">kdevkr&#x2F;spring-demo-apm</a> 리포지토리를 참고하실 수 있습니다.</p></blockquote><p><a href="/load-testing/">부하 및 성능 테스트는 어떻게 하는거지?</a>에서 언급한 것처럼 로컬 환경에 성능 테스트에 대한 환경을 구성하기 위해서 Scouter, Pinpoint, Elastic APM과 같은 APM 솔루션들의 자바 에이전트를 실행해야하는 상황이 발생합니다. 실제로는 테스트 환경에 애플리케이션을 배포하고 애플리케이션 서버를 구동하는 경우에 <a href="https://docs.newrelic.com/docs/apm/agents/java-agent/installation/include-java-agent-jvm-argument/#spring-boot">javaagent 플래그로 에이전트 파일을 지정</a>하면 됩니다.</p><p>제가 하고싶었던 것은 로컬 환경에 APM 서버를 구축하고 인텔리제이를 통해 애플리케이션 서버를 실행하는 경우에 자바 에이전트를 적용해보고 싶었습니다. 인텔리제이를 사용하면서 스프링 부트 애플리케이션을 실행할 때 특정 프로파일을 활성화하거나 환경변수를 통해서 일부 프로퍼티를 커스텀하게 적용해본 케이스는 있으나 자바 에이전트를 지정해본 경험은 없었습니다. </p><h4 id="Path-Variables"><a href="#Path-Variables" class="headerlink" title="Path Variables"></a>Path Variables</h4><p>인텔리제이 문서 상에는 <a href="https://www.jetbrains.com/help/idea/absolute-path-variables.html">Path variables</a> 항목으로 경로 변수를 추가하거나 빌트인되어 있는 경로 변수를 확인할 수 있습니다. 그리고 아래와 같이 실행 구성에서 Path Variables를 사용할 수 있다고도 안내해주고 있네요.</p><blockquote><p>You can use path variables to specify paths and command-line arguments for external tools and in some run configurations. For more information, see Built-in IDE macros.</p></blockquote><p>따라서 프로젝트 폴더에 자바 에이전트 파일이 위치한다면 빌트인 된 경로 변수를 사용하여 지정할 수 있다는 의미가 됩니다.</p><h4 id="Elastic-APM-자바-에이전트"><a href="#Elastic-APM-자바-에이전트" class="headerlink" title="Elastic APM 자바 에이전트"></a>Elastic APM 자바 에이전트</h4><pre class="language-none"><code class="language-none">-javaagent:$PROJECT_DIR$&#x2F;agent&#x2F;elastic-apm-agent-1.26.1.jar-Delastic.apm.server_urls&#x3D;http:&#x2F;&#x2F;localhost:8200-Delastic.apm.service_name&#x3D;spring-demo-apm-Delastic.apm.application_packages&#x3D;com.example.demo-Delastic.apm.environment&#x3D;dev</code></pre><p><strong>$PROJECT_DIR$</strong> 는 인텔리제이에 내장된 프로젝트 경로에 대한 변수이며 JVM 옵션에서도 사용할 수 있습니다. 프로젝트 경로 변수가 아니라 직접 프로젝트 경로를 입력해야하는 경우에는 <a href="https://stackoverflow.com/a/45115316">쌍따옴표를 사용</a>해야만 합니다.</p><p><img data-src="/images/posts/idea-javaagent/01.png"></p><h4 id="실행-구성-저장"><a href="#실행-구성-저장" class="headerlink" title="실행 구성 저장"></a>실행 구성 저장</h4><p>인텔리제이에서는 실행 및 디버그 구성을 파일로도 저장하여 공유할 수 있도록 지원합니다. Run&#x2F;Debug Configurations의 상단 우측을 보면 파일로 저장 옵션이 있으며 이를 체크하는 경우 프로젝트 루트 경로의 .run 폴더에 실행 구성 파일이 생성됩니다. 예제 리포지토리의 <a href="https://github.com/kdevkr/spring-demo-apm/blob/main/.run/SpringDemoApplication%20%5BElastic%20APM%5D.run.xml">SpringDemoApplication [Elastic APM].run.xml</a>와 같이 확인하실 수 있습니다. 주의해야할 사항은 빌트인 경로 변수를 사용하여 프로젝트 경로를 자동으로 지정할 수 있었으나 실행 구성을 다시 확인해보니 프로젝트 경로 변수는 실제 프로젝트 경로로 변경되어있음을 확인할 수 있습니다. 따라서, 누군가에게 실행 구성을 공유해야한다면 프로젝트 경로 변수로 지정된 상태에서 저장하는게 좋을 것 같습니다.</p><p><img data-src="/images/posts/idea-javaagent/02.png"></p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글의 APM 자바 에이전트 적용 예제는 &lt;a href=&quot;https://github.com/kdevkr/spring-demo-apm&quot;&gt;kdevkr&amp;#x2F;spring-demo-apm&lt;/a&gt; 리포지토리를 참고하실 수 있습</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>개발 팀장으로 해야할 일</title>
    <link href="https://kdevkr.github.io/team-tech-lead/"/>
    <id>https://kdevkr.github.io/team-tech-lead/</id>
    <published>2022-12-27T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>2023년부터 단순히 주니어 개발자가 아닌 개발 팀장(기술적인 판단을 하는 테크 리드)으로써의 역량을 키울 수 있는 기회가 왔다. 시니어 개발자로써 기술적인 부분을 많이 경험한 것이 아니기에 개발 리더로써 제대로 판단할 수 있을지는 걱정이 되는 부분이다. 사실 그동안 이 회사에서 반드시 해야했으나 하지 않았던 것을 그대로 경험하였기 때문에 해야하는 것으로 적극적으로 조금씩 해나가야할 것 같다. 회사 차원에서는 시니어 개발자들에게 몰리는 책임을 분산하고자 하는 목적일 것이다. 당연히 연차가 높아지면서 필요로 하는 역량은 많아지고 책임감도 높아지게 될 것이다. 그러나, 일부 사람들이 그 책임들을 짊어지게되면 오히려 조직에게 독이 될 수 있다는 것을 경험하고 있다. 내가 개발 리더를 담당하더라도 PO(Product Owner)인 시니어 개발자가 있기에 당장 팀원에 대한 케어나 리딩이 필요한 것은 아니다. </p><p>그럼 내가 개발 팀장(테크 리드)으로써 해야할 일은 무엇일까?</p><h4 id="반드시-해야할-것들"><a href="#반드시-해야할-것들" class="headerlink" title="반드시 해야할 것들"></a>반드시 해야할 것들</h4><ol><li>프로젝트 문서화</li><li>정적 분석 및 코드 리뷰</li><li>기술 방향성 체크 및 필요 기술 도입</li></ol><h4 id="당장-해야할-것들"><a href="#당장-해야할-것들" class="headerlink" title="당장 해야할 것들"></a>당장 해야할 것들</h4><ol><li>PR 코드 상태 검사 도입</li><li>신규 인력 프로젝트 온보딩</li></ol><p>현재 회사에서는 브랜치 전략을 도입하고 PR을 수행할 때에 한 명 이상의 리뷰를 받아야하도록 강제했으나 대부분 코드 리뷰보다는 조직장이나 PL들을 리뷰어로 두고 승인만 받는 정도로 활용하고 있다. 이제는 그것을 넘어서 작성되는 코드를 리뷰하지 않더라도 대략적인 정적 분석 도구들을 통해서 코드 상태를 체크할 수 있도록 깃허브에서 제공하는 PR 상태 체크 기능을 도입해야한다. 이와 더불어 불필요하게 PR에 대한 추가 커밋을 하지 않도록 ESLint를 수행할 수 있도록 <a href="https://github.com/typicode/husky">husky</a>를 적용하거나 SonarLint 플러그인들을 설치하도록 가이드하여 코드 품질을 높여야할 것으로 생각된다. 이것은 코드 리뷰를 제대로 수행해본적이 없는 현재 조직에서의 최선의 선택일지 모르겠다.</p><blockquote><p>코드 리뷰를 제대로 한다는 기준이나 가이드가 갖추어진게 아니기 때문에 코드 리뷰라는 과정으로 인해 기존의 인력들이 처리하던 업무량이나 스타일에 영향이 미칠 수 있음을 감안해야한다.</p></blockquote><p><a href="/static-analysis-performed-by-sonarqube-and-github-action/">SonarQube에 의한 정적 분석</a>을 수행하고는 있으나 분석된 결과를 토대로 리팩토링을 수행하지 않았기에 이제부터라도 해당 지표를 모든 팀원이 공유해서 제품에 대한 품질 고민을 같이 해야한다고 생각한다. 남들보다 일찍 개발 리더로써의 역할을 수행하는 것이기에 <strong>정신적 멘토</strong>였던 과장님께서 육아휴직으로 일을 잠시 쉬어가기전에 많은 도움을 주겠다고 약속했다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2023년부터 단순히 주니어 개발자가 아닌 개발 팀장(기술적인 판단을 하는 테크 리드)으로써의 역량을 키울 수 있는 기회가 왔다. 시니어 개발자로써 기술적인 부분을 많이 경험한 것이 아니기에 개발 리더로써 제대로 판단할 수 있을지는 걱정이 되는 </summary>
      
    
    
    
    
    <category term="Tech Lead" scheme="https://kdevkr.github.io/tags/Tech-Lead/"/>
    
  </entry>
  
  <entry>
    <title>X-Accel-Buffering</title>
    <link href="https://kdevkr.github.io/x-accel-buffering/"/>
    <id>https://kdevkr.github.io/x-accel-buffering/</id>
    <published>2022-12-25T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>오래전에 개인적으로 <a href="/reverse-proxy-using-nginx/">엔진엑스로 알아보는 리버스 프록시</a>를 학습하면서 이벤트 스트림에 대한 프록시 구성 시 <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering">proxy_buffering</a> 과 같은 버퍼링 옵션을 비활성화 해야한다고 정리하였습니다. HTTP&#x2F;2 연결과 함께 <a href="https://www.baeldung.com/spring-server-sent-events">SSE(Server Sent Event)</a>를 활용하면 굳이 웹소켓 구현을 하지 않아도 서버 측에서 클라이언트로 원하는 데이터를 지속적으로 전달할 수 있습니다. </p><p>하지만, Nginx 측에서는 Nginx 구성에 대한 10가지 실수에서 <a href="https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/#proxy_buffering-off">Mistake 5: The proxy_buffering off Directive</a>으로 버퍼링 옵션에 대한 비활성화에 대해서 이야기합니다. </p><blockquote><p>Buffering can also be enabled or disabled by passing “yes” or “no” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_headers">proxy_ignore_headers</a> directive.</p></blockquote><p>위와 같이 엔진엑스 공식 문서 상에는 프록시 버퍼링을 무시할 수 있는 헤더에 대한 설명을 해주고 있으며 회사 내 인프라 엔지니어 분의 의견에 따라서 프록시 구성 시 버퍼링 옵션을 일괄적으로 변경하기보다는 애플리케이션 서버에서 이벤트 스트림에 대한 응답을 수행할 때 <a href="https://serverfault.com/a/801629">X-Accel-Buffering 헤더를 응답</a>하는 것으로 최종 결정했습니다. </p><h4 id="X-Accel-Buffering-헤더-응답하기"><a href="#X-Accel-Buffering-헤더-응답하기" class="headerlink" title="X-Accel-Buffering 헤더 응답하기"></a>X-Accel-Buffering 헤더 응답하기</h4><p>스프링 프레임워크에서는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.html">SseEmitter</a>를 제공하므로 간단하게 SSE 연결을 구현할 수 있으며 이 클래스는 ResponseBodyEmitter를 확장하였기에 extendResponse 함수를 통해 응답하기 전 HTTP 상태코드 또는 응답 헤더를 변경할 수 있게 지원합니다. 따라서, 컨트롤러 핸들러 함수에서 HttpServletResponse를 인자로 받은 후 X-Accel-Buffering 헤더에 대한 값을 no로 설정하면 됩니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SseController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/sse"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_EVENT_STREAM_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SseEmitter</span> <span class="token function">sse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-Accel-Buffering"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SseEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img data-src="/images/posts/x-accel-buffering/01.png"></p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오래전에 개인적으로 &lt;a href=&quot;/reverse-proxy-using-nginx/&quot;&gt;엔진엑스로 알아보는 리버스 프록시&lt;/a&gt;를 학습하면서 이벤트 스트림에 대한 프록시 구성 시 &lt;a href=&quot;http://nginx.org/en/docs/htt</summary>
      
    
    
    
    
    <category term="SSE" scheme="https://kdevkr.github.io/tags/SSE/"/>
    
    <category term="X-Accel" scheme="https://kdevkr.github.io/tags/X-Accel/"/>
    
  </entry>
  
  <entry>
    <title>부하 및 성능 테스트는 어떻게 하는거지?</title>
    <link href="https://kdevkr.github.io/load-testing/"/>
    <id>https://kdevkr.github.io/load-testing/</id>
    <published>2022-12-18T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>오래전 컴퓨터공학 전공의 졸업 요건으로써 취득하고 잊은지 오래된 정보처리기사에서는 소프트웨어 테스트 부분에서 부하, 성능, 스트레스 등 다양한 테스트에 대한 개념에 대해서 설명합니다. 작은 규모의 조직에서 개발자로써 일하면서 해오지 않았던 것 중에는 지속적으로 만들어가고 있는 제품에 대한 부하 및 성능 테스트를 수행해보지 않았다는 것입니다. 최근에 발생하였던 시스템 장애 혹은 이슈들은 조직 차원에서 모든 개발자들에게 부하 및 성능 테스트를 수행할 수 있도록 가이드하거나 성능 테스트를 수행하고나서 기본적인 지표를 정리해두었다면 미리 취약점을 발견하거나 원인을 빠르게 찾아갈 수 있는 정보가 되어 생각보다 더 빠르게 대응이 가능했을 지 모릅니다.</p><blockquote><p>기본적으로는 제품에 대한 대략적인 스펙에 따른 예상되는 부하에 대한 수치를 조직 내에서 알고 있어야하며 모든 개발자가 인지할 수 있도록 공유하는게 맞을 겁니다. 조직에서 새로운 제품을 준비하면서 기본적인 부하 및 성능 테스트를 수행하지 않았던 건 담당했던 주요 엔지니어들의 실수인 것은 변하지 않습니다.</p></blockquote><p>아무튼 어떠한 정보를 토대로 고객과 제품을 계약했으며 인프라 환경을 준비했는지도 공유되지 않았고 조직 내 개발자들과 QA 엔지니어들은 운영중인 환경이 어떠한 스펙으로 구성된 인프라에서 동작하는지 알지 못하는 상태로 기능 요건을 검토하고 추가하고 수정한 것을 간단하게 테스트한 후 릴리즈 해왔습니다. 이러한 부실한 과정이 지속되다보니 시스템 운영에 있어서 여러가지 장애 상황으로 인해 고객은 제품의 신뢰를 잃어버릴 수 있는 큰 문제를 경험하고나서야 부하 및 성능 테스트 수행의 필요성을 느끼고 있습니다.</p><blockquote><p>부하 및 성능 테스트에 대한 글들을 검색해보았지만 작은 규모의 조직에서 어떻게 시작하고 접근해야하는지 제대로 공유된 정보가 존재하지 않습니다.</p></blockquote><h4 id="어떻게-시작해야-하는가"><a href="#어떻게-시작해야-하는가" class="headerlink" title="어떻게 시작해야 하는가?"></a>어떻게 시작해야 하는가?</h4><p>부하 테스트를 수행할 수 있도록 도와주는 도구들은 상당히 많습니다. 개인 혹은 개발자로써는 본인이 활용할 줄 아는 언어 중에서 스스로 테스트 스크립트를 작성하기 쉬운 도구를 선택해서 사용하면 됩니다. 상용 테스트 도구인 HP 로드러너(HP LoadLunner)를 제외하고는 nGrinder 또는 Locust와 같은 웹 UI를 제공하는 범용적인 테스트 도구가 회사 차원에서 선택할 가능성이 커보입니다. 저는 <a href="https://k6.io/">Grafana K6</a>를 선택하여 부하 테스트를 시도해보고 있고 조직 내 다른 개발자분은 JMeter를 활용해보고 있습니다.</p><h4 id="테스트-환경의-구성-방안"><a href="#테스트-환경의-구성-방안" class="headerlink" title="테스트 환경의 구성 방안"></a>테스트 환경의 구성 방안</h4><p>작은 규모의 조직에서도 제품에 대한 부하 및 성능 테스트를 지속적으로 수행할 수 있으면 좋겠지만 인건비로 충당할 수 있는 비용 범위 내에서 적당하게 환경을 구성해야하고 사용된 테스트 환경에 대한 리소스는 비용이 낭비되지 않도록 종료해야할 것입니다. 그럼에도 불구하고 테스트를 수행하는 과정에서 각 인스턴스들의 지표를 수집하여 모니터링하고 애플리케이션 서버의 상태를 실시간으로 확인할 수 있도록 <a href="https://newrelic.com/platform/application-monitoring">New Relic</a>과 같은 APM을 함께 도입해두어야 의미있는 결과를 가져올 수 있습니다. 또한, 적당한 부하가 발생하도록 테스트 에이전트들을 조정하고 최소한 일주일 이상은 유지하여 메모리 누수와 같은 취약점이 발생하지 않는지 다양한 방면에서 체크해야할 것입니다.</p><blockquote><p>아무리 테스트 환경을 준비해도 사용자 패턴에 의해 여러가지 조건의 부합되어야 검출되는 문제들도 발생합니다. 따라서, 부하 및 성능 테스트를 수행한다고해서 모든 장애와 이슈들을 검출할 수 있다고 오해하면 안됩니다. </p></blockquote><h4 id="테스트-지표"><a href="#테스트-지표" class="headerlink" title="테스트 지표"></a>테스트 지표</h4><p>대략적으로 다음의 테스트 지표 항목에 대해서 이해를 해야하는 것 같습니다. 대부분의 부하 테스트 도구에서 약간의 용어 차이는 있어보이지만 그것의 의미는 동일합니다. 얼마나 많은 사용자가 트래픽을 발생시키는지 기본적인 애플리케이션 서버의 처리량은 어느 수준인지 사용자의 증가 및 감소 패턴에 따라서 TPS은 얼마나 유지되는지 혹은 평균 응답 시간이 어떻게 바뀌는지를 말합니다.</p><ul><li>VU, 가상의 사용자</li><li>Throughput, 처리량</li><li>TPS, 초 단위 트랜잭션</li><li>Response Time, 응답 시간</li></ul><h4 id="테스트-환경을-위한-리눅스-튜닝"><a href="#테스트-환경을-위한-리눅스-튜닝" class="headerlink" title="테스트 환경을 위한 리눅스 튜닝"></a>테스트 환경을 위한 리눅스 튜닝</h4><p>시스템 운영 관점에서 리눅스 서버의 커널 파라미터 수정을 통해 리눅스 서버 성능을 튜닝하는 것에 대해 다루는 글을 찾아볼 수가 있습니다. 이것은 대부분 대규모 트래픽이 발생하는 곳에서 일하는 개발자들이 수 많은 인프라 비용을 줄이기 위해서 최대한 리소스를 사용할 수 있게 조치하게 되는 경험에서의 공유입니다. 대부분 리눅스 커널 버전이 업데이트되면서 커널 파라미터들의 기본값이 이미 튜닝되어있다거나 수정할 필요없을 정도로의 기본값을 가지고 있는 경우가 많습니다. 다만, 적당한 부하를 처리할 수 있는 지표가 분석되었다면 더 예상하지 못했던 부하가 발생했을때 어떤 조치를 통해 일시적으로 완화시킬 수 있는가를 커널 파라미터 조정을 통해 알아두는 것은 좋은 선택일지 모릅니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오래전 컴퓨터공학 전공의 졸업 요건으로써 취득하고 잊은지 오래된 정보처리기사에서는 소프트웨어 테스트 부분에서 부하, 성능, 스트레스 등 다양한 테스트에 대한 개념에 대해서 설명합니다. 작은 규모의 조직에서 개발자로써 일하면서 해오지 않았던 것 중</summary>
      
    
    
    
    
    <category term="Load Testing" scheme="https://kdevkr.github.io/tags/Load-Testing/"/>
    
    <category term="Performance Testing" scheme="https://kdevkr.github.io/tags/Performance-Testing/"/>
    
  </entry>
  
  <entry>
    <title>KDB Connection Pool</title>
    <link href="https://kdevkr.github.io/kdb-connection-pool/"/>
    <id>https://kdevkr.github.io/kdb-connection-pool/</id>
    <published>2022-12-09T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>TCP 소켓이 연결된 상태로 남아있는 <a href="https://github.com/kdevkr/mambo-box/blob/main/errors/2022-12-08.md">TCP 커넥션 누수 문제</a>를 경험하고나서 커넥션 풀 기능 구현에 대해서 다시한번 학습해보고 정리하는 글입니다.</p></blockquote><p>아마도 관계형 데이터베이스와 자주 사용되는 일부 데이터베이스들에 대한 커넥션 풀 기능은 직접 구현하지 않아도 되는 경우가 많습니다. 시스템에서 사용중인 시계열 데이터베이스는 <a href="https://github.com/KxSystems/javakdb/blob/master/javakdb/src/main/java/com/kx/c.java">자바 클라이언트 라이브러리</a>를 제공하고 있지만 시계열 데이터베이스가 단일 요청을 순차적으로 처리하는 싱글 스레드 방식임에 따라서 커넥션 풀 기능은 자체적으로 내장하고 있지 않습니다. 커넥션 풀 기능이 반드시 필요한 것은 아니지만 TCP 연결에 대한 부하를 생각한다면 자주 TCP 소켓을 연결하므로 발생할 수 있는 레이턴시를 및 자원 낭비를 무시할 수 없습니다.</p><h4 id="자바-커넥션-풀-라이브러리"><a href="#자바-커넥션-풀-라이브러리" class="headerlink" title="자바 커넥션 풀 라이브러리"></a>자바 커넥션 풀 라이브러리</h4><p>자바 애플리케이션은 대부분 <a href="https://commons.apache.org/proper/commons-pool/">Apache Commons Pool2</a> 라이브러리를 활용해서 커넥션 풀 기능을 구현하는 경우가 많습니다. 대표적으로 레디스 클라이언트로 많이 사용중인 <a href="https://github.com/lettuce-io/lettuce-core/blob/main/src/main/java/io/lettuce/core/support/ConnectionPoolSupport.java">Lettuce의 커넥션 풀 지원</a>을 확인할 수 있으며 <a href="https://commons.apache.org/proper/commons-dbcp/">Apache Commons DBCP2</a>라고 하는 관계형 데이터베이스에 대한 대표적인 커넥션 풀 라이브러리도 Commons Pool로 구현되어있음을 확인할 수 있습니다.</p><blockquote><p>Apache Commons Pool2에서는 <a href="https://commons.apache.org/proper/commons-pool/examples.html">간단한 PooledObjectFactory 예제</a>를 제공하고 있지만 자세한 설명이 없습니다.</p></blockquote><p>커넥션 풀 구현 예제를 검색해보면 생각보다 관련된 글이 없었기에 직접적으로 커넥션 풀 기능을 구현하는 개발자는 많지 않을 것이라 생각됩니다. 커넥션 오브젝트에 대한 라이프 사이클을 관리하는 것은 PooledObjectFactory 인터페이스가 담당하므로 원하는 커넥션 풀 동작을 BasePooledObjectFactory를 상속하여 구현하면 됩니다. 다만, 커네션 풀 구현 시 중요하게 생각해야할 부분은 BasePooledObjectFactory에서 기본적으로 구현해두어서 구현을 강제하지 않는 함수 중 커넥션 풀에서 관리하는 오브젝트가 삭제되는 대상이 되는 경우 호출되는 destoryObject 함수 동작을 생략해버릴 수 있다는 점 입니다.</p><h4 id="CPooledObjectFactory"><a href="#CPooledObjectFactory" class="headerlink" title="CPooledObjectFactory"></a>CPooledObjectFactory</h4><p>커넥션 풀 기능을 처음 구현했을 당시에 고려하지 못한 미흡한 점을 인지하고 KDB 프로세스에 대한 커넥션의 라이프 사이클을 관리하는 CPooledObjectFactory를 다시 작성해보았습니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CPooledObjectFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BasePooledObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CPooledObjectFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> c <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">c</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> <span class="token function">wrap</span><span class="token punctuation">(</span>c c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateObject</span><span class="token punctuation">(</span><span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            c c <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            c<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span>KException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyObject</span><span class="token punctuation">(</span><span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> p<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>c c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// ignored</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>더 자세하게 PooledObjectFactory 구현에 대해서 고민하고 싶은 분들이라면 아래의 오픈소스들을 참고해보시기 바랍니다.</p><ul><li><a href="https://github.com/lettuce-io/lettuce-core/blob/main/src/main/java/io/lettuce/core/support/ConnectionPoolSupport.java#L201">RedisPooledObjectFactory</a></li><li><a href="https://github.com/apache/commons-dbcp/blob/master/src/main/java/org/apache/commons/dbcp2/PoolableConnectionFactory.java">PoolableConnectionFactory</a></li></ul><h4 id="CObjectPool"><a href="#CObjectPool" class="headerlink" title="CObjectPool"></a>CObjectPool</h4><p>이제는 커넥션 오브젝트를 관리할 방식에 대해서 설정하는 것을 고민해보아야 합니다. Apache Commons Pool에서 커넥션 오브젝트 라이프사이클에 따라 어떻게 관리할지 결정하기 위해서는 GenericObjectPoolConfig를 사용해야 합니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CObjectPoolConfig</span> <span class="token keyword">extends</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxWait</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTimeBetweenEvictionRuns</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTestWhileIdle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setJmxEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>커넥션 풀 라이브러리에서 제공하는 기본값 중에서 JMX 모니터링 기능을 사용하지 않으므로 비활성화 해두었으며 유휴 상태로 관리중인 커넥션에 대해서도 미리 커넥션 상태를 확인할 수 있도록 TestWhileIdle 옵션을 활성화하였습니다. MaxWait의 경우 사용중인 각 커넥션이 최대로 소요할 수 있는 임계치에 따라 3분 까지 기다릴 수 있도록 해두었습니다. </p><blockquote><p>By default, kdb+ is single-threaded, and processes incoming queries sequentially.</p></blockquote><p>커넥션 라이프 사이클에 따라서 커넥션 풀에서 커넥션 오브젝트가 삭제되는 사유에는 대표적으로 두가지가 있는데요. 하나는 유휴 상태에 있는 커넥션이 벨리데이션 쿼리를 수행하는 과정에서 소켓 통신 오류가 발생하거나 너무 오랬동안 커넥션이 사용되지 않아서 버려지고 새로운 커넥션을 만들어서 풀을 유지하는 상황입니다. 위 문구 내용처럼 시계열 데이터베이스는 빠르게 요청을 처리하기 위해서 싱글 스레드 방식을 통해서 단일 요청을 순차적으로 처리하는게 기본적인 기술 관점입니다. 이는 레디스에서 동시성을 구현하기 위해서 채택한 방법이기도 하므로 단순히 싱글 스레드여서 문제가 있다고 바라보면 안됩니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> <span class="token number">0</span> ms <span class="token punctuation">(</span><span class="token number">481900</span> ns<span class="token punctuation">)</span></code></pre><p>시계열 데이터베이스가 아무리 빠르다고 해도 긴 범위의 시계열 데이터를 조회하고 연산을 한다거나 TCP 소켓을 통해 전달해야할 데이터가 상당히 많은 경우라면 싱글 스레드의 단점으로 인하여 선행 요청에 의해 후행 요청이 기다리는 시간으로 인해 병목 현상이 발생할 수 있다는 점을 고려해야합니다. 만약, 그러한 상황이 자주 발생한다면 빠른 성능을 위해 싱글 스레드를 채택한 시계열 데이터베이스를 활용하는 방법이 잘못된 것일 수 있습니다.</p><p>KDB 시계열 데이터베이스와 커넥션 풀 동작에 대해서 확인하고 싶다면 아래의 링크들을 참고하시기 바랍니다.</p><ul><li><a href="https://github.com/kdevkr/kdb">Learning KDB+</a></li><li><a href="https://github.com/kdevkr/spring-demo-kdb">Spring Demo KDB</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;TCP 소켓이 연결된 상태로 남아있는 &lt;a href=&quot;https://github.com/kdevkr/mambo-box/blob/main/errors/2022-12-08.md&quot;&gt;TCP 커넥션 누수 문제&lt;/a&gt;를 경험하고나서 </summary>
      
    
    
    
    
    <category term="TCP" scheme="https://kdevkr.github.io/tags/TCP/"/>
    
    <category term="Connection Pool" scheme="https://kdevkr.github.io/tags/Connection-Pool/"/>
    
  </entry>
  
  <entry>
    <title>레디스 장애 회고</title>
    <link href="https://kdevkr.github.io/redis-memory-usage-issue/"/>
    <id>https://kdevkr.github.io/redis-memory-usage-issue/</id>
    <published>2022-12-07T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2022년 11월 30일 단 한줄의 코드로 인하여 시스템을 정상적으로 이용할 수 없는 상태로 만들어버리는 심각한 결함을 만들었다. 과연 어떤 문제가 발생했고 그 원인은 무엇이었는지 되돌아보며 여러분에게 공유하고자 한다.</p></blockquote><p>일반적인 웹 서비스처럼 실시간으로 많은 사용자와 그리고 각 사용자에 의해 대량의 트래픽이 발생하는 시스템 환경은 아닙니다만 애플리케이션이 스케일 아웃되어 분산화되는 것을 고려하여 세션 클러스터링을 위하여 스프링 세션과 함께 세션 정보를 레디스라는 인메모리 저장소에 연계하도록 스프링 세션 레디스를 사용하고 있었다. 시스템 환경 규모 상 많은 사용자의 세션 데이터가 저장되는 것은 아니므로 1GB 정도의 메모리 사양을 가지는 작은 단일 인스턴스에 레디스를 설치하여 스탠다드-얼론 모드로써 사용하더라도 큰 문제가 없었다. 세션 저장소로써 레디스를 도입하였으나 실제로 사용자에 의해 발생하는 세션 데이터가 많이 저장되지 않을 것이므로 일부 데이터베이스 조회에 대해서 부하를 줄일 수 있도록 자주 변경될 가능성이 없는 일부 데이터를 조회하는 프로시저 호출에 대해서 스프링 캐시를 적용하였다. 그러나, 세션과 캐시 데이터를 포함하여 생각보다 사용되는 메모리는 미비했었기에 세션이나 캐시에 대해 그다지 고민할 필요성은 없었다고 생각된다.</p><p>그러나, 어느 시점부터 특정 환경에서 레디스가 설치된 서버의 메모리 사용량이 조금씩 오른다는 모니터링 지표를 전달받았으며 모니터링 지표가 전달되는 과정에서 시간이 많이 흘렀기에 긴급하게 레디스가 설치된 서버의 메모리 사용량이 높으며 애플리케이션 서버의 CPU 부하가 높고 시스템을 정상적으로 이용할 수 없는 상태가 되었다고 보고 받게 되었다.</p><h4 id="레디스의-메모리-사용량이-높아진-원인"><a href="#레디스의-메모리-사용량이-높아진-원인" class="headerlink" title="레디스의 메모리 사용량이 높아진 원인"></a>레디스의 메모리 사용량이 높아진 원인</h4><p>처음에는 레디스가 설치된 서버의 메모리 사용량이 높아진다는 이야기만 전달받았기에 (이전에 발생한 이력을 토대로) 보안 및 모니터링 목적으로 각 서버에 설치된 백신 프로그램이나 모니터링 에이전트로 인해 메모리 누수가 발생했을 것이라고 의심했으나 레디스 서버에 접속 후 명령어를 수행하는데 버벅거릴 정도로 서버의 여유 메모리가 남아있지 않은 상태가 되어있었으며 레디스가 실시간으로 사용하는 메모리의 사용량이 서버 메모리를 거의 점유하고 있었음을 확인하였다.</p><h4 id="레디스가-서버-메모리를-거의-사용한-이유"><a href="#레디스가-서버-메모리를-거의-사용한-이유" class="headerlink" title="레디스가 서버 메모리를 거의 사용한 이유"></a>레디스가 서버 메모리를 거의 사용한 이유</h4><p>서버의 메모리 사용량이 엄청나게 높았던 이유는 레디스가 거의 대부분의 메모리를 사용하고 있었기 때문이며 이렇게까지 되어버린 사유에 대해서는 운영적인 측면을 고려하지 않고 인프라 및 서버 환경 구축 시 레디스를 설치하고나서 비밀번호를 제외한 나머지 옵션에 대해서는 기본값으로 구동하였기 때문이다. 사실 상 레디스라는 기술에 대해서 라인이나 카카오와 같은 규모의 조직이 아니라면 기술적인 경험이 부족해서 레디스에서 제공하는 기본값을 사용하는 곳이 많을지도 모르겠다.</p><p>아무튼 레디스를 설치하였을때 기본적으로 제공하는 설정 파일에서 레디스가 사용하는 최대 매모리에 대한 제한은 없도록 되어있으며 경고 문구를 통해 세션이나 캐시를 위해서 레디스를 사용하는 경우 최대 메모리 설정을 하는 것이 좋을 수 있다고 안내하고 있다. 레디스가 서버 메모리를 제한없이 사용하게 되면서 서버 상태가 이상해진 것을 경험하고 나서야 해당 옵션이 적용되어 있지 않음을 확인하였고 이에 대해 긴급 잠정 조치가 필요함을 우선 전달하였다.</p><blockquote><p>최대 메모리 설정은 서버 메모리를 너무 많이 사용하게 되어 가상 메모리까지 스왑하여 사용하지 않도록 하기 위한 예방책일 뿐 근본적인 원인에 대해 검토되지 않았고 해결 방법은 아니다. 우선 레디스 서버의 상태를 안정적으로 유지할 수 있도록 최대 메모리를 설정 및 스냅샷된 파일을 삭제하고 레디스를 재시작하였다.</p></blockquote><h4 id="레디스-스냅샷을-통해-데이터-분석"><a href="#레디스-스냅샷을-통해-데이터-분석" class="headerlink" title="레디스 스냅샷을 통해 데이터 분석"></a>레디스 스냅샷을 통해 데이터 분석</h4><p>레디스의 최대 메모리 설정 조치를 수행하기 전에 레디스에서 기본값에 의해 자체적으로 저장해두었던 스냅샷(dump.rdb) 파일을 백업한 후 로컬 환경에서 도커 컨테이너를 통해 레디스를 스냅샷 기준으로 구동한 후 레디스가 점유하고 있던 메모리가 어떤 데이터로 인한 것인지 검토하였다. 레디스 클라이언트(redis-cli)를 통해 저장된 데이터들의 키를 조회하였으며 운영중인 환경이 아니므로 KEYS 명령어를 수행하여 대략적인 키들을 확인했고 너무 많은 키들로 인하여 제대로 확인을 할 수 없다고 판단되어 <a href="https://docs.spring.io/spring-session/reference/api.html#api-redisindexedsessionrepository-storage">스프링 세션 관련 키</a>와 캐시로 저장하는 키들을 정리하고 스택오버플로우에 공유된 댓글 중 <a href="https://stackoverflow.com/a/18247870">eval 명령어를 활용한 예시</a>를 참고하여 아래와 같이 수행하였다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:*')"</span> <span class="token number">0</span><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:sessions:*')"</span> <span class="token number">0</span><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:sessions:expires*')"</span> <span class="token number">0</span><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:expirations*')"</span> <span class="token number">0</span></code></pre><p>세션 관련 키들은 약 60만 개가 등록되어있었으며 세션 관련 키들을 삭제하니 남아있던 캐시 데이터로 인해 점유중인 메모리의 사용량은 약 200MB가 되었다. 일부 테스트를 위한 사용자의 추가로 인하여 캐시되는 데이터의 양이 조금은 많아졌으나 시스템에 실시간으로 접속하는 사용자에 대한 세션은 많지 않기에 무분별하게 불필요한 세션 키들이 등록되었음을 인지하게 되었다. 단순하게 바라보면 일반적으로 세션의 만료 시간을 짧게 하는데 시스템 요구사항 특성 상 세션 타임아웃이 7일로 지정되어 있었기에 등록된 세션 관련 키들을 오래동안 레디스를 점유하게 되는 상황이 되어버렸다.</p><h4 id="스프링-프레임워크의-구현을-이해하지-못한-이유로-불필요한-세션-정보를-저장"><a href="#스프링-프레임워크의-구현을-이해하지-못한-이유로-불필요한-세션-정보를-저장" class="headerlink" title="스프링 프레임워크의 구현을 이해하지 못한 이유로 불필요한 세션 정보를 저장"></a>스프링 프레임워크의 구현을 이해하지 못한 이유로 불필요한 세션 정보를 저장</h4><p>보안 요구사항에 의해 사용자의 요청이나 내부적인 스케줄 작업에 의해 호출되는 데이터베이스 요청에 대해서 일련의 과정을 감시할 수 있도록 API 요청에 대한 로그나 어떤 프로시저를 호출하는지 로그로써 기록해야했고 이 과정에서 데이터베이스에 대한 요청을 수행하는 세션의 아이디가 저장되어야할 항목에 포함되어있었다. 이 요구사항에 대한 작업은 공통 모듈로써 코드를 작성했는데 데이터베이스를 호출하는 클래스가 공통 모듈에 있었으며 해당 클래스가 스프링 컨테이너를 통해 빈으로 관리되는 것이 아니라 매번 생성되어야하는 구조로 되어있다보니 스프링에서 지원하는 AOP를 통해 데이터베이스 요청에 대해서 가로채어 기록할 수 없었다.</p><p>아무튼 데이터베이스에 대한 프로시저를 호출하는 과정에서 적당한 위치를 고려하여 선정했고 프로시저 명과 여러가지 정보와 함께 세션 아이디를 기록하기 위해서 스프링 프레임워크에서 제공하는 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java">RequestContextHolder</a>를 통해 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/context/request/RequestAttributes.java">RequestAttributes</a>를 가져온 후 세션 아이디를 반환하는 함수를 호출하도록 작성하였다.</p><blockquote><p>이 방식이 어떤 문제가 있는지 바로 알아챈 분들이라면 스프링 프레임워크 구현을 제대로 알거나 많은 경험이 있다고 보여진다. 아마 대부분은 저 함수를 호출하는게 왜 레디스와 연관이 있는지 예상하기 힘들것이다.</p></blockquote><p>사실 단순히 저 함수명을 바라본다면 보안 요구사항에 대한 처리 로직 과정에서 무분별하게 세션 정보가 저장될 수 있는지 검토하는 건 코드 리뷰를 했더라도 어려웠을 것이라는 생각이 든다. 스프링 프레임워크에서 제공하는 인터페이스에 적혀있는 상세한 내용을 확인하면 아래와 같이 NULL 값이 될 수 없는 문자열이 반환되어야한다고 되어있기 때문이다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Return an id for the current underlying session. * @return the session id as String (never &#123;@code null&#125;) */</span><span class="token class-name">String</span> <span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>이에 따라 스프링 프레임워크에서는 <a href="https://github.com/spring-projects/spring-framework/blob/52e967a5256d389f486b0159e05e2656e4411701/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java#L138-L142">ServletRequestAttributes</a> 구현체에서 세션 아이디가 반드시 반환되어야하므로 요청 정보에서 세션을 가져올 때 없으면 생성되도록 인자가 반드시 true인 상태로 동작하게 구현해두었다. 일반적으로 세션 방식과 토큰 기반의 인증이나 API 요청으로 구분되는데 스프링 웹 MVC 에서는 두개 모두 서블릿 요청일 뿐이므로 스레드 로컬에 요청 스레드가 저장되어 언제든 가져올 수 있는 상태가 된다.</p><p>그런데, 세션 아이디라 함은 세션 방식의 요청에 대해서만 의미가 있으므로 세션이 활용되지 않는 토큰 기반 요청에 대해서는 내부적으로 세션을 저장하는 코드가 호출되지 않는다. 따라서, 토큰 기반 요청 시 세션이 생성되지 않아야 함에 불구하고 세션 아이디를 가져올 수 있는 위 함수를 호출하게 되면 새로운 세션이 생성되고 스프링 세션에 대한 필터가 가장 먼저 처리되므로 요청을 처리하고 응답하는 과정에서 생성된 세션이나 변경된 세션 정보를 갱신하기 위해 스프링 세션 레디스 구현 동작이 호출되어 레디스에 불필요한 세션 키들을 생성하게 된 것이다.</p><h4 id="세션-아이디를-조회하는-코드-로직의-변경"><a href="#세션-아이디를-조회하는-코드-로직의-변경" class="headerlink" title="세션 아이디를 조회하는 코드 로직의 변경"></a>세션 아이디를 조회하는 코드 로직의 변경</h4><p>스프링 프레임워크에서 제공하는 함수의 구현을 제대로 확인하지 못한 상태에서 요구사항을 처리한 나의 실수 인 것은 명확하다. ServletRequestAttributes를 통해 세션 아이디를 쉽게 가져올 수 있었으나 상황에 따라 예상하지 못했던 결과를 가져오게 되었으므로 세션 아이디를 조회하는 코드를 HttpServletRequest로부터 현재 스레드 로컬 내에 세션이 있다면 가져오도록 변경했다. 이제는 새로운 세션을 만드는 과정이 없으므로 토큰 기반 API가 요청될 때 레디스에 무수히 많은 세션 키가 등록되지 않는다.</p><h4 id="운영적인-측면의-레디스-옵션-권고"><a href="#운영적인-측면의-레디스-옵션-권고" class="headerlink" title="운영적인 측면의 레디스 옵션 권고"></a>운영적인 측면의 레디스 옵션 권고</h4><pre class="language-conf" data-language="conf"><code class="language-conf">tcp-backlog 1024maxmemory 400mbmaxmemory-policy allkeys-lfu</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">ulimit</span> -n <span class="token number">65535</span><span class="token builtin class-name">echo</span> <span class="token string">'net.ipv4.tcp_max_syn_backlog=1024'</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> <span class="token string">'net.core.somaxconn = 65535'</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> <span class="token string">'vm.overcommit_memory = 1'</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> never <span class="token operator">></span> /sys/kernel/mm/transparent_hugepage/enabled</code></pre><p>레디스 결함으로 인해 확인된 레디스 옵션에 대한 문제도 검토하여 위와 같이 운영적인 측면에서의 옵션을 정리한 후 레디스 서버 환경에 적용할 준비를 하고 있다. 한가지 명확하지 않은 부분은 최대 메모리 옵션에 적용되어야할 적당한 수치가 무엇이냐인데 BGSAVE를 통해 RDB 스냅샷을 수행하는 경우 Fork 방식으로 프로세스를 복제하여 덤프 파일을 생성하기 때문에 실제로 메모리 사용량이 두배 이상이 될 수 있다는 점을 감안한다면 절반 이하의 메모리를 사용할 수 있도록 해야할 것 같다. 더구나 레디스 뿐만 아니라 CPU나 메모리를 사용할 수 있는 백신 프로그램이 구동중이므로 인터넷에 정리된 60% 정도의 메모리 설정은 적합하지 않다고 생각된다.</p><h4 id="트러블슈팅-회고"><a href="#트러블슈팅-회고" class="headerlink" title="트러블슈팅 회고"></a>트러블슈팅 회고</h4><p>개발자로써는 생각지도 못하게 단 한줄의 코드로 인하여 시스템을 마비시키는 경험을 한 큰 이슈였으며 고객의 입장에서는 사용중인 시스템에 대한 안정성과 신뢰성을 문제삼을 수 있는 건이었다. 아무튼 조직에서는 이에 대한 장애 보고를 고객 측에게 전달하기 위하여 관련 정보를 정리하고 있으며 관련 이슈가 발생하지 않도록 어떤 조치를 할 것인지를 고민하고 있다. 이 문제에 대해서 돌아보면서 확인하게 된 아래의 글들을 공유하며 마치고자 한다.</p><ul><li><a href="https://perfectacle.github.io/2019/05/29/redis-monitoring/">(Troubleshooting) 레디스 사망일기</a></li><li><a href="https://www.youtube.com/watch?v=92NizoBL4uA">Redis 야무지게 사용하기</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2022년 11월 30일 단 한줄의 코드로 인하여 시스템을 정상적으로 이용할 수 없는 상태로 만들어버리는 심각한 결함을 만들었다. 과연 어떤 문제가 발생했고 그 원인은 무엇이었는지 되돌아보며 여러분에게 공유하고자 한다.&lt;/</summary>
      
    
    
    
    
    <category term="레디스" scheme="https://kdevkr.github.io/tags/%EB%A0%88%EB%94%94%EC%8A%A4/"/>
    
    <category term="스프링 세션 레디스" scheme="https://kdevkr.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%84%B8%EC%85%98-%EB%A0%88%EB%94%94%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Spring Session</title>
    <link href="https://kdevkr.github.io/spring-session/"/>
    <id>https://kdevkr.github.io/spring-session/</id>
    <published>2022-12-03T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글은 <a href="https://github.com/kdevkr/mambo-box/blob/main/errors/2022-11-30.md">레디스 관련 결함</a>을 경험한 것을 토대로 스프링 세션 레디스에 대한 동작을 정리하기 위해서 작성한 것 입니다.</p></blockquote><p>많은 자바 개발자가 스프링 부트 프로젝트를 사용하는 이유는 별다른 코드 구현 없이도 여러 개발자들에 의해 작성되어진 로직을 자동으로 구성하면서 쉽고 빠르게 원하는 기능과 동작을 애플리케이션에 적용시키기 위한 목적이 크다고 생각합니다. 하지만, 자바 뿐만 아니라 다른 언어의 프레임워크에서도 구현된 코드들을 전부 확인하고 사용하지는 않을 경우가 많을텐데요. 스프링 프레임워크의 구현 범위가 상당히 많다보니 스프링 프레임워크의 개념 혹은 동작에 대해서 대충 이해하고 넘어가거나 아는 선에서 사용하는 편입니다.</p><p>스프링 세션 레디스에 의한 결함을 만들어낸 이유도 RequestContextHolder를 통해서 스레드 로컬에 저장된 요청 정보를 가져올 수 있고 RequestContextHolder로 부터 가져온 RequestAttributes에 세션 아이디를 가져올 수 있는 함수가 있기에 사용했던 것으로부터 시작됩니다. 개인적인 경험으로 볼때는 스프링 세션과 레디스를 함께 사용하는 것은 단순하게 스프링 세션 레디스에 대한 의존성만 추가하고 레디스에 연결할 수 있는 정보 그리고 스프링 세션을 활성화하는 어노테이션을 추가하는 것 뿐이므로 내재된 코드가 어떻게 동작하는지 제대로 확인할 필요성은 없었습니다.</p><h4 id="TCP와-HTTP의-세션은-다르다"><a href="#TCP와-HTTP의-세션은-다르다" class="headerlink" title="TCP와 HTTP의 세션은 다르다."></a>TCP와 HTTP의 세션은 다르다.</h4><blockquote><p>Spring Session provides transparent integration with HttpSession. This means that developers can switch the HttpSession implementation out with an implementation that is backed by Spring Session.</p></blockquote><p>TCP에서의 세션은 연결을 의미하지만 HTTP에서의 세션은 연결에 대한 상태를 의미합니다. 스프링 세션은 TCP 레벨이 아닌 <a href="https://docs.spring.io/spring-session/reference/http-session.html">HTTP 세션</a>에 대한 통합을 지원합니다. 그리고 기본적으로는 메모리에 세션을 저장하게 되는 것을 JDBC 기반으로 관계형 데이터베이스에 저장한다거나 레디스를 사용해서 세션 저장소로 활용할 수 있도록 제공하는 것도 포함하고 있습니다.</p><h4 id="WAS는-세션-관리를-지원한다"><a href="#WAS는-세션-관리를-지원한다" class="headerlink" title="WAS는 세션 관리를 지원한다."></a>WAS는 세션 관리를 지원한다.</h4><p>톰캣이나 언더토우와 같은 WAS에서도 자체적으로 <a href="https://github.com/undertow-io/undertow/blob/master/core/src/main/java/io/undertow/server/session/Session.java">메모리 기반의 세션</a>을 지원하도록 구현되어있습니다. 스프링 세션에서는 서블릿 컨테이너(WAS)가 자체적인 세션을 생성하지 않도록 <a href="https://github.com/spring-projects/spring-session/blob/main/spring-session-core/src/main/java/org/springframework/session/web/context/AbstractHttpSessionApplicationInitializer.java">AbstractHttpSessionApplicationInitializer</a>를 통해 springSessionRepositoryFilter 이라는 이름의 특수한 필터를 등록하여 모든 요청에 대해서 처리되도록 요구합니다.</p><blockquote><p>Fortunately, both HttpSession and HttpServletRequest (the API for obtaining an HttpSession) are both interfaces. This means that we can provide our own implementations for each of these APIs.<br>This highlights why it is important that Spring Session’s SessionRepositoryFilter be placed before anything that interacts with the HttpSession.</p></blockquote><h4 id="스프링-세션은-자체-구현-세션으로-전환한다"><a href="#스프링-세션은-자체-구현-세션으로-전환한다" class="headerlink" title="스프링 세션은 자체 구현 세션으로 전환한다."></a>스프링 세션은 자체 구현 세션으로 전환한다.</h4><p>SessionRepositoryFilter가 수행하는 중요한 역할은 자바 서블릿 스펙의 HTTP 세션을 자체적인 세션 클래스로 전환하는 것 입니다. 그리고 내부적으로 HTTP 세션과 스프링 세션을 연결하기 위해서 쿠키 기반의 HttpSessionIdResolver를 사용하도록 되어있죠. 결국 SessionRepository 구현체에 따라 JDBC 기반으로 데이터베이스 세션 정보를 저장하는지 레디스에 저장하는지 구분되어지는 것입니다.</p><blockquote><p>Switches the HttpSession implementation to be backed by a Session. The SessionRepositoryFilter wraps the HttpServletRequest and overrides the methods to get an HttpSession to be backed by a Session returned by the SessionRepository.</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>SESSION_REPOSITORY_ATTR<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sessionRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SessionRepositoryRequestWrapper</span> wrappedRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SessionRepositoryRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SessionRepositoryResponseWrapper</span> wrappedResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SessionRepositoryResponseWrapper</span><span class="token punctuation">(</span>wrappedRequest<span class="token punctuation">,</span>            response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>wrappedRequest<span class="token punctuation">,</span> wrappedResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        wrappedRequest<span class="token punctuation">.</span><span class="token function">commitSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>SessionRepositoryFilter의 위 구현처럼 가장 먼저 처리됨으로써 요청 스레드 내부에서 변경되어진 세션에 대해서는 응답이 완료된 이후에 최종적으로 반영된다는 것을 알 수 있습니다. 그래서 경험했던 레디스 결함에서도 서비스 혹은 퍼시스턴스 레이어에서 세션이 생성되더라도 세션 정보를 레디스에 저장하게 된 것입니다.</p><blockquote><p>레디스에 저장되는 자세한 내용은 스프링 세션 공식 문서의 <a href="https://docs.spring.io/spring-session/docs/2.4.6/reference/html5/#api-redisindexedsessionrepository-storage">Storage Details</a>에서 확인할 수 있습니다.</p></blockquote><h4 id="스프링-세션-레디스는-스케줄링을-통해-만료된-키를-삭제한다"><a href="#스프링-세션-레디스는-스케줄링을-통해-만료된-키를-삭제한다" class="headerlink" title="스프링 세션 레디스는 스케줄링을 통해 만료된 키를 삭제한다."></a>스프링 세션 레디스는 스케줄링을 통해 만료된 키를 삭제한다.</h4><p>SessionCleanupConfiguration에서 RedisSessionExpirationPolicy의 cleanExpiredSessions 함수를 스케줄러에 등록하여 스프링에서 자체적으로 제공하는 스케줄링에 의해 만료된 키가 삭제됩니다. 다만, 레디스의 만료 이벤트의 타이밍 문제로 인해서 TTL이 만료된 이후에 레디스가 알아서 삭제하도록 스프링 세션 레디스에서는 명시적으로 키를 삭제하지 않고 단순히 조회(액세스)합니다.</p><blockquote><p>We do not explicitly delete the keys, since, in some instances, there may be a race condition that incorrectly identifies a key as expired when it is not. Short of using distributed locks (which would kill our performance), there is no way to ensure the consistency of the expiration mapping. By simply accessing the key, we ensure that the key is only removed if the TTL on that key is expired.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글은 &lt;a href=&quot;https://github.com/kdevkr/mambo-box/blob/main/errors/2022-11-30.md&quot;&gt;레디스 관련 결함&lt;/a&gt;을 경험한 것을 토대로 스프링 세션 레디스에 대한 동</summary>
      
    
    
    
    
    <category term="Session" scheme="https://kdevkr.github.io/tags/Session/"/>
    
    <category term="Redis" scheme="https://kdevkr.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>쿼츠 스케줄러</title>
    <link href="https://kdevkr.github.io/quartz/"/>
    <id>https://kdevkr.github.io/quartz/</id>
    <published>2022-11-26T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>예제 코드 : <a href="https://github.com/kdevkr/spring-demo-quartz">kdevkr&#x2F;spring-demo-quartz</a></p></blockquote><p>소프트웨어 엔지니어인 개발자는 반복적으로 정해진 시간에 수행되어야할 작업을 예약해두는 스케줄링 기능을 자주 사용하게 되는 편이다. 리눅스 서버에서는 배시 스크립트를 작성하여 크론탭(crontab)에 등록하여 실행될 수 있도록 하며 시스템을 구성하는 애플리케이션에는 스케줄링 기능을 활용해서 애플리케이션에서 필요한 반복적인 작업을 수행하도록 구현하게 된다. 쿼츠 스케줄러는 스프링 부트 애플리케이션에서 쉽게 사용할 수 있도록 지원하는 라이브러리이므로 반복적인 작업을 수행하기 위한 스케줄 기능을 적용할 수 있다.</p><h4 id="인메모리-독립-스케줄러"><a href="#인메모리-독립-스케줄러" class="headerlink" title="인메모리 독립 스케줄러"></a>인메모리 독립 스케줄러</h4><p>QuartzAutoConfiguration에 의해 자동으로 SchedulerFactoryBean가 등록되고 RAMJobStore가 기본값이기에 별다른 설정없이도 쿼츠 스케줄러를 사용할 수 있다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">quartz</span><span class="token punctuation">:</span>    <span class="token key atrule">scheduler-name</span><span class="token punctuation">:</span> QuartzScheduler    <span class="token key atrule">job-store-type</span><span class="token punctuation">:</span> memory    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">org.quartz.scheduler.instanceName</span><span class="token punctuation">:</span> QuartzScheduler      <span class="token key atrule">org.quartz.scheduler.instanceId</span><span class="token punctuation">:</span> AUTO      <span class="token key atrule">org.quartz.threadPool.class</span><span class="token punctuation">:</span> org.quartz.simpl.SimpleThreadPool      <span class="token key atrule">org.quartz.threadPool.threadCount</span><span class="token punctuation">:</span> <span class="token number">100</span>            <span class="token key atrule">org.quartz.jobStore.class</span><span class="token punctuation">:</span> org.quartz.simpl.RAMJobStore</code></pre><h4 id="JDBC-분산-스케줄러"><a href="#JDBC-분산-스케줄러" class="headerlink" title="JDBC 분산 스케줄러"></a>JDBC 분산 스케줄러</h4><p>실무에서 쿼츠 스케줄러를 사용하고 있지만 쿼츠 팀에서 제공하는 JDBC 기반의 클러스터링 기능을 사용하고 있지는 않다. 비슷하게 스케줄 상태에 대해서 데이터베이스 락을 이용하여 분산 애플리케이션에서 스케줄이 중복하여 실행되지 않도록 구현된 상태이다. 아무튼 이 글에서는 쿼츠에서 제공하는 JDBC 클러스터링으로 스케줄을 관리해보도록 하자.</p><p><a href="https://github.com/quartz-scheduler/quartz/wiki/How-to-Setup-Databases#postgresql-database">쿼츠 스케줄러용 데이터베이스 생성</a><br><a href="https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_postgres.sql">쿼츠 스케줄러 데이터베이스 스키마 생성</a><br><a href="http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html#configuration-of-jdbc-jobstoretx-store-jobs-and-triggers-in-a-database-via-jdbc">JDBC 기반 JobStoreTX 구성</a></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> quartz <span class="token keyword">WITH</span> ENCRYPTED PASSWORD <span class="token string">'quartz123'</span> CONNECTION <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> quartz OWNER quartz<span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Run tables_postgres.sql</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">quartz</span><span class="token punctuation">:</span>    <span class="token key atrule">scheduler-name</span><span class="token punctuation">:</span> QuartzScheduler    <span class="token key atrule">job-store-type</span><span class="token punctuation">:</span> jdbc    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">org.quartz.scheduler.instanceName</span><span class="token punctuation">:</span> QuartzScheduler      <span class="token key atrule">org.quartz.scheduler.instanceId</span><span class="token punctuation">:</span> AUTO      <span class="token key atrule">org.quartz.threadPool.class</span><span class="token punctuation">:</span> org.quartz.simpl.SimpleThreadPool      <span class="token key atrule">org.quartz.threadPool.threadCount</span><span class="token punctuation">:</span> <span class="token number">100</span>      <span class="token key atrule">org.quartz.jobStore.class</span><span class="token punctuation">:</span> org.quartz.impl.jdbcjobstore.JobStoreTX      <span class="token key atrule">org.quartz.jobStore.driverDelegateClass</span><span class="token punctuation">:</span> org.quartz.impl.jdbcjobstore.PostgreSQLDelegate      <span class="token key atrule">org.quartz.jobStore.dataSource</span><span class="token punctuation">:</span> quartzDS      <span class="token key atrule">org.quartz.jobStore.isClustered</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">org.quartz.jobStore.clusterCheckinInterval</span><span class="token punctuation">:</span> <span class="token number">20000</span>      <span class="token key atrule">org.quartz.dataSource.quartzDS.provider</span><span class="token punctuation">:</span> hikaricp      <span class="token key atrule">org.quartz.dataSource.quartzDS.driver</span><span class="token punctuation">:</span> org.postgresql.Driver      <span class="token key atrule">org.quartz.dataSource.quartzDS.URL</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>postgresql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>5432/quartz      <span class="token key atrule">org.quartz.dataSource.quartzDS.user</span><span class="token punctuation">:</span> quartz      <span class="token key atrule">org.quartz.dataSource.quartzDS.password</span><span class="token punctuation">:</span> quartz123      <span class="token key atrule">org.quartz.dataSource.quartzDS.maxConnections</span><span class="token punctuation">:</span> <span class="token number">10</span></code></pre><blockquote><p>org.quartz.dataSource.quartzDS.provider를 hikaricp로 지정하지 않으면 c3p0 커넥션 풀을 기본적으로 의존하므로 주의하자.</p></blockquote><h4 id="스케줄-잡-및-트리거-등록"><a href="#스케줄-잡-및-트리거-등록" class="headerlink" title="스케줄 잡 및 트리거 등록"></a>스케줄 잡 및 트리거 등록</h4><p>많은 블로그 글에서 쿼츠 스케줄러로 동작하는 스케줄 정보와 트리거를 등록하는 방법을 어렵게 설명하지만 생각보다 간단하다. 스케줄 잡을 구현할 때에 JobDetail과 Trigger를 함께 빈으로 등록할 수 있도록 아래와 같이 관리하면 편리하게 등록할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>scheduler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">QuartzJobBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JOB_NAME <span class="token operator">=</span> <span class="token string">"SampleJob"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JOB_DETAIL_NAME <span class="token operator">=</span> JOB_NAME <span class="token operator">+</span> <span class="token string">"Detail"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;, &#123;&#125;, &#123;&#125;"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getJobInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getFireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>JOB_DETAIL_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JobDetail</span> <span class="token function">jobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span><span class="token class-name">SampleJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"SampleJobDetail"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span><span class="token string">"Invoke Sample Job..."</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">simpleTrigger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>JOB_DETAIL_NAME<span class="token punctuation">)</span> <span class="token class-name">JobDetail</span> job<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"SampleJobTrigger"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span><span class="token string">"Sample trigger with interval"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">cronTrigger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>JOB_DETAIL_NAME<span class="token punctuation">)</span> <span class="token class-name">JobDetail</span> job<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"SampleJobTrigger"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span><span class="token string">"Sample trigger with cron"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"* * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="스프링-스케줄링-분산-동기화"><a href="#스프링-스케줄링-분산-동기화" class="headerlink" title="스프링 스케줄링 분산 동기화"></a>스프링 스케줄링 분산 동기화</h4><p>쿼츠 스케줄러를 도입하는 이유는 스프링에서 제공하는 @Scheduled를 통한 스케줄링 기능은 클러스터링을 지원하지 않기 때문에 분산된 애플리케이션에서 독립적으로 실행되기 때문이다. 쿼츠 스케줄러와 동일하게 JDBC 기반으로 동기화를 수행할 수 있도록 <a href="https://github.com/lukas-krecan/ShedLock">ShedLock</a> 라이브러리를 사용하면 동기화된 스케줄이 동작되도록 할 수 있다. 스프링에서 제공하는 스케줄링 기능은 애플리케이션마다 실행해도 상관없는 작업에 간단하게 적용하는 것이 좋다고 생각되므로 동기화된 스케줄이 필요한 경우라면 쿼츠 스케줄러를 사용하는게 좋다고 생각된다.</p><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html">Quartz Configuration Reference</a></li><li><a href="https://www.baeldung.com/spring-quartz-schedule">Scheduling in Spring with Quartz</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;예제 코드 : &lt;a href=&quot;https://github.com/kdevkr/spring-demo-quartz&quot;&gt;kdevkr&amp;#x2F;spring-demo-quartz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;소프트웨어</summary>
      
    
    
    
    
    <category term="Quartz" scheme="https://kdevkr.github.io/tags/Quartz/"/>
    
    <category term="ShedLock" scheme="https://kdevkr.github.io/tags/ShedLock/"/>
    
  </entry>
  
  <entry>
    <title>전기에 대해서 배워보자</title>
    <link href="https://kdevkr.github.io/electricity/"/>
    <id>https://kdevkr.github.io/electricity/</id>
    <published>2022-11-24T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="전기가-만들어지고-사용되기까지의-과정"><a href="#전기가-만들어지고-사용되기까지의-과정" class="headerlink" title="전기가 만들어지고 사용되기까지의 과정"></a>전기가 만들어지고 사용되기까지의 과정</h4><p>전기 에너지는 다양한 방식으로 발전기를 회전시켜서 만들게 된다. 원자력 또는 태양광 발전 등으로 만들어지는 전기 에너지는 송전용 변전소를 통해서 전기를 승압시켜서 송전선을 거쳐서 각 지역에 위치한 배전용 변전소까지 도달하게 된다. 배전용 변전소로 도달한 전기를 가정(220V)이나 공장(380V)에서 사용할 수 있는 전압으로 강압시켜서 배분하는 과정을 거치게 된다.</p><p><a href="https://www.youtube.com/watch?v=QaNrvW-3MHQ">전기는 어떻게 생겨날까?</a>  </p><p>송전 과정에서 전기의 전압을 높이게 되는 이유는 전력 손실을 줄여서 송전 효율을 높이기 위함이라고 한다. 한전에서는 <a href="https://www.kepco-enc.com/portal/contents.do?key=1454">765kV, 345kV, 154kV</a>로 높여서 송전 사업을 하고 있음을 알 수 있다. 일반적으로 교류 전송을 하는 것으로 알고 있는데 초장거리간 송전에는 <a href="http://www.e2news.com/news/articleView.html?idxno=241142">LS전선의 HVDC를 사용한 해저 전력망</a>처럼 초고압직류송전 방식을 사용한다고 한다.</p><p><a href="https://youngji.medium.com/%ED%95%9C%EA%B5%AD%EC%9D%98-%EC%86%A1%EB%B0%B0%EC%A0%84-%EC%84%A4%EB%B9%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0-c92cce0dc914">한국의 송배전 설비 살펴보기</a><br><a href="https://media.skens.com/2373">[에너지백과] 발전&#x2F;송전&#x2F;배전&#x2F;변전</a>  </p><h4 id="전기-에너지와-전력"><a href="#전기-에너지와-전력" class="headerlink" title="전기 에너지와 전력"></a>전기 에너지와 전력</h4><p>단위 시간 동안 사용되는 전기 에너지를 측정하기 위해서 전력이라는 개념을 사용하게 된다. 전력의 최소 단위는 와트(W)이며 전압 x 전류로 표현할 수 있다.</p><ul><li>전압(Voltage, V) : 전기 에너지의 전위차</li><li>전류(Current, I) : 단위 시간 당 흐르는 전하의 양</li><li>전력(Power, P) : P &#x3D; IV</li></ul><p><a href="https://www.youtube.com/watch?v=wZQCK3BpH9k">전력과 전력량</a></p><p>전력량은 단위 시간 동안 사용된 전력의 양을 의미하며 한전에서 전기 요금을 계산할 때에는 전력이 얼마나 소비되었는지를 전력량으로 판단한다. 순시 전력은 수시로 바뀌게 되므로 가장 높은 기준의 전력을 기준으로 한시간 기준의 전력량(kWh)을 환산한다.</p><h4 id="전력-계통의-주파수"><a href="#전력-계통의-주파수" class="headerlink" title="전력 계통의 주파수"></a>전력 계통의 주파수</h4><p>에너지 분야의 핵심 키워드는 ESS를 통해 안정적인 전력 계통 운영을 수행하는 것으로 <a href="https://www.electimes.com/news/articleView.html?idxno=206921">Fast DR</a>을 통해 주파수 조정으로 전력망을 안정적으로 유지하는데 있다. 전기의 수요보다 발전 출력이 부족하게 되면 전력 계통 주파수가 60Hz에서 떨어지게 되므로 주파수 조정을 통해 전기 수요에 대한 발전 출력의 균형을 맞추는 것이다.</p><p><a href="http://www.keaj.kr/news/articleView.html?idxno=3608">우리나라 주파수는 왜 60Hz일까?</a><br><a href="https://www.samsungsemiconstory.com/kr/%EC%8A%AC%EA%B8%B0%EB%A1%9C%EC%9A%B4-%EC%A0%84%EA%B8%B0%EC%83%9D%ED%99%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%A0%84%EA%B8%B0%EC%83%81%EC%8B%9D%EC%9A%A9%EC%96%B4-%EC%A3%BC%ED%8C%8C%EC%88%98/">슬기로운 전기생활을 위한 전기상식용어 ‘주파수’</a><br><a href="https://www.e2news.com/news/articleView.html?idxno=224321">전력계통 주파수 하락 시 태양광 동시탈락 위험</a></p><p>전력거래소에서는 전력계통 운영정보를 공개하고 있으며 <a href="https://new.kpx.or.kr/board.es?mid=a10109020600&bid=0066">주파수 유지율</a>을 확인할 수 있다. </p><h4 id="전력수요관리"><a href="#전력수요관리" class="headerlink" title="전력수요관리"></a>전력수요관리</h4><p>수요반응(DR)은 수요관리사업자가 참여고객들을 모집해 수요자원을 구성하고 전력사용량을 줄이면 전력시장으로부터 보상을 받는 것이다. 전력 수요가 많아져서 <a href="https://new.kpx.or.kr/powerinfoSubmain.es?mid=a10606030000">공급 예비력</a>이 부족하다고 판단하게되면 정부로부터 경제성 혹은 신뢰성 DR 이벤트가 발령된다. 신재생에너지 발전 비율이 높은 제주도의 경우 전력수요보다 공급량이 넘어서는 관계로 플러스 DR을 통해 전력사용량을 늘려서 전력계통을 안정화하는 수요반응 이벤트도 존재한다.</p><p><a href="https://www.electimes.com/news/articleView.html?idxno=303940">전력수요관리는 ‘변화 중’…2022년 ‘DR의 해’ 되나</a></p><h4 id="ESS-화재"><a href="#ESS-화재" class="headerlink" title="ESS 화재"></a>ESS 화재</h4><p>에너지 저장 시스템(ESS)는 피크 시프트 혹은 주파수 조정 등 전력 계통을 안정적으로 유지하기 위한 주요 설비이지만 안정성에 대한 문제가 지속되고 있다. 다수의 배터리가 모여있고 지속적인 충전과 방전으로 인해 배터리 내 셀의 노후화 문제로 인하여 열폭주 현상으로 화재가 발생하고 있다.</p><p><a href="https://www.e2news.com/news/articleView.html?idxno=238938">울산서 34번째 ESS화재…SK배터리도 예외 없었다</a><br><a href="https://www.e2news.com/news/articleView.html?idxno=245281">현대제철 피크부하저감 ESS서 국내 37번째 화재</a>  </p><h4 id="전력-계통-용어"><a href="#전력-계통-용어" class="headerlink" title="전력 계통 용어"></a>전력 계통 용어</h4><p>한국전력의 <a href="https://cyber.kepco.co.kr/ckepco/front/jsp/CY/E/D/CYEDHP00202.jsp">계량기</a> 정보와 <a href="https://www.tesla.com/ko_kr/powerwall">테슬라 가정용 ESS</a> 제품 정보를 보면 여러가지 항목을 확인할 수 있다. 앞서 전력과 전력량에 대해서 알아보았는데 실제로 사용되는 전력 계통 용어는 너무나도 다양하다.</p><p><a href="https://www.youtube.com/watch?v=MQhiZOfrZT8">개쉬운 전기용어정리 : 피상전력, 유효전력, 무효전력</a>  </p><ul><li>계약 전력 : 전기공급사업자가 일반 소비자에게 공급하기로 동의한 전력</li><li>유효 전력(Active Power, W) : 실제로 소비되는 전력(소비 전력)</li><li>무효 전력(Reactive Power, VAR) : 소비되지 않고 남아있는 전력</li><li>피상 전력(Apparent Power, VA)</li><li>역률(Power Factor, PF)</li><li>설비 용량 : 최대 생산 가능용량</li><li>부하 용량 : 부하(설비)에 공급할 수 있는 최대 출력</li><li>단상 2선식 : 주상 변압기로부터 2가닥의 전선으로 결선되는 방식</li><li>삼상 4선식</li><li>선간전압 : 두 상간의 전위차</li><li>상전압 : 대지와 한 상간의 전위차</li><li>송전 전력 : 전원 공급 측 전력</li><li>수전 전력 : 부하단의 전력</li><li>수전 설비 : 전기사업자로부터 공급되는 고전압(22.9kV)의 전기를 받아서 사용하기 위한 전기로 변전하는 설비</li><li>차단기(Circuit Breaker, CB) : 전기를 개폐하는 장치</li><li>변압기(Transformer, TR) : 교류 전압이나 전류의 값을 바꾸는 장치</li><li>보호계전기(Relay) : 전기 계통에서 설비를 보호하는 장치</li><li>충방전효율 : 충전량에 대한 방전 용량의 비율</li><li>충전상태(SOC) : 사용할 수 있는 배터리의 잔존 용량</li></ul><p>교류 전기의 삼상을 표현하는 것도 국가마다 RST, ABC, UVW로 다르게 표현한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;전기가-만들어지고-사용되기까지의-과정&quot;&gt;&lt;a href=&quot;#전기가-만들어지고-사용되기까지의-과정&quot; class=&quot;headerlink&quot; title=&quot;전기가 만들어지고 사용되기까지의 과정&quot;&gt;&lt;/a&gt;전기가 만들어지고 사용되기까지의 과정&lt;/h4&gt;&lt;</summary>
      
    
    
    
    
    <category term="송배전" scheme="https://kdevkr.github.io/tags/%EC%86%A1%EB%B0%B0%EC%A0%84/"/>
    
    <category term="전력계통" scheme="https://kdevkr.github.io/tags/%EC%A0%84%EB%A0%A5%EA%B3%84%ED%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>우분투 리눅스 서버 환경 구축하기</title>
    <link href="https://kdevkr.github.io/ubuntu-linux/"/>
    <id>https://kdevkr.github.io/ubuntu-linux/</id>
    <published>2022-10-13T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>일반적으로 웹 개발자는 리눅스 서버 및 인프라 환경을 직접적으로 구축할 일은 없다고 말합니다. 그러나, 조직 규모에 따라 인프라 팀 또는 서버 엔지니어가 인프라를 구성할수도 있고 웹 개발자가 클라우드 서비스를 이용해서 간단하게 리눅스 서버를 실행할 수도 있습니다. 이전 회사의 서버 엔지니어이셨던 부장님이 현재 조직에 오기전까지는 사내 개발자들이 인프라를 작게나마 담당하고 있었습니다.</p><p>사내 인프라 환경을 마음껏 사용할 수 있는 조직이 아니고서야 리눅스 서버를 쉽게 실행해볼 수 있는 환경은 없기 때문에 웹 개발자가 로컬 컴퓨터에 가상 머신을 통해 우분투와 같은 리눅스 배포판을 설치할 수 있어야하며 이를 통해 리눅스 서버에 대한 경험을 학습해볼 수 있습니다. 실무에서 어느 정도 규모가 있는 기업에서는 CentOS와 같은 RHEL 기반의 리눅스 배포판을 사용하는 경우가 많은데 데비안 계열의 우분투 리눅스도 많이 발전하여 이제는 안정성 있는 LTS 버전을 제공하므로 최근에는 많이 활용되고 있습니다.</p><blockquote><p>CentOS EOL 문제로 인하여 실제로 CentOS 대체제 중 하나인 <a href="https://almalinux.org/">AlmaLinux</a>를 사용하여 인프라를 구성한 고객 환경도 있으며 일부 산업 업계에서는 리눅스 보다는 윈도우 서버를 사용하게 되는 환경도 존재합니다. 현재 조직에서 사용하는 시계열 데이터베이스도 <a href="https://aws.amazon.com/marketplace/pp/prodview-pscy5dov2ftms#pdp-overview">AWS 마켓플레이스에서 우분투 이미지로 제공</a>하고 있습니다.</p></blockquote><p>아무튼 많은 웹 개발자들도 집에서는 윈도우 OS가 설치된 컴퓨터를 사용하기 때문에 윈도우 10에서 <a href="https://www.virtualbox.org/">Oracle VM VirtualBox</a> 또는 <a href="https://learn.microsoft.com/ko-kr/windows/wsl/about">WSL2(Windows Subsystem for Linux 2)</a>를 사용하여 리눅스 서버 환경을 구축할 수 있다고 말할 수 있습니다. 단일 우분투 서버가 필요하다면 WSL2를 활성화하고 간단하게 우분투 리눅스를 실행할 수 있지만 다양한 우분투 버전 또는 다수의 우분투 리눅스가 필요하다고 생각된다면 가상 머신을 활용하는게 좋습니다.</p><h4 id="WSL2"><a href="#WSL2" class="headerlink" title="WSL2"></a>WSL2</h4><p><a href="https://aka.ms/wslstore">Microsoft Store</a>에서 다양한 리눅스 배포판을 설치할 수 있는데 CentOS는 인터넷 검색을 통해서 별도로 설치해야하므로 본 글의 목표인 데비안 계열의 <a href="https://www.microsoft.com/store/productId/9PN20MSR04DW">우분투 리눅스 배포판</a>을 선택하여 설치하기를 바랍니다. WSL2를 설치하기 전에 <a href="https://www.microsoft.com/store/productId/9N0DX20HK701">윈도우 터미널</a>을 먼저 설치하여 사용하는 것을 추천하며 컴퓨터에 윈도우 터미널을 설치하였다면 관리자 권한으로 실행한 후 아래의 명령어를 통해서 Windows System for Linux 기능을 활성화 해야합니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft-Windows-Subsystem-Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestartdism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p><img data-src="/images/posts/ubuntu-linux/01.png"></p><p>위 명령어를 수행하여 WSL 기능을 활성화했다면 <a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2 리눅스 커널</a>을 다운로드하여 설치한 후 관리자 권한의 윈도우 터미널을 열고 WSL2 버전을 선택하면 끝입니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2</code></pre><p><img data-src="/images/posts/ubuntu-linux/02.png"></p><blockquote><p>만약, WSL2를 사용하여 우분투 리눅스 배포판을 실행하는데 실패하였다면 다음의 가이드 문서를 따르기를 바란다.<br><a href="https://learn.microsoft.com/ko-kr/windows/terminal/install">Windows 터미널 설치 및 설정 시작</a><br><a href="https://learn.microsoft.com/ko-kr/windows/wsl/install?source=recommendations">WSL을 사용하여 Windows에 Linux 설치</a><br><a href="https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview">Install Ubuntu on WSL2 on Windows 10</a></p></blockquote><h4 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h4><p>WSL2를 사용해도 다양한 버전의 우분투 리눅스를 설치할 수 있지만 버츄얼박스와 같은 가상 머신으로 기본적인 리눅스 설정이 완료된 클린 버전을 만들어두고 이미지를 복제하여 리눅스 서버를 실행하는게 학습하는데 도움이 된다고 생각합니다. 먼저, <a href="https://www.virtualbox.org/wiki/Downloads">윈도우용 버츄얼박스</a>와 함께 <a href="https://ubuntu.com/download/server">우분투 서버 이미지</a>에 대한 ISO 파일을 다운로드하여 준비합니다.</p><p><img data-src="/images/posts/ubuntu-linux/03.png"><br><img data-src="/images/posts/ubuntu-linux/04.png"><br><img data-src="/images/posts/ubuntu-linux/05.png"></p><blockquote><p>가상 머신으로 우분투를 설치하는 경우에는 기본적인 데스크톱 이미지 대신에 서버 이미지를 사용하는 것이 좋습니다. 일반적이지 않은 폐쇄망 환경(아이피를 오픈하지 않는)에서 원격 데스크톱 환경이 필요한 경우에는 데스크톱을 설치하는 경우도 있는데 원격 데스크톱 연결에 대한 여러가지 문제가 있기 때문에 이러한 환경에서는 윈도우 서버를 사용하게 되는 편입니다.</p></blockquote><p>우분투 리눅스를 실행하기 위한 가상 머신은 최소한 메모리 1GB, 디스크 볼륨 30GB 로 선택하는 것을 추천하는데 이는 AWS 클라우드 서비스에서 제공하는 프리티어 사양과 동일하기 때문입니다. 또한 공유기를 사용하여 로컬 아이피를 할당받아 컴퓨터를 사용하고 있다면 네트워크 유형을 NAT가 아닌 호스트 어댑터로 변경하여 공유기에서 별도의 IP를 할당받도록 하는게 좋습니다.</p><p><img data-src="/images/posts/ubuntu-linux/06.png"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> ssh ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>31The authenticity of host <span class="token string">'192.168.0.31 (192.168.0.31)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:BJ3p2IZBDv3Im2I1Nsfj93KPSQcB4SAIxG9bOEbTPCU.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>31<span class="token string">' (ECDSA) to the list of known hosts.ubuntu@192.168.0.31'</span>s password:Welcome to Ubuntu 22<span class="token punctuation">.</span>04<span class="token punctuation">.</span>1 LTS <span class="token punctuation">(</span>GNU/Linux 5<span class="token punctuation">.</span>15<span class="token punctuation">.</span>0-50-generic x86_64<span class="token punctuation">)</span> <span class="token operator">*</span> Documentation:  https:<span class="token operator">/</span><span class="token operator">/</span>help<span class="token punctuation">.</span>ubuntu<span class="token punctuation">.</span>com <span class="token operator">*</span> Management:     https:<span class="token operator">/</span><span class="token operator">/</span>landscape<span class="token punctuation">.</span>canonical<span class="token punctuation">.</span>com <span class="token operator">*</span> Support:        https:<span class="token operator">/</span><span class="token operator">/</span>ubuntu<span class="token punctuation">.</span>com/advantage  System information as of Thu Oct 13 01:11:59 AM UTC 2022  System load:  0<span class="token punctuation">.</span>6376953125       Processes:               104  Usage of <span class="token operator">/</span>:   33<span class="token punctuation">.</span>0% of 13<span class="token punctuation">.</span>67GB   Users logged in:         0  Memory usage: 22%                IPv4 address <span class="token keyword">for</span> enp0s3: 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>31  Swap usage:   0%39 updates can be applied immediately<span class="token punctuation">.</span>To see these additional updates run: apt list <span class="token operator">--</span>upgradableLast login: Thu Oct 13 01:12:00 2022To run a command as administrator <span class="token punctuation">(</span>user <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> use <span class="token string">"sudo &lt;command>"</span><span class="token punctuation">.</span>See <span class="token string">"man sudo_root"</span> <span class="token keyword">for</span> details<span class="token punctuation">.</span>ubuntu@ubuntu:~$</code></pre><p>리눅스 서버가 준비되었다면 위와 같이 로컬 컴퓨터에서 SSH 접속을 시도해볼 수 있습니다. 언급하지 않은 부분이기에 우분투 리눅스를 설치할 때 OpenSSH를 함께 설치하는 옵션을 선택하지 않았다면 가상 머신 콘솔창에서 OpenSSH 서버 패키지를 설치해보는 경험을 할 수도 있습니다. 이제 우분투 리눅스를 어떻게 활용할 수 있는가는 우리가 무엇을 하고 싶은가에 달려있습니다. </p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;일반적으로 웹 개발자는 리눅스 서버 및 인프라 환경을 직접적으로 구축할 일은 없다고 말합니다. 그러나, 조직 규모에 따라 인프라 팀 또는 서버 엔지니어가 인프라를 구성할수도 있고 웹 개발자가 클라우드 서비스를 이용해서 간단하게 리눅스 서버를 실행</summary>
      
    
    
    
    
    <category term="Ubuntu" scheme="https://kdevkr.github.io/tags/Ubuntu/"/>
    
    <category term="WSL2" scheme="https://kdevkr.github.io/tags/WSL2/"/>
    
    <category term="VirtualBox" scheme="https://kdevkr.github.io/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>원격 호스트로 파일 전송하기</title>
    <link href="https://kdevkr.github.io/transfer-files-to-remote/"/>
    <id>https://kdevkr.github.io/transfer-files-to-remote/</id>
    <published>2022-10-12T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>웹 개발자가 백엔드 또는 프론트엔드 코드를 작성하고 서버를 실행할 수 있는 애플리케이션 빌드 파일과 프론트엔드 코드를 실행할 수 있도록 빌드된 에셋 파일들을 하나의 시스템으로써 배포하기 위해서 백엔드 개발자 또는 서버 엔지니어가 구성해놓은 인프라 환경에 있는 리눅스 서버에 파일을 전송해야 합니다. 조직 또는 시스템에 대한 인프라 구성에 따라서 여러가지 방식으로 빌드 파일을 전송할 수 있는데 개인적인 경험을 토대로 원격 호스트에 빌드 파일을 전달하는 방법에 대해서 정리하려고 합니다.</p><h4 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h4><p>웹 개발자 또는 서버 엔지니어가 원격 호스트에 파일을 전송하기 위해서는 SCP 또는 SFTP 명령어를 사용할 수 있으며 클라우드 서비스에서 제공하는 S3와 같은 서비스를 통해서도 외부 인터넷으로 접속이 불가능한 환경에서도 파일을 가져올 수 있습니다.</p><h4 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h4><p>SCP 명령어는 SSH 프로토콜을 사용하여 파일을 전송하는 방법으로써 SSH 접속이 가능한 리눅스 서버로 파일을 복사하기 위해서 사용됩니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\docker\nginx<span class="token punctuation">.</span>conf> <span class="token function">ls</span>    디렉터리: C:\Users\Mambo\docker\nginx<span class="token punctuation">.</span>confMode                 LastWriteTime         Length Name<span class="token operator">--</span><span class="token operator">--</span>                 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span>d-<span class="token operator">--</span><span class="token operator">--</span>    2022-02-22  오전 6:49:27                static<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>    2022-02-22  오전 6:49:27       19245297 demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>   2022-02-22  오후 11:26:45            473 docker-compose-local<span class="token punctuation">.</span>yaml<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>   2022-02-22  오후 11:05:42            573 docker-compose<span class="token punctuation">.</span>yaml<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>   2022-02-22  오후 11:26:28            241 localhost+3-key<span class="token punctuation">.</span>pem<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>   2022-02-22  오후 11:26:28           1318 localhost+3<span class="token punctuation">.</span>pem<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>    2022-05-21  오전 8:13:15           3017 nginx-local<span class="token punctuation">.</span>conf<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>   2022-02-22  오후 11:05:40           2896 nginx<span class="token punctuation">.</span>conf<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>    2022-02-22  오전 6:49:27           2036 README<span class="token punctuation">.</span>md<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>    2022-02-22  오전 6:49:27           1436 server<span class="token punctuation">.</span>crt<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>    2022-02-22  오전 6:49:27            246 server<span class="token punctuation">.</span>key<span class="token comment"># SCP 명령어를 사용해서 로컬 컴퓨터에 있는 파일을 원격 호스트로 전송합니다.</span><span class="token function">PS</span> C:\Users\Mambo\docker\nginx<span class="token punctuation">.</span>conf> scp <span class="token punctuation">.</span><span class="token operator">/</span>demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>18:<span class="token operator">/</span>home/ubuntu/java/ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>18's password:demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar                                                                                                                        100%   18MB  44<span class="token punctuation">.</span>0MB/s   00:00</code></pre><blockquote><p>제 로컬 컴퓨터에는 가상 환경 머신을 통해서 실행해놓은 우분투 리눅스(192.168.0.18)이 준비되어있으며 위와 같이 demo-0.0.1-SNAPSHOT.jar 라는 빌드 파일이 존재하여 이것을 SCP 명령어를 사용해서 원격 호스트의 사용자 홈 경로 하위의 java라는 폴더에 복사하였습니다.</p></blockquote><h4 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h4><p>일반적으로 FTP 프로토콜을 사용하여 서버와 클라이언트 간의 파일 전송을 수행하는데요. 실무에서는 SFTP를 사용하며 터미널 명령어보다는 <a href="https://filezilla-project.org/">파일질라(FileZilla)</a>와 같은 GUI를 제공하는 FTP 클라이언트를 사용하는 편입니다. SFTP는 서버와 클라이언트 방식이므로 SCP의 단일 명령어로 파일을 전송했던 것과 다르게 대화형 명령어를 사용하여 파일을 전송할 수 있습니다. </p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\docker\nginx<span class="token punctuation">.</span>conf> sftp ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>18ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>18 password:Connected to ubuntu@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>18<span class="token punctuation">.</span>sftp> lls C:\Users\Mambo\docker\nginx<span class="token punctuation">.</span>conf 디렉터리2022-02-27  오전 10:59    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span>2022-02-27  오전 10:59    &lt;<span class="token function">DIR</span>>          <span class="token punctuation">.</span><span class="token punctuation">.</span>2022-02-22  오전 06:49        19<span class="token punctuation">,</span>245<span class="token punctuation">,</span>297 demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar2022-02-22  오후 11:26               473 docker-compose-local<span class="token punctuation">.</span>yaml2022-02-22  오후 11:05               573 docker-compose<span class="token punctuation">.</span>yaml2022-02-22  오후 11:26               241 localhost+3-key<span class="token punctuation">.</span>pem2022-02-22  오후 11:26             1<span class="token punctuation">,</span>318 localhost+3<span class="token punctuation">.</span>pem2022-05-21  오전 08:13             3<span class="token punctuation">,</span>017 nginx-local<span class="token punctuation">.</span>conf2022-02-22  오후 11:05             2<span class="token punctuation">,</span>896 nginx<span class="token punctuation">.</span>conf2022-02-22  오전 06:49             2<span class="token punctuation">,</span>036 README<span class="token punctuation">.</span>md2022-02-22  오전 06:49             1<span class="token punctuation">,</span>436 server<span class="token punctuation">.</span>crt2022-02-22  오전 06:49               246 server<span class="token punctuation">.</span>key2022-02-22  오전 06:49    &lt;<span class="token function">DIR</span>>          static              10개 파일          19<span class="token punctuation">,</span>257<span class="token punctuation">,</span>533 바이트               3개 디렉터리  51<span class="token punctuation">,</span>521<span class="token punctuation">,</span>728<span class="token punctuation">,</span>512 바이트 남음<span class="token comment"># java 폴더로 이동한 후 파일을 복사합니다.</span>sftp> cd javasftp> put demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jarUploading demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar to <span class="token operator">/</span>home/ubuntu/java/demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jardemo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar                                                                                                                        100%   18MB  68<span class="token punctuation">.</span>8MB/s   00:00</code></pre><blockquote><p>로컬 컴퓨터에서 명령어를 수행하기 위해서 로컬(l)이 붙은 lls를 먼저 실행하여 로컬 컴퓨터에서 바라보는 경로를 확인하고 원격 호스트에 대한 명령어를 수행해서 파일을 복사했습니다. 그러면 SCP 명령어가 있는데도 불구하고 SFTP 프로토콜을 별도로 사용하는 이유는 무엇일까요?</p></blockquote><p>SFTP 프로토콜을 별도로 사용하는 이유에 대해서는 자세히 모릅니다. 다만, 개인적인 실무 경험을 토대로 이야기해보자면 배스천 호스트에 대한 SSH 접속 시 OTP로 2FA 인증을 요구하며 <a href="https://aws.amazon.com/ko/blogs/security/how-to-record-ssh-sessions-established-through-a-bastion-host/">배스천 호스트</a>에 대한 명령어 수행을 기록하기 위해서 SCP 명령어와 같이 인터랙션 세션이 아닌 직접 명령어를 수행하는 것은 제한되어 있을 수 있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">    <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> /<span class="token comment">#######                        /##     /##</span><span class="token operator">|</span> <span class="token comment">##__  ##                      | ##    |__/</span><span class="token operator">|</span> <span class="token comment">##  \ ##  /######   /####### /######   /##  /######  /#######</span><span class="token operator">|</span> <span class="token comment">#######  |____  ## /##_____/|_  ##_/  | ## /##__  ##| ##__  ##</span><span class="token operator">|</span> <span class="token comment">##__  ##  /#######|  ######   | ##    | ##| ##  \ ##| ##  \ ##</span><span class="token operator">|</span> <span class="token comment">##  \ ## /##__  ## \____  ##  | ## /##| ##| ##  | ##| ##  | ##</span><span class="token operator">|</span> <span class="token comment">#######/|  ####### /#######/  |  ####/| ##|  ######/| ##  | ##</span><span class="token operator">|</span>_______/  <span class="token punctuation">\</span>_______/<span class="token operator">|</span>_______/    <span class="token punctuation">\</span>___/  <span class="token operator">|</span>__/ <span class="token punctuation">\</span>______/ <span class="token operator">|</span>__/  <span class="token operator">|</span>__/<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Verification code: ******This bastion supports interactive sessions only. Do not supply a <span class="token builtin class-name">command</span></code></pre><p>이와 같은 인프라 환경에서는 SFTP 서버에 업로드되는 파일들은 배스천 호스트의 특정 경로에 마운트되어 SSH 접속을 수행한 후 SCP 명령어를 사용해서 실제 리눅스 서버로 파일을 전달할 수 있습니다. SFTP 명령어에 대한 더 자세한 내용을 알고싶은 경우 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server">How To Use SFTP to Securely Transfer Files with a Remote Server</a>를 참고하면 좋습니다.</p><h4 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h4><p>요즘에는 IDC와 같은 온프레미스 환경보다는 AWS와 같은 클라우드 서비스 환경에 인프라를 구성하는 경우가 많습니다. AWS 에서는 S3라는 스토리지 서비스를 제공하는데 S3 버킷에 대한 권한을 가지는 IAM의 자격증명을 사용해서 쉽게 파일을 업로드할 수 있고 EC2 인스턴스 역할에 S3 버킷에 대한 접근 권한을 부여해놓으면 EC2 인스턴스 내에서도 S3 명령어를 사용해서 파일을 가져올 수 있습니다. </p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 로컬 컴퓨터에 있는 파일을 S3 버킷에 복사합니다.</span>aws s3 <span class="token function">cp</span> demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar s3:<span class="token operator">/</span><span class="token operator">/</span>mambo<span class="token punctuation">.</span>kr/java/ <span class="token operator">--</span>profile mambo<span class="token comment"># EC 인스턴스 내에서 S3 버킷에 있는 파일을 복사합니다.</span>aws s3 <span class="token function">cp</span> s3:<span class="token operator">/</span><span class="token operator">/</span>mambo<span class="token punctuation">.</span>kr/java/demo-0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar <span class="token punctuation">.</span><span class="token operator">/</span></code></pre><blockquote><p>현재 조직에서는 퍼블릭 액세스가 불가능한 버킷에 도메인 인증서 또는 일부 데이터베이스에 대한 패치 스크립트 등을 업로드하고 리눅스 서버에 접속하여 해당 파일들을 복사하여 사용하고 있습니다. 퍼블릭 액세스가 가능하도록 설정된 버킷에 파일을 업로드해두면 조직의 외부로 파일을 공유해야할 때 HTTP 엔드포인트를 전달할 수 있으므로 다양하게 활용할 수도 있습니다.</p></blockquote><p>이처럼 원격 호스트에 파일을 전송하는 방법은 인프라 구성에 따라서 다양하게 사용해야할 수 있습니다. IT 분야가 어려운 이유는 생각보다 다양한 부분에 대해서 정답이라는 방식이 없기 때문에 개발자마다 조직에서 어떠한 방식을 취하느냐에 따라 다양한 경험을 할 수 있다는 것에 있습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;웹 개발자가 백엔드 또는 프론트엔드 코드를 작성하고 서버를 실행할 수 있는 애플리케이션 빌드 파일과 프론트엔드 코드를 실행할 수 있도록 빌드된 에셋 파일들을 하나의 시스템으로써 배포하기 위해서 백엔드 개발자 또는 서버 엔지니어가 구성해놓은 인프라</summary>
      
    
    
    
    
    <category term="S3" scheme="https://kdevkr.github.io/tags/S3/"/>
    
    <category term="SSH" scheme="https://kdevkr.github.io/tags/SSH/"/>
    
    <category term="SCP" scheme="https://kdevkr.github.io/tags/SCP/"/>
    
    <category term="SFTP" scheme="https://kdevkr.github.io/tags/SFTP/"/>
    
  </entry>
  
  <entry>
    <title>무중단 배포</title>
    <link href="https://kdevkr.github.io/zero-downtime-deplotment/"/>
    <id>https://kdevkr.github.io/zero-downtime-deplotment/</id>
    <published>2022-10-11T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>네이버 또는 카카오톡 같은 규모의 컨텐츠 제공자(CP)들은 전기통신사업법 제22조 7에 의거하여 서비스 안정성을 확보해야할 의무가 있다.</p></blockquote><p>작은 규모의 조직에서 웹 애플리케이션으로 구성된 시스템을 개발하고 있지만 위와 같은 대규모 시스템을 다루지 않아서 경험할 수 없는 인프라 지식 중 하나는 운영중인 시스템에 대한 <strong>무중단 배포</strong>이다. 무중단 배포(Zero Downtime Deployment) 방식이란 운영중인 시스템을 이용하는 사용자가 최소한의 다운타임으로 배포 과정에서 서비스를 일시적으로 이용하지 못하는 상황이 최대한 발생하지 않도록 <strong>지속적인 사용자 경험을 제공하기 위한 것</strong>을 말한다.</p><p>현재 시스템은 특수한 분야의 기업들이 사용하는 것으로 일반적인 사용자가 이용하는 웹 서비스와는 성격이 다르기 때문에 정기적인 배포 일정으로 미리 시스템 점검을 예고하고 기업 고객들이 이용하지 않을 시간대에 시스템 변경사항을 배포하고 있다. 일부 고객은 보안 레벨 상 자체적으로 시스템에 대한 패치를 수행하고 있으며 우리는 해당 고객의 스테이징 환경에 미리 다음 버전의 시스템을 배포하고 있으므로 다운타임이 발생해도 괜찮은 배포 환경에 있다.</p><p>그럼에도 불구하고 무중단 배포에 대해서 미리 학습하고자 하는 것은 <strong>시스템의 운용 특성 상 다운타임을 최소화</strong>하여 기업 고객이 보유한 데이터를 기반으로 <strong>예상하지 못한 위험 감지를 즉각 제공해야할 의무</strong>가 있기 때문이다. 현재 조직이 자체적으로 AWS 클라우드 환경에 구성한 플랫폼은 <a href="/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment/">AWS Elastic Beanstalk의 Java SE 플랫폼을 사용하여 트래픽 분산 및 오토스케일링이 가능한 환경을 만들어두고 배포</a>하고 있다.</p><p><a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/using-features.deploy-existing-version.html">Elastic Beanstalk에서 지원하는 배포 정책</a>에는 무중단 배포 방식도 포함하고 있으므로 <a href="https://jojoldu.tistory.com/267">직접 배포 스크립트를 작성하여 무중단 배포를 수행하는 방법</a>을 시도할 필요는 없다. 그렇지만 Beanstalk을 사용하지 않는 환경도 있을 수 있기 때문에 시간이 많다면 <a href="https://stackoverflow.com/a/41881546">프로세스를 안전하게 종료하는 방법</a>과 함께 무중단 배포를 수행할 수 있는 배포 스크립트를 작성하는 것을 학습해봐도 좋을 듯 하다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;네이버 또는 카카오톡 같은 규모의 컨텐츠 제공자(CP)들은 전기통신사업법 제22조 7에 의거하여 서비스 안정성을 확보해야할 의무가 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;작은 규모의 조직에서 웹 애플리케이션으로 구성된</summary>
      
    
    
    
    
    <category term="Beanstalk" scheme="https://kdevkr.github.io/tags/Beanstalk/"/>
    
    <category term="Zero Downtime" scheme="https://kdevkr.github.io/tags/Zero-Downtime/"/>
    
  </entry>
  
  <entry>
    <title>타임스탬프 문자열 패턴</title>
    <link href="https://kdevkr.github.io/timestamp-format-patterns/"/>
    <id>https://kdevkr.github.io/timestamp-format-patterns/</id>
    <published>2022-10-09T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>현재 조직에서 만드는 시스템에서 특정 언어를 사용하도록 설정된 계정에서만 <a href="https://fullcalendar.io/">캘린더</a>에 입력된 예약 스케줄 정보가 표시되지 않는다는 버그 리포트를 받았습니다. 처음에는 버그 리포트의 내용처럼 캘린더 라이브러리에 언어 정보가 적용되지 않아서 표시되지 않는다고 1차원적으로 예상하였습니다. 그러나 실제로는 예약된 스케줄 정보가 표시되지 않은 이유는 자바스크립트 날짜&#x2F;시간 라이브러리로 사용중인 Moment.js 에서 사용중인 날짜 템플릿 패턴이 올바르게 적용되지 않은 상태로 코드가 작성되어 있었어요.</p><h4 id="문제에-대한-원인"><a href="#문제에-대한-원인" class="headerlink" title="문제에 대한 원인"></a>문제에 대한 원인</h4><p>프론트엔드 코드에서 Moment를 사용하여 예약 스케줄에 대한 날짜 정보를 다음과 같은 패턴으로 포맷팅을 하도록 되어있었어요.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dateFormat <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'yyyy-MM-DD HH:mm:ss.SSS'</span><span class="token punctuation">)</span></code></pre><p>위 코드의 문제점을 바로 알아차리신 분들이라면 공식 문서를 제대로 참고하는 프론트엔드 개발자라고 생각되는데요. <a href="https://momentjs.com/docs/#/displaying/format/">Moment.js의 공식 문서 상 날짜 포맷팅 패턴</a>을 살펴보면 yyyy 라는 표현은 Era Year로 되어있습니다. 현재 시스템은 다국어 지원을 위해서 영어, 한국어, 일본어를 선택할 수 있도록 제공하고 있는데요. 기본적으로는 영어와 한국어를 사용하게 되는데 문제가 발생했던 것은 <a href="https://jsfiddle.net/pcjrk2ob/3">일본어를 선택한 계정에서</a> 였습니다.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'yyyy-MM-DD HH:mm:ss.SSS'</span><span class="token punctuation">)</span><span class="token string">"0004-10-10 17:03:28"</span></code></pre><p>신입 프론트엔드 개발자는 개발 환경에서 한국어로 선택된 계정에서 작업을 진행했고 요구사항을 처리하는 과정에서 위 포맷을 적용해도 정상적으로 의도한 날짜 포맷으로 변환되어 작업을 완료했다고 배포 목록에 포함되었을 것입니다.</p><h4 id="언어-또는-기술마다-날짜-표현-패턴이-다르다"><a href="#언어-또는-기술마다-날짜-표현-패턴이-다르다" class="headerlink" title="언어 또는 기술마다 날짜 표현 패턴이 다르다"></a>언어 또는 기술마다 날짜 표현 패턴이 다르다</h4><p>위 문제를 경험하고나서 찾아보니 언어마다 혹은 기술마다 날짜를 표현하는 포맷이 달랐는데요. 사용하는 기술에 대해서 좀 더 주의해야겠다는 생각을 가지게 된 것 같습니다.</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns">Java DateTimeFormatter</a> : yyyy-MM-dd HH:mm:ss.SSS</li><li><a href="https://www.postgresql.org/docs/current/functions-formatting.html#FUNCTIONS-FORMATTING-DATETIME-TABLE">PostgreSQL Date&#x2F;Time Formatting</a> : YYYY-MM-DD HH24:MI:SS.MS</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/migrate-to-java-time.html#java-time-migration-incompatible-date-formats">Elasticsearch date formats</a> : uuuu-MM-dd HH:mm:ss</li></ul><blockquote><p>개발자의 사소한 실수로부터 만들어진 버그지만 그 내면에는 알아야할 중요한 정보가 남아있습니다. 많은 개발자 분들이 자신이 한 실수에 대해서 공유하는 문화도 만들어지면 좋을 것 같네요. 그리고 이 사이드 이펙트를 만들어낸 것은 조직의 신입 프론트엔드 개발자이지만 코드를 검토해주지 않는 동료 개발자와 제대로 테스트되지 않은 채로 배포된 조직의 문제로 볼 수 있습니다. 조직 내 개발자들이 조금씩이나마 코드 리뷰를 할 수 있는 환경이 만들어지기를 바랍니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 조직에서 만드는 시스템에서 특정 언어를 사용하도록 설정된 계정에서만 &lt;a href=&quot;https://fullcalendar.io/&quot;&gt;캘린더&lt;/a&gt;에 입력된 예약 스케줄 정보가 표시되지 않는다는 버그 리포트를 받았습니다. 처음에는 버그 리포트의</summary>
      
    
    
    
    
    <category term="Elasticsearch" scheme="https://kdevkr.github.io/tags/Elasticsearch/"/>
    
    <category term="Java" scheme="https://kdevkr.github.io/tags/Java/"/>
    
    <category term="PostgreSQL" scheme="https://kdevkr.github.io/tags/PostgreSQL/"/>
    
    <category term="Moment" scheme="https://kdevkr.github.io/tags/Moment/"/>
    
  </entry>
  
  <entry>
    <title>최적화된 도커 이미지</title>
    <link href="https://kdevkr.github.io/optimize-dockerfile/"/>
    <id>https://kdevkr.github.io/optimize-dockerfile/</id>
    <published>2022-09-15T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>회사에서는 애플리케이션을 <a href="/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment/">아마존 웹 서비스의 Elastic Beanstalk Java SE 플랫폼 환경을 활용해서 배포</a>하고 있어서 도커 이미지를 만들어볼 기회가 없는데 그럼에도 도커 이미지를 직접 만들어보면 생각보다 이미지의 크기나 빌드 시간이 오래걸려서 당황하게 된다.</p><ul><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Best practices for writing Dockerfiles</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-docker-images-for-production">How To Optimize Docker Images for Production</a></li><li><a href="https://medium.com/the-agile-crafter/docker-image-optimization-from-1-16gb-to-22-4mb-53fdb4c53311">Docker Image Optimization: from 1.16GB to 22.4MB</a></li><li><a href="https://jonnung.dev/docker/2020/04/08/optimizing-docker-images/">도커 이미지 잘 만드는 방법</a></li><li><a href="https://docs.docker.com/language/">Language-specific getting started guides</a></li><li><a href="https://github.com/GoogleCloudPlatform/golang-samples/blob/main/run/helloworld/Dockerfile">GoogleCloudPlatform&#x2F;golang-samples</a></li></ul><p>많은 글에서 다루는 도커 빌드 이미지를 최적화하는 방향에 대해서 정리해보자면 다음과 같다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">첫째, 애플리케이션 언어에 적합한 경량의 베이스 이미지를 사용하라.둘째, 애플리케이션 실행 및 운용에 필요한 필수 패키지만 설치하라.셋째, COPY 그리고 RUN 등의 레이어를 만드는 명령어를 최소화하라.넷째, 멀티 스테이지로 빌드와 런타임 환경의 이미지를 분리하라.</code></pre><h4 id="오픈소스-솔루션으로-확인하는-Dockerfile-예시"><a href="#오픈소스-솔루션으로-확인하는-Dockerfile-예시" class="headerlink" title="오픈소스 솔루션으로 확인하는 Dockerfile 예시"></a>오픈소스 솔루션으로 확인하는 Dockerfile 예시</h4><ul><li><a href="https://github.com/prometheus/prometheus/blob/main/Dockerfile">promethues&#x2F;Dockerfile</a></li><li><a href="https://github.com/grafana/grafana/blob/main/Dockerfile">grafana&#x2F;Dockerfile</a></li><li><a href="https://github.com/louislam/uptime-kuma/tree/master/docker">uptime-kuma&#x2F;docker</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;회사에서는 애플리케이션을 &lt;a href=&quot;/deploy-application-to-the-aws-elastic-beanstalk-java-se-platform-enviroment/&quot;&gt;아마존 웹 서비스의 Elastic Beanstalk Java S</summary>
      
    
    
    
    
    <category term="도커 이미지" scheme="https://kdevkr.github.io/tags/%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80/"/>
    
    <category term="최적화" scheme="https://kdevkr.github.io/tags/%EC%B5%9C%EC%A0%81%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>MQTT Connection Lost</title>
    <link href="https://kdevkr.github.io/mqtt-connection-lost/"/>
    <id>https://kdevkr.github.io/mqtt-connection-lost/</id>
    <published>2022-09-08T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>CommsReceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CommsReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">750</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataInputStream</span><span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token class-name">DataInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">267</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>wire<span class="token punctuation">.</span></span>MqttInputStream</span><span class="token punctuation">.</span><span class="token function">readMqttWireMessage</span><span class="token punctuation">(</span><span class="token class-name">MqttInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>CommsReceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CommsReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1</span> more</code></pre><p>위 스택트레이스는 Paho Java Client를 사용하여 Mosquitto 브로커에 연결하고 난 후 어떠한 사유에 의해 연결이 해지되었을 때 발생하는 오류입니다. 조직 내 동료 개발자가 Mosquitto에 연결하고 나서 5분이 지나는 시점에 연결이 해지되는 증상이 있다며 이 문제를 경험했는지 도움을 요청하였으나 이전에 <a href="/spring-boot-integration-mqtt/">스프링 부트 MQTT 클라이언트 메시지 채널 구성하기</a> 또는 <a href="/connecting-with-mqtt-using-aws-iot-device-sdk/">AWS IoT Device SDK Java로 MQTT 연결하기</a>에서처럼 Paho Java Client 라이브러리를 사용하면서 연결이 해지되는 것을 경험해보지는 못했었습니다.</p><h2 id="MQTT-over-Websocket"><a href="#MQTT-over-Websocket" class="headerlink" title="MQTT over Websocket"></a>MQTT over Websocket</h2><p>조직 내 동료 개발자의 도움 요청으로 인해 리눅스 서버에 설치된 Mosquitto 버전은 2.0.14 이며 Paho Java Client 라이브러리는 1.2.5를 사용하고 있는 것으로 알게 되었습니다. 그리고 Mosquitto 연결 시에는 Websocket 프로토콜을 사용하고 있었습니다. </p><table><thead><tr><th>JDK</th><th>Paho Java Client</th><th>Mosquitto</th><th>EOF</th></tr></thead><tbody><tr><td>Java 1.8.0_144</td><td>1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 1.8.0_345</td><td>1.1.0 ~ 1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.1.0 ~ 1.2.5</td><td>2.0.14</td><td>💥</td></tr></tbody></table><p>JDK와 라이브러리 버전을 변경해가면서 테스트 해본 결과 일반적인 TCP 방식으로 연결 시에는 Mosquitto 버전과 상관없이 정상적으로 연결을 유지함을 보였으나 웹소켓 연결에 대해서는 리눅스 서버에 설치된 Mosquitto 2.0.14 브로커에 대해 일정 시간이 지나 연결이 해지됨을 확인할 수 있었습니다.</p><h3 id="Mosquitto-Version"><a href="#Mosquitto-Version" class="headerlink" title="Mosquitto Version"></a>Mosquitto Version</h3><p>위 문제가 발생했던 리눅스 서버에 Mosquitto 브로커는 도커 이미지로 구동된 상태라고 하였습니다. 그래서 로컬 컴퓨터 환경에서도 도커 컨테이너를 실행하여 간단하게 여러개의 버전을 테스트할 수 있으므로 도커 이미지를 변경하면서 웹 소켓 연결이 일정 시간 이후에 해지되는 증상이 나타나는지 체크해보았습니다. 테스트 버전은 <a href="https://mosquitto.org/blog/categories/releases/">Mosquitto Posts about Releases</a>에 따라 시도해보았으며 2.0.9와 2.0.11가 릴리즈될 때 1.6.x 마이너 버전도 패치되었기에 포함했습니다.</p><table><thead><tr><th>JDK</th><th>Paho Java Client</th><th>Mosquitto</th><th>EOF</th></tr></thead><tbody><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.15</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.13</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.12</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.11</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.10</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.9</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.15</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.14</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.9</td><td>OK</td></tr></tbody></table><blockquote><p>우분투 LTS 버전에 따른 Mosquitto 패키지 지원 버전은 다음의 링크에서 확인할 수 있습니다.<br><a href="https://packages.ubuntu.com/search?keywords=mosquitto">https://packages.ubuntu.com/search?keywords=mosquitto</a></p></blockquote><p>Mosquitto 버전별 테스트 결과 2021-06-08 자로 릴리즈된 2.0.11과 1.6.15 에서부터 웹소켓 연결이 해지되는 증상을 보였습니다. 동료 개발자에게는 Paho Java Client의 AutomaticReconnect 옵션과 MqttCallbackExtended 인터페이스로 연결 해지로 인해 재연결을 시도하고 나서 토픽을 다시 구독하는 방향으로 임시 조치해야할 것 같다고 전달한 상태이며 Mosquitto 브로커 버전을 다운그레이드 해야하는지에 대해서는 조직 내에서 검토하고 결정해야할 것 같습니다.</p><h2 id="테스트-환경"><a href="#테스트-환경" class="headerlink" title="테스트 환경"></a>테스트 환경</h2><p>처음에는 우분투 VM 이미지로 테스트하였으나 다양한 버전을 테스트해보기 위해서 도커 컨테이너 환경을 구성했습니다. </p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mosquitto</span><span class="token punctuation">:</span>    <span class="token comment"># image: eclipse-mosquitto:1.6.15 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:1.6.14 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.9 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.10 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.11 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.12 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.13 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.14 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.15 # EOF</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> eclipse<span class="token punctuation">-</span>mosquitto<span class="token punctuation">:</span>2.0.10    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mosquitto    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"1883:1883"</span>      <span class="token punctuation">-</span> <span class="token string">"9001:9001"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mosquitto.conf<span class="token punctuation">:</span>/mosquitto/config/mosquitto.conf      <span class="token punctuation">-</span> ./mosquitto.log<span class="token punctuation">:</span>/mosquitto/log/mosquitto.log      <span class="token punctuation">-</span> mosquitto<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/mosquitto/data      <span class="token punctuation">-</span> ./passwd<span class="token punctuation">:</span>/mosquitto/config/passwd<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  mosquitto<span class="token punctuation">-</span>data<span class="token punctuation">:</span></code></pre><h3 id="mosquitto-conf"><a href="#mosquitto-conf" class="headerlink" title="mosquitto.conf"></a>mosquitto.conf</h3><pre class="language-conf" data-language="conf"><code class="language-conf">persistence truepersistence_location &#x2F;mosquitto&#x2F;data&#x2F;log_dest file &#x2F;mosquitto&#x2F;log&#x2F;mosquitto.logport 1883listener 9001protocol websocketsallow_anonymous falsepassword_file &#x2F;mosquitto&#x2F;config&#x2F;passwdset_tcp_nodelay truesocket_domain ipv4log_type allwebsockets_log_level 8</code></pre><details>  <summary>테스트 로그</summary>  <h4 id="mosquitto-log"><a href="#mosquitto-log" class="headerlink" title="mosquitto.log"></a>mosquitto.log</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1662725110</span>: New client connected from <span class="token number">192.168</span>.0.2:3326 as paho1668189895026200 <span class="token punctuation">(</span>p2, c1, k60, u<span class="token string">'mambo'</span><span class="token punctuation">)</span>.<span class="token number">1662725110</span>: No will message specified.<span class="token number">1662725110</span>: Sending CONNACK to paho1668189895026200 <span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1662725110</span>: Received SUBSCRIBE from paho1668189895026200<span class="token number">1662725110</span>:     <span class="token variable">$SYS</span>/broker/version <span class="token punctuation">(</span>QoS <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1662725110</span>: paho1668189895026200 <span class="token number">0</span> <span class="token variable">$SYS</span>/broker/version<span class="token number">1662725110</span>: Sending SUBACK to paho1668189895026200<span class="token number">1662725110</span>: Sending PUBLISH to paho1668189895026200 <span class="token punctuation">(</span>d0, q0, r1, m0, <span class="token string">'$SYS/broker/version'</span>, <span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">24</span> bytes<span class="token punctuation">))</span><span class="token number">1662725110</span>: Received SUBSCRIBE from paho1668189895026200<span class="token number">1662725110</span>:     test/<span class="token comment"># (QoS 0)</span><span class="token number">1662725110</span>: paho1668189895026200 <span class="token number">0</span> test/<span class="token comment">#</span><span class="token number">1662725110</span>: Sending SUBACK to paho1668189895026200<span class="token number">1662725170</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725170</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725230</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725230</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725290</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725290</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725350</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725350</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725410</span>: Client paho1668189895026200 closed its connection.</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1662727428</span>: lws_validity_cb: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: scheduling validity check<span class="token number">1662727428</span>: rops_handle_POLLOUT_ws: issuing <span class="token function">ping</span> on wsi <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: ws mqtt h2: <span class="token number">0</span><span class="token number">1662727428</span>: lws_issue_raw: ssl_capable_write <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> says <span class="token number">2</span><span class="token number">1662727428</span>: lws_issue_raw: ssl_capable_write <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> says <span class="token number">6</span><span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: caller: close_and_handled<span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: end LRS_FLUSHING_BEFORE_CLOSE<span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token function">shutdown</span> conn: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span> <span class="token punctuation">(</span>sk <span class="token number">12</span>, state 0x11e<span class="token punctuation">)</span><span class="token number">1662727428</span>: __lws_close_free_wsi: real just_kill_connection: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span> <span class="token punctuation">(</span>sockfd <span class="token number">12</span><span class="token punctuation">)</span><span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: <span class="token assign-left variable">cce</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">1662727428</span>: Client paho1670208425870800 closed its connection.</code></pre><h4 id="Paho-Java-Client-log"><a href="#Paho-Java-Client-log" class="headerlink" title="Paho Java Client log"></a>Paho Java Client log</h4><pre class="language-bash" data-language="bash"><code class="language-bash">FINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:09 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: Stopping due to IOExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: Stopping due to IOExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTINGSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTINGSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: notify workAvailable and <span class="token function">wait</span> <span class="token keyword">for</span> runSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: notify workAvailable and <span class="token function">wait</span> <span class="token keyword">for</span> runSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback runFINE: paho1622771147525800: notify spaceAvailableSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback runFINE: paho1622771147525800: notify spaceAvailableSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore quiesceFINE: paho1622771147525800: <span class="token assign-left variable">resp</span><span class="token operator">=</span>Client is currently disconnecting <span class="token punctuation">(</span><span class="token number">32102</span><span class="token punctuation">)</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore quiesceFINE: paho1622771147525800: <span class="token assign-left variable">resp</span><span class="token operator">=</span>Client is currently disconnecting <span class="token punctuation">(</span><span class="token number">32102</span><span class="token punctuation">)</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms handleOldTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms handleOldTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState resolveOldTokensFINE: paho1622771147525800: reason Connection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState resolveOldTokensFINE: paho1622771147525800: reason Connection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore getOutstandingTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore getOutstandingTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState disconnectedFINE: paho1622771147525800: disconnectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState disconnectedFINE: paho1622771147525800: disconnectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState clearStateFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState clearStateFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore <span class="token function">clear</span>FINE: paho1622771147525800: <span class="token operator">></span> <span class="token number">0</span> tokensSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore <span class="token function">clear</span>FINE: paho1622771147525800: <span class="token operator">></span> <span class="token number">0</span> tokensSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stopping senderSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stopping senderSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState notifyQueueLockFINE: paho1622771147525800: notifying queueLock holdersSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState notifyQueueLockFINE: paho1622771147525800: notifying queueLock holdersSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: new work or <span class="token function">ping</span> arrived Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.TimerPingSender stopFINE: paho1622771147525800: stopSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: new work or <span class="token function">ping</span> arrived Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: no outstanding flows and not connectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: no outstanding flows and not connectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.TimerPingSender stopFINE: paho1622771147525800: stopSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: get message returned null, stopping<span class="token punctuation">&#125;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: get message returned null, stopping<span class="token punctuation">&#125;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTEDSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTEDSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback connectionLostFINE: paho1622771147525800: call connectionLostSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback connectionLostFINE: paho1622771147525800: call connectionLostConnection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionat org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run<span class="token punctuation">(</span>CommsReceiver.java:197<span class="token punctuation">)</span>at java.base/java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:829<span class="token punctuation">)</span>Caused by: java.io.EOFExceptionat java.base/java.io.DataInputStream.readByte<span class="token punctuation">(</span>DataInputStream.java:272<span class="token punctuation">)</span>at org.eclipse.paho.client.mqttv3.internal.wire.MqttInputStream.readMqttWireMessage<span class="token punctuation">(</span>MqttInputStream.java:92<span class="token punctuation">)</span>at org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run<span class="token punctuation">(</span>CommsReceiver.java:137<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">1</span> <span class="token function">more</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: <span class="token operator">&lt;</span></code></pre></details><h2 id="이슈-링크"><a href="#이슈-링크" class="headerlink" title="이슈 링크"></a>이슈 링크</h2><ul><li><a href="https://github.com/eclipse/mosquitto/issues/2631">Websocket connection lost with paho java client #2631</a></li><li><a href="https://github.com/eclipse/paho.mqtt.java/issues/960">Websocket connection lost with mosquitto 1.6.15 and 2.0.11+ #960</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Connection&lt;/span&gt; lost &lt;span clas</summary>
      
    
    
    
    
    <category term="Mosquitto" scheme="https://kdevkr.github.io/tags/Mosquitto/"/>
    
    <category term="Paho Java Client" scheme="https://kdevkr.github.io/tags/Paho-Java-Client/"/>
    
  </entry>
  
  <entry>
    <title>Spring JDBC</title>
    <link href="https://kdevkr.github.io/spring-jdbc/"/>
    <id>https://kdevkr.github.io/spring-jdbc/</id>
    <published>2022-09-04T15:00:00.000Z</published>
    <updated>2023-01-24T10:13:55.540Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Security OAuth2 학습을 위한 샘플 프로젝트를 만들면서 사용하게될 각 모듈에서 필요한 데이터베이스 스키마를 적용하기 위해서 Spring JDBC를 사용한 부분에 대해서 정리해보고자 합니다. 일반적으로 데이터 액세스에 대해서는 Mybatis 또는 JPA 이라는 기술을 도입하는 경우가 많을텐데 스프링 JDBC 만으로도 충분히 데이터베이스 액세스가 가능하며 Spring Session 이나 Spring Security 에서도 JDBC 기반으로 관련 기능을 제공하고 있습니다.</p><h2 id="Data-Access-with-JDBC"><a href="#Data-Access-with-JDBC" class="headerlink" title="Data Access with JDBC"></a>Data Access with JDBC</h2><p>Spring JDBC는 다양한 방식으로 데이터베이스에 대한 액세스 방법을 제공하며 스프링 세션이나 스프링 시큐리티와 함께 JDBC 기반으로 관련된 기능을 구현하기 위해서는 반드시 Spring JDBC가 포함되어야 합니다. 아마도 대부분의 애플리케이션에서는 관계형 데이터베이스에 대한 접근이 필수적이므로 다음과 같은 JDBC 모듈을 반드시 포함하고 있을 것 입니다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'org.springframework.boot:spring-boot-starter-jdbc'</span></code></pre><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>스프링 부트에서는 JdbcTemplateAutoConfiguration를 통해서 JdbcTemplate와 NamedParameterJdbcTemplate를 자동으로 빈으로 구성하는 것을 확인할 수 있는데요. JdbcTemplate 뿐만 아니라 NamedParameterJdbcTemplate를 함께 구성하는 이유는 Spring Data JDBC와 같은 모듈에서 내부적으로 사용하도록 되어있기 때문이라고 생각됩니다.</p><h3 id="JdbcUserDetailsManager"><a href="#JdbcUserDetailsManager" class="headerlink" title="JdbcUserDetailsManager"></a>JdbcUserDetailsManager</h3><p>스프링 시큐리티에서 JdbcUserDetailsManager는 JDBC 기반의 사용자 인증 구현을 위해서 JdbcDaoSupport를 확장하며 내부적으로 JdbcTemplate과 RowMapper를 사용하는 것으로 작성되어 있습니다. </p><h3 id="JdbcIndexedSessionRepository"><a href="#JdbcIndexedSessionRepository" class="headerlink" title="JdbcIndexedSessionRepository"></a>JdbcIndexedSessionRepository</h3><p>스프링 세션에서의 JdbcHttpSessionConfiguration는 JdbcTemplate를 통해서 JdbcIndexedSessionRepository를 빈으로 등록하게 됩니다. JdbcIndexedSessionRepository는 내부적으로 JdbcOperations를 사용하여 SQL를 수행하는데 세션에 대한 애트리뷰트를 저장할때 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#jdbc-advanced-jdbc">JDBC Batch Operations</a>를 활용하는 것으로 보입니다.</p><blockquote><p>JdbcTemplate는 JdbcOperatrions 구현체입니다.</p></blockquote><h2 id="Stored-Function-with-JDBC"><a href="#Stored-Function-with-JDBC" class="headerlink" title="Stored Function with JDBC"></a>Stored Function with JDBC</h2><p>현재 조직에서는 일반적으로 사용되는 Mybatis 또는 JPA를 도입하지 않고 스토어드 함수(프로시저와 비슷한)를 작성해놓고 스프링 JDBC를 통해서 호출하는 방식으로 구현하고 있습니다. 레거시 시스템을 경험하지 않았거나 Mybatis 또는 JPA라는 기술만을 접한 개발자들은 궁금할 수 있는 부분이기도 할 것 같습니다. 우선 아래와 같은 함수가 PostgreSQL 데이터베이스에 정의되어있다고 가정하겠습니다.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> users$find_by_username<span class="token punctuation">(</span>v_username <span class="token keyword">VARCHAR</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> REFCURSOR <span class="token keyword">AS</span>$$<span class="token keyword">DECLARE</span>    rtn_cursor REFCURSOR :<span class="token operator">=</span> <span class="token string">'rtn_cursor'</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    <span class="token keyword">OPEN</span> rtn_cursor <span class="token keyword">FOR</span>        <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> enabled <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">=</span> v_username<span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> rtn_cursor<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>$$ <span class="token keyword">LANGUAGE</span> plpgsql<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">select</span> users$find_by_username<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">FETCH</span> <span class="token keyword">ALL</span> <span class="token operator">IN</span> <span class="token string">"rtn_cursor"</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><h3 id="StoredProcedure"><a href="#StoredProcedure" class="headerlink" title="StoredProcedure"></a>StoredProcedure</h3><p>스프링 JDBC의 GenericStoredProcedure는 RDBMS에서 지원하는 스토어드 프로시저를 호출할 수 있도록 구현된 클래스입니다. 아래와 같이 스토어드 함수명을 지정하여 파라미터와 함께 전달하면 프로시저 호출 결과를 가져올 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using GenericStoredProcedure"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithStoredProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setResultsMapCaseInsensitive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">GenericStoredProcedure</span> storedProcedure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericStoredProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">declareParameter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlOutParameter</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>REF_CURSOR<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">declareParameter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> inParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> results <span class="token operator">=</span> storedProcedure<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>inParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> cursors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> cursor <span class="token operator">:</span> cursors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="SimpleJdbcXXXX"><a href="#SimpleJdbcXXXX" class="headerlink" title="SimpleJdbcXXXX"></a>SimpleJdbcXXXX</h3><p>SimpleJdbcInsert와 SimpleJdbcCall은 JdbcTemplate를 사용하여 몇가지 상황에 대해 효율적으로 처리할 수 있는 방법을 제공합니다. 예를 들어, 한번에 많은 생성 작업이 필요한 경우에 SimpleJdbcInsert를 사용할 수 있고 스토어드 프로시저(Stored Procedure) 또는 스토어드 함수(Stored Function)를 호출하고자 하는 경우에도 SimpleJdbcCall을 사용할 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using SimpleJdbcCall"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithSimpleJdbcCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    <span class="token class-name">MapSqlParameterSource</span> sqlParameterSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapSqlParameterSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlParameterSource<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJdbcCall</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withFunctionName</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withoutProcedureColumnMetaDataAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">declareParameters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">returningResultSet</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlParameterSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>GenericStoredProcedure와 비교해서 조금은 코드가 간결함을 확인할 수 있습니다.</p></blockquote><h3 id="JdbcTemplate-1"><a href="#JdbcTemplate-1" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>스프링 JDBC에서 제공하는 클래스가 아니더라도 스토어드 프로시저를 호출할 수 있습니다. JdbcTemplate에서 커넥션을 가져온 후 prepareCall을 사용해서 직접 호출한 결과를 RowMapper로 변환할 수 있습니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using connection"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CallableStatement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&#123;call %s(?)&#125;"</span><span class="token punctuation">,</span> functionName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PgResultSet</span> pgResultSet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PgResultSet</span><span class="token punctuation">)</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">RowMapperResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowMapperResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> extractor<span class="token punctuation">.</span><span class="token function">extractData</span><span class="token punctuation">(</span>pgResultSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>DataClassRowMapper 또는 BeanPropertyRowMapper를 사용해서 더 범용적인 코드를 작성할 수도 있습니다.</p></blockquote><p><a href="https://qr.ae/pvkBiH">저장 프로시저를 사용하는 것에 대한 장점</a>도 존재하기 때문에 애플리케이션에서 저장 프로시저를 호출할 수 있는 방법을 알고 있는 것도 중요합니다. Spring JDBC에 대해서 다루기 때문에 소개하지는 않았지만 JPA 기술 스펙에서도 NamedStoredProcedureQuery와 같이 프로시저를 호출할 수 있도록 지원하고 있습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#jdbc">Spring Docs - Data Access with JDBC</a></li><li><a href="https://www.baeldung.com/jdbc-batch-processing">Batch Processing in JDBC</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Security OAuth2 학습을 위한 샘플 프로젝트를 만들면서 사용하게될 각 모듈에서 필요한 데이터베이스 스키마를 적용하기 위해서 Spring JDBC를 사용한 부분에 대해서 정리해보고자 합니다. 일반적으로 데이터 액세스에 대해서</summary>
      
    
    
    
    
    <category term="JDBC" scheme="https://kdevkr.github.io/tags/JDBC/"/>
    
    <category term="RowMapper" scheme="https://kdevkr.github.io/tags/RowMapper/"/>
    
  </entry>
  
</feed>
