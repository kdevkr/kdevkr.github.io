<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2021-10-11T09:08:58.702Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SonarQube와 Github Action으로 수행하는 정적 분석</title>
    <link href="https://kdevkr.github.io/static-analysis-performed-by-sonarqube-and-github-action/"/>
    <id>https://kdevkr.github.io/static-analysis-performed-by-sonarqube-and-github-action/</id>
    <published>2021-10-11T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 SonarQube와 Github Action을 통해 정적 분석을 수행하기 위한 과정을 알아보려고 합니다.</p><h2 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h2><p><a href="https://www.sonarqube.org/">소나큐브</a>는 다양한 언어에 대한 코드 품질을 분석하고 취약점을 파악할 수 있는 정적 분석 도구입니다. 회사에서 정적 분석을 수행하고 싶다는 요구사항이 있어 제가 SonarQube를 도입하고 월요일과 금요일마다 프로젝트 코드에 대한 정적 분석을 수행하고 있습니다. 제가 정적 분석을 위해서 소나큐브를 도입한 이유는 다음과 같습니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-00.png" alt="소나큐브 라이센스"></p><ol><li>GPLv3 라이센스 기반의 오픈소스 버전 지원</li><li>IntelliJ 또는 VSCode와 같은 IDE를 위한 SonarLint 지원</li><li>소나큐브에 대한 공식 도커 이미지 지원</li><li>다양한 언어와 커뮤니티 기반의 규칙 지원</li></ol><p>회사 개발자들이 주로 사용하는 인텔리제이 IDEA 또는 VSCode에서 사용할 수 있는 SonarLint를 제공하여 별도의 서버 없이도 간단하게 자체적으로 정적 분석을 수행하고 결과를 확인할 수 있으며 공식 도커 이미지를 통해 별다른 설정 없이도 간단하게 소나큐브 시스템을 구성할 수 있습니다.</p><h3 id="소나큐브-시스템-구성"><a href="#소나큐브-시스템-구성" class="headerlink" title="소나큐브 시스템 구성"></a>소나큐브 시스템 구성</h3><p>소나큐브는 <a href="https://docs.sonarqube.org/latest/setup/install-server/">직접 설치</a>할 수도 있으며 도커 이미지와 함께 제공하는 도커 컴포즈 문서를 활용할 수 있습니다.</p><p><a href="https://github.com/SonarSource/docker-sonarqube/blob/master/example-compose-files/sq-with-postgres/docker-compose.yml">sq-with-postgres/docker-compose.yml</a></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube:9.1.0-community</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarnet</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_URL:</span> <span class="string">jdbc:postgresql://db:5432/sonar</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_USERNAME:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_data:/opt/sonarqube/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_logs:/opt/sonarqube/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_temp:/opt/sonarqube/temp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">262144</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">262144</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarnet</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgresql:/var/lib/postgresql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgresql_data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">sonarnet:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">sonarqube_data:</span></span><br><span class="line">  <span class="attr">sonarqube_extensions:</span></span><br><span class="line">  <span class="attr">sonarqube_logs:</span></span><br><span class="line">  <span class="attr">sonarqube_temp:</span></span><br><span class="line">  <span class="attr">sonarqube_bundled-plugins:</span></span><br><span class="line">  <span class="attr">postgresql:</span></span><br><span class="line">  <span class="attr">postgresql_data:</span></span><br></pre></td></tr></table></figure><h4 id="WSL-vm-max-map-count"><a href="#WSL-vm-max-map-count" class="headerlink" title="WSL vm.max_map_count"></a>WSL vm.max_map_count</h4><p>윈도우 환경에서 WSL로 도커 컨테이너를 실행하는 경우 vm.max_map_count로 인하여 소나큐브에서 실행하는 Elasticsearch가 실행되지 않을 수 있습니다. 이 경우 윈도우 터미널에서 WSL로 도커 컨테이너로 접속 후 다음의 명령어를 실행하여 Elasticsearch에서 요구하는 수치로 변경하시면 됩니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span></span><br><span class="line">wsl -d docker-desktop</span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><blockquote><p>소나큐브의 관리자 계정과 초기 비밀번호는 admin/admin 입니다.</p></blockquote><h3 id="소나큐브-프로젝트-생성"><a href="#소나큐브-프로젝트-생성" class="headerlink" title="소나큐브 프로젝트 생성"></a>소나큐브 프로젝트 생성</h3><p>소나큐브에 접속하였다면 정적 분석을 수행할 프로젝트를 생성해야합니다. 저는 깃허브 리파지토리 이름을 그대로 사용하는 편입니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-01.png" alt="spring5-web-example 프로젝트"></p><p>그리고 소나큐브에 로그인할 수 있는 토큰을 발행합니다. </p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-02.png"></p><p>토큰 용도를 구분하기 위한 이름을 지정하는데 저는 Github Action에서 사용할 예정이므로 GITHUB_ACTION을 지정하였습니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-03.png"></p><p>저는 로컬 컴퓨터에 소나큐브를 실행하였고 필요할때만 포트포워딩을 수행할 예정이므로 토큰을 공개하겠습니다. (어차피 학습 후에 지움…)</p><h3 id="소나큐브-관련-코드-추가"><a href="#소나큐브-관련-코드-추가" class="headerlink" title="소나큐브 관련 코드 추가"></a>소나큐브 관련 코드 추가</h3><p>소나큐브 시스템에 프로젝트를 생성하고 토큰을 발급하였기 때문에 소나큐브와 연계할 수 있도록 프로젝트 폴더에 소나큐브와 관련된 코드를 추가하겠습니다.</p><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>만약, 그래들을 통해 소나큐브와 연동하고 싶다면 build.gradle에 SonarQube 플러그인을 추가해야합니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;org.sonarqube&quot;</span> version <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;jacoco&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sonarqube &#123;</span><br><span class="line">  properties &#123;</span><br><span class="line">    property <span class="string">&quot;sonar.projectKey&quot;</span>, <span class="string">&quot;spring5-web-example&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sonar-project-properties"><a href="#sonar-project-properties" class="headerlink" title="sonar-project.properties"></a>sonar-project.properties</h4><p>sonar-project.properties 파일은 소나큐브에서 참조하게 되는 설정 파일입니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">sonar.projectKey=spring5-web-example</span></span><br><span class="line"><span class="string">sonar.projectName=spring5-web-example</span></span><br><span class="line"><span class="string">sonar.java.source=1.11</span></span><br><span class="line"><span class="string">sonar.sources=src/main/java</span></span><br><span class="line"><span class="comment">#sonar.tests=src/main/test</span></span><br><span class="line"><span class="string">sonar.java.binaries=build/classes/java/main/com/example</span></span><br><span class="line"><span class="string">sonar.sourceEncoding=UTF-8</span></span><br><span class="line"><span class="string">sonar.exclusions=</span></span><br></pre></td></tr></table></figure><h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><p><a href="https://github.com/kitabisa/sonarqube-action">SonarQube GitHub Action</a>은 Github Action을 통해 소나큐브로 정적 분석을 수행할 수 있도록 지원합니다.</p><h3 id="소나큐브-워크플로우-코드-추가"><a href="#소나큐브-워크플로우-코드-추가" class="headerlink" title="소나큐브 워크플로우 코드 추가"></a>소나큐브 워크플로우 코드 추가</h3><p><strong>.github/workflows/sonarqube.yml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># schedule:</span></span><br><span class="line">    <span class="comment"># - cron: &#x27;0 * * * 1&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">SonarQube</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">1.11</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">AdoptOpenJDK/install-jdk@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">&#x27;11&#x27;</span></span><br><span class="line">        <span class="attr">architecture:</span> <span class="string">x64</span></span><br><span class="line">        <span class="attr">targets:</span> <span class="string">&#x27;JAVA_HOME&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">build</span> <span class="string">-x</span> <span class="string">test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">build</span> <span class="string">artifact</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">build/classes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sonarQube:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">SonarQube</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Donwload</span> <span class="string">build</span> <span class="string">artifact</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">build/classes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SonarQube</span> <span class="string">Scan</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">kitabisa/sonarqube-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SONAR_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">login:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SONAR_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">projectBaseDir:</span> <span class="string">&#x27;/github/workspace&#x27;</span></span><br></pre></td></tr></table></figure><p>소나큐브 워크플로우 파일을 깃허브 리파지토리의 메인 또는 마스터 브랜치에 반영하면 깃허브에서 워크플로우를 등록합니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-04.png"></p><h3 id="소나큐브-관련-시크릿-생성"><a href="#소나큐브-관련-시크릿-생성" class="headerlink" title="소나큐브 관련 시크릿 생성"></a>소나큐브 관련 시크릿 생성</h3><p>소나큐브 워크플로우에서 사용하는 두가지 시크릿을 깃허브 리파지토리에 설정해야합니다.</p><ul><li>SONAR_HOST : 소나큐브 호스트 주소</li><li>SONAR_TOKEN : 소나큐브에서 발급한 토큰 정보</li></ul><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-05.png"></p><h3 id="소나큐브-워크플로우-실행"><a href="#소나큐브-워크플로우-실행" class="headerlink" title="소나큐브 워크플로우 실행"></a>소나큐브 워크플로우 실행</h3><p>소나큐브 워크플로우 설정이 완료되었으므로 메인 브랜치를 기준으로 워크플로우를 실행합니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-06.png"></p><p>프로젝트 코드에 대한 빌드가 정상적으로 수행되고 소나큐브 서버를 통해 정적 분석을 수행되었다면 다음과 같이 워크플로우가 정상적으로 완료됩니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-07.png"></p><h2 id="정적-분석-결과"><a href="#정적-분석-결과" class="headerlink" title="정적 분석 결과"></a>정적 분석 결과</h2><p>소나큐브 시스템에 접속하여 소나큐브 워크플로우를 실행한 프로젝트의 정적 분석 결과를 확인합니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-08.png"></p><p>빌드 테스트는 수행하지 않았기 때문에 코드 커버리지는 분석할 수 없었으나 10개의 코드 악취가 발견되었습니다.</p><h3 id="코드-악취-검토-및-개선"><a href="#코드-악취-검토-및-개선" class="headerlink" title="코드 악취 검토 및 개선"></a>코드 악취 검토 및 개선</h3><p>정적 분석 결과로 검출된 코드 악취에 대한 내용을 검토하고 이를 개선해보겠습니다.</p><h4 id="코드-악취"><a href="#코드-악취" class="headerlink" title="코드 악취"></a>코드 악취</h4><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-09.png"></p><p>첫번째 검출 항목은 연속된 라인을 주석으로 처리한 부분을 제거해야한다는 것입니다. </p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-10.png"></p><p>만약, 이렇게 주석되어있는 것이 남아있어야 한다고 가정하면 다음과 같이 프로젝트에 대한 검출 규칙을 변경할 수 있습니다.</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ignore Rules</span></span><br><span class="line"><span class="meta">sonar.issue.ignore.multicriteria</span>=<span class="string">e1,e2</span></span><br><span class="line"><span class="meta">sonar.issue.ignore.multicriteria.e1.ruleKey</span>=<span class="string">java:S125</span></span><br><span class="line"><span class="meta">sonar.issue.ignore.multicriteria.e1.resourceKey</span>=<span class="string">**/*.java</span></span><br><span class="line"><span class="meta">sonar.issue.ignore.multicriteria.e2.ruleKey</span>=<span class="string">java:S1192</span></span><br><span class="line"><span class="meta">sonar.issue.ignore.multicriteria.e2.resourceKey</span>=<span class="string">**/*.java</span></span><br></pre></td></tr></table></figure><p>java:S125는 블록으로 된 주석을 남기고 있다는 악취이며 java:S1192는 동일한 문자열을 상수로 취급하지 않는다는 악취입니다. 저는 이것을 악취로 보지 않기 위해서 위와 같이 설정하고 소나큐브 워크플로우를 다시 수행해보겠습니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-11.png"></p><p>기존에 검출되었던 코드 악취 중 java:S125와 java:S1192에 해당하는 부분이 제외되어 3개의 코드 악취가 줄어들었음을 확인할 수 있습니다. 이렇게 회사 또는 개발팀에서 프로젝트 코드에 대한 규칙을 검토하는 과정을 거쳐야합니다만 저희 회사는 정작 그러지 않고 있어 아쉬움이 많습니다. 체계가 없다보니 무언가 도입을 원하지만 실제로는 제대로 활용하지 않는게 많은 것 같아요.</p><p>아무튼 나머지 코드 악취에 대해서도 리팩토링을 수행하여 없애보도록 하면서 마치겠습니다.</p><p><img data-src="/images/posts/sonarqube-and-github-action/sonarqube-12.png"></p><h4 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h4><p>sonar-project.properties에서 제외되도록 정의한 규칙이 패턴에 의한 것이라면 특정 클래스 또는 함수 단위로 규칙을 제외하고 싶은 경우 @SuppressWarnings을 사용할 수 있습니다. </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;squid:S125&quot;,&quot;squid:S1192&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 SonarQube와 Github Action을 통해 정적 분석을 수행하기 위한 과정을 알아보려고 합니다.&lt;/p&gt;
&lt;h2 id=&quot;SonarQube&quot;&gt;&lt;a href=&quot;#SonarQube&quot; class=</summary>
      
    
    
    
    
    <category term="SonarQube" scheme="https://kdevkr.github.io/tags/SonarQube/"/>
    
    <category term="Github Action" scheme="https://kdevkr.github.io/tags/Github-Action/"/>
    
  </entry>
  
  <entry>
    <title>리눅스에서 프로세스 실행 유지하기</title>
    <link href="https://kdevkr.github.io/maintaining-process-execution-in-linux/"/>
    <id>https://kdevkr.github.io/maintaining-process-execution-in-linux/</id>
    <published>2021-10-10T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>서버에서 실행중인 애플리케이션은 언제든지 <strong>예기치 않은 상황</strong>으로 중단될 수 있습니다. 예를 들어, 일시적으로 전력이 차단되어 서버 장비가 다시 시작되거나 애플리케이션 프로세스가 서버 자원을 많이 사용해서 프로세스가 중단되는 상황이 발생할 수 있습니다. </p><p>그래서 오늘 알아볼 내용은 리눅스에서 예기치 않은 상황으로 인하여 프로세스가 중단되었을 경우 자동으로 프로세스를 다시 실행시킴으로써 프로세스 실행 상태를 유지하기 위한 방법입니다.</p><h2 id="프로세스-실행-유지"><a href="#프로세스-실행-유지" class="headerlink" title="프로세스 실행 유지"></a>프로세스 실행 유지</h2><p>먼저, 스프링 부트 애플리케이션을 다음과 같이 실행할 수 있다고 가정 하겠습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nohup java -jar -Xmx500m demo.war 1&gt; app.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># [1] 227</span></span><br><span class="line"></span><br><span class="line">ls -l</span><br><span class="line"><span class="comment"># total 21M</span></span><br><span class="line"><span class="comment"># -rw-r--r-- 1 ec2-user ec2-user 2.0K Oct  8 15:19 app.log</span></span><br><span class="line"><span class="comment"># -rw-r--r-- 1 ec2-user ec2-user    3 Oct  8 15:19 app.pid</span></span><br><span class="line"><span class="comment"># -rwxr-xr-x 1 ec2-user ec2-user  20M Oct  8 12:28 demo.war*</span></span><br><span class="line"></span><br><span class="line">cat app.pid</span><br><span class="line"><span class="comment"># 227</span></span><br></pre></td></tr></table></figure><p>위 예시에서 nohup 명령어를 사용하고 출력된 프로세스 아이디와 스프링 부트 애플리케이션에서 ApplicationPidWriter에 의해 생성된 프로세스 아이디 파일이 동일한 것을 확인할 수 있습니다.</p><h3 id="프로세스-아이디-확인하기"><a href="#프로세스-아이디-확인하기" class="headerlink" title="프로세스 아이디 확인하기"></a>프로세스 아이디 확인하기</h3><p>앞서 스프링 부트 애플리케이션처럼 애플리케이션 자체적으로 현재 실행중인 프로세스 아이디를 저장할 수 있는 기능을 포함하고 있다면 좋겠지만 그렇지 않을 수 있습니다. 그래서 이미 실행중인 프로세스 아이디를 확인하고 가져올 수 있는 방법을 알아야 합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo $!</span></span><br><span class="line">nohup java -jar -Xmx500m demo.war 1&gt; app.log 2&gt;&amp;1 &amp; <span class="built_in">echo</span> $! &gt; app.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># JPS(JVM Process Status)</span></span><br><span class="line">jps -v | grep war | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps -ef</span></span><br><span class="line">ps -ef | grep java | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># netstat -tnlp</span></span><br><span class="line">netstat -tnlp | grep java | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F <span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pgrep</span></span><br><span class="line">pgrep java</span><br></pre></td></tr></table></figure><p>첫번째 방식에 사용된 <strong>echo $!</strong> 는 마지막으로 백그라운드에서 실행된 명령어에 대한 PID값을 출력할 수 있는 명령어입니다.</p><h3 id="Crontab으로-프로세스-유지하기"><a href="#Crontab으로-프로세스-유지하기" class="headerlink" title="Crontab으로 프로세스 유지하기"></a>Crontab으로 프로세스 유지하기</h3><p>일반적으로 사용되는 고전적인 방식은 앞서 다양한 방식으로 추출된 프로세스 아이디에 대한 프로세스 실행 상태를 체크하는 스크립트를 Crontab을 통해 주기적으로 실행하는 것입니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">PID_FILE=<span class="string">&quot;app.pid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">autorun</span></span> () &#123;</span><br><span class="line">  <span class="comment"># ... &amp; echo $! &gt; app.pid</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$PID_FILE</span>&quot;</span> ] &amp;&amp; [ ! -z `cat <span class="string">&quot;<span class="variable">$PID_FILE</span>&quot;</span>` ]; <span class="keyword">then</span></span><br><span class="line">  PID=$(cat <span class="variable">$PID_FILE</span>)</span><br><span class="line">  <span class="keyword">if</span> ps -p <span class="variable">$PID</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PID_FILE</span>(<span class="variable">$PID</span>) is running&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    autorun</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  autorun</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="SystemD"><a href="#SystemD" class="headerlink" title="SystemD"></a>SystemD</h3><p>더 효율적인 방식은 Nginx와 같은 패키지를 APT 또는 YUM으로 설치할 때 SystemD 서비스에 자동으로 등록하는 것처럼  애플리케이션을 실행하는 명령어 또는 스크립트를 SystemD 서비스로 등록하는 것입니다. </p><p><strong>/etc/systemd/system/demo.service</strong></p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Demo</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=ec2-user</span><br><span class="line">WorkingDirectory=/home/ec2-user</span><br><span class="line">ExecStart=/usr/bin/java -jar -Xmx500m demo.war</span><br><span class="line">ExecStop=kill -9 `cat app.pid`</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>위와 같이 스크립트를 정의했다면 다음과 같이 서버가 실행될 때 서비스가 시작되도록 활성화하거나 직접 서비스를 실행하고 종료할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> demo.service</span><br><span class="line">sudo systemctl start demo.service</span><br></pre></td></tr></table></figure><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;서버에서 실행중인 애플리케이션은 언제든지 &lt;strong&gt;예기치 않은 상황&lt;/strong&gt;으로 중단될 수 있습니다. 예를 들어, 일시적으로 전력이 차단되어 서버 장비가 다시 시작되거나 애플리케이션 프로세스</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://kdevkr.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>AWS IAM 사용자 리전 제한하기</title>
    <link href="https://kdevkr.github.io/limit-region-aws-iam-user/"/>
    <id>https://kdevkr.github.io/limit-region-aws-iam-user/</id>
    <published>2021-10-03T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>회사에 있던 책들 중 <strong>탄력적 개발로 이끄는 AWS 실천 기술</strong>이라는 책을 읽어보고 관련된 정보를 찾으면서 AWS 활용 방안에 대해 공부하고 있습니다.</p><p>AWS 프리 티어 또는 AWS 서비스를 학습하는 사람이라면 모든 권한을 가지고 있는 루트 사용자 계정을 사용하는 경우가 많을겁니다. 실무 환경에서는 회사의 루트 사용자 계정이 아닌 IAM을 통해 직무 또는 특정 권한을 가지는 사용자를 만들어서 사용하도록 구성하겠죠. 보안 등급이 높거나 체계적인 회사라면 AWS 리소스에 대한 정책을 검토하고 부여하겠지만 제가 다니고 있는 회사의 팀에서도 모든 권한을 부여한 사용자를 만들어서 사용하고 있는 것을 보았고 직원마다 권한을 부여할 수 있도록 사용자를 발급해달라고 요청하여 사용하고는 있습니다.</p><blockquote><p>루트 사용자 계정을 사용하지 않는다고 해도 권한 정책을 검토하고 부여하는 것이 귀찮은 건 맞습니다. 결국 사용자에게 모든 권한을 가지는 정책을 연결하여 사용할 수도 있습니다.</p></blockquote><p>AWS와 같은 클라우드 서비스는 다양한 지역에 존재하는 데이터 센터에 자원을 생성하고 사용할 수 있도록 지원하기 때문에 사용자 계정 정보가 유출된다면 주로 사용하는 리전이 아닌 곳에 AWS 리소스가 생성되고 요금이 발생하는 문제가 생길 수 있습니다. 일부 요금 폭탄 문제가 생기는 분들도 주로 사용하는 서울 리전에 대한 리소스만 체크한 상태로 있다가 전혀 사용하지 않고 있는 리전에 실행된 AWS 리소스로 인하여 발생하는 요금으로 당황하는 경우도 많은 것 같습니다. </p><p>이 글에서는 IAM 사용자의 계정 정보가 유출되더라도 주로 사용하는 리전만 접근할 수 있도록 제한하여 불필요한 리전에 AWS 리소스가 나도 모르게 생성되지 않도록 방지하는 대책을 설정할 수 있는 방법을 알려드립니다.</p><h2 id="AWS-IAM"><a href="#AWS-IAM" class="headerlink" title="AWS IAM"></a>AWS IAM</h2><p>IAM(Identity and Access Management)은 사용자의 신원을 확인하거나 리소스에 대한 액세스 권한을 통합적으로 관리하는 기능을 말합니다. AWS IAM도 마찬가지로 조직을 구성하거나 장기 또는 임시적으로 AWS 리소스 권한을 부여하는 기능을 제공합니다.</p><h3 id="IAM-사용자"><a href="#IAM-사용자" class="headerlink" title="IAM 사용자"></a>IAM 사용자</h3><p>AWS IAM의 사용자는 AWS 리소스에 대한 장기적인 권한을 가지도록 구성하는 장기 자격 증명입니다. </p><p>먼저, 테스트를 위한 IAM 사용자인 pika를 만들겠습니다. pika는 <strong>모든 권한을 가지는 직무 정책인 AdminisratorAccess</strong>를 가진다고 가정하겠습니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-01.png"></p><p>pika는 AWS에서 기본적으로 제공하는 관리형 정책인 AdministratorAccess와 IAMUserChangePassword을 가지게 되었습니다.</p><p>그러면 pika 사용자의 비밀번호가 유출되어 누군가가 AWS 콘솔에 접속할 수 있게 된다면 수 많은 리전에 VPC를 생성하거나 EC2 인스턴스를 실행할 수 있는 상태가 됩니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-02.png"></p><h3 id="IAM-사용자-리전-제한"><a href="#IAM-사용자-리전-제한" class="headerlink" title="IAM 사용자 리전 제한"></a>IAM 사용자 리전 제한</h3><p>만약 pika라는 사용자가 애플리케이션을 운영하기 위한 구성을 서울(ap-northeast-2) 리전에서만 사용한다고 가정해본다면 다른 리전에 대한 권한을 불필요하게 주고 있는 상태가 됩니다. </p><h4 id="aws-RequestedRegion"><a href="#aws-RequestedRegion" class="headerlink" title="aws:RequestedRegion"></a>aws:RequestedRegion</h4><p>IAM 정책을 정의할 때 aws:RequestedRegion는 글로벌 조건 키를 사용하면 특정 리전에 대해서만 권한을 가지도록 제한할 수 있습니다.</p><p>만약, 서울 리전만 권한을 부여하고 싶다면 다음과 같이 조건절을 정의하면 됩니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;StringEquals&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;aws:RequestedRegion&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;ap-northeast-2&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존에 연결하였던 AdministratorAccess라는 직무 정책을 해제하고 AdministratorAccessOnlySeoul이라는 정책을 만들어서 연결하겠습니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-03.png"></p><h3 id="리전-제한-확인"><a href="#리전-제한-확인" class="headerlink" title="리전 제한 확인"></a>리전 제한 확인</h3><p>pika 사용자는 서울 리전에 대한 권한만 가지도록 제한되었기 때문에 정말로 그러한 상태가 되는지 확인해보겠습니다.</p><p>연결되지 않은 탄력적 IP는 요금을 지불해야하므로 탄력적 IP를 생성하려고 시도했지만 불가능합니다. </p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-04.png"></p><p>EC2 인스턴스를 생성하기 위해서 서울 리전에서 사용가능한 AMI 유형을 조회할 수 없기 때문에 진행할 수 없습니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-05.png"></p><p>도쿄 리전에 대한 페이지는 접속할 수 있지만 AWS 리소스를 생성하는 것은 동일하게 AWS API를 사용하기 때문에 서울 리전외에는 권한 오류가 발생하게 됩니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-06.png"></p><p>심지어는 글로벌 리전 서비스인 S3에서도 권한 오류가 발생합니다. 이는 S3 서비스로 이동할 때 현재 리전 파라미터를 전달하기 때문인데 서울 리전으로 변경하거나 제거하시면 됩니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-07.png"></p><h3 id="경계-설정으로-리전-제한"><a href="#경계-설정으로-리전-제한" class="headerlink" title="경계 설정으로 리전 제한"></a>경계 설정으로 리전 제한</h3><p>앞서 pika 사용자는 AdministratorAccess라는 직무 정책과 동일하게 모든 권한을 가지는 AdministratorAccessOnlySeoul이라는 정책을 만들어서 연결하여 제한하였습니다. 그러나 사용자마다 부여된 권한이 다를 수 있기 때문에 매번 리전을 제한하는 정책을 만들어서 연결하기에는 불편함이 있습니다. 이 경우에는 정책을 권한 경계(Permissions boundary)로 설정하면 모든 사용자마다 부여된 정책에 대하여 리전을 제한할 수 있습니다.</p><h4 id="특정-서비스에-대한-권한을-가진-사용자"><a href="#특정-서비스에-대한-권한을-가진-사용자" class="headerlink" title="특정 서비스에 대한 권한을 가진 사용자"></a>특정 서비스에 대한 권한을 가진 사용자</h4><p>제가 사용하는 mambo라는 사용자는 VPC, EC2, S3에 대한 모든 권한을 가지도록 정책을 연결하였습니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-08.png"></p><h4 id="서울-리전을-경계로-제한"><a href="#서울-리전을-경계로-제한" class="headerlink" title="서울 리전을 경계로 제한"></a>서울 리전을 경계로 제한</h4><p>이전과 동일하게 서울 리전만을 사용할 수 있도록 제한하기 위해 정책을 만들어서 권한 경계로 설정하겠습니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-09.png"></p><p>mambo 사용자는 RDS에 대한 권한이 없기 때문에 서울 리전에서도 RDS를 사용하여 데이터베이스를 생성할 수 없습니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-10.png"></p><p>EC2 서비스에 대한 권한을 가지고 있지만 경계 설정으로 인하여 서울 리전이 아니면 권한이 없게 됩니다.</p><p><img data-src="/images/posts/limit-region-aws-iam-user/aws-iam-user-11.png"></p><h4 id="글로벌-서비스-리전"><a href="#글로벌-서비스-리전" class="headerlink" title="글로벌 서비스 리전"></a>글로벌 서비스 리전</h4><p>CloudFront, Route53, IAM과 같은 글로벌 서비스는 미국 동부 (us-east-1) 리전의 엔드포인트를 사용하기 때문에 이에 대한 권한을 별도로 설정하여야합니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;cloudfront:*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;route53:*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iam:*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;support:*&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;StringEquals&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;aws:RequestedRegion&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;us-east-1&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="끝마치며"><a href="#끝마치며" class="headerlink" title="끝마치며"></a>끝마치며</h2><p>IAM 사용자가 사용할 수 있는 리전을 제한함으로써 비록 계정 정보가 유출되더라도 서울 리전에서만 AWS 리소스를 마음대로 생성할 수 있도록 방지할 수 있게 되었습니다. 이 방법을 적용하더라도 IAM 사용자의 비밀번호와 액세스 키는 주기적으로 갱신하는 것은 반드시 필요합니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;회사에 있던 책들 중 &lt;strong&gt;탄력적 개발로 이끄는 AWS 실천 기술&lt;/strong&gt;이라는 책을 읽어보고 관련된 정보를 찾으면서 AWS 활용 방안에 대해 공부하고 있습니다.&lt;/p&gt;
&lt;p&gt;AWS 프리</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EC2 인스턴스에서 S3 버킷 액세스하기</title>
    <link href="https://kdevkr.github.io/ec2-instance-access-s3-bucket/"/>
    <id>https://kdevkr.github.io/ec2-instance-access-s3-bucket/</id>
    <published>2021-10-02T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 EC2 인스턴스에서 S3 버킷에 액세스할 수 있도록 구성하는 방법에 대해 알아봅니다.</p><p>최근 회사에서 진행하고 있는 프로젝트 중에는 보안 정책에 의해 고객이 구성한 EC2 인스턴스에 대한 접근 정보만을 제공받아 애플리케이션 실행해야하는 요구사항이 생겼습니다. 현재 애플리케이션에서 사용중인 데이터베이스 중에는 EC2 인스턴스에 직접 설치하여 사용하고 있는 상용 시계열 데이터베이스가 있습니다. 이 데이터베이스의 데이터를 주기적으로 백업하기 위하여 매일 1시에 파일로 저장된 데이터를 압축하여 S3로 저장하는 스크립트를 수행하고 있습니다. 고객이 보유한 EC2 인스턴스에서 이 데이터베이스의 백업 파일을 저장하기 위한 S3 버킷에 대한 권한을 지정해주도록 유도할 예정입니다.</p><h2 id="S3-버킷-정책"><a href="#S3-버킷-정책" class="headerlink" title="S3 버킷 정책"></a>S3 버킷 정책</h2><p>S3에서 버킷을 만들면 기본적으로 <strong>모든 퍼블릭 액세스 차단</strong>됩니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-01.png"></p><p>그리고 <strong>버킷 정책</strong>을 통해 버킷 또는 버킷에 저장된 오브젝트에 대한 액세스 권한을 부여할 수 있습니다. </p><h3 id="버킷-정책-생성"><a href="#버킷-정책-생성" class="headerlink" title="버킷 정책 생성"></a>버킷 정책 생성</h3><p>버킷 정책을 생성할 때는 아마존 웹 서비스에서 제공하는 <a href="http://awspolicygen.s3.amazonaws.com/policygen.html">AWS Policy Generator</a>를 사용하는 것이 좋습니다.</p><p>다음은 특정 IP에 대해서 버킷에 대한 조회, 읽기, 쓰기 권한을 부여하는 정책을 생성한 예시입니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Principal&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::mambo.kr&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::mambo.kr/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;IpAddress&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;aws:SourceIp&quot;</span>: <span class="string">&quot;218.156.190.x/32&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>버킷 정책을 정의하는 JSON의 크기는 20kB로 제한됩니다.</p></blockquote><p>버킷 정책에 대한 더 자세한 내용은 <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/example-bucket-policies.html">버킷 정책 예제</a> 문서를 참고하세요.</p><h2 id="EC2-인스턴스"><a href="#EC2-인스턴스" class="headerlink" title="EC2 인스턴스"></a>EC2 인스턴스</h2><p>아마존 리눅스 AMI로 EC2 인스턴스를 실행하면 AWS CLI가 기본으로 설치되어있습니다. 따라서, AWS CLI를 사용해서 S3 서비스에 작업을 수행할 수 있습니다.</p><h3 id="IAM-역할-생성"><a href="#IAM-역할-생성" class="headerlink" title="IAM 역할 생성"></a>IAM 역할 생성</h3><p>S3 버킷 권한 설정에서 버킷 정책을 설정할 수 있으나 IAM 역할을 만들고 인라인 정책으로 적용할 수도 있습니다. 우리는 EC2 인스턴스에서 접근해야하므로 EC2 서비스에 대한 IAM 역할을 만들어서 인스턴스 프로파일로 등록하겠습니다.</p><p>먼저, EC2 인스턴스에서 AWS CLI로 버킷을 조회해보겠습니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-02.png"></p><p>현재 EC2 인스턴스에는 IAM 인스턴스 프로파일이 지정되어있지 않기 때문에 오류가 발생합니다.</p><p>IAM 메뉴에서 신규로 역할을 생성합니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-03.png"></p><p>S3 버킷에 대한 권한을 인라인 정책으로 정의할 것이므로 관리형 정책은 설정하지않습니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-04.png"></p><p>생성한 IAM 역할을 EC2 인스턴스 프로파일로 지정합니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-05.png"></p><p>IAM 역할에 어떠한 정책을 적용하지 않고 버킷을 조회해보겠습니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-06.png"></p><p>IAM 역할을 지정하였기에 AWS CLI를 사용할 수 있게 되었지만 mambo.kr 이라는 버킷에 대한 ListObjectsV2 작업은 Access Denied 오류가 발생했습니다.</p><h3 id="인라인-정책"><a href="#인라인-정책" class="headerlink" title="인라인 정책"></a>인라인 정책</h3><p>우리가 생성한 IAM 역할에는 어떠한 정책도 연결하지 않았기 때문에 접근 권한을 가지지 않는게 당연합니다. 다시 IAM 메뉴로 돌아가서 <strong>인라인 정책 추가</strong>를 선택합니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-07.png"></p><p>버킷 정책 예제를 참고해서 다음과 같이 JSON 형식으로 버킷 정책을 정의합니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span>: <span class="string">&quot;Mannual&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::mambo.kr&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::mambo.kr/*&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-08.png"></p><h3 id="버킷-조회"><a href="#버킷-조회" class="headerlink" title="버킷 조회"></a>버킷 조회</h3><p>S3 버킷에 대한 정책이 IAM 인라인 정책으로 연결되었으니 버킷에 대한 접근 권한이 가지게 되었는지 확인합니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-09.png"></p><p>EC2 인스턴스에서 사용자 계정의 보유한 S3 버킷에 대한 목록은 권한이 없어서 조회할 수 없으나 인라인 정책으로 정의된 mambo.kr 버킷에 대해서는 조회되었습니다.</p><p>만약, S3 버킷 목록을 조회하고 싶다면 다음과 같이 Statement를 추가하시면 됩니다.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span>: <span class="string">&quot;Mannual&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::mambo.kr&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::mambo.kr/*&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span>: <span class="string">&quot;Mannual-2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:ListBucket&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::*/*&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빈 텍스트 파일을 만들어서 버킷에 업로드하고 가져올 수 있는지 확인해보겠습니다.</p><p><img data-src="/images/posts/ec2-instance-access-s3-bucket/s3-bucket-10.png"></p><p>S3에 저장할 수 있는 크기에 대한 제한은 없으나 PUT 요청으로 업로드 가능한 크기는 최대 5GB입니다. AWS CLI의 S3 명령어를 사용하는 경우 일정 크기 이상이라면 멀티파트 업로드를 수행하므로 알고 계시고 신경쓰지 않아도 됩니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>퍼블릭 IP가 할당되지 않는 EC2 인스턴스라면 AWS PrivateLink로 구성되는 VPC 인터페이스 엔드포인트를 사용하여 <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/privatelink-interface-endpoints.html">S3 서비스와 통신할 수 있도록 설정</a>해야합니다. 그리고 다른 사용자 계정의 ARN을 제공받아서 접근할 수 있게 구성할 수도 있으니 공식 문서에서 제공하는 다양한 정책 예제를 참고해봅시다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 EC2 인스턴스에서 S3 버킷에 액세스할 수 있도록 구성하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;최근 회사에서 진행하고 있는 프로젝트 중에는 보안 정책에 의해 고객이 구성한 EC2 인스턴스에 대</summary>
      
    
    
    
    
    <category term="EC2" scheme="https://kdevkr.github.io/tags/EC2/"/>
    
    <category term="S3" scheme="https://kdevkr.github.io/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>EC2 인스턴스 연결(콘솔) 허용하기</title>
    <link href="https://kdevkr.github.io/allow-ec2-instance-connect/"/>
    <id>https://kdevkr.github.io/allow-ec2-instance-connect/</id>
    <published>2021-09-26T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘 알아볼 내용은 EC2 인스턴스 연결(EC2 Instance Connect) 기능입니다. 일반적으로 EC2 인스턴스에 접속하기 위해서는 SSH 클라이언트를 사용합니다. 아마존 EC2 콘솔은 SSH 클라이언트를 사용하지 않고도 EC2 인스턴스에 연결할 수 있는 기능을 제공하고 있습니다. 어떻게 해야 EC2 콘솔을 통해 EC2 인스턴스에 연결할 수 있는지 알아봅시다.</p><h2 id="EC2-인스턴스-연결"><a href="#EC2-인스턴스-연결" class="headerlink" title="EC2 인스턴스 연결"></a>EC2 인스턴스 연결</h2><p><strong>EC2 인스턴스 연결</strong>은 아마존 EC2 콘솔을 통해 퍼블릭 IPv4 주소가 할당된 인스턴스에 연결할 수 있는 기능입니다. EC2 인스턴스 연결에 대한 자세한 내용은 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console">EC2 Instance Connect를 사용한 연결</a> 문서에서 확인할 수 있습니다.</p><p>퍼블릭 IPv4 주소가 할당된 Amazon Linux 2 또는 Ubuntu 16.04 이상의 인스턴스라면 아마존 EC2 콘솔에서 제공하는 EC2 인스턴스 연결 기능을 사용하여 인스턴스에 접속할 수 있습니다.</p><h3 id="인바운드-SSH-트래픽-허용"><a href="#인바운드-SSH-트래픽-허용" class="headerlink" title="인바운드 SSH 트래픽 허용"></a>인바운드 SSH 트래픽 허용</h3><p>기본으로 제공하는 보안 그룹에는 SSH 트래픽을 수신하는 것을 허용하지 않습니다. EC2 인스턴스 연결을 사용하기 위해서는 <strong>EC2_INSTANCE_CONNECT라는 서비스가 사용하는 IP 대역에 대하여 SSH 트래픽을 수신하도록 허용</strong>해야합니다.</p><p>EC2_INSTANCE_CONNECT 서비스가 사용하는 IP 대역은 <a href="https://ip-ranges.amazonaws.com/ip-ranges.json">AWSIP 주소 범위</a>에서 EC2_INSTANCE_CONNECT 서비스와 VPC가 생성된 region에 대하여 필터링을 해야합니다.</p><p><img data-src="/images/posts/allow-ec2-instance-connect/ec2-instance-connect-01.png"></p><p>다행히도 다른 서비스와 다르게 EC2_INSTANCE_CONNECT는 리전별로 하나이므로 <strong>13.209.1.56/29</strong> IP 대역을 SSH 트래픽으로 수신하도록 허용하면 됩니다.</p><p>회사에서 지급받은 구형 맥북에서 <a href="https://aws.amazon.com/ko/premiumsupport/knowledge-center/ec2-instance-connect-troubleshooting/">AWS 문서에서 알려주는 다음의 명령어</a>를 쳐봐도 하나만 나옵니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s https://ip-ranges.amazonaws.com/ip-ranges.json| jq -r <span class="string">&#x27;.prefixes[] | select(.region==&quot;us-east-1&quot;) | select(.service==&quot;EC2_INSTANCE_CONNECT&quot;) | .ip_prefix&#x27;</span></span><br><span class="line">13.209.1.56/29</span><br></pre></td></tr></table></figure><p><img data-src="/images/posts/allow-ec2-instance-connect/ec2-instance-connect-02.png"></p><p>위와 같이 13.209.1.56/29 대역에 대한 SSH 트래픽을 수신할 수 있도록 허용하였으니 이제 이 보안그룹을 인스턴스에 추가하면 됩니다.</p><h3 id="샘플-인스턴스-생성"><a href="#샘플-인스턴스-생성" class="headerlink" title="샘플 인스턴스 생성"></a>샘플 인스턴스 생성</h3><p><img data-src="/images/posts/allow-ec2-instance-connect/ec2-instance-connect-03.png"></p><p>샘플 인스턴스는 기본으로 제공하는 보안 그룹을 지정하였습니다. 따라서 SSH 트래픽에 대해서 허용하지 않은 상태이므로 다음과 같이 EC2 인스턴스 연결을 시도하면 실패하게 됩니다.</p><p><img data-src="/images/posts/allow-ec2-instance-connect/ec2-instance-connect-04.png"></p><p>이제 샘플 인스턴스에 ec2-instance-connect 보안그룹을 추가하겠습니다.</p><p><img data-src="/images/posts/allow-ec2-instance-connect/ec2-instance-connect-05.png"></p><p>다시 아마존 EC2 콘솔의 EC2 인스턴스 연결으로 샘플 인스턴스에 접속해보겠습니다.</p><p><img data-src="/images/posts/allow-ec2-instance-connect/ec2-instance-connect-06.png"></p><p>EC2_INSTANCE_CONNECT 서비스의 IP 대역을 허용하였기 때문에 정상적으로 접속되었습니다.</p><p><img data-src="/images/posts/allow-ec2-instance-connect/complete.gif"></p><p>보안을 중요시하는 회사라면 모든 IP 대역에 대하여 SSH 접속을 허용하지 않고 <strong>EC2_INSTANCE_CONNECT 서비스와 회사에서 사용되는 IP 대역을 허용하시는 것을 권장</strong>합니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘 알아볼 내용은 EC2 인스턴스 연결(EC2 Instance Connect) 기능입니다. 일반적으로 EC2 인스턴스에 접속하기 위해서는 SSH 클라이언트를 사용합니다. 아마존 EC2 콘솔은 SSH 클</summary>
      
    
    
    
    
    <category term="AWS" scheme="https://kdevkr.github.io/tags/AWS/"/>
    
    <category term="EC2" scheme="https://kdevkr.github.io/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>엔진엑스로 알아보는 리버스 프록시</title>
    <link href="https://kdevkr.github.io/reverse-proxy-using-nginx/"/>
    <id>https://kdevkr.github.io/reverse-proxy-using-nginx/</id>
    <published>2021-09-25T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p><img data-src="https://digital.com/wp-content/uploads/what-is-nginx.png"></p><p>오늘은 웹 서비스 인프라에서 리버스 프록시 구성을 위해 사용되는 Nginx와 함께 리버스 프록시에 대해 알아보고자 합니다.</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx는 정적 파일을 배포할 수 있는 HTTP 웹 서버입니다. 최근 애플리케이션 서버를 배포하는 경우 단독으로 구성하지 않고 Nginx를 함께 사용합니다. 아마존 웹 서비스의 Elastic Beanstalk 환경에서는 리버스 프록시 구성을 위하여 Nginx를 기본적으로 제공하고 있습니다. 이렇게 애플리케이션 서버 앞에서 먼저 트래픽을 처리하도록 구성하는 리버스 프록시를 사용하는 이유는 무엇일까요?</p><h3 id="리버스-프록시"><a href="#리버스-프록시" class="headerlink" title="리버스 프록시"></a>리버스 프록시</h3><p>리버스 프록시는 <strong>사용자의 요청에 대한 사후처리를 수행하여 애플리케이션 서버로 트래픽을 전달되도록 하는 것</strong>을 말합니다. 리버스 프록시 구성의 장점은 사용자에게 애플리케이션 서버가 실행되는 아이피 또는 포트를 공개하지 않거나 잘못된 요청을 애플리케이션 서버까지 전달되지 않도록하여 보호할 수 있습니다. </p><h3 id="로드-밸런싱"><a href="#로드-밸런싱" class="headerlink" title="로드 밸런싱"></a>로드 밸런싱</h3><p>리버스 프록시를 구성함으로써 사용자는 특정 애플리케이션 서버로 직접 요청하는 구조가 아니므로 동시에 발생하는 수 많은 웹 요청을 1개 이상으로 실행된 다수의 애플리케이션 서버로 <strong>로드밸런싱(트래픽을 분산)</strong> 함으로써 애플리케이션 서버에 대한 부하를 줄일 수 있습니다.</p><p>물론, 에픽 게임즈의 <a href="https://www.epicgames.com/fortnite/ko/news/postmortem-of-service-outage-at-3-4m-ccu">340만 동접자 이후 서비스 다운 관련 사후 분석 내용</a>처럼 리버스 프록시를 구성한다고해서 모든 트래픽을 감당할 수 있는 것은 아닙니다.</p><h3 id="SSL-오프로드"><a href="#SSL-오프로드" class="headerlink" title="SSL 오프로드"></a>SSL 오프로드</h3><p>Nginx로 리버스 프록시를 구성함으로써 수행할 수 있는 사후처리 중 하나는 <strong>SSL 오프로드</strong>입니다. 리버스 프록시를 수행하는 웹 서버에서 SSL 인증서를 관리하고 <a href="https://www.f5.com/services/resources/glossary/ssl-termination">SSL Termination</a>을 수행함으로써 애플리케이션 서버가 트래픽 암호화를 위해 수행하던 부하와 관리 포인트를 줄일 수 있습니다.</p><h3 id="정적-파일-캐시"><a href="#정적-파일-캐시" class="headerlink" title="정적 파일 캐시"></a>정적 파일 캐시</h3><p>애플리케이션 서버가 배포하는 정적 파일에 대해서 Nginx 자체적으로 캐시하여 정적 파일을 응답할 수 있습니다. 애플리케이션 서버로 전달되는 트래픽이 많아질 경우 정적 파일을 응답하기 위한 요청을 처리하는 것도 부담이 될 수 있습니다. 많은 트래픽을 적은 리소스를 사용하여 처리할 수 있는 웹 서버에서 정적 파일에 대한 요청을 처리하여 애플리케이션 서버의 부담을 줄일 수 있게 됩니다.</p><p>창천향로님의 <a href="https://jojoldu.tistory.com/60">Nginx Cache 문제 해결 시리즈</a>처럼 캐시를 잘 구성해야할 수 있습니다.</p><h2 id="Nginx-도커-컨테이너-학습"><a href="#Nginx-도커-컨테이너-학습" class="headerlink" title="Nginx 도커 컨테이너 학습"></a>Nginx 도커 컨테이너 학습</h2><p>도커는 어떠한 기술을 학습하기 위한 환경을 구성하기에 적합한 도구입니다. 도커를 사용하여 애플리케이션 서버와 함께 리버스 프록시를 구성하는 Nginx를 설정해보며 학습해보도록 하겠습니다.</p><p>저의 학습 환경은 다음과 같습니다. 환경이 다른 경우 다른 부분이 존재할 수 있으니 주의해야합니다. </p><ul><li>Docker version 20.10.8, build 3967b7d  </li><li>Nginx 1.21.3  </li><li>Amazon Corretto 11  </li></ul><p>그리고 학습에 활용된 파일들은 <a href="https://github.com/kdevkr/nginx.conf">깃허브</a>에 공유되어있으니 참고하셔도 좋습니다.</p><h3 id="기본-컨테이너-환경"><a href="#기본-컨테이너-환경" class="headerlink" title="기본 컨테이너 환경"></a>기본 컨테이너 환경</h3><p>도커 컴포즈를 활용하여 스프링 부트 애플리케이션과 Nginx가 구동되도록 컨테이너 환경을 구성했습니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.3-alpine</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">amazoncorretto:11-alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;java -jar /etc/app.jar&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./demo-0.0.1-SNAPSHOT.jar:/etc/app.jar</span></span><br></pre></td></tr></table></figure><p>도커 컴포즈 명령어로 컨테이너 환경을 실행합니다.</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">docker compose up <span class="literal">-d</span></span><br><span class="line">[+] Running <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> - Network nginx_default    Created</span><br><span class="line"> - Container nginx_nginx_1  Started</span><br><span class="line"> - Container nginx_app_1    Started</span><br></pre></td></tr></table></figure><p>제 컴퓨터 <strong>호스트 파일에 127.0.0.1에 대하여 mambo.kr가 지정</strong>되어있으므로 다음과 같이 Nginx가 80포트에 대한 요청에 대해 기본 페이지를 응답하였습니다.</p><p><img data-src="/images/posts/reverse-proxy-using-nginx/nginx-02.png"></p><h3 id="기본-Nginx-설정"><a href="#기본-Nginx-설정" class="headerlink" title="기본 Nginx 설정"></a>기본 Nginx 설정</h3><p>도커 컴포즈 명령어로 컨테이너 진입 후 기본으로 적용되어있는 Nginx 설정을 확인해보도록 하겠습니다.</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">docker compose exec nginx sh</span><br><span class="line">/ <span class="comment"># cat /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/posts/reverse-proxy-using-nginx/nginx-03.png"></p><p>80포트를 수신하는 웹 서버 설정은 <strong>/etc/nginx/conf.d/default.conf</strong>에 위치하고 있었습니다. 다음은 default.conf에 정의된 내용 중 일부입니다.</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">/etc/nginx/conf.d <span class="comment"># cat default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    listen  [::]:<span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server 블록을 통해 80포트를 수신(listen)하였고 루트 경로(/)에 대한 요청을 <strong>/usr/share/nginx/html에 위치한 index.html</strong>이라는 정적 파일을 응답하도록 정의되어있습니다. </p><h3 id="사용자-정의-Nginx-설정"><a href="#사용자-정의-Nginx-설정" class="headerlink" title="사용자 정의 Nginx 설정"></a>사용자 정의 Nginx 설정</h3><p>기본으로 적용되어있는 nginx.conf를 볼륨으로 지정하여 사용자 정의할 수 있도록 해보겠습니다. 도커 컴포즈 문서에 Nginx 서비스에 볼륨을 지정하여 로컬 파일로 저장되어있는 nginx.conf를 지정하겠습니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.3-alpine</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">  <span class="comment">#app:</span></span><br><span class="line">  <span class="comment">#  ...</span></span><br></pre></td></tr></table></figure><p>호스트의 443포트를 Nginx 서비스에 바인딩하였으므로 443포트를 수신하도록 정의해보겠습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> localhost <span class="number">127.0.0.1</span> mambo.kr;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/server.key;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://app:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>도커 컴포즈로 컨테이너 환경을 다시 실행하면 정상적으로…</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">nginx: [<span class="type">emerg</span>] no <span class="string">&quot;events&quot;</span> section <span class="keyword">in</span> configuration</span><br></pre></td></tr></table></figure><p>오류가 발생했네요. nginx.conf에 events 블록은 필수로 존재해야하는 듯 합니다.</p><h4 id="프로세스-및-처리-옵션"><a href="#프로세스-및-처리-옵션" class="headerlink" title="프로세스 및 처리 옵션"></a>프로세스 및 처리 옵션</h4><p>Nginx는 마스터 프로세스와 워커 프로세스로 구성되어 실제로 요청을 처리하는 것은 워커 프로세스가 담당합니다. 사용가능한 CPU 코어 수 만큼 워커 프로세스를 할당하는게 좋으며 워커 프로세스별로 사용할 수 있는 최대 열린 파일 개수 제한을 설정하는 것이 좋습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/posts/reverse-proxy-using-nginx/nginx-01.png" alt="Optimizations - Event Models"></p><p>운영체제별 <a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/optimizations/#event-models">효율적인 연결 처리 방식</a>이 있으며 리눅스 커널 2.6+에서는 <strong>epoll</strong>을 사용할 수 있습니다.</p><p>Nginx 서비스 컨테이너가 정상적으로 실행되지 않은 상태이므로 도커 컴포즈로 컨테이너 환경을 실행해야합니다.</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">docker compose up <span class="literal">-d</span></span><br><span class="line">[+] Running <span class="number">2</span>/<span class="number">2</span></span><br><span class="line"> - Container nginx_nginx_1  Started</span><br><span class="line"> - Container nginx_app_1    Running</span><br></pre></td></tr></table></figure><p>잘 실행된것으로 보이니 <a href="https://mambo.kr으로/">https://mambo.kr으로</a> 접속해보도록 하겠습니다.</p><p><img data-src="/images/posts/reverse-proxy-using-nginx/nginx-04.png"></p><p>443 포트로 요청된 트래픽이 Nginx를 경유하여 8080포트로 실행된 애플리케이션 서버로 전달되고 응답을 받았습니다. 바로 이것을 <strong>리버스 프록시</strong>라고 합니다.</p><h4 id="리버스-프록시-1"><a href="#리버스-프록시-1" class="headerlink" title="리버스 프록시"></a>리버스 프록시</h4><p>리버스 프록시를 구성하면 애플리케이션 서버는 어디서 요청했는지에 대한 정보를 알 수 없습니다. 그래서 Nginx와 같은 리버시 프록시를 구성하는 웹 서버에서는 프록시 관련 헤더를 함께 전달하여 어디서 요청되었는지를 전달할 수 있도록 설정할 수 있습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> localhost <span class="number">127.0.0.1</span> mambo.kr;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/server.key;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://app:8080;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="웹소켓-프록시"><a href="#웹소켓-프록시" class="headerlink" title="웹소켓 프록시"></a>웹소켓 프록시</h4><p>HTTP 1.1 프로토콜은 Hop-By-Hop이라고 하는 Upgrade 헤더를 사용하여 커넥션을 변경하는 매커니즘을 제공합니다. <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism#upgrading_to_a_websocket_connection">Upgrading to a WebSocket connection</a>과 <a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a> 문서를 참고하여 다음과 같이 웹소켓 프록시에 대한 설정을 구성할 수 있습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> /ws/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade $http_upgrade;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">65s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>프록시 서버는 기본적으로 60초 이내에 전달되는 데이터가 없는 경우 연결을 해지합니다. 예를 들어, 1분마다 웹소켓으로 전달되는 데이터가 있는 경우를 위해 proxy_read_timeout을 조정해야합니다.</p></blockquote><h4 id="이벤트-스트림-프록시"><a href="#이벤트-스트림-프록시" class="headerlink" title="이벤트 스트림 프록시"></a>이벤트 스트림 프록시</h4><p>리버스 프록시 구성에서 SSE(Server Sent Event)와 같은 이벤트 스트림을 사용하는 경우 버퍼링 옵션을 비활성화 해야합니다.</p><ul><li><a href="https://stackoverflow.com/questions/13672743/eventsource-server-sent-events-through-nginx">EventSource / Server-Sent Events through Nginx</a></li><li><a href="https://serverfault.com/questions/801628/for-server-sent-events-sse-what-nginx-proxy-configuration-is-appropriate">For Server-Sent Events (SSE) what Nginx proxy configuration is appropriate?</a></li></ul><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_cache</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTTPS-리다이렉트"><a href="#HTTPS-리다이렉트" class="headerlink" title="HTTPS 리다이렉트"></a>HTTPS 리다이렉트</h4><p>일반 HTTP를 사용하여 80포트로 요청한 것을 HTTPS를 사용하도록 유도하기 위해서 HTTPS 리다이렉트 응답을 적용할 수 있습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="정적-파일-배포"><a href="#정적-파일-배포" class="headerlink" title="정적 파일 배포"></a>정적 파일 배포</h4><p>추가적으로 정적 파일이 포함된 폴더를 볼륨으로 지정하여 Nginx에서 정적 파일을 응답할 수 있도록 설정하겠습니다.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.3-alpine</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./server.crt:/etc/nginx/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./server.key:/etc/nginx/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./static:/etc/nginx/static</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> localhost <span class="number">127.0.0.1</span> mambo.kr;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/server.key;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://app:8080;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /dist/ &#123;</span><br><span class="line">            <span class="attribute">alias</span> /etc/nginx/static/;</span><br><span class="line">            <span class="attribute">limit_except</span> GET &#123;</span><br><span class="line">                <span class="attribute">deny</span> all;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/images/posts/reverse-proxy-using-nginx/nginx-05.png"></p><p>정적 파일까지 응답할 수 있도록 설정하였습니다.</p><h3 id="Nginx-설정-최적화"><a href="#Nginx-설정-최적화" class="headerlink" title="Nginx 설정 최적화"></a>Nginx 설정 최적화</h3><p>사용자 정의한 Nginx 설정만으로도 리버스 프록시 및 정적 파일을 배포하는데에는 문제가 없습니다. 그러나 Nginx에서는 더 효율적으로 동작할 수 있도록 다양한 옵션을 제공합니다. 여러가지 옵션들을 적용해보면서 최적화해보도록 합시다.</p><p>Nginx 설정 최적화에 대해서는 다음의 글을 참고하면 좋습니다.</p><ul><li><a href="https://github.com/denji/nginx-tuning/blob/master/README.md">NGINX Tuning For Best Performance</a>  </li><li><a href="https://couplewith.tistory.com/m/entry/%EA%BF%80%ED%8C%81-%EA%B3%A0%EC%84%B1%EB%8A%A5-Nginx%EB%A5%BC%EC%9C%84%ED%95%9C-%ED%8A%9C%EB%8B%9D-1-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-IO-%EB%B3%91%EB%AA%A9-%EC%A4%84%EC%9D%B4%EA%B8%B0?category=212810">[꿀팁] 고성능 Nginx를위한 튜닝</a></li></ul><h4 id="TCP-옵션"><a href="#TCP-옵션" class="headerlink" title="TCP 옵션"></a>TCP 옵션</h4><p><a href="https://thoughts.t37.net/nginx-optimization-understanding-sendfile-tcp-nodelay-and-tcp-nopush-c55cdd276765">Nginx Optimization: understanding sendfile, tcp_nodelay and tcp_nopush</a>에서는 TCP 옵션을 지정하는 이유에 대해서 설명합니다. 네트워크 환경이 빠른 경우 TCP 스택에서 Nagle 알고리즘을 사용하는 것이 비효율적일 수 있다고 합니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="압축-옵션"><a href="#압축-옵션" class="headerlink" title="압축 옵션"></a>압축 옵션</h4><p>웹 요청에 대한 응답 데이터를 압축하는 것은 네트워크 비용을 줄이고 빠르게 응답할 수 있는 좋은 방법입니다. 서버 성능에 따라 압축 레벨을 최대한으로 지정하는 것이 좋습니다. 또한, 작은 크기에 데이터에 대하여 압축을 시도하는 것도 비효율적입니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">9</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> msie6;</span><br><span class="line">    <span class="attribute">gzip_proxied</span> expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line">    gzip_types</span><br><span class="line">        <span class="comment"># text/html is always compressed by HttpGzipModule</span></span><br><span class="line">        text/css</span><br><span class="line">        text/javascript</span><br><span class="line">        text/xml</span><br><span class="line">        text/plain</span><br><span class="line">        application/javascript</span><br><span class="line">        application/json</span><br><span class="line">        application/xml</span><br><span class="line">        font/truetype</span><br><span class="line">        font/opentype</span><br><span class="line">        application/vnd.ms-fontobject</span><br><span class="line">        image/svg+xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일반적으로 텍스트 유형의 데이터를 압축하도록 지정합니다.</p><h4 id="로그-옵션"><a href="#로그-옵션" class="headerlink" title="로그 옵션"></a>로그 옵션</h4><p>모든 요청에 대해 액세스 로그를 저장하는 것은 비효율적으로 I/O를 발생시킬 수 있습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log <span class="literal">crit</span>;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="보안-옵션"><a href="#보안-옵션" class="headerlink" title="보안 옵션"></a>보안 옵션</h4><p>많은 사람들이 server_tokens 옵션을 비활성화하여 응답 헤더에 Nginx 버전을 명시하지 않도록 권장합니다. 공격자는 Nginx의 특정 버전을 알 수 없으므로 더 많은 취약점에 대한 공격을 시도해야합니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="클라이언트-옵션"><a href="#클라이언트-옵션" class="headerlink" title="클라이언트 옵션"></a>클라이언트 옵션</h4><p>연결 유지 클라이언트 수와 최대 유지 시간 그리고 클라이언트 요청 크기를 조정할 수 있습니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">keepalive_requests</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="리눅스-커널-파라미터"><a href="#리눅스-커널-파라미터" class="headerlink" title="리눅스 커널 파라미터"></a>리눅스 커널 파라미터</h4><p>Nginx 옵션을 지정하더라도 실제로 허용할 수 있는지 리눅스 커널 파라미터를 검토해야할 수 있습니다. </p><ul><li><a href="https://ma.ttias.be/linux-increase-ip_local_port_range-tcp-port-range/">Linux increase ip_local_port_range TCP port range</a></li><li><a href="https://couplewith.tistory.com/entry/%EA%BF%80%ED%8C%81-%EA%B3%A0%EC%84%B1%EB%8A%A5-Nginx%EB%A5%BC%EC%9C%84%ED%95%9C-%ED%8A%9C%EB%8B%9D-3-TCP-%EA%B4%80%EB%A0%A8-%EC%B2%98%EB%A6%AC%EB%9F%89-%EB%8A%98%EB%A6%AC%EA%B8%B0-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%BB%A4%EB%84%90%ED%8A%9C%EB%8B%9D">TCP 관련 처리량 늘리기 - 리눅스 커널 튜닝</a></li></ul><h3 id="Nginx-설정-마무리"><a href="#Nginx-설정-마무리" class="headerlink" title="Nginx 설정 마무리"></a>Nginx 설정 마무리</h3><p>알아본 내용을 조합하면 다음과 같이 Nginx 설정을 정의할 수 있게 됩니다.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 프로세스 옵션</span></span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">pid</span> /var/run/nginx.pid;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log <span class="literal">crit</span>;</span><br><span class="line"><span class="comment">#thread_pool backend threads=32 max_queue=65536;</span></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> app:<span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">keepalive</span> <span class="number">128</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS 리다이렉트</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS 및 HTTP2 지원</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">        <span class="attribute">server_name</span> localhost <span class="number">127.0.0.1</span> mambo.kr;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/server.key;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 리버스 프록시</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#aio threads=backend;</span></span><br><span class="line">            <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 리버스 웹소켓 프록시</span></span><br><span class="line">        <span class="attribute">location</span> /ws/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="comment"># hop-by-hop</span></span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade $http_upgrade;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">65s</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /dist/ &#123;</span><br><span class="line">            <span class="attribute">alias</span> /etc/nginx/static/;</span><br><span class="line">            <span class="attribute">limit_except</span> GET &#123;</span><br><span class="line">                <span class="attribute">deny</span> all;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Optimization</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65s</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># TCP 옵션</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Gzip 압축 옵션</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">10k</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">9</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> msie6;</span><br><span class="line">    <span class="attribute">gzip_proxied</span> expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line">    gzip_types</span><br><span class="line">        <span class="comment"># text/html is always compressed</span></span><br><span class="line">        text/css</span><br><span class="line">        text/javascript</span><br><span class="line">        text/xml</span><br><span class="line">        text/plain</span><br><span class="line">        application/javascript</span><br><span class="line">        application/json</span><br><span class="line">        application/xml</span><br><span class="line">        font/truetype</span><br><span class="line">        font/opentype</span><br><span class="line">        application/vnd.ms-fontobject</span><br><span class="line">        image/svg+xml;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 파일 리스트 비활성화</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>도커 컴포즈를 사용하여 실행되어있는 Nginx 프로세스에 변경된 설정을 반영하면서 마치도록 하겠습니다.</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">docker compose exec nginx nginx <span class="literal">-t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line">docker compose exec nginx nginx <span class="literal">-s</span> reload</span><br><span class="line"><span class="number">2021</span>/<span class="number">09</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">38</span>:<span class="number">03</span> [<span class="type">notice</span>] <span class="number">34</span><span class="comment">#34: signal process started</span></span><br></pre></td></tr></table></figure><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://digital.com/wp-content/uploads/what-is-nginx.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;오늘은 웹 서비스 인프라에서 리버스 프록시 구성을 위해 사</summary>
      
    
    
    
    
    <category term="Nginx" scheme="https://kdevkr.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>갑자기 애플리케이션 배포에 실패한 이유</title>
    <link href="https://kdevkr.github.io/why-fail-deploy-application/"/>
    <id>https://kdevkr.github.io/why-fail-deploy-application/</id>
    <published>2021-09-24T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 얼마전까지만 해도 잘 동작하던 배포 프로세스가 갑자기 실패하는 이유에 대해서 이야기 해보려고 합니다.</p><h2 id="빌드-및-배포-환경"><a href="#빌드-및-배포-환경" class="headerlink" title="빌드 및 배포 환경"></a>빌드 및 배포 환경</h2><p>회사에서 운영중인 서비스는 Elastic Beanstalk 환경의 자바 SE 플랫폼으로 스프링 부트 애플리케이션을 배포하고 있습니다. 자바 SE 플랫폼에서는 <strong>애플리케이션을 실행가능한 WAR 파일로 패키징하여 Procfile을 통해 실행</strong>할 수 있도록 구성할 수 있습니다. 예를 들어, 다음과 같이 실행가능하도록 패키징된 애플리케이션 파일을 실행하도록 Procfile을 만들고 Beanstalk 환경을 확장하기 위한 설정 파일들을 하나의 애플리케이션 소스 번들로 만들 수 있습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task procfile(<span class="attr">dependsOn:</span> bootJar) &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        project.file(<span class="string">&quot;build/libs/Procfile&quot;</span>).text = <span class="string">&quot;web: java -Xmx3g -Dfile.encoding=UTF-8 -jar $&#123;bootJar.archiveFileName&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task awsbuild(<span class="attr">type:</span> Zip, <span class="attr">dependsOn:</span> procfile) &#123;</span><br><span class="line">    println(<span class="string">&#x27;Build Version: &#x27;</span> + rootProject.version)</span><br><span class="line"></span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.ebextensions&#x27;</span>) &#123; into <span class="string">&#x27;.ebextensions&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.platform&#x27;</span>) &#123;into <span class="string">&#x27;.platform&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;build/libs&#x27;</span>) &#123;</span><br><span class="line">        include <span class="string">&#x27;Procfile&#x27;</span></span><br><span class="line">        include <span class="string">&quot;$&#123;bootJar.archiveFileName&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    archiveBaseName.set(<span class="string">&#x27;beanstalk&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="실패한-이유-1"><a href="#실패한-이유-1" class="headerlink" title="실패한 이유 1"></a>실패한 이유 1</h3><p>그런데 오늘 갑자기 정상적으로 수행되던 배포 프로세스 과정에서 다음과 같이 오류가 발생하여 애플리케이션 배포가 실패하였습니다.</p><p><img data-src="/images/posts/why-fail-deploy-application/reason-01.png"></p><p>위 오류가 발생하였을 때 태스크는 다음과 같이 작성되어있었습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task awsbuild(<span class="attr">type:</span> Zip, <span class="attr">dependsOn:</span> procfile) &#123;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.ebextensions&#x27;</span>) &#123; into <span class="string">&#x27;.ebextensions&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.platform&#x27;</span>) &#123;into <span class="string">&#x27;.platform&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;build/libs&#x27;</span>) &#123;</span><br><span class="line">        include(<span class="string">&#x27;Procfile&#x27;</span>)</span><br><span class="line">        include(bootJar.archiveName)</span><br><span class="line">    &#125;</span><br><span class="line">    baseName = <span class="string">&#x27;beanstalk&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그런데 최종적으로 만들어지는 애플리케이션 소스 번들을 확인해보니 <strong>bootJar.archiveName</strong>으로 포함시킨 애플리케이션 패키징 파일이 존재하지 않았습니다. 갑자기 왜 포함되지 않는 것 일까요? 이것저것 확인해보던 중 해결방법은 아주 간단하였는데요. 바로 다음과 같이 include 코드를 수정하는 것이었습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task awsbuild(<span class="attr">type:</span> Zip, <span class="attr">dependsOn:</span> procfile) &#123;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.ebextensions&#x27;</span>) &#123; into <span class="string">&#x27;.ebextensions&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.platform&#x27;</span>) &#123;into <span class="string">&#x27;.platform&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;build/libs&#x27;</span>) &#123;</span><br><span class="line">        include <span class="string">&#x27;Procfile&#x27;</span></span><br><span class="line">        include <span class="string">&quot;$&#123;bootJar.archiveName&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    baseName = <span class="string">&#x27;beanstalk&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아무리봐도 무슨 차이인지는 모르겠으나 간단히 해결되었습니다. 한가지 의심이 되는 부분은 Gradle Warpper 버전이 <strong>gradle-7.1-all</strong>로 변경되었다는 것 입니다. </p><h3 id="실패한-이유-2"><a href="#실패한-이유-2" class="headerlink" title="실패한 이유 2"></a>실패한 이유 2</h3><p>간신히 패키징된 애플리케이션 파일을 애플리케이션 소스 번들에 포함하여 다시 배포 프로세스를 수행했지만 다시 다음과 같은 오류가 발생하면서 배포가 실패했습니다.</p><p><img data-src="/images/posts/why-fail-deploy-application/reason-02.png"></p><p>애플리케이션 소스 번들은 비어있거나 524288000 바이트를 넘을 수 없다는 오류입니다. 실제로 Elastic Beanstalk 문서에는 다음과 같이 애플리케이션 소스 번들은 최대 512MB로 제한된다는 내용이 있습니다.</p><p><img data-src="/images/posts/why-fail-deploy-application/reason-03.png"></p><p>만들어진 애플리케이션 소스 번들이 비어있을 이유가 없었기에 용량을 확인해보니 560MB를 넘고 있었습니다. 애플리케이션 소스 번들의 파일이 이렇게 클 이유가 없었는데 의아했습니다. 패키징된 애플리케이션 파일 자체 용량이 520MB를 넘고 있음을 확인하고 패키징된 애플리케이션 파일을 풀어서 내용을 살펴보니 다음과 같이 라이브러리가 포함된 폴더의 용량이 상당한 것을 확인했습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">total 964904</span><br><span class="line">-rw-r--r--  1 user  staff    14M Sep 24 11:31 ec2-2.17.29.jar</span><br><span class="line">-rw-r--r--  1 user  staff    11M Aug  9 12:29 elasticsearch-7.3.2.jar</span><br><span class="line">-rw-r--r--  1 user  staff   7.8M Aug  9 12:30 poi-ooxml-lite-5.0.0.jar</span><br><span class="line">-rw-r--r--  1 user  staff   7.2M Sep 24 11:31 sagemaker-2.17.29.jar</span><br><span class="line">-rw-r--r--  1 user  staff   5.7M Aug  9 12:30 bcprov-jdk15on-1.68.jar</span><br><span class="line">-rw-r--r--  1 user  staff   5.3M Sep 24 11:31 iot-2.17.29.jar</span><br><span class="line">-rw-r--r--  1 user  staff   5.1M Aug  9 12:30 org.eclipse.persistence.core-2.7.4.jar</span><br><span class="line">-rw-r--r--  1 user  staff   4.7M Sep 24 11:31 ssm-2.17.29.jar</span><br><span class="line">-rw-r--r--  1 user  staff   4.3M Aug  9 12:30 groovy-2.4.8.jar</span><br><span class="line">-rw-r--r--  1 user  staff   4.2M Sep 24 11:31 glue-2.17.29.jar</span><br><span class="line">-rw-r--r--  1 user  staff   4.2M Sep 24 11:31 rds-2.17.29.jar</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>패키징에 포함된 라이브러리와 연관된 파일이 모두 <strong>964904개</strong>로 출력되었습니다. 어떤 의존성 때문에 이렇게 많은 라이브러리 파일들이 포함되었을까요? 의심되는 부분은 <strong>sagemaker-2.17.29.jar와 같이 실제로는 사용하지 않는 라이브러리</strong> 였습니다. <strong>gradle dependencies</strong> 명령어를 수행하면 의존성 목록을 확인할 수 있다는 팀장님의 말씀을 듣고 검토해보니 다음과 같이 아마존 SDK에 대한 의존성이었습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;software.amazon.awssdk:aws-sdk-java:2.17.45&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.amazonaws:aws-java-sdk:1.12.73&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.amazonaws:aws-java-sdk 기존에 가지고 있던 <strong>아마존 SDK v1에 대한 의존성</strong>으로 확인되었고 software.amazon.awssdk:aws-sdk-java는 신규 기능 및 전환을 위해 새롭게 개발하고 테스트 중인 <strong>아마존 SDK v2에 대한 의존성</strong>입니다. </p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;com.amazonaws:aws-java-sdk-bom:1.12.73&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//    implementation &#x27;com.amazonaws:aws-java-sdk:1.12.73&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.amazonaws:aws-java-sdk-s3&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.amazonaws:aws-java-sdk-sqs&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.amazonaws:aws-java-sdk-cognitoidentity&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.amazonaws:aws-java-sdk-lambda&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.amazonaws:aws-java-sdk-autoscaling&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>개인적으로 공부할 때는 아마존 SDK 전체를 의존성으로 추가하지 않았기에 아마존 SDK 전체를 추가하는 경우와 실제로 사용하는 라이브러리만 추가한 경우를 비교해보니 다음과 같이 요약되었습니다.</p><table><thead><tr><th>의존성</th><th>용량</th></tr></thead><tbody><tr><td>아마존 SDK v1 전체</td><td>214MB</td></tr><tr><td>아마존 SDK v1 개별</td><td>15.8MB</td></tr><tr><td>아마존 SDK v2 전체</td><td>268MB</td></tr><tr><td>아마존 SDK v2 개별</td><td>25.1MB</td></tr><tr><td>아마존 SDK v1 + v2 전체</td><td>471MB</td></tr><tr><td>아마존 SDK v1 + v2 개별</td><td>32.4MB</td></tr></tbody></table><p>위 상황처럼 아마존 SDK v1과 v2 모두를 의존성에 추가하는 경우 무려 <strong>471MB</strong>라는 어마어마한 용량을 가지게 되는 것을 확인할 수 있었습니다. 사용하지도 않는 라이브러리를 포함하여 쓸데없이 애플리케이션만 무거워졌던 것이죠. </p><p><img data-src="/images/posts/why-fail-deploy-application/reason-04.png"></p><p>패키징된 애플리케이션 파일 용량이 줄어들어 정상적으로 배포 프로세스가 수행되었습니다. 그리고 이러한 사항에 대해 개발팀에 아마존 SDK 추가 시 사용하려는 라이브러리를 추가하는 것이 좋다고 전달하였습니다. 이 글을 보시는 분들도 아마존 SDK 전체를 추가한 상태라면 실제로 사용하는 라이브러리를 개별적으로 추가하시기 바랍니다.</p><h3 id="그래들-태스크-개선"><a href="#그래들-태스크-개선" class="headerlink" title="그래들 태스크 개선"></a>그래들 태스크 개선</h3><p>Deprecated된 속성 또는 함수를 사용하는 것을 추가적으로 개선해 보았습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task procfile(<span class="attr">dependsOn:</span> bootJar) &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        project.file(<span class="string">&quot;build/libs/Procfile&quot;</span>).text = <span class="string">&quot;web: java -Xmx3g -Dfile.encoding=UTF-8 -jar $&#123;bootJar.archiveFileName&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task awsbuild(<span class="attr">type:</span> Zip, <span class="attr">dependsOn:</span> procfile) &#123;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.ebextensions&#x27;</span>) &#123; into <span class="string">&#x27;.ebextensions&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;beanstalk/.platform&#x27;</span>) &#123;into <span class="string">&#x27;.platform&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;build/libs&#x27;</span>) &#123;</span><br><span class="line">        include <span class="string">&#x27;Procfile&#x27;</span></span><br><span class="line">        include <span class="string">&quot;$&#123;bootJar.archiveFileName&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    archiveBaseName.set(<span class="string">&#x27;beanstalk&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 얼마전까지만 해도 잘 동작하던 배포 프로세스가 갑자기 실패하는 이유에 대해서 이야기 해보려고 합니다.&lt;/p&gt;
&lt;h2 id=&quot;빌드-및-배포-환경&quot;&gt;&lt;a href=&quot;#빌드-및-배포-환경&quot; class=</summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
    <category term="Beanstalk" scheme="https://kdevkr.github.io/tags/Beanstalk/"/>
    
    <category term="Gradle" scheme="https://kdevkr.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>ED25519</title>
    <link href="https://kdevkr.github.io/ed25519/"/>
    <id>https://kdevkr.github.io/ed25519/</id>
    <published>2021-09-17T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 보안 관련 기술인 타원곡선 암호 알고리즘을 기반으로 하는 <strong>ED25519</strong>라는 것에 대해 알아보려고 합니다. </p><p>아마존 웹 서비스에서는 2021년 8월 17일부터 EC2 인스턴스 접근을 위해 <a href="https://aws.amazon.com/about-aws/whats-new/2021/08/amazon-ec2-customers-ed25519-keys-authentication/">ED25519 형식의 키로 SSH 연결을 수행할 수 있도록 지원</a>하였으며 2021년 9월 1일에는 깃허브에서도 DSA 형식의 키를 제거하고 <a href="https://github.blog/2021-09-01-improving-git-protocol-security-github/">ECDSA와 ED25519 형식의 키를 추가</a>하기로 결정하였습니다. </p><p>공통으로 언급되고 있는 ED25519라는 것을 모르시는 분이라면 저와 함께 알아보도록 합시다. </p><p><img data-src="/images/posts/ed25519/ed25519-00.gif"></p><h2 id="ED25519"><a href="#ED25519" class="headerlink" title="ED25519"></a>ED25519</h2><p>ED25519(Ed25519)는 ECC(Elliptic Curve Cryptography) 알고리즘으로 수행하도록 구현된 전자서명입니다. 타원곡선 암호 알고리즘을 사용하는 공개키 암호화 방식은 <strong>기존의 RSA와 비교해서 동일한 안정성을 가지면서도 상대적으로 더 적은 길이의 키</strong>를 가진다고 합니다. 컴퓨터 연산 속도가 발전함에 따라 일반적으로 사용되는 RSA의 권장되는 키 길이가 길어짐으로 인하여 일반 컴퓨터 또는 디바이스에서는 연산 속도가 느려지는 단점을 가지게 되고 상대적으로 작은 키 길이를 사용할 수 있으면서 동일한 안정성을 보여주므로 권장되는 공개키 암호화 방식이라고 할 수 있습니다.</p><blockquote><p>RSA와 비교해서 보안적으로 우수하다고 볼 순 없지만 상대적으로 비교하여 효율적이라는 것을 이해하셔야합니다.</p></blockquote><h3 id="타원-곡선"><a href="#타원-곡선" class="headerlink" title="타원 곡선"></a>타원 곡선</h3><p>ED25519는 어떤 타원 곡선을 사용하여 구현된 전자서명일지 궁금해집니다. 다음은 암호화에 적합하다고 판단되어 표준으로 정의된 타원 곡선들입니다.</p><ul><li>secp256k1</li><li>secp256r1</li><li>prime256v1</li><li>Curve25519</li></ul><p>미국 국립표준연구소(NIST) 또는 <a href="https://www.secg.org/">표준 암호화 그룹(SECG)</a>에서는 효율적인 타원 곡선들에 이름을 부여했습니다. 예를 들어, ECC NIST P-256은 SECG에서 정의한 secp256r1과 prime256v1를 지칭한 것과 같습니다. </p><p>표준으로 정의된 다양한 타원 곡선들에 대한 자세한 내용은 다음의 두 문서를 통해 확인할 수 있습니다.</p><ul><li><a href="https://www.secg.org/sec2-v2.pdf">SEC 2: Recommended Elliptic Curve Domain Parameters</a></li><li><a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">Digital Signature Standard (DSS)</a></li></ul><p>저로서는 이해하기 힘든 부분이라고 생각하여 설명은 생략하며 간단하게 말해서 여러가지 타원 곡선 형태를 <strong>도메인 파라미터로 정의</strong>하여 이름을 부여한 것 입니다. NIST P-256은 NIST에서 정의한 소수 기반의 타원 곡선 방정식을 말하며 <a href="https://en.bitcoin.it/wiki/Secp256k1">secp256k1</a>는 SECG에서 정의한 Koblitz curve 기반의 타원 곡선 방정식을 말합니다. </p><blockquote><p>비트코인과 이더리움에서도 secp256k1 라는 타원곡선을 사용한다고…</p></blockquote><h3 id="키-교환과-전자-서명"><a href="#키-교환과-전자-서명" class="headerlink" title="키 교환과 전자 서명"></a>키 교환과 전자 서명</h3><p>타원 곡선을 사용하여 디피-헬먼 키 교환을 구현한 알고리즘을 ECDH라고 하며 타원 곡선 암호를 사용해서 <a href="https://ko.wikipedia.org/wiki/%EB%94%94%EC%A7%80%ED%84%B8_%EC%84%9C%EB%AA%85_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">전자서명 알고리즘(DSA)</a>를 구현한 것을 <strong>ECDSA</strong>라고 합니다. ECDSA는 지난 <a href="../ssl-certificate">SSL 인증서</a> 글에서 TLS 핸드쉐이크 과정에서 ECDHE_ECDSA와 같은 타원 곡선 암호 방식을 사용하는 것을 통해 이미 확인한 개념인데 기억하시는 분이 계실지 모르겠습니다.</p><p>타원 곡선 기반의 전자 서명 알고리즘에는 <a href="https://en.wikipedia.org/wiki/EdDSA">EdDSA</a>도 있으며 <strong>Twisted Edwards curve</strong>와 <strong>Schnorr 서명 방식</strong>을 사용하도록 구현된 DSA 입니다.</p><h3 id="X25519-그리고-Ed25519"><a href="#X25519-그리고-Ed25519" class="headerlink" title="X25519 그리고 Ed25519"></a>X25519 그리고 Ed25519</h3><p>앞서 언급된 타원 곡선 중 Curve25519는 키 교환 알고리즘인 디피-헬먼과 같이 사용하도록 고안된 타원 곡선입니다. Curve25519를 기반으로하여 ECDH로 키 교환을 수행하는 것을 X25519라고 하게 됩니다. 그리고 Curve25519과 함께 SHA-512와 같은 <strong>해시 함수</strong>를 사용하는 구현된 EdDSA를 <strong>Ed25519</strong>라는 이름으로 부르게 됩니다. </p><ul><li>ECDSA : 타원 곡선 기반의 전자 서명 알고리즘</li><li>X25519 : Curve25519를 사용하는 타원 곡선 키 교환 알고리즘</li><li>Ed25519 : Curve25519를 사용하는 타원 곡선 전자 서명 알고리즘 </li></ul><p><img data-src="/images/posts/ed25519/ed25519-04.gif" alt="머리속에 정리가 잘 되셨나요?"></p><h3 id="ED25519-키-페어"><a href="#ED25519-키-페어" class="headerlink" title="ED25519 키 페어"></a>ED25519 키 페어</h3><p>지금부터는 ED25519 형식의 키 페어를 만들고 EC2 인스턴스에 접근해보는 것을 따라해보겠습니다. </p><h4 id="키-페어-생성하기"><a href="#키-페어-생성하기" class="headerlink" title="키 페어 생성하기"></a>키 페어 생성하기</h4><p>먼저, ED25519 형식의 키 페어는 OpenSSH를 통해 만들 수도 있고 아마존 웹 서비스를 통해 ED25519 형식의 키 페어를 생성할 수 있습니다. </p><p><img data-src="/images/posts/ed25519/ed25519-01.png"></p><blockquote><p>2021년 8월 17일 부터는 콘솔을 통해 ED25119 키 페어를 사용하여 EC2 인스턴스 연결이 가능하다고 했는데 우측 제약사항에는 아직 업데이트되지 않은 듯 합니다.</p></blockquote><p>아래와 같이 AWS CLI의 create-key-pair 명령어를 통해서도 ED25519 키 페어를 생성할 수 있습니다.</p><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">aws ec2 create<span class="literal">-key</span><span class="literal">-pair</span> -<span class="literal">-key</span><span class="literal">-name</span> mambo -<span class="literal">-key</span><span class="literal">-type</span> ed25519 -<span class="literal">-query</span> <span class="string">&quot;KeyMaterial&quot;</span> -<span class="literal">-output</span> text &gt; aws<span class="literal">-mambo</span>.pem</span><br><span class="line">aws ec2 describe<span class="literal">-key</span><span class="literal">-pairs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;KeyPairs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;KeyPairId&quot;</span>: <span class="string">&quot;###&quot;</span>,</span><br><span class="line">            <span class="string">&quot;KeyFingerprint&quot;</span>: <span class="string">&quot;###&quot;</span>,</span><br><span class="line">            <span class="string">&quot;KeyName&quot;</span>: <span class="string">&quot;mambo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;KeyType&quot;</span>: <span class="string">&quot;ed25519&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tags&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아마존 웹 서비스에 키 페어가 생성되었으면 VPC에 EC2 인스턴스를 시작할 때 SSH 접속 시 사용될 ED25519 키 페어를 선택할 수 있습니다. </p><p><img data-src="/images/posts/ed25519/ed25519-02.png"></p><p>EC2 인스턴스가 실행되었으면 아마존 웹 서비스 콘솔의 EC2 인스턴스 연결 기능을 통해 인스턴스에 접속해보겠습니다.</p><p><img data-src="/images/posts/ed25519/ed25519-03.png"></p><p>ED25519 키 페어를 사용해서 EC2 인스턴스 연결에 성공하였습니다. 그런데 말이죠, 아마존 웹 서비스에서 생성된 ED25519 키 페어를 윈도우 10에서 지원하는 SSH 클라이언트에서 사용해보면 잘못된 형식이라고 로그가 출력되고 EC2 인스턴스에 연결할 수 없음을 확인했습니다.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -i &quot;aws-mambo.pem&quot; ec2-user@ec2-3-36-96-111.ap-northeast-2.compute.amazonaws.com</span><br><span class="line"></span><br><span class="line">The authenticity of host &#39;ec2-3-36-96-111.ap-northeast-2.compute.amazonaws.com (3.36.96.111)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:gvSJ&#x2F;qfnIlB8bkTE78QY65HO4px3YpoYvsyAv90LsTE.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;ec2-3-36-96-111.ap-northeast-2.compute.amazonaws.com,3.36.96.111&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">Load key &quot;aws-mambo.pem&quot;: invalid format</span><br><span class="line">ec2-user@ec2-3-36-96-111.ap-northeast-2.compute.amazonaws.com: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</span><br></pre></td></tr></table></figure><p>아마존 웹 서비스가 만들어주는 ED25519 형식의 키 페어를 사용하지 않고 직접 윈도우 10에서 ssh-keygen을 통해 ED25519 형식의 키 페어를 생성하고 아마존 웹 서비스에 퍼블릭 키를 추가하면 정상적으로 EC2 인스턴스 연결할 수 있습니다. </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -m PEM -f .&#x2F;mambo.pem</span><br></pre></td></tr></table></figure><p>이처럼 아마존 웹 서비스에서 만들어주는 ED25519 형식의 키 페어는 윈도우에서 사용할 수 없기 때문에 주의해야할 것 같습니다.</p><p>타원곡선 암호에 대해서 더 자세히 알고 싶다면 다음의 글들을 참고해보시기를 추천드립니다.</p><ul><li><a href="https://medium.com/humanscape-tech/blockchain-elliptic-curve-cryptography-ecc-49e6d7d9a50a">[Blockchain] Elliptic Curve Cryptography(ECC)</a></li><li><a href="https://naleejang.tistory.com/218">보안 그리고 암호화 알고리즘</a></li></ul><p>감사합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://datatracker.ietf.org/doc/html/rfc4492">Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7748">Elliptic Curves for Security</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc8032">Edwards-Curve Digital Signature Algorithm (EdDSA)</a></li><li><a href="https://ed25519.cr.yp.to/">Ed25519: high-speed high-security signatures</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 보안 관련 기술인 타원곡선 암호 알고리즘을 기반으로 하는 &lt;strong&gt;ED25519&lt;/strong&gt;라는 것에 대해 알아보려고 합니다. &lt;/p&gt;
&lt;p&gt;아마존 웹 서비스에서는 2021년 8월 17일</summary>
      
    
    
    
    
    <category term="ECC" scheme="https://kdevkr.github.io/tags/ECC/"/>
    
    <category term="Ed25519" scheme="https://kdevkr.github.io/tags/Ed25519/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 도커 이미지 최적화</title>
    <link href="https://kdevkr.github.io/python-docker-image-optimization/"/>
    <id>https://kdevkr.github.io/python-docker-image-optimization/</id>
    <published>2021-09-09T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 파이썬 도커 이미지에 대한 최적화에 대해서 알아봅니다. 회사에서 운영중인 서비스의 분석 서버는 파이썬으로 작성된 플래스크 기반의 웹 애플리케이션입니다. 여러가지 방식으로 배포하던 애플리케이션을 Elastic Beanstalk 환경을 통해 배포하는 구조로 통합하기 위해서 파이썬 애플리케이션을 Elastic Beanstalk의 도커 플랫폼으로 전환하기 위한 작업을 진행했습니다. 파이썬 플랫폼이 아닌 도커 플랫폼을 활용하는 이유는 도커 이미지로 구동하는 쿠버네티스 환경을 준비하고 있기 때문으로 동일하게 도커 이미지를 사용하여 애플리케이션을 배포하고자 결정하였습니다.</p><h2 id="파이썬-도커-이미지"><a href="#파이썬-도커-이미지" class="headerlink" title="파이썬 도커 이미지"></a>파이썬 도커 이미지</h2><p>파이썬으로 작성된 애플리케이션을 도커 이미지화하는 과정에서 발견한 문제에 대하여 몇가지 개선 작업을 진행한 것을 공유하고자 합니다. </p><h3 id="로컬-환경의-Dockerfile"><a href="#로컬-환경의-Dockerfile" class="headerlink" title="로컬 환경의 Dockerfile"></a>로컬 환경의 Dockerfile</h3><p>먼저, 로컬 환경에서 애플리케이션을 구동해보기 위해서 간단하게 작성하여 사용중이던 Dockerfile을 다시 만들어야 했습니다.</p><figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./src /www</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /www</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">ENV</span> <span class="keyword">ENV</span> <span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m venv .venv</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x ./.venv/bin/activate</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./.venv/bin/activate</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m pip install --upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install Flask</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn main:app -b 0.0.0.0:5000 -w 1 -t=50 -k gevent --preload</span></span><br></pre></td></tr></table></figure><p>Dockerfile이 정리되어있지 않고 불필요한 명령어를 수행하는 것도 있지만 제일 크다고 생각한 문제점은 <a href="https://gunicorn.org/">Gunicorn WSGI 서버</a>에 대해 다양한 옵션을 적용하기 힘들다는 점이었습니다. 웹 요청을 애플리케이션 마스터 프로세스에 전달하는 워커 프로세스의 개수를 지정하는 옵션 만큼은 이미지를 빌드하는 시점 이후에도 쉽게 변경할 수 있게 적용하는게 좋을 것 같았습니다.</p><figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app/logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> PORT=<span class="number">8000</span></span><br><span class="line"><span class="keyword">ARG</span> MAIN=application</span><br><span class="line"><span class="keyword">ARG</span> MAIN_APP=application</span><br><span class="line"><span class="keyword">ARG</span> WORKERS=application</span><br><span class="line"><span class="keyword">ARG</span> WORKERS=<span class="number">2</span></span><br><span class="line"><span class="keyword">ARG</span> WORKERCLASS=gevent</span><br><span class="line"><span class="keyword">ARG</span> TIMEOUT=<span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PORT $&#123;PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> MAIN $&#123;MAIN&#125;</span><br><span class="line"><span class="keyword">ENV</span> MAIN_APP $&#123;MAIN_APP&#125;</span><br><span class="line"><span class="comment"># This number should generally be between 2-4 workers per core in the server.</span></span><br><span class="line"><span class="keyword">ENV</span> WORKERS $&#123;WORKERS&#125;</span><br><span class="line"><span class="comment"># one of sync, eventlet, gevent, tornado, gthread</span></span><br><span class="line"><span class="keyword">ENV</span> WORKERCLASS $&#123;WORKERCLASS&#125;</span><br><span class="line"><span class="keyword">ENV</span> TIMEOUT $&#123;TIMEOUT&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint.sh entrypoint.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/ .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install gunicorn gevent</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://docs.gunicorn.org/en/stable/run.html</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;chmod&quot;</span>, <span class="string">&quot;+x&quot;</span>, <span class="string">&quot;./entrypoint.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="string">&quot;./entrypoint.sh&quot;</span></span></span><br></pre></td></tr></table></figure><p>다시 작성한 Dockerfile에서는 <strong>ARG 키워드로 빌드 시점에 옵션을 적용</strong>하고 <strong>ENV 키워드를 사용하여 도커 컨테이너를 실행하는 시점</strong>에 환경 변수로 다양한 옵션을 적용할 수 있도록 하였습니다.</p><h3 id="터무니없는-빌드된-이미지-크기"><a href="#터무니없는-빌드된-이미지-크기" class="headerlink" title="터무니없는 빌드된 이미지 크기"></a>터무니없는 빌드된 이미지 크기</h3><p>Dockerfile을 다시 작성하면서 꽤 깔끔해졌지만 또 다른 문제가 내재되어있었습니다. 그것은 빌드된 이미지의 크기가 3.7GB라는 터무니 없는 크기를 가지고 있던 것이었습니다. </p><p><img data-src="/images/posts/python-docker-image-optimization/python-docker-image-optimization-01.png" alt="3.71GB"></p><p>분석 서버를 개발하시는 실장님도 파이썬을 전문으로 하는 개발자가 아니었기 때문에 이러한 이미지 크기가 정상적인 것 같다고 하셨으나 <strong>requirements.txt에 정의된 패키지에 의해 설치된 용량이 무려 2.8GB</strong>인 것을 확인하고 requirements.txt에 <strong>정의된 패키지 중 사용하지 않는 패키지들을 제거</strong>하는 작업을 수행하고보니 <strong>97개의 패키지가 39개로 축소</strong>되었습니다.</p><p><img data-src="/images/posts/python-docker-image-optimization/python-docker-image-optimization-02.png" alt="1.28GB"></p><p>축소된 requirements.txt에 의해 설치된 패키지의 용량은 2.8GB에서 368MB로 줄어든 것으로 확인되었습니다.</p><h3 id="파이썬-기반-이미지-변경"><a href="#파이썬-기반-이미지-변경" class="headerlink" title="파이썬 기반 이미지 변경"></a>파이썬 기반 이미지 변경</h3><p>그럼에도 불구하고 아직 1.28GB라는 상당히 무거운 이미지 사이즈를 가지고 있었습니다. 그 이유는 기본 파이썬 이미지에서 이미 많은 패키지가 설치되기 때문입니다.</p><p><img data-src="/images/posts/python-docker-image-optimization/python-docker-image-optimization-03.png"></p><p>일반적으로 도커 이미지를 줄이기 위해서 알파인 리눅스 기반으로 만들어진 이미지를 사용하는 것으로 변경합니다. 그런데 알파인 리눅스로 된 파이썬 이미지를 사용하면 <a href="https://jonnung.dev/docker/2020/04/08/optimizing-docker-images/">도커 이미지 잘 만드는 방법</a>에서 확인할 수 있듯이 <strong>빌드 소요시간이 15분 이상 걸리는 현상</strong>을 보였습니다.</p><figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash"> gcc libpq-dev</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>결국 알파인 리눅스 기반 이미지 대신에 <code>3.8-slim-buster</code>을 기반의 이미지로 변경하였고 PostgreSQL 모듈을 설치할 때 오류가 발생하여 gcc 와 libpg-dev 패키지를 설치하였습니다.</p><p><img data-src="/images/posts/python-docker-image-optimization/python-docker-image-optimization-04.png"></p><p><strong>1.28GB의 도커 이미지가 655MB의 용량을 가지는 이미지로 축소</strong>되었습니다. 결과적으로 약 3.14GB의 크기를 줄이게 되었고 <strong>캐시되지 않은 상태에서 약 40초 정도의 시간이 소요됨</strong>을 확인했습니다. </p><h3 id="Dockerfile-키워드-순서-변경"><a href="#Dockerfile-키워드-순서-변경" class="headerlink" title="Dockerfile 키워드 순서 변경"></a>Dockerfile 키워드 순서 변경</h3><p><strong>도커 이미지 잘 만드는 방법</strong>을 참고하면 애플리케이션 소스는 패키지를 설치하고나서 복사하는 것이 빌드 시간을 단축한다는 것을 보고 COPY 키워드 순서를 변경하였습니다.</p><figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install gunicorn gevent</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint.sh entrypoint.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/ .</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>먼저, requirements.txt을 우선적으로 복사하고 패키지를 설치한 뒤 애플리케이션 실행을 위한 엔트리포인트 스크립트 파일과 애플리케이션 소스 폴더를 복사하도록 변경했습니다.</p><h3 id="Gunicorn-설정-개선"><a href="#Gunicorn-설정-개선" class="headerlink" title="Gunicorn 설정 개선"></a>Gunicorn 설정 개선</h3><p>다시 작성한 Dockerfile을 살펴보니 ARG와 ENV 키워드가 많아 쓸데없이 파일이 지저분해보였습니다. ARG와 ENV 키워드들은 용량을 차지하지 않으므로 이미지 크기에 영향을 주지는 않으나 Gunicorn의 여러가지 옵션을 하나의 환경 변수로 지원하도록 추가 개선하였습니다.</p><figure class="highlight docker"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash"> gcc libpq-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Arguments</span></span><br><span class="line"><span class="keyword">ARG</span> PORT=<span class="number">8000</span></span><br><span class="line"><span class="keyword">ARG</span> MAIN=application</span><br><span class="line"><span class="keyword">ARG</span> MAIN_APP=application</span><br><span class="line"><span class="keyword">ARG</span> GUNICORN_ARGS=--preload</span><br><span class="line"></span><br><span class="line"><span class="comment"># Environoment Variables</span></span><br><span class="line"><span class="keyword">ARG</span> PORT $&#123;PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> MAIN $&#123;MAIN&#125;</span><br><span class="line"><span class="keyword">ENV</span> MAIN_APP $&#123;MAIN_APP&#125;</span><br><span class="line"><span class="keyword">ENV</span> GUNICORN_ARGS $&#123;GUNICORN_ARGS&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install gunicorn gevent</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> gunicorn.conf.py gunicorn.conf.py</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint.sh entrypoint.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/ .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://docs.gunicorn.org/en/stable/run.html</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;chmod&quot;</span>, <span class="string">&quot;+x&quot;</span>, <span class="string">&quot;./entrypoint.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="string">&quot;./entrypoint.sh&quot;</span></span></span><br></pre></td></tr></table></figure><p>다음과 같이 기본 옵션이 정의된 <strong>gunicorn.conf.py</strong> 파일을 적용하였습니다.</p><figure class="highlight py"><figcaption><span>gunicorn.conf.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://docs.gunicorn.org/en/stable/settings.html</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">bind = <span class="string">&#x27;0.0.0.0:8000&#x27;</span></span><br><span class="line">workers = multiprocessing.cpu_count() * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">worker_connections = <span class="number">1000</span></span><br><span class="line">worker_class = <span class="string">&#x27;gevent&#x27;</span></span><br><span class="line">threads = <span class="number">1</span></span><br><span class="line">max_requests = <span class="number">0</span></span><br><span class="line">timeout = <span class="number">30</span></span><br><span class="line">keepalive = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>그리고 기본으로 적용된 옵션을 하나로 통합된 <strong>GUNICORN_ARGS</strong> 환경 변수를 통해 자유롭게 옵션을 재정의하도록 하였습니다.</p><p><strong>requirements.txt에 정의된 패키지 정리</strong>하고 <strong>slim-buster 기반의 이미지로 변경</strong> 그리고 <strong>Dockerfile 키워드 순서를 변경</strong>함으로써 파이썬 애플리케이션에 대한 도커 이미지를 최적화하는 것을 알아보았습니다. 결과적으로 도커 이미지 사이즈를 많이 줄이게되어 이미지 용량에 대한 부담과 빌드 및 배포하기까지의 시간을 단축하게되어 다행이라고 생각합니다.</p><p>감사합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://blog.hwahae.co.kr/all/tech/tech-tech/5567/">gunicorn 설정의 A to Z</a></li><li><a href="https://jonnung.dev/docker/2020/04/08/optimizing-docker-images/">도커 이미지 잘 만드는 방법</a>  </li><li><a href="https://kimeuichan.github.io/posts/deploy-docker-more-faster/">자주 변경되는 도커 이미지 빠르게 배포하기</a>  </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 파이썬 도커 이미지에 대한 최적화에 대해서 알아봅니다. 회사에서 운영중인 서비스의 분석 서버는 파이썬으로 작성된 플래스크 기반의 웹 애플리케이션입니다. 여러가지 방식으로 배포하던 애플리케이션을 E</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://kdevkr.github.io/tags/Docker/"/>
    
    <category term="Python" scheme="https://kdevkr.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Beanstalk Docker Platform</title>
    <link href="https://kdevkr.github.io/elastic-beanstalk-docker-with-python/"/>
    <id>https://kdevkr.github.io/elastic-beanstalk-docker-with-python/</id>
    <published>2021-09-06T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 아마존 웹 서비스의 <strong>Elastic Beanstalk에서 지원하는 도커 컨테이너 환경을 통해 애플리케이션을 배포하는 방법</strong>에 대하여 알아봅니다. 이 글에서는 애플리케이션을 도커 이미지화하고 사설 도커 레지스트리 서버에 저장된 도커 이미지를 기반으로 Elastic Beanstalk 환경에서 도커 컴포즈를 활용해 애플리케이션을 실행하는 것을 설명합니다.</p><h2 id="도커-플랫폼"><a href="#도커-플랫폼" class="headerlink" title="도커 플랫폼"></a>도커 플랫폼</h2><p>Elastic Beanstalk의 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/docker.html">도커 플랫폼</a>은 도커 컨테이너 환경에서 애플리케이션을 실행하는 기능을 지원합니다. 도커 플랫폼을 사용해 애플리케이션을 배포하기 위해서는 도커 컨테이너와 Elastic Beanstalk에 대한 이해가 필요합니다. 도커 플랫폼에서는 Dockerfile을 사용하여 직접 도커 이미지를 빌드하여 도커 컨테이너를 실행하거나 <strong>Dockerrun.aws.json</strong> 파일로 컨테이너 환경을 정의할 수 있도록 지원합니다. 또한, <a href="https://docs.docker.com/registry/deploying/">도커 레지스트리 서버</a>에 저장된 이미지를 기반으로 컨테이너를 구성할 수 있는 <strong>도커 컴포즈</strong> 방식도 사용할 수 있습니다.</p><p>도커 플랫폼에서 도커 이미지화된 애플리케이션을 도커 컴포즈로 배포하기 위해서는 다음의 항목들을 작성해야합니다.</p><ul><li>애플리케이션 도커 이미지</li><li>플랫폼 확장 및 환경 구성 파일</li><li>도커 컴포즈 문서</li><li>도커 레지스트리 서버 인증 파일</li><li>도커 구성 파일</li></ul><blockquote><p>이 글에서는 도커 레지스트리 서버가 구축되어있다고 가정합니다.</p></blockquote><h3 id="애플리케이션-도커-이미지"><a href="#애플리케이션-도커-이미지" class="headerlink" title="애플리케이션 도커 이미지"></a>애플리케이션 도커 이미지</h3><p>Python으로 작성된 간단한 Flask 웹 애플리케이션을 작성하고 도커 이미지로 빌드하기 위한 <strong>Dockerfile</strong> 파일을 정의합니다. </p><figure class="highlight python"><figcaption><span>application.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># print a nice greeting.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">username = <span class="string">&quot;World&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;Hello %s!&lt;/p&gt;\n&#x27;</span> % username</span><br><span class="line"></span><br><span class="line"><span class="comment"># EB looks for an &#x27;application&#x27; callable by default.</span></span><br><span class="line">application = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a rule for the index page.</span></span><br><span class="line">application.add_url_rule(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, (<span class="keyword">lambda</span>: say_hello()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># run the app.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Setting debug to True enables debug output. This line should be</span></span><br><span class="line">    <span class="comment"># removed before deploying a production app.</span></span><br><span class="line">    application.debug = <span class="literal">True</span></span><br><span class="line">    application.run()</span><br></pre></td></tr></table></figure><blockquote><p>저는 파이썬을 다루지 않는 개발자이므로 파이썬을 설치하고 가상 환경을 시작하는 것은 생략하겠습니다.</p></blockquote><p>PIP 명령어를 사용하여 Python 애플리케이션에서 사용하는 패키지를 설치하기 위한 <strong>requirements.txt</strong>을 준비합니다.</p><figure class="highlight txt"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">click==8.0.1</span><br><span class="line">Flask==1.1.2</span><br><span class="line">itsdangerous==2.0.1</span><br><span class="line">Jinja2==3.0.1</span><br><span class="line">MarkupSafe==2.0.1</span><br><span class="line">Werkzeug==2.0.1</span><br></pre></td></tr></table></figure><p>그리고 도커 허브에 등록된 Python 이미지를 기반으로 requirements.txt을 기준의 패키지를 설치하는 <strong>Dockerfile</strong>을 정의합니다. </p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> PORT=<span class="number">8000</span></span><br><span class="line"><span class="keyword">ARG</span> MAIN=application</span><br><span class="line"><span class="keyword">ARG</span> MAIN_APP=application</span><br><span class="line"><span class="keyword">ARG</span> WORKERS=application</span><br><span class="line"><span class="keyword">ARG</span> WORKERS=<span class="number">2</span></span><br><span class="line"><span class="keyword">ARG</span> WORKERCLASS=gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PORT $&#123;PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> MAIN $&#123;MAIN&#125;</span><br><span class="line"><span class="keyword">ENV</span> MAIN_APP $&#123;MAIN_APP&#125;</span><br><span class="line"><span class="keyword">ENV</span> WORKERS $&#123;WORKERS&#125;</span><br><span class="line"><span class="keyword">ENV</span> WORKERCLASS $&#123;WORKERCLASS&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install gunicorn</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;chmod&quot;</span>, <span class="string">&quot;+x&quot;</span>, <span class="string">&quot;./entrypoint.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="string">&quot;./entrypoint.sh&quot;</span></span></span><br></pre></td></tr></table></figure><p>마지막으로 <a href="https://docs.gunicorn.org/en/stable/">Gunicorn WSGI 서버</a>를 사용하여 Flask 웹 애플리케이션을 실행하는 <strong>엔트리포인트</strong>를 작성합니다.</p><figure class="highlight sh"><figcaption><span>entrypoint.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line">gunicorn <span class="variable">$&#123;MAIN&#125;</span>:<span class="variable">$&#123;MAIN_APP&#125;</span> -b 0.0.0.0:<span class="variable">$&#123;PORT&#125;</span> -w <span class="variable">$&#123;WORKERS&#125;</span></span><br></pre></td></tr></table></figure><p>Dockerfile을 기반으로 애플리케이션을 도커 이미지로 생성하고 도커 레지스트리 서버에 빌드된 이미지를 저장합니다.</p><figure class="highlight zsh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">docker login https://registry.mambo.kr:5000</span><br><span class="line">Username: mambo</span><br><span class="line">Password:</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">docker build -t registry.mambo.kr:5000/mambo-py:<span class="built_in">test</span></span><br><span class="line">docker push registry.mambo.kr:5000/mambo-py:<span class="built_in">test</span></span><br><span class="line">docker <span class="built_in">logout</span> registry.mambo.kr:5000/mambo-py:<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="플랫폼-확장-구성-파일"><a href="#플랫폼-확장-구성-파일" class="headerlink" title="플랫폼 확장 구성 파일"></a>플랫폼 확장 구성 파일</h3><p>Elastic Beanstalk에서도 Nginx 프록시 옵션을 설정할 수 있지만 도커 컴포즈를 사용하여 도커 컨테이너 환경을 구성하는 경우 Nginx 프록시 옵션을 활성화되어 있더라도 무시됩니다. Nginx 프록시 옵션을 무시한다는 의미는 애플리케이션 소스 번들에 도커 컴포즈 문서와 함께 <strong>.platform 폴더를 포함시키더라도 Nginx 구성 파일로 복사하여 확장하지 않는다</strong>는 이야기입니다.</p><p>하지만 애플리케이션 소스 번들에 포함시킨 <strong>.platform 폴더는 /var/app/current에 추출</strong>되므로 도커 컴포즈 문서에 도커 컨테이너에 볼륨을 지정하여 전달할 수 있습니다.</p><figure class="highlight nginx"><figcaption><span>docker-nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>                    nginx;</span><br><span class="line"><span class="attribute">error_log</span>               /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>                     /var/run/nginx.pid;</span><br><span class="line"><span class="attribute">worker_processes</span>        auto;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span>    <span class="number">32768</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span>  <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>         /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>    application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>      main    <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                            <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                            <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">map</span> $http_upgrade $connection_upgrade &#123;</span><br><span class="line">      <span class="attribute">default</span>     <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>                <span class="number">80</span> default_server;</span><br><span class="line">      <span class="attribute">access_log</span>            /var/log/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">client_header_timeout</span> <span class="number">60</span>;</span><br><span class="line">      <span class="attribute">client_body_timeout</span>   <span class="number">60</span>;</span><br><span class="line">      <span class="attribute">keepalive_timeout</span>     <span class="number">60</span>;</span><br><span class="line">      <span class="attribute">gzip</span>                  <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">gzip_comp_level</span>       <span class="number">4</span>;</span><br><span class="line">      <span class="attribute">gzip_types</span>            text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Include the Elastic Beanstalk generated locations</span></span><br><span class="line">      <span class="attribute">include</span> conf.d/elasticbeanstalk/<span class="regexp">*.conf</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">           <span class="attribute">listen</span>                   <span class="number">443</span> ssl default_server;</span><br><span class="line">           <span class="attribute">server_name</span>              mambo.kr;</span><br><span class="line">           <span class="attribute">ssl_certificate</span>          /etc/nginx/cert/server-ca-bundle.pem;</span><br><span class="line">           <span class="attribute">ssl_certificate_key</span>      /etc/nginx/cert/server.key;</span><br><span class="line">           <span class="attribute">ssl_protocols</span>            TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">           <span class="attribute">ssl_ciphers</span>              HIGH:!aNULL:!MD5;</span><br><span class="line">           <span class="attribute">ssl_verify_client</span>        optional_no_ca;</span><br><span class="line"></span><br><span class="line">           <span class="attribute">location</span> / &#123;</span><br><span class="line">               <span class="attribute">proxy_pass</span>          http://app:8000;</span><br><span class="line">               <span class="attribute">proxy_http_version</span>  <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>    Connection          $connection_upgrade;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>    Upgrade             $http_upgrade;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>    Host                $host;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>    X-Real-IP           $remote_addr;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>    X-SSL-CERT          $ssl_client_escaped_cert;</span><br><span class="line">               <span class="attribute">proxy_buffering</span>     <span class="literal">off</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단일 컨테이너를 구성하고 ELB로 전달되는 트래픽을 애플리케이션 컨테이너에 직접 전달할 수 있지만 도커 컴포즈를 사용하여 컨테이너 구성하더라도 직접 Nginx 컨테이너를 함께 구성할 수 있음을 보여줍니다. 위 Nginx 구성 파일은 일반적인 Elastic Beanstalk의 다양한 언어로 지원하는 플랫폼에서 제공하는 Nginx 확장 구성 파일과 동일하지만 <strong>애플리케이션과 Nginx가 별도의 독립적인 컨테이너로 실행되므로 호스트 이름으로 접근해야함</strong>을 보여줍니다.</p><h3 id="도커-컴포즈-문서"><a href="#도커-컴포즈-문서" class="headerlink" title="도커 컴포즈 문서"></a>도커 컴포즈 문서</h3><p>애플리케이션과 Nginx 컨테이너를 구성하는 도커 컴포즈 문서를 정의합니다. </p><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.platform/nginx/conf.d/elasticbeanstalk:/etc/nginx/conf.d/elasticbeanstalk</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.platform/nginx/docker-nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/nginx/cert:/etc/nginx/cert</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;EB_LOG_BASE_DIR&#125;/nginx:/var/log/nginx&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx_app</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.mambo.kr:5000/mambo-py:test</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx_app</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx_app:</span></span><br></pre></td></tr></table></figure><p>Elastic Beanstalk 환경 구성 파일에 의해 가져온 Nginx 인증서와 애플리케이션 소스 번들에 포함된 플랫폼 확장 파일을 Nginx 컨테이너 볼륨에 연결합니다. 그리고 애플리케이션 로드 밸런서 또는 네트워크 로드 밸런서에서 전달되는 트래픽은 Nginx 컨테이너로 경유하여 애플리케이션 컨테이너로 전달되므로 애플리케이션에 대한 포트는 호스트로 노출하지 않도록 하여 직접 접근이 불가능하도록 합니다.</p><h4 id="컨테이너-환경-변수"><a href="#컨테이너-환경-변수" class="headerlink" title="컨테이너 환경 변수"></a>컨테이너 환경 변수</h4><p>Beanstalk 콘솔에서 설정하는 환경 변수는 애플리케이션 소스 번들이 추출되는 /var/app/current 경로에 .env 파일에 환경 변수가 정의됩니다. 그리고 이 파일을 도커 컨테이너의 환경 변수 참조 파일로 추가할 수 있습니다.</p><blockquote><p>도커 컴포즈 문서에 정의한 환경 변수가 우선 순위를 갖습니다. 도커 컴포즈 문서에 설정된 환경 변수를 Beanstalk 환경 변수로 설정하더라도 무시되니 주의하셔야합니다.</p></blockquote><h3 id="도커-레지스트리-서버-인증-파일"><a href="#도커-레지스트리-서버-인증-파일" class="headerlink" title="도커 레지스트리 서버 인증 파일"></a>도커 레지스트리 서버 인증 파일</h3><p>도커 레지스트리 서버에서 도커 이미지를 받아오기 위해서는 레지스트리 서버에 대한 인증 파일이 필요합니다. 만약, 기본 도커 레지스트리 서버인 도커 허브를 사용하는 것이 아니라 직접 구축한 도커 레지스트리 서버과 통신해야한다면 <strong>TLS 통신을 위한 인증서 파일이 필요</strong>합니다.</p><p>예를 들어, 도커 레지스트리 서버에 대한 인증서는 다음과 같이 참조하게 됩니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/docker/certs.d/         &lt;-- Certificate directory</span><br><span class="line">└── registry.mambo.kr:5000   &lt;-- Hostname:port</span><br><span class="line">    ├── client.cert          &lt;-- Client certificate</span><br><span class="line">    ├── client.key           &lt;-- Client key</span><br><span class="line">    └── ca.crt               &lt;-- Certificate authority that signed the registry certificate</span><br></pre></td></tr></table></figure><blockquote><p>윈도우와 MacOS 에서는 $USER/.docker/certs.d 입니다.</p></blockquote><p>도커 레지스트리 서버에 로그인하면 <strong>.dockercfg</strong> 파일에 크레덴셜 정보가 저장됩니다.</p><figure class="highlight json"><figcaption><span>.dockercfg</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;https://registry.mambo.kr:5000&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;auth&quot;</span>: <span class="string">&quot;[Base64]username:password&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>윈도우 또는 Mac OS에서는 <strong>윈도우 자격 증명 관리자</strong> 또는 <strong>OSX Keychain</strong>에 크레덴셜을 저장할 수 있는데요. 이 경우에는 <strong>.dockercfg 또는 config.json</strong> 파일을 살펴보더라도 크레덴셜을 확인할 수 없습니다. 도커 로그인 시 사용되는 크레덴셜은 사용자 이름과 패스워드(username:password)를 <a href="https://codebeautify.org/base64-encode">Base64로 인코딩</a>한 값이기 때문에 <strong>직접 Base64로 인코딩</strong>하고 위와 같이 <strong>도커 레지스트리 서버에 대한 .dockercfg를 정의</strong>하시기 바랍니다.</p><h3 id="환경-구성-파일"><a href="#환경-구성-파일" class="headerlink" title="환경 구성 파일"></a>환경 구성 파일</h3><p>도커 레지스트리 서버에 대한 인증서 파일들을 S3 버킷에서 가져오는 구성 파일을 정의합니다. 지난 <a href="../elastic-beanstalk-s3-auth">Elastic Beanstalk S3 Authentication</a>를 참고하여 다음과 같이 작성하였습니다.</p><figure class="highlight yaml"><figcaption><span>.ebextensions/registry-cert.config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">Resources:</span></span><br><span class="line">    <span class="attr">AWSEBAutoScalingGroup:</span></span><br><span class="line">        <span class="attr">Metadata:</span></span><br><span class="line">            <span class="attr">AWS::CloudFormation::Authentication:</span></span><br><span class="line">                <span class="attr">S3Auth:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">S3</span></span><br><span class="line">                    <span class="attr">buckets:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">mambo-cert</span></span><br><span class="line">                    <span class="attr">roleName:</span></span><br><span class="line">                        <span class="attr">Fn::GetOptionSetting:</span></span><br><span class="line">                            <span class="attr">Namespace:</span> <span class="string">aws:autoscaling:launchconfiguration</span></span><br><span class="line">                            <span class="attr">OptionName:</span> <span class="string">IamInstanceProfile</span></span><br><span class="line">                            <span class="attr">DefaultValue:</span> <span class="string">aws-elasticbeanstalk-ec2-role</span></span><br><span class="line"><span class="attr">files:</span></span><br><span class="line">    <span class="string">&quot;/etc/docker/certs.d/registry.mambo.kr:5000/client.cert&quot;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">https://mambo-cert.s3.ap-northeast-2.amazonaws.com/registry/client.cert</span></span><br><span class="line">        <span class="attr">authentication:</span> <span class="string">S3Auth</span></span><br><span class="line">    <span class="string">&quot;/etc/docker/certs.d/registry.mambo.kr:5000/client.key&quot;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">https://mambo-cert.s3.ap-northeast-2.amazonaws.com/registry/client.key</span></span><br><span class="line">        <span class="attr">authentication:</span> <span class="string">S3Auth</span></span><br><span class="line">    <span class="string">&quot;/etc/docker/certs.d/registry.mambo.kr:5000/ca.crt&quot;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">https://mambo-cert.s3.ap-northeast-2.amazonaws.com/registry/ca.crt</span></span><br><span class="line">        <span class="attr">authentication:</span> <span class="string">S3Auth</span></span><br><span class="line"></span><br><span class="line"><span class="attr">commands:</span></span><br><span class="line">    <span class="attr">99-remove-bak:</span></span><br><span class="line">        <span class="attr">cwd:</span> <span class="string">/etc/docker/certs.d/registry.mambo.kr:5000</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">*.bak</span></span><br></pre></td></tr></table></figure><h3 id="도커-구성-파일"><a href="#도커-구성-파일" class="headerlink" title="도커 구성 파일"></a>도커 구성 파일</h3><p>로컬 환경에서는 도커의 로그인 명령어를 사용하여 도커 레지스트리 서버에 인증하고 이미지를 등록하거나 가져올 수 있습니다. 그러나 Elastic Beanstalk 환경에서는 직접 로그인 명령어를 사용하는 것이 아니므로 도커에서 도커 레지스트리 서버에 대한 인증 파일을 사용할 수 있도록 앞서 알아본 <strong>.dockercfg</strong> 파일을 가져와야 합니다.</p><figure class="highlight json"><figcaption><span>Dockerrun.aws.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;AWSEBDockerrunVersion&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Authentication&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bucket&quot;</span>: <span class="string">&quot;mambo-cert&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;registry/.dockercfg&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>도커 컴포즈 문서와 함께 애플리케이션 소스 번들에 포함되는 위 도커 구성 파일은 Dockerrun.aws.json v3을 사용하며 <strong>mambo-cert/registry/.dockercfg</strong> 파일을 <strong>/root/.docker/config.json</strong>에 크레덴셜 정보를 복사합니다.</p><blockquote><p>EC2 인스턴스의 IAM Role이 S3 버킷에 대한 읽기 권한을 가져야합니다.</p></blockquote><h3 id="애플리케이션-소스-번들"><a href="#애플리케이션-소스-번들" class="headerlink" title="애플리케이션 소스 번들"></a>애플리케이션 소스 번들</h3><p>Elastic Beanstalk의 도커 플랫폼 환경에 배포할 애플리케이션 소스 번들에는 다음과 같은 파일들이 포함됩니다. </p><ul><li>docker-compose.yml</li><li>Dockerrun.aws.json</li><li>.platform</li><li>.ebextensions</li></ul><p>위 파일들을 <strong>zip 명령어로 애플리케이션 소스 번들 파일을 생성</strong>합니다.</p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">zip app-bundle.zip -r docker-compose.yml Dockerrun.aws.json .platform .ebextensions</span><br></pre></td></tr></table></figure><p>이제 애플리케이션 소스 번들 파일을 업로드하면 다음과 같이 Hello World가 표시되는 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/beanstalk-docker-platform/web.png"></p><p>이렇게해서 애플리케이션을 도커 이미지로 만들고 사설로 구축한 도커 레지스트리 서버에 등록된 이미지를 통해 Elastic Beanstalk의 도커 플랫폼을 활용하여 애플리케이션을 배포해보았습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 아마존 웹 서비스의 &lt;strong&gt;Elastic Beanstalk에서 지원하는 도커 컨테이너 환경을 통해 애플리케이션을 배포하는 방법&lt;/strong&gt;에 대하여 알아봅니다. 이 글에서는 애플리케이션</summary>
      
    
    
    
    
    <category term="Beanstalk" scheme="https://kdevkr.github.io/tags/Beanstalk/"/>
    
    <category term="Docker" scheme="https://kdevkr.github.io/tags/Docker/"/>
    
    <category term="Python" scheme="https://kdevkr.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>IP 대역 그리고 위치추적</title>
    <link href="https://kdevkr.github.io/ip-band-and-location-tracking/"/>
    <id>https://kdevkr.github.io/ip-band-and-location-tracking/</id>
    <published>2021-09-05T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 IT 인프라를 구성하는 IP 대역과 NAT 그리고 IP를 활용한 위치 추적에 대해서 알아봅니다. </p><h2 id="IP-대역"><a href="#IP-대역" class="headerlink" title="IP 대역"></a>IP 대역</h2><p>IT 인프라에서 IP는 퍼블릭 IP 그리고 프라이빗 IP로 구분되어집니다. <strong>퍼블릭 IP</strong>는 인터넷에 접속할 수 있는 공인 IP를 말하며 <strong>프라이빗 IP</strong>는 개인적으로 구성한 네트워크 망에서 사용하는 사설 IP를 말합니다. 따라서, <strong>사설망 IP로는 외부 인터넷 접속을 통해 구글 또는 네이버 사이트에 접근할 수 없습니다.</strong></p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc1631">NAT(IP Network Address Translator)</a>는 IPv4 주소체계의 한계로 인하여 IP 주소가 부족해지는 현상을 보완하기 위해 사용하는 기술입니다. NAT는 <strong>내부 사설망 IP를 가지고 외부 네트워크망에 접속할 수 있도록 공인 IP로 변환</strong>하는 기능을 수행합니다. 일반적으로 사용하는 공유기에는 NAT 기능을 포함하고 있기 때문에 공유기에서 192.168.0.2와 같은 주소를 할당하더라도 외부 인터넷에 접속할 경우에는 공인 IP로 변환하여 요청하게 됩니다.</p><p>이러한 차이로 윈도우 컴퓨터의 명령프롬프트에서 <strong>ifconfig</strong> 명령어를 실행하면 <strong>공유기에서 할당한 사설 IP</strong>를 확인할 수 있지만 아이피 정보를 확인할 수 있는 <a href="https://ipconfig.io/">ipconfig.io</a>, <a href="https://ifconfig.io/">ifconfig.io</a>, <a href="https://ifconfig.me/">ifconfig.me</a>에 접속해보면 사설 IP가 아닌 <strong>공인 IP</strong>를 확인할 수 있습니다.</p><p><img data-src="/images/posts/ip-band-and-location-tracking/ipconfig-01.png" alt="내부 아이피 조회"></p><p><img data-src="/images/posts/ip-band-and-location-tracking/ipconfig-02.png" alt="외부 아이피 조회"></p><h3 id="IP-위치-조회"><a href="#IP-위치-조회" class="headerlink" title="IP 위치 조회"></a>IP 위치 조회</h3><p>위에서 확인한 공인 IP에 대해서 위치추적 사이트라는 곳에서 조회를 해보면 실제로 살고있는 곳 보다는 터무니없는 곳을 보여주는 경우가 많습니다. 이렇게 위치추적 사이트에서 IP에 대한 위치 조회가 정확하지 않은 이유는 <strong>인터넷 서비스 사업자(ISP)인 KT 인터넷과 같은 업체에서 지역을 정해서 IP 대역을 할당</strong>하고 그 지역내에서 DHCP를 통해 동적으로 할당하기 때문입니다. 예를 들어, 한국인터넷진흥원에서 제공하는 <a href="https://후이즈검색.한국/">WHOIS</a> 서비스를 통해 IP를 조회해보면 조금 더 상세한 지역을 안내해줍니다.</p><p><img data-src="/images/posts/ip-band-and-location-tracking/ipconfig-03.png" alt="WHOIS 조회"></p><p>실제로 제가 살고 있는 경기도 양주시에서 사용중인 IP라고 안내해주었습니다. 이렇게 한국인터넷진흥원에서 보다 정확한 위치를 확인할 수 있는 이유는 <strong>KT 인터넷과 같은 인터넷 서비스 사업자에서 한국인터넷진흥원에 지역에 대한 IP 대역 정보를 등록</strong>하기 때문입니다.</p><p>공인 IP 대역의 <strong>218.152.0.0부터 218.159.255.255는 KT 인터넷에서 사용중인 IP 대역</strong>이며 그 중에서 218.156.190.X에 대한 IP 대역은 경기도 양주시에서 사용하도록 할당하는 것을 알 수 있습니다. 위치 추적 사이트에서 인터넷 서비스 사업자의 IP 대역은 알 수 있지만 <strong>특정 IP가 실제로 KT 인터넷이 어떤 지역에 할당했는지에 대한 정보가 없기 때문에</strong> KT 인터넷에 대한 본사 또는 지역적으로 퍼져있는 KT 인터넷 장비의 위치 정보를 대신 표시해주는 것 입니다.</p><blockquote><p>인터넷 서비스 사업자는 지역에 대하여 IP 대역을 형성하기 때문에 특정 IP 대역에서 트래픽 과부화가 발생하면 인터넷 속도를 제한하는 락을 걸기도 합니다. 실제로 인터넷 속도가 충분하게 나오지 않아서 인터넷 기사를 불러 확인해보면 주변 장비에 대한 정보를 확인하고 락 해제를 요청하는 걸 많이 경험했습니다.</p><p>지난 4월에 난리였던 <a href="https://www.seoul.co.kr/news/newsView.php?id=20210420500154">KT ‘10기가 인터넷’ 속도저하 논란에 방통위 조사 나선다</a>와 같은 경우도 트래픽 규모에 따라 제한을 둔 것인데 기술적으로 결함이 있지 않았나 싶네요.</p></blockquote><h3 id="현실과-영화는-다르다"><a href="#현실과-영화는-다르다" class="headerlink" title="현실과 영화는 다르다"></a>현실과 영화는 다르다</h3><p>아무튼, 영화에서는 IP 정보를 알게되면 해당 IP를 사용하는 범죄자의 위치를 정확히 아는 것처럼 나오는 경우가 많습니다. 실제로는 경찰이 필요에 의해 웹 서비스 회사에 특정 아이디에 대한 IP 이력 정보를 요구하는 공조 요청을 하게 되고 <strong>제공받은 IP를 다시 인터넷 서비스 사업자인 KT 본사에게 IP 대역에 대한 정보를 요청</strong>하게 됩니다. 그래서 최종적으로는 <strong>정확한 위치는 아니더라도 대략적으로 읍면동까지</strong>는 알게됩니다.</p><p>범죄자가 사용하는 IP가 해외에서 사용하는 공인 IP 정보로 조회되는 경우에는 더 까다로워지는 것은 맞습니다. 해당 IP 대역을 할당하는 인터넷 서비스 업체에게 공조 요청을 하는게 아니라 <strong>국제형사사법 공조법에 의거</strong>해서 국가 간 공조 요청을 하고 제공받아야합니다. 경찰분들이 담당하는 사건들이 하나가 아니기 때문에 해외 IP에 대한 추적을 꺼려하는게 어찌보면 당연할 수 있습니다. </p><p>그럼에도 불구하고 <a href="https://www.youtube.com/watch?v=aWqK1b5w9Yo">성 착취 영상물을 유포한 사건</a>의 용의자도 집요한 추적 끝에 잡아내기도 하죠. 해외 VPN 서버를 사용하면 추적할 수 없다는 이야기를 하는 사람들이 많은데 <strong>사실은 추적은 되지만 귀찮을 수 있다</strong>라고 봐야겠죠.</p><h2 id="실무-환경에서의-IP"><a href="#실무-환경에서의-IP" class="headerlink" title="실무 환경에서의 IP"></a>실무 환경에서의 IP</h2><p>그러면 실무 환경인 회사에서 사용하는 IP에 대해서 알아보도록 하겠습니다. 회사에서도 자체 내부 사설망을 구축하여 회사 내부에서 근무하는 직원들이 사용할 수 있는 IP를 할당하게 됩니다. 이러한 것은 회사 네트워크를 관리하는 네트워크 담당자가 수행합니다. </p><h3 id="NAT-아이피"><a href="#NAT-아이피" class="headerlink" title="NAT 아이피"></a>NAT 아이피</h3><p>일반적으로 라우터 장비로부터 DHCP로 동적으로 할당받는 내부 아이피를 사용하여 인터넷을 사용하지만 경우에 따라서는 외부 인터넷망에서 회사 네트워크 대역에 접근할 수 있도록 NAT 아이피를 요청해야하는 경우도 있습니다.</p><p style="text-align:center; font-weight:bold;">"외부에서 접근하기 위한 NAT 아이피가 필요합니다."</p><p>그러면 네트워크 담당자는 NAT 아이피가 필요한 사유를 검토하고 NAT 아이피와 함께 외부에서 접근 가능한 도메인 주소와 포트 정보를 전달해줍니다. 회사 라우터 장비에서는 외부 트래픽의 도메인과 포트를 확인하고 연결된 NAT 아이피로 트래픽을 전달해줌으로써 내부 사설망에서 실행중인 애플리케이션에 접근할 수 있게 됩니다.</p><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>코로나 19로 인하여 <strong>대부분의 IT 기업들이 재택근무를 허용</strong>하게 되었습니다. 필요에 의해 회사로 출근하기도 하지만 대부분의 업무는 집에서 수행합니다. 하지만, 개발 조직에서는 개발 환경에서 사용하는 많은 인스턴스를 외부에서 접근이 불가능한 회사 내부 사설망 서버에 구축합니다. 그리고 아마존 웹 서비스와 같은 클라우드 환경을 사용한다고 하더라도 <strong>SSH를 통한 인스턴스 접근은 회사에서 사용중인 아이피 대역에 대해서만 허용</strong>하는 경우가 많습니다.</p><p>집에서 사용하는 공인 IP는 회사에서 사용하는 아이피 대역이 아니므로 SSH 접근이 불가능합니다. 그렇기 때문에 회사 외부에서도 회사에서 사용하는 아이피 대역처럼 사용할 수 있는 VPN을 활용하게 됩니다. 제가 다니고 있는 회사에서는 <strong>TLS 프로토콜을 적용하여 통신하는 OpenVPN을 사용</strong>하고 있으며 여자친구가 일하는 회사에서는 Pulse Secure와 함께 <a href="https://vip.symantec.com/">VIP Access</a>을 사용하여 2단계 인증까지 요구하기도 합니다.</p><p>이 글을 보신 여러분들도 인터넷 접속을 위해 할당받은 외부 아이피를 확인해보고 한국인터넷진흥원의 WHOIS 서비스를 통해 어느 지역까지 추적되는지 경험해보시기 바랍니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 IT 인프라를 구성하는 IP 대역과 NAT 그리고 IP를 활용한 위치 추적에 대해서 알아봅니다. &lt;/p&gt;
&lt;h2 id=&quot;IP-대역&quot;&gt;&lt;a href=&quot;#IP-대역&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="IP Band" scheme="https://kdevkr.github.io/tags/IP-Band/"/>
    
    <category term="NAT" scheme="https://kdevkr.github.io/tags/NAT/"/>
    
    <category term="Location Tracking" scheme="https://kdevkr.github.io/tags/Location-Tracking/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Beanstalk S3 Authentication</title>
    <link href="https://kdevkr.github.io/elastic-beanstalk-s3-auth/"/>
    <id>https://kdevkr.github.io/elastic-beanstalk-s3-auth/</id>
    <published>2021-09-02T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 Elastic Beanstalk 구성 시 S3 프라이빗 저장소에서 파일을 받아오는 것을 알아보고자 합니다. 지난 <a href="../tls-offload">TLS 오프로드</a>에서 Nginx 에서 사용할 SSL 인증서를 Beanstalk 환경 구성 파일의 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/customize-containers-ec2.html#linux-files">파일 키</a>를 사용하여 생성했었습니다. 하지만, 보안을 중요시하는 회사라면 애플리케이션 소스 번들에 인증서와 개인키를 포함시키는 것을 허용하지 않을 수 있습니다. 그렇기 때문에 애플리케이션 소스 번들에 인증서를 포함하지 않고 애플리케이션 배포 단계에서 가져올 수 있는 방안을 마련해야합니다.</p><h2 id="Beanstalk-S3-Auth"><a href="#Beanstalk-S3-Auth" class="headerlink" title="Beanstalk S3 Auth"></a>Beanstalk S3 Auth</h2><p>Beanstalk 확장 구성 파일에서 CloudFormation의 <a href="https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-resource-authentication.html">AWS::CloudFormation::Authentication</a> 리소스를 사용하여 S3 버킷에 대한 자격 증명을 지정할 수 있고 인증을 수행하여 S3 저장소에 등록되어있는 인증서를 가져올 수 있습니다. <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/https-storingprivatekeys.html">프라이빗 키를 Amazon S3에 안전하게 저장</a>에서 알려주는 대로 Beanstalk 구성 시 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/ebextensions-functions.html#ebextensions-functions-getoptionsetting">Fn::GetOptionSetting</a> 함수를 활용하면 됩니다.</p><h3 id="S3-Bucket-Policy"><a href="#S3-Bucket-Policy" class="headerlink" title="S3 Bucket Policy"></a>S3 Bucket Policy</h3><p>먼저, <strong>AWS::CloudFormation::Authentication</strong> 리소스로 S3 버킷에 대한 자격 증명을 가질 수 있도록 S3 버킷에 보안 정책을 설정해야 합니다. 일반적으로 Beanstalk으로 애플리케이션을 배포하는 경우 <strong>aws-elasticbeanstalk-ec2-role</strong>을 인스턴스 프로파일로 가지게 됩니다. 인증서 파일이 저장된 S3 버킷은 퍼블릭 액세스가 차단되어있으므로 EC2 인스턴스가 <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/add-bucket-policy.html">버킷에 대한 권한을 가지도록 정책을 추가</a>합니다.</p><p><img data-src="/images/posts/elastic-beanstalk-s3-auth-01.png"></p><h3 id="Extend-Nginx"><a href="#Extend-Nginx" class="headerlink" title="Extend Nginx"></a>Extend Nginx</h3><p>이제 이전에 작성하였던 SSL 인증서를 만들어내는 구성 파일을 S3에서 받아오도록 작성해야합니다. files 키의 <strong>content</strong> 항목을 제거하고 다음의 항목을 추가합니다.</p><ul><li>source : S3 인증서 오브젝트 URL</li><li>authentication : 인증 속성 이름</li></ul><figure class="highlight yaml"><figcaption><span>.ebextensions/nginx-cert.config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">Resources:</span></span><br><span class="line">    <span class="attr">AWSEBAutoScalingGroup:</span></span><br><span class="line">        <span class="attr">Metadata:</span></span><br><span class="line">            <span class="attr">AWS::CloudFormation::Authentication:</span></span><br><span class="line">                <span class="attr">S3Auth:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">S3</span></span><br><span class="line">                    <span class="attr">buckets:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">mambo-cert</span></span><br><span class="line">                    <span class="attr">roleName:</span></span><br><span class="line">                        <span class="attr">Fn::GetOptionSetting:</span></span><br><span class="line">                            <span class="attr">Namespace:</span> <span class="string">aws:autoscaling:launchconfiguration</span></span><br><span class="line">                            <span class="attr">OptionName:</span> <span class="string">IamInstanceProfile</span></span><br><span class="line">                            <span class="attr">DefaultValue:</span> <span class="string">aws-elasticbeanstalk-ec2-role</span></span><br><span class="line"><span class="attr">files:</span></span><br><span class="line">    <span class="string">&quot;/etc/nginx/cert/server.crt&quot;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">https://mambo-cert.s3.ap-northeast-2.amazonaws.com/server.crt</span></span><br><span class="line">        <span class="attr">authentication:</span> <span class="string">S3Auth</span></span><br><span class="line">    <span class="string">&quot;/etc/nginx/cert/server.key&quot;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">https://mambo-cert.s3.ap-northeast-2.amazonaws.com/server.key</span></span><br><span class="line">        <span class="attr">authentication:</span> <span class="string">S3Auth</span></span><br><span class="line">    <span class="string">&quot;/etc/nginx/cert/server.ca-bundle&quot;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">https://mambo-cert.s3.ap-northeast-2.amazonaws.com/server-ca-bundle</span></span><br><span class="line">        <span class="attr">authentication:</span> <span class="string">S3Auth</span></span><br><span class="line"></span><br><span class="line"><span class="attr">commands:</span></span><br><span class="line">    <span class="attr">00-chain-ca-bundle:</span></span><br><span class="line">        <span class="attr">cwd:</span> <span class="string">/etc/nginx/cert</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">cat</span> <span class="string">server.crt</span> <span class="string">server.ca-bundle</span> <span class="string">&gt;</span> <span class="string">server-ca.pem</span></span><br><span class="line">            <span class="string">chown</span> <span class="string">nginx:nginx</span> <span class="string">server-ca.pem</span></span><br><span class="line">            <span class="string">chmod</span> <span class="number">400</span> <span class="string">server-ca.pem</span></span><br><span class="line">    <span class="attr">99-remove-bak:</span></span><br><span class="line">        <span class="attr">cwd:</span> <span class="string">/etc/nginx/cert</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">*.bak</span></span><br></pre></td></tr></table></figure><h3 id="Beanstalk-Resources"><a href="#Beanstalk-Resources" class="headerlink" title="Beanstalk Resources"></a>Beanstalk Resources</h3><p>아마존 웹 서비스의 리소스들은 CloudFormation으로 만들어지며 Elastic Beanstalk 환경도 <strong>CloudFormation 스택을 구성</strong>하여 만들어지게 됩니다.</p><figure class="highlight yaml"><figcaption><span>.ebextensions/nginx-cert.config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">Resources:</span></span><br><span class="line">    <span class="attr">AWSEBAutoScalingGroup:</span></span><br><span class="line">        <span class="attr">Metadata:</span></span><br><span class="line">            <span class="attr">AWS::CloudFormation::Authentication:</span></span><br><span class="line">                <span class="attr">S3Auth:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">S3</span></span><br><span class="line">                    <span class="attr">buckets:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">mambo-cert</span></span><br><span class="line">                    <span class="attr">roleName:</span></span><br><span class="line">                        <span class="attr">Fn::GetOptionSetting:</span></span><br><span class="line">                            <span class="attr">Namespace:</span> <span class="string">aws:autoscaling:launchconfiguration</span></span><br><span class="line">                            <span class="attr">OptionName:</span> <span class="string">IamInstanceProfile</span></span><br><span class="line">                            <span class="attr">DefaultValue:</span> <span class="string">aws-elasticbeanstalk-ec2-role</span></span><br></pre></td></tr></table></figure><p>그래서 구성 파일의 리소스 키를 정의하는 것은 CloudFormation 템플릿에 리소스를 추가하는 것과 같습니다. 위 예시에서는 Beanstalk 환경 시작 시 만들어지는 CloudFormation 스택에 미리 정의된 웹 서버 환경의 리소스 항목인 <a href="https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html">AWSEBAutoScalingGroup</a>을 사용했습니다. </p><p>그리고 AWSEBAutoScalingGroup에는 <a href="https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html">LaunchConfiguration(AWS::AutoScaling::LaunchConfiguration)</a>라는 EC2 인스턴스에 대한 시작 구성을 정의하는 항목이 있으며 시작 구성에 정의된 내용 중에는 <a href="https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html#cfn-as-launchconfig-iaminstanceprofile">IamInstanceProfile</a> 속성이 있습니다. IamInstanceProfile 속성은 EC2 인스턴스에 대한 인스턴스 프로파일로 지정된 <strong>IAM Role</strong>에 대한 이름을 제공합니다.</p><p>따라서, Beanstalk 환경 구성 시 선택한 IAM Role을 가져와서 <strong>AWS::CloudFormation::Authentication</strong> 리소스를 활용해 S3 버킷에 대한 자격 증명을 지정한 것입니다. 우리는 앞서 aws-elasticbeanstalk-ec2-role이라는 IAM Role이 인증서가 저장된 S3 버킷에 읽기 권한을 부여했기 때문에 파일 키에 정의된 파일을 생성할 때 외부 소스(S3 저장소)에서 가져올 수 있게된 것입니다. 이렇게 해서 우리는 애플리케이션 소스 번들에 인증서를 포함시키지 않고 EC2 인스턴스에서만 접근할 수 있는 S3 버킷에 인증서를 저장하고 사용할 수 있는 구성을 할 수 있게 되었습니다.</p><p>이 글을 보시는 분들이 인증서의 개인키와 같은 민감한 파일들을 애플리케이션 소스 번들에 포함하고 있다면 프라이빗 S3 저장소에 저장하여 더 안전한 방식으로 애플리케이션을 배포하는 것을 고려해보시기 바랍니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 Elastic Beanstalk 구성 시 S3 프라이빗 저장소에서 파일을 받아오는 것을 알아보고자 합니다. 지난 &lt;a href=&quot;../tls-offload&quot;&gt;TLS 오프로드&lt;/a&gt;에서 Nginx </summary>
      
    
    
    
    
    <category term="S3" scheme="https://kdevkr.github.io/tags/S3/"/>
    
    <category term="Beanstalk" scheme="https://kdevkr.github.io/tags/Beanstalk/"/>
    
  </entry>
  
  <entry>
    <title>TLS 오프로드</title>
    <link href="https://kdevkr.github.io/tls-offload/"/>
    <id>https://kdevkr.github.io/tls-offload/</id>
    <published>2021-09-01T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 로드밸런서를 활용한 TLS 오프로드에 대해서 정리해보고자 합니다. 지난 <a href="../ssl-certificate">SSL 인증서</a>에서는 HTTPS를 웹 서비스에 적용하는 이유와 함께 SSL 인증서를 발급하고 TLS 핸드쉐이크를 어떤 방식으로 수행하는지를 확인했습니다. 이 글에서는 <strong>아마존 웹 서비스의 ELB(Elastic Load Balancing)에서 지원하는 TLS 핸드쉐이크 및 TLS 오프로딩 기능</strong>에 대해 알아보고 참고해야할 정보를 소개합니다.</p><h2 id="SSL-오프로드"><a href="#SSL-오프로드" class="headerlink" title="SSL 오프로드"></a>SSL 오프로드</h2><p><strong>TLS(SSL) 오프로드</strong>는 애플리케이션 서버에서 TLS 핸드쉐이크를 수행하지 않고 <strong>트래픽이 전달되기 전 로드밸런서에서 SSL 인증서를 관리하고 TLS 핸드쉐이크를 수행</strong>하는 것을 말합니다. 대부분의 웹 서비스는 애플리케이션 서버를 독립적으로 운용하지 않고 트래픽 규모에 따라 유연하게 확장하고 확장된 애플리케이션 서버에 트래픽을 균등하게 분산시키기 위하여 로드밸런서를 구성합니다. 아마존 웹 서비스의 ELB 로드밸런서 유형 중 NLB와 ALB는 SSL 인증서를 등록하고 클라이언트와 TLS 핸드쉐이크를 수행하여 트래픽이 EC2 인스턴스 또는 컨테이너로 전달하는 <strong>TLS 오프로딩 기능을 지원</strong>합니다.</p><h3 id="Mutual-TLS"><a href="#Mutual-TLS" class="headerlink" title="Mutual TLS"></a>Mutual TLS</h3><p>웹 서비스의 요구사항에 따라 애플리케이션 서버에서는 <strong>클라이언트의 X.509 인증서를 토대로 사용자 인증을 수행하고 요청을 처리</strong>할 수 있습니다. 이렇게 클라이언트와 애플리케이션 서버 모두 인증서를 전달하는 것을 <strong>Mutual TLS</strong>라고 합니다. 그리고 자바 기반의 애플리케이션 서버는 <strong>javax.servlet.request.X509Certificate</strong> 속성을 통해 <strong>X.509 인증서</strong>를 가져올 수 있습니다. </p><p>그러나 웹 요청이 로드밸런서에 의해 트래픽이 전달되는 경우 클라이언트 인증서를 포함하여 전달하는 것이 보장되지 않습니다. 일반적으로 Nginx를 로드밸런서를 사용하는 경우에는 요청 시 포함된 클라이언트의 인증서 정보가 <strong>X-SSL-CERT</strong>와 같은 <strong>비표준 헤더</strong>로 전달될 수 있도록 설정합니다. 이렇게 요청 헤더로 인증서를 애플리케이션 서버까지 전달하는 것은 애플리케이션 서버에서 클라이언트의 실제 아이피를 알기 위하여 사용되는 표준 헤더 <strong>X-Forwarded-For</strong>와 비슷한 목적으로 사용된다고 볼 수 있습니다.</p><h3 id="AWS-NLB"><a href="#AWS-NLB" class="headerlink" title="AWS NLB"></a>AWS NLB</h3><p>아마존 웹 서비스의 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/introduction.html">NLB(Network Load Balancer)</a>는 <strong>L4 레벨의 ELB 로드밸런서 유형</strong>입니다. NLB는 L4 레벨에서 로드밸런싱을 수행하며 프로토콜과 포트를 기반으로 지정된 하나 이상의 대상 그룹으로 요청을 전달하기 때문에 대규모 트래픽을 빠르게 EC2 인스턴스로 전달되도록 지원합니다. </p><p><a href="https://aws.amazon.com/ko/elasticloadbalancing/features/#Product_comparisons">ELB의 로드밸런서 유형 비교</a>에서 나와있듯이 NLB는 TLS 오프로드를 지원하기 때문에 <strong>로드밸런서에 인증서를 등록하고 TLS 핸드쉐이크를 처리하도록 구성</strong>할 수 있게 됩니다. 다음과 같이 NLB의 리스너 설정 시 <strong>TLS 프로토콜</strong>을 선택하고 <strong>TLS 버전</strong>과 암호화 스위트 목록에 대한 <strong>보안 정책</strong> 그리고 <strong>SSL 인증서</strong>를 등록할 수 있습니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-01.png"></p><h4 id="ECC-인증서-미지원"><a href="#ECC-인증서-미지원" class="headerlink" title="ECC 인증서 미지원"></a>ECC 인증서 미지원</h4><p>TLS 오프로드를 지원한다고 나와있지만 <strong>모든 SSL 인증서를 지원하는 것은 아닙</strong>니다. 회사에서 사용중인 인증서와 같은 타원 곡선형 키를 사용하는 ECC 인증서를 등록하게 되면 아마존 웹 서비스로부터 알림을 받게되고 <strong>애플리케이션 서버로 트래픽이 전달되지 않는 상태</strong>가 될 수 있습니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-02.png"></p><p>NLB에 대한 리스너 설정 문서를 살펴보면 <strong>2048 이상의 비트를 사용하는 RSA 키 또는 EC 키로된 인증서를 지원하지 않는다</strong>라고 경고하고 있으며 문서를 살펴보기까지 이러한 정보를 확인할 수 있는 곳은 없었습니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-03.png"></p><p>의외로 많이 사용하고 있는 <strong>ECC 인증서에 대해서는 NLB에서 TLS 오프로드를 수행할 수 없기</strong> 때문에 애플리케이션 서버에서 SSL 인증서를 관리하고 TLS 핸드쉐이크를 수행해야합니다. 애플리케이션 서버 배포 시 Elastic Beanstalk을 사용하는 경우 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/java-se-platform.html">Java SE 플랫폼</a>을 통해 EC2 인스턴스에 <strong>Nginx를 활용하여 역방향 프록시를 구성</strong>할 수 있기 때문에 반드시 애플리케이션 서버에서 TLS 핸드쉐이크를 수행해야하는 것은 아닙니다.</p><blockquote><p>회사에서 운영중인 웹 서비스는 Nginx를 사용하지 않고 NLB에서 애플리케이션 서버로 트래픽이 전달되도록 구성했었지만 애플리케이션 서버 규모가 커짐으로 인하여 내부적으로 동작하는 작업이 많아짐에 따라 TLS 핸드쉐이크 부하를 애플리케이션 서버에서 분리하기 위하여 Nginx에서 TLS 오프로드를 수행하도록 전환할 예정입니다.</p></blockquote><h3 id="AWS-ALB"><a href="#AWS-ALB" class="headerlink" title="AWS ALB"></a>AWS ALB</h3><p>ECC 인증서를 지원하지 않는 NLB와 다르게 ALB(Application Load Balancer)는 <strong>4096 비트 키 길이의 RSA 인증서와 ECDSA로 서명된 EC 인증서를 지원</strong>합니다. <strong>회사에서 운영중인 웹 서비스를 NLB에서 ALB로 전환하지 않는 이유</strong>는 완전한 마이크로서비스 아키텍처가 아니므로 <strong>경로 기반</strong>으로 별도의 애플리케이션 서버로 전달해야하는 <strong>요구사항이 없기</strong> 때문입니다. 이러한 이유로 인해 빠르게 로드밸런서에서 애플리케이션 서버로 트래픽이 전달되도록 NLB를 사용하고 있습니다.</p><p>IT 분야는 시간이 지나면서 기술이 점차 발전하고 있습니다. 아마존 웹 서비스가 제공하는 서비스 기능도 발전하고 있음을 확인할 수 있는데 2019년에 작성된 <a href="https://lemontia.tistory.com/898">고정 세션 관련 글</a>에서는 NLB가 <strong>고정 세션 기능을 지원하지 않는다</strong>고 나와있지만 현재 ELB의 제품 비교표와 비교해보면 <strong>백엔드 암호화, 고정 세션 뿐만 아니라 다양한 기능을 지원</strong>하고 있습니다.</p><h4 id="ELB-TLSv1-3-미지원"><a href="#ELB-TLSv1-3-미지원" class="headerlink" title="ELB TLSv1.3 미지원"></a>ELB TLSv1.3 미지원</h4><p>아마존 웹 서비스의 ELB에서 TLS 오프로드 기능을 지원하지만 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">보안 정책</a>에 따라 TLS 핸드쉐이크를 수행하기 때문에 클라이언트는 TLS 1.3을 사용할 수 없습니다. <strong>TLS 1.3을 지원하기 위한 작업은 아직 진행중</strong>이므로 클라이언트에게 TLS 1.3을 지원하고자하는 경우에는 ELB에서 TLS 오프로드를 수행하도록 구성할 수 없고 NLB의 TCP 리스너를 설정하여 트래픽이 EC2 인스턴스로 전달되도록하고 <strong>EC2 인스턴스에 실행되어있는 Nginx를 통해 TLS 1.3을 사용할 수 있게 구성</strong>할 수 있습니다.</p><h2 id="Elastic-Beanstalk-TLS-오프로드"><a href="#Elastic-Beanstalk-TLS-오프로드" class="headerlink" title="Elastic Beanstalk TLS 오프로드"></a>Elastic Beanstalk TLS 오프로드</h2><p>ELB에서는 TLS 1.3을 지원하지 않으며 NLB에서는 ECC 인증서를 사용할 수 없다는 것을 알았으므로 <strong>Elastic Beanstalk</strong>으로 스프링 애플리케이션 배포 시 Nginx에서 SSL 인증서를 관리하고 <strong>클라이언트가 TLS 1.3 버전으로 TLS 핸드쉐이크를 수행할 수 있도록 할 수 있는가를 검증</strong>해보고 마무리 하겠습니다.</p><h3 id="Elastic-Beanstalk-Java-SE-플랫폼"><a href="#Elastic-Beanstalk-Java-SE-플랫폼" class="headerlink" title="Elastic Beanstalk Java SE 플랫폼"></a>Elastic Beanstalk Java SE 플랫폼</h3><p>스프링 애플리케이션을 배포하기 위해서는 Java SE 플랫폼 환경을 구성해야합니다. 이때, 샘플 애플리케이션으로 Beanstalk 환경을 시작하는 것이 좋습니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-04.png" alt="웹 서버 환경 선택"></p><p><img data-src="/images/posts/tls-offload/tls-offload-05.png" alt="샘플 애플리케이션으로 시작"></p><p>Beanstalk 환경 구성 시 로드밸런서를 설정하고 싶은 경우 <strong>추가 옵션 구성</strong>을 통해 사용자 정의 설정을 진행해야 합니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-06.png" alt="JVM 옵션 환경변수"></p><blockquote><p>배포하고 보니 오타가 있었네요 :)</p></blockquote><p><img data-src="/images/posts/tls-offload/tls-offload-07.png" alt="로드밸런싱 인스턴스"></p><p><img data-src="/images/posts/tls-offload/tls-offload-08.png" alt="NLB 선택 및 리스너 구성"></p><p>그리고 EC2 인스턴스 접근을 위한 키를 설정하는 등 부가 설정을 하고 환경을 생성하면 다음과 같이 샘플 애플리케이션이 배포되는 환경이 준비됩니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-09.png" alt="Java SE 플랫폼 환경 생성 완료"></p><blockquote><p>처음 환경을 구성할 때 오류가 발생하는 경우 Beanstalk에서는 환경 삭제 버튼이 활성화되지 않아 당황할 수 있으나 CloudFormation 서비스로 이동하여 Beanstalk 환경을 구성중인 스택을 삭제할 수 있습니다.</p></blockquote><h3 id="스프링-애플리케이션-패키징-및-Java-SE-플랫폼-확장"><a href="#스프링-애플리케이션-패키징-및-Java-SE-플랫폼-확장" class="headerlink" title="스프링 애플리케이션 패키징 및 Java SE 플랫폼 확장"></a>스프링 애플리케이션 패키징 및 Java SE 플랫폼 확장</h3><p>애플리케이션을 배포하기 위한 Java SE 플랫폼이 생성되었으니 스프링 애플리케이션을 패키징하여 <strong>Beanstalk에 배포하기 위한 소스 번들</strong> 파일을 만들어야 합니다. 소스 번들에는 패키징된 애플리케이션 Jar 파일과 함께 애플리케이션 실행를 위한 Procfile을 포함시켜야 합니다.</p><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">task procfile(<span class="attr">dependsOn:</span> bootJar) &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        <span class="keyword">new</span> File(<span class="string">&quot;build/libs&quot;</span>, <span class="string">&quot;Procfile&quot;</span>).text = <span class="string">&quot;web: java -Xmx1g -Dfile.encoding=UTF-8 -jar $&#123;bootJar.archiveName&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task awsbuild(<span class="attr">type:</span> Zip, <span class="attr">dependsOn:</span> procfile) &#123;</span><br><span class="line">    from (<span class="string">&#x27;.beanstalk/.ebextensions&#x27;</span>) &#123; into <span class="string">&#x27;.ebextensions&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;.beanstalk/.platform&#x27;</span>) &#123; into <span class="string">&#x27;.platform&#x27;</span> &#125;</span><br><span class="line">    from (<span class="string">&#x27;build/libs&#x27;</span>) &#123;</span><br><span class="line">        include(<span class="string">&#x27;Procfile&#x27;</span>)</span><br><span class="line">        include(bootJar.archiveName)</span><br><span class="line">    &#125;</span><br><span class="line">    baseName = <span class="string">&#x27;beanstalk&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>자세한 내용은 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/java-se-procfile.html">Procfile을 사용하여 애플리케이션 프로세스 구성</a>을 참고하세요. </p></blockquote><h4 id="Java-SE-플랫폼-확장-구성"><a href="#Java-SE-플랫폼-확장-구성" class="headerlink" title="Java SE 플랫폼 확장 구성"></a>Java SE 플랫폼 확장 구성</h4><p>Beanstalk는 <strong>.ebextensions</strong>와 <strong>.platform</strong>을 활용하여 EC2 인스턴스 환경을 확장할 수 있는 기능을 지원합니다. 우리는 HTTP로 실행되는 애플리케이션 서버와 함께 TLS 오프로드를 수행할 Nginx를 구성해야하므로 다음과 같이 <strong>구성 및 플랫폼 확장 파일을 생성</strong>합니다.</p><p><strong>Nginx에서 사용할 SSL 인증서 파일 생성</strong></p><figure class="highlight yaml"><figcaption><span>beanstalk/.ebextensions/nginx-certificates.config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">files:</span></span><br><span class="line">    <span class="string">/etc/nginx/cert/server.crt:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">            <span class="comment">#### PROTECTED ####</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">    <span class="string">/etc/nginx/cert/server.key:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">EC</span> <span class="string">PARAMETERS-----</span></span><br><span class="line">            <span class="comment">#### PROTECTED ####</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">EC</span> <span class="string">PARAMETERS-----</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">EC</span> <span class="string">PRIVATE</span> <span class="string">KEY-----</span></span><br><span class="line">            <span class="comment">#### PROTECTED ####</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">EC</span> <span class="string">PRIVATE</span> <span class="string">KEY-----</span></span><br><span class="line">    <span class="string">/etc/nginx/cert/server-ca-bundle:</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;000400&quot;</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">            <span class="comment">#### PROTECTED ####</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">            <span class="comment">#### PROTECTED ####</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">            <span class="string">-----BEGIN</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line">            <span class="comment">#### PROTECTED ####</span></span><br><span class="line">            <span class="string">-----END</span> <span class="string">CERTIFICATE-----</span></span><br><span class="line"></span><br><span class="line"><span class="attr">commands:</span></span><br><span class="line">    <span class="attr">00-chain-ca-bundle:</span></span><br><span class="line">        <span class="attr">cwd:</span> <span class="string">/etc/nginx/cert</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">cat</span> <span class="string">server.crt</span> <span class="string">server-ca-bundle</span> <span class="string">&gt;</span> <span class="string">server-ca.pem</span></span><br><span class="line">            <span class="string">chown</span> <span class="string">nginx:nginx</span> <span class="string">server-ca.pem</span></span><br><span class="line">            <span class="string">chmod</span> <span class="number">400</span> <span class="string">server-ca.pem</span></span><br><span class="line">    <span class="attr">99-remove-bak:</span></span><br><span class="line">        <span class="attr">cwd:</span> <span class="string">/etc/nginx/cert</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">*.bak</span></span><br></pre></td></tr></table></figure><blockquote><p>회사 도메인에 대한 인증서이므로 인증서 내용은 마스킹 처리하였습니다.</p></blockquote><p><strong>Nginx 설정 파일 확장</strong></p><figure class="highlight nginx"><figcaption><span>beanstalk/.platform/nginx/conf.d/elasticbeanstalk/00_application.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본으로 만들어지는 00_application.conf 파일은 80 포트에 대하여 5000 포트로 전달되도록 구성하므로 443 포트로 리다이렉트하도록 확장합니다.</p><figure class="highlight nginx"><figcaption><span>beanstalk/.platform/nginx/nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>                    nginx;</span><br><span class="line"><span class="attribute">error_log</span>               /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>                     /var/run/nginx.pid;</span><br><span class="line"><span class="attribute">worker_processes</span>        auto;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span>    <span class="number">32768</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span>  <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>         /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>    application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>      main    <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                            <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                            <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">map</span> $http_upgrade $connection_upgrade &#123;</span><br><span class="line">      <span class="attribute">default</span>     <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>                <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">access_log</span>            /var/log/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">client_header_timeout</span> <span class="number">60</span>;</span><br><span class="line">        <span class="attribute">client_body_timeout</span>   <span class="number">60</span>;</span><br><span class="line">        <span class="attribute">keepalive_timeout</span>     <span class="number">60</span>;</span><br><span class="line">        <span class="attribute">gzip</span>                  <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">gzip_comp_level</span>       <span class="number">4</span>;</span><br><span class="line">        <span class="attribute">gzip_types</span>            text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Include the Elastic Beanstalk generated locations</span></span><br><span class="line">        <span class="attribute">include</span> conf.d/elasticbeanstalk/<span class="regexp">*.conf</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>                   <span class="number">443</span> ssl default_server;</span><br><span class="line">        <span class="attribute">server_name</span>              springboot;</span><br><span class="line">        <span class="attribute">ssl_certificate</span>          /etc/nginx/cert/server-ca.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>      /etc/nginx/cert/server.key;</span><br><span class="line">        <span class="attribute">ssl_protocols</span>            TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span>              HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_verify_client</span>        optional_no_ca;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>          http://127.0.0.1:5000;</span><br><span class="line">            <span class="attribute">proxy_http_version</span>  <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>    Connection          $connection_upgrade;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>    Upgrade             $http_upgrade;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>    Host                $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>    X-Real-IP           $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>    X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>    X-SSL-CERT          $ssl_client_escaped_cert;</span><br><span class="line">            <span class="attribute">proxy_buffering</span>     <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>자세한 내용은 <a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/platforms-linux-extend.html">Elastic Beanstalk Linux 플랫폼 확장</a>을 참고하세요. <a href="https://github.com/awsdocs/elastic-beanstalk-samples">elastic-beanstalk-samples</a>처럼 샘플 파일도 공유되어있습니다.</p></blockquote><p>이제 샘플 애플리케이션 대신 우리가 준비한 애플리케이션 소스 번들을 업로드하면 Benstalk 엔진이 소스 번들을 추출하고 애플리케이션을 실행하게 됩니다. Route 53으로 Beanstalk 환경 주소를 DNS로 연결하고 접속해보면 다음과 같이 TLS 핸드쉐이크가 수행되었음을 확인할 수 있습니다.</p><p><img data-src="/images/posts/tls-offload/tls-offload-10.png"></p><p>NLB는 트래픽을 EC2 인스턴스의 443 포트로 전달했을 뿐 TLS 오프로드는 Nginx에서 수행하는 것으로 구성했기 때문에 브라우저에서는 TLS 1.3 버전으로 TLS 핸드쉐이크를 수행했습니다. 이렇게 <strong>아마존 웹 서비스에서 TLS 1.3을 지원하기 위해서는 NLB의 TCP 리스너와 Nginx의 TLS 오프로드를 활용하면 가능함을 검증</strong>했습니다.</p><h4 id="트러블슈팅"><a href="#트러블슈팅" class="headerlink" title="트러블슈팅"></a>트러블슈팅</h4><p>Elastic Beanstalk로 애플리케이션 배포하는 과정에서 생각보다 오류가 많을 수 있습니다. 이 내용은 <strong>Benstalk에서 애플리케이션 배포 시 발생하는 여러가지 문제를 해결하는데 도움이 되는 항목</strong>을 정리한 것입니다. 따라해보는 분들에게 도움이 되셨으면 하는 바램으로 공유합니다.</p><table><thead><tr><th>경로</th><th>용도</th><th></th></tr></thead><tbody><tr><td>/etc/nginx/</td><td>Nginx 구성</td><td></td></tr><tr><td>/var/app/current</td><td>애플리케이션 소스 번들 추출 경로</td><td></td></tr><tr><td>/var/log/eb-engine.log</td><td>Beanstalk 로그</td><td></td></tr><tr><td>/var/log/nginx</td><td>Nginx 로그</td><td></td></tr><tr><td>/var/log/web.stdout.out</td><td>웹 애플리케이션 로그</td><td></td></tr></tbody></table><p><strong>Beanstalk 로그</strong>는 Beanstalk 엔진이 플랫폼 확장 파일들을 실행하고 성공했는지 여부를 기록합니다. 이 로그를 통해 어느 단계에서 오류가 발생하여 애플리케이션 배포 및 전환이 실패하였는지 확인할 수 있는 중요한 로그입니다. 그리고 나머지 항목을 통해 설정한 구성 및 확장 파일이 제대로 추출되어 복사되었는지 Nginx가 ELB에 의해 전달된 트래픽을 애플리케이션까지 전달할 수 있는지를 확인할 수 있습니다.</p><p>Nginx에 대해서 자세히 아는 것은 아니므로 설정 파일이 잘못된 부분이 있을 수 있으니 양해 바라며 잘못된 점은 패드백 주시면 감사하겠습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 로드밸런서를 활용한 TLS 오프로드에 대해서 정리해보고자 합니다. 지난 &lt;a href=&quot;../ssl-certificate&quot;&gt;SSL 인증서&lt;/a&gt;에서는 HTTPS를 웹 서비스에 적용하는 이유와 함께</summary>
      
    
    
    
    
    <category term="Nginx" scheme="https://kdevkr.github.io/tags/Nginx/"/>
    
    <category term="TLS" scheme="https://kdevkr.github.io/tags/TLS/"/>
    
    <category term="ELB" scheme="https://kdevkr.github.io/tags/ELB/"/>
    
  </entry>
  
  <entry>
    <title>SSL 인증서</title>
    <link href="https://kdevkr.github.io/ssl-certificate/"/>
    <id>https://kdevkr.github.io/ssl-certificate/</id>
    <published>2021-08-27T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 웹사이트 접속 시 필수적으로 사용되는 HTTPS 그리고 SSL 인증서에 대해 이야기하려합니다. 회사에서 운영중인 웹 서비스를 HTTPS로 배포되고있으나 정작 SSL에 대한 부분은 머리속에서 복잡하게 얽혀 제대로 정리되지않은 상태입니다. 이 글을 작성하면서 얽혀있는 부분을 하나씩 풀어나가면서 SSL에 대한 개념을 확립해보고자 합니다.</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>일반 사람들이 브라우저를 이용해서 웹 사이트에 접속할 때 HTTPS가 적용되었는지에 대해서 신경쓰지 않습니다. 하지만, 애플리케이션 서버를 운영하는 사람들에게 HTTPS는 사용자의 민감한 정보를 암호화해서 위조 또는 변조되는 것을 방지할 수 있는 아주 중요한 표준 보안 기술입니다. </p><p>크롬과 같은 브라우저에서는 HTTPS와 같은 보안 프로토콜이 적용되었는지를 확인하고 사용자들에게 신뢰할 수 있는 사이트인지를 안내합니다. 브라우저 주소창 옆에 느낌표나 자물쇠 아이콘을 보신적 있으신가요? 여러분의 웹 사이트가 자물쇠 아이콘을 가진다면 보안 프로토콜을 사용하고 있으며 신뢰할 수 있는 사이트라고 할 수 있습니다.</p><p>HTTPS는 HTTP라는 전송 프로토콜과 함께 데이터를 암복호화하기 위한 보안 프로토콜을 같이 사용해야하기 때문에 추가적인 오버헤드가 발생하는 부분에 대해서는 감안해야합니다. 하지만, 최근 컴퓨터들의 CPU 성능이 좋아짐에 따라서 암복호화 걸리는 시간은 상당히 미미하며 네트워크 기술의 발전으로 레이턴시도 줄어들었기 때문에 HTTPS을 사용한다고해서 사용자가 요청하고 응답하기까지의 시간이 큰 차이를 보이지는 않습니다.</p><h3 id="TLS-핸드쉐이크"><a href="#TLS-핸드쉐이크" class="headerlink" title="TLS 핸드쉐이크"></a>TLS 핸드쉐이크</h3><p>HTTPS가 적용된 애플리케이션 서버와 통신하기 위해서는 클라이언트인 브라우저가 애플리케이션 서버와 TLS 핸드쉐이크 과정을 수행해야합니다.</p><p><img data-src="https://images.ctfassets.net/slt3lc6tev37/5aYOr5erfyNBq20X5djTco/3c859532c91f25d961b2884bf521c1eb/tls-ssl-handshake.png" alt="Cloudflare - What is a TLS handshake?"></p><p><strong>TLS 핸드쉐이크</strong>는 웹 요청에 대한 신뢰성 여부를 확인하거나 통신 데이터를 암복호화하기 위한 방식을 서로 교환하기 위해 수행하는 과정입니다. 위 클라우드플레어에서 설명하는 TLS 핸드쉐이크 과정을 살펴보면 애플리케이션 서버가 클라이언트에게 인증서(Certificate)를 제공하고 서로 암호화 방식(CipherSpec)을 교환하는 것을 확인할 수 있습니다.</p><p>크롬 브라우저의 개발자 도구 중 보안 탭에서 TLS 핸드쉐이크 과정에 의해 결정된 여러가지 사항들을 확인할 수 있습니다.</p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-01.png" alt="네이버 웹 사이트"></p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-02.png" alt="회사 웹 사이트"></p><p>네이버 웹 사이트는 <strong>DigiCert</strong>라는 인증기관에서 발행한 SSL 인증서를 제공하였고 <strong>TLS 1.3</strong> 버전과 함께 <strong><a href="https://en.wikipedia.org/wiki/Curve25519">X25519</a></strong> 방식으로 키를 교환하고 <strong>AES_256_GCM</strong>으로 암호화하며 회사에서 운영중인 웹 서비스는 네이버와 다르게 <strong>TLS 1.2</strong>, <strong>ECDHE_ECDSA</strong>, <strong>AES_128_GCM</strong>을 사용합니다. 여러분들도 HTTPS를 적용한 웹 사이트를 운영중이거나 궁금한 사이트가 있다면 어떤 사항으로 결정되었는지 확인해보시기 바랍니다. TLS 핸드쉐이크 과정에 의해 결정되는 사항들은 애플리케이션 서버가 지원하는 사항들과 클라이언트에 따라 다를 수 있습니다. 이제 우리는 이러한 사항들에 대해서 하나씩 알아보도록 하죠.</p><h3 id="TLS-버전"><a href="#TLS-버전" class="headerlink" title="TLS 버전"></a>TLS 버전</h3><p>TLS 버전은 TLS 핸드쉐이크 과정을 수행하는 방식을 말합니다. 당연스럽게도 버전이 높은 TLS 1.3이 TLS 1.2보다 효율적인 방식이라고 할 수 있습니다. 클라이언트는 애플리케이션 서버에서 지원하는 TLS 버전 중 가장 높은 버전으로 TLS 핸드쉐이크를 수행할 수 있습니다. 만약, 클라이언트가 TLS 1.1까지만 사용할 수 있는데 애플리케이션 서버가 TLS 1.2 이상을 요구한다면 일치하는 TLS 버전이 없기 때문에 애플리케이션 서버는 TLS 1.1을 사용하고자하는 클라이언트 요청을 거부하게 됩니다.</p><p>크롬 브라우저는 이미 <a href="https://www.chromestatus.com/feature/5759116003770368">TLS 1.0과 TLS 1.1 버전을 사용하지 않기 때문에</a> 여러분의 애플리케이션 서버는 최소한 TLS 1.2 버전을 사용할 수 있도록 지원해야합니다. </p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-12.png"></p><p>위는 회사에서 운영중인 애플리케이션 서버의 로그를 살펴본 경우로 <strong>SSLv3, TLSv1.0, TLS v1.1</strong>등의 TLS 버전을 사용하려는 클라이언트 요청이 거부된 것이 오류 로그로 출력된 상황을 보여줍니다. 이 애플리케이션 서버는 AWS Beanstalk와 함께 NLB(Network Load Balancer)를 사용하며 NLB는 TCP 트래픽에 대하여 분산된 애플리케이션 서버로 프록시되도록 구성했기때문에 L4 로드밸런서에서 TLS 핸드쉐이크가 처리되지 않았음을 보여주는 것이기도 합니다.</p><blockquote><p>NLB에서 TLS 핸드쉐이크를 수행하도록 설정할 수도 있으며 IT 인프라 상 TLS 핸드쉐이크를 애플리케이션 서버에서 수행하는 것이 잘못된 구성은 아닙니다.</p></blockquote><h4 id="HTTP-3-그리고-QUIC"><a href="#HTTP-3-그리고-QUIC" class="headerlink" title="HTTP/3 그리고 QUIC"></a>HTTP/3 그리고 QUIC</h4><p>통신 프로토콜에 대해서 관심이 있는 분들은 QUIC 이라고하는 전송 프로토콜에 대해서 들어보신 적 있으실 겁니다. TCP가 아닌 오버헤드가 적은 UDP를 사용하는 프로토콜로 구글 웹 사이트에 대해 TLS 핸드쉐이크 과정에 의해 결정된 사항을 확인해보면 다음과 같이 TLS가 아닌 QUIC을 사용한 것으로 확인할 수 있습니다.</p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-03.png"></p><p>QUIC은 TLS를 기본으로 사용하도록 되어있으며 TLS는 보안 프로토콜이기 때문에 HTTP가 아닌 전송 프로토콜과도 사용할 수 있다는 것을 보여주는 예 입니다. 구글 웹 사이트 뿐만 아니라 여러분이 라이브러리등 정적 컨텐츠를 받아오기 위해 사용하는 CDN 서버를 살펴보면 <strong>h3-29</strong>라고 하는 QUIC의 표준 이름을 확인할 수 있습니다.</p><p>아무튼 다시 TLS 버전에 대한 사항을 더 알아보도록 하겠습니다. 국내 개발자 커뮤니티 중 하나인 OKKY 사이트의 애플리케이션 서버에서 지원하는 TLS 버전을 확인해보기 위해 <a href="https://gf.dev/tls-test">Check TLS Version</a>을 수행해본 결과입니다.</p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-04.png"></p><p>TLS 1.3을 제외한 나머지 버전을 지원하는 것으로 리포트 되었습니다. 다시 말하지만 크롬 브라우저는 TLS 1.2 이상을 지원하기 때문에 애플리케이션 서버가 TLS 1.3을 지원하지 않더라도 아무런 문제가 없습니다. 사람들이 많이 사용하는 크롬 브라우저에서 TLS 1.2 지원하지않도록 발표하면 애플리케이션 서버에서 TLS 1.3을 지원하도록 변경하는 것은 불가피한 상황이긴 합니다. 물론, 회사에서 운영중인 애플리케이션 서버도 마찬가지인 상황입니다.</p><h3 id="암호화-스위트"><a href="#암호화-스위트" class="headerlink" title="암호화 스위트"></a>암호화 스위트</h3><p>암호화 스위트(Cipher Suite)는 <strong>키 교환</strong>, <strong>전자 서명</strong>, <strong>암호화</strong> 그리고 <strong>데이터 무결성</strong>에 대한 알고리즘을 조합한 암호화 방식을 지칭합니다. 앞서 TLS 핸드쉐이크 과정에서 결정된 사항 중 <strong>ECDHE_ECDSA</strong> 그리고 <strong>AES_128_GCM</strong>이 암호화 스위트라고 할 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [프로토콜]_[키 교환 알고리즘]_[전자 서명 알고리즘]_WITH_[암호화 알고리즘]_[데이터 무결성]</span></span><br><span class="line">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</span><br></pre></td></tr></table></figure><p>암호화 스위트는 위와 같은 구조를 가지도록 조합된 문자열으로 표현하기 때문에 아래와 같이 다시 나열해보겠습니다.</p><ul><li>TLS : 프로토콜</li><li>ECDHE : 타원 곡선 디피 헬만 키 교환</li><li>ECDSA : 타원 곡선 디지털 서명</li><li>AES_128_GCM : 128 비트 블록 갈루와/카운트 모드의 AES 암호화</li><li>SHA256 : 256비트 해시 알고리즘</li></ul><p>보안 전문가가 아니라면 ECDHE-ECDSA가 어떤 원리도 동작하는지까지는 알 필요는 없으며 어떻게 키 교환을 하고 어떤 방식으로 서명하며 어떻게 암호화하는지만 구분할 수 있으면 됩니다. 검색해보시더라도 보안 기술을 이해하기는 쉽지 않으실 겁니다. (우리의 시간은 소중하니까요…)</p><p>이러한 암호화 스위트는 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/create-tls-listener.html">AWS의 ELB(Elastic Load Balancing)의 보안 정책</a>에서도 정책별 지원 여부를 확인할 수 있습니다. </p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-13.png" alt="ELB Security Policy"></p><h2 id="SSL-인증서"><a href="#SSL-인증서" class="headerlink" title="SSL 인증서"></a>SSL 인증서</h2><p>TLS 핸드쉐이크 과정에서 클라이언트가 애플리케이션 서버로부터 받는 SSL 인증서는 브라우저 해당 사이트를 신뢰할 수 있는지를 판단할 수 있는 중요한 사항입니다. 브라우저에서는 자체적으로 <strong>신뢰할 수 있는 인증 기관(CA)</strong> 에 대해 관리하거나 운영체제에 등록된 루트 인증 기관에 대한 정보를 활용해서 서버에서 제공하는 SSL 인증서가 신뢰할 수 있는 기관으로부터 발급된 것인지 확인하는 과정을 거치게 됩니다.</p><p>일반적으로 서버에서 제공받은 SSL 인증서는 루트 인증 기관(CA)에서 인증하는 <strong>중간 인증 기관(ICA)</strong> 으로부터 발급받은 인증서이며 이를 <strong>체인 인증서</strong>라고 합니다. <a href="https://sectigo.com/">Sectigo</a>와 <a href="https://www.digicert.com/kr/">DigiCert</a> 그리고 <a href="https://www.globalsign.com/en">GlobalSign</a>은 많이 사용되어지는 신뢰할 수 있는 루트 인증 기관입니다. </p><p>암호화 스위트 중 ECDSA와 같은 타원 곡선 디지털 서명으로 발급된 인증서를 <strong>ECC 인증서</strong>라고하며 일반적으로 많이 사용해왔던 RSA 기반의 인증서보다 트래픽이 많은 서비스에서 암복호화에 대한 부하를 줄이기 위해 사용하는 인증서입니다.</p><p>이 글에서는 타원 곡선형 서명 방식으로 발급하는 ECC 인증서를 만들어볼 예정입니다.</p><h3 id="자체-서명-인증서"><a href="#자체-서명-인증서" class="headerlink" title="자체 서명 인증서"></a>자체 서명 인증서</h3><p>자체 서명 인증서는 신뢰할 수 있는 인증 기관으로부터 발급받지 않고 직접 만드는 인증서를 말합니다. 애플리케이션 개발 단계에서 자체 서명 인증서를 발급하여 사용하는 것은 도메인을 구입하고 인증 기관으로부터 인증서를 받기까지의 과정을 당장 수행하지 않아도 되는 좋은 방법입니다.</p><p>보유중인 도메인이 있다면 <a href="https://letsencrypt.org/">Let’s Encrypt</a>을 통해 무료로 SSL 인증서를 발급받을수도 있습니다. 저는 보유중인 도메인이 없기 때문에 OpenSSL 또는 자바의 Keystore 도구를 사용해서 자체 서명 인증서를 만들어볼 예정입니다.</p><p>이 글에서는 인증 기관에서 애플리케이션 서버에 대한 인증서를 발급할 때 서명해주는 것과 동일하게 자체 서명 CA 인증서를 만들고 이것으로 서명된 서버 인증서를 발급하는 과정을 보여줍니다. 이 과정을 통해 여러분은 발급받은 SSL 서버 인증서가 어떤 과정을 거쳐 발급되었는지를 이해할 수 있습니다.</p><h4 id="자체-서명-CA-인증서-발급"><a href="#자체-서명-CA-인증서-발급" class="headerlink" title="자체 서명 CA 인증서 발급"></a>자체 서명 CA 인증서 발급</h4><p>먼저, 로컬 호스트에서는 신뢰할 수 있다고 보장하는 CA 인증서를 발급합니다. 인증서는 <a href="(https://www.sslcert.co.kr/guides/kb/54)">다양한 형식</a>으로 만들어질 수 있으나 OpenSSL 도구를 사용하여 인증서를 만들면 PEM 형식을 가지게 됩니다. 만약, 여러분이 인증 기관으로부터 발급받는 인증서 형식이 다르더라도 다른 형식의 인증서로 변환할 수 있으니 걱정하지 않으셔도 됩니다. 예를 들어, 발급된 PEM 형식의 서버 인증서를 스프링 애플리케이션에서 사용하기 위해 KeyStore 형식의 인증서로 변환해야하는 경우를 말합니다.</p><p>OpenSSL으로 자체 서명 CA 인증서를 만들기 위해서는 개인키와 인증서 서명 요청(CSR)을 먼저 생성해야합니다. 앞서 언급했던 것 처럼 일반적으로 발급하는 RSA 기반의 개인키가 아닌 ECC 인증서를 발급하기 위한 <strong>ECDSA 기반의 개인키</strong>를 만들겠습니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># ECDSA 기반의 개인키 생성</span></span><br><span class="line"><span class="built_in">PS</span> openssl ecparam <span class="literal">-out</span> ca.key <span class="literal">-name</span> prime256v1 <span class="literal">-genkey</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 인증서 서명 요청(CSR) 생성</span></span><br><span class="line"><span class="built_in">PS</span> openssl req <span class="literal">-new</span> <span class="literal">-sha256</span> <span class="literal">-subj</span> /C=KO/ST=None/L=None/O=None/CN=CA <span class="literal">-key</span> ca.key <span class="literal">-out</span> ca.csr</span><br></pre></td></tr></table></figure><p>위 명령어 예시에서 개인키를 만들때 사용된 <strong>prime256v1</strong>은 타원 곡선형 서명 방식을 지칭하는 이름입니다. 명령어를 수행하고나서 개인키와 인증서 서명 요청 파일이 만들어졌으면 다음의 명령어를 수행해서 자체 서명 CA 인증서를 발급합니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> openssl x509 <span class="literal">-req</span> <span class="literal">-sha256</span> <span class="literal">-days</span> <span class="number">1095</span> <span class="operator">-in</span> ca.csr <span class="literal">-signkey</span> ca.key <span class="literal">-out</span> ca.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject=C = KO, ST = None, L = None, O = None, CN = CA</span><br><span class="line">Getting Private key</span><br></pre></td></tr></table></figure><p>-days 옵션으로 인해 만들어진 자체 서명 CA 인증서는 3년(1095일)까지 유효하게 됩니다. 일반적으로 인증 기관의 인증서는 서버 인증서보다 긴 만료일자를 가지게 됩니다. 서버 인증서 뿐만 아니라 루트 인증 기관의 CA 인증서가 언제 만료되는지를 확인하는 것도 중요합니다.</p><h4 id="자체-서명-서버-인증서-발급"><a href="#자체-서명-서버-인증서-발급" class="headerlink" title="자체 서명 서버 인증서 발급"></a>자체 서명 서버 인증서 발급</h4><p>자체 서명한 CA 인증서가 준비되었으니 CA 인증서로 서명한 서버 인증서를 발급합니다. CA 인증서를 만들때와 동일하게 개인키와 인증서 서명 요청 파일을 생성합니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> openssl ecparam <span class="literal">-out</span> server.key <span class="literal">-name</span> prime256v1 <span class="literal">-genkey</span></span><br><span class="line"><span class="built_in">PS</span> openssl req <span class="literal">-new</span> <span class="literal">-sha256</span> <span class="literal">-subj</span> /C=KO/ST=None/L=None/O=None/CN=localhost <span class="literal">-key</span> server.key <span class="literal">-out</span> server.csr</span><br></pre></td></tr></table></figure><p>자체 서명 서버 인증서를 만들때는 CA 옵션을 사용해서 서버 인증서가 CA 인증서에 의해 서명되도록 해야합니다. </p><p>서버 인증서를 만들기에 앞서 주체 이름인 localhost 대신에 사용할 수 있는 식별 이름인 SAN(Subject Alternative Name)을 적용하기 위한 파일을 만듭니다. SAN을 적용해보는 이유는 하나의 인증서로 여러 도메인을 식별할 수 있음을 확인하기 위함입니다.</p><figure class="highlight plain"><figcaption><span>san.ext</span></figcaption><table><tr><td class="code"><pre><span class="line">authorityKeyIdentifier&#x3D;keyid,issuer</span><br><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">IP.1 &#x3D; 127.0.0.1</span><br><span class="line">DNS.1 &#x3D; localhost</span><br><span class="line">DNS.2 &#x3D; mambo.kr</span><br></pre></td></tr></table></figure><p>인증 기관에서 발급하는 SSL 인증서는 유효 기간을 1년으로 설정하므로 398일 동안 유효하도록 만듭니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 서버 인증서 발급</span></span><br><span class="line"><span class="built_in">PS</span> openssl x509 <span class="literal">-req</span> <span class="literal">-sha256</span> <span class="literal">-days</span> <span class="number">398</span> <span class="operator">-in</span> server.csr <span class="literal">-CA</span> ca.crt <span class="literal">-CAkey</span> ca.key <span class="literal">-CAcreateserial</span> <span class="literal">-out</span> server.crt <span class="literal">-extfile</span> san.ext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 서버 인증서 조회</span></span><br><span class="line"><span class="built_in">PS</span> openssl x509 <span class="operator">-in</span> server.crt <span class="literal">-text</span> <span class="literal">-noout</span></span><br><span class="line">Certificate:</span><br><span class="line">    <span class="keyword">Data</span>:</span><br><span class="line">        Version: <span class="number">3</span> (<span class="number">0</span>x2)</span><br><span class="line">        Serial Number:</span><br><span class="line">            <span class="number">66</span><span class="emoji" alias="ab" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8">&#x1f18e;</span>bb:ed:<span class="number">19</span>:f3:c7:<span class="number">37</span>:<span class="number">9</span>d:d6:<span class="number">5</span>d:<span class="number">29</span>:da:<span class="number">03</span>:<span class="number">7</span>d:b9:<span class="number">4</span>f:<span class="number">53</span>:<span class="number">7</span>c:b7</span><br><span class="line">        Signature Algorithm: ecdsa<span class="literal">-with</span><span class="literal">-SHA256</span></span><br><span class="line">        Issuer: C = KO, ST = None, L = None, O = None, CN = CA</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Aug <span class="number">27</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">54</span> <span class="number">2021</span> GMT</span><br><span class="line">            Not After : Sep <span class="number">29</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">54</span> <span class="number">2022</span> GMT</span><br><span class="line">        Subject: C = KO, ST = None, L = None, O = None, CN = localhost</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: id<span class="literal">-ecPublicKey</span></span><br><span class="line">                Public<span class="literal">-Key</span>: (<span class="number">256</span> bit)</span><br><span class="line">                pub:</span><br><span class="line">                    <span class="number">04</span>:<span class="number">74</span>:<span class="number">06</span>:a3:<span class="number">39</span>:<span class="number">91</span>:<span class="number">2</span>e:<span class="number">4</span>b:cc:<span class="number">45</span>:<span class="number">40</span>:e8:b0:f8:a3:</span><br><span class="line">                    <span class="number">96</span>:<span class="number">69</span>:<span class="number">91</span>:<span class="number">66</span>:ef:d3:b3:<span class="number">93</span>:<span class="number">8</span>d:e5:<span class="number">09</span>:<span class="number">78</span>:aa:a5:af:</span><br><span class="line">                    <span class="number">67</span>:<span class="number">9</span>d:<span class="number">47</span>:<span class="number">13</span>:<span class="number">78</span>:<span class="number">54</span>:<span class="number">7</span>e:d9:<span class="number">02</span>:ba:e4:ca:aa:d4:<span class="number">9</span>f:</span><br><span class="line">                    <span class="number">8</span>b:f3:be:d7:<span class="number">40</span>:<span class="number">1</span>e:f5:c4:<span class="number">8</span>d:<span class="number">7</span>a:<span class="number">23</span>:<span class="number">5</span>b:<span class="number">09</span>:c3:<span class="number">57</span>:</span><br><span class="line">                    <span class="number">75</span>:<span class="number">38</span>:<span class="number">7</span>e:<span class="number">4</span>d:e6</span><br><span class="line">                ASN1 OID: prime256v1</span><br><span class="line">                NIST CURVE: P<span class="literal">-256</span></span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Authority Key Identifier:</span><br><span class="line">                DirName:/C=KO/ST=None/L=None/O=None/CN=CA</span><br><span class="line">                serial:<span class="number">5</span>D:<span class="number">98</span>:<span class="number">7</span>B:BF:<span class="number">10</span>:<span class="number">35</span>:<span class="number">6</span>B:<span class="number">9</span>C:<span class="number">11</span>:<span class="number">97</span>:<span class="number">2</span>C:<span class="built_in">AC</span>:<span class="number">21</span>:E3:<span class="number">28</span>:C2:FF:AF:<span class="number">2</span>D:<span class="number">3</span>D</span><br><span class="line"></span><br><span class="line">            X509v3 Subject Alternative Name:</span><br><span class="line">                IP Address:<span class="number">127.0</span>.<span class="number">0.1</span>, DNS:localhost, DNS:mambo.kr</span><br><span class="line">    Signature Algorithm: ecdsa<span class="literal">-with</span><span class="literal">-SHA256</span></span><br><span class="line">         <span class="number">30</span>:<span class="number">46</span>:<span class="number">02</span>:<span class="number">21</span>:<span class="number">00</span>:ce:<span class="number">5</span>d:<span class="number">3</span>a:<span class="number">68</span>:e9:<span class="number">04</span>:dc:a9:fd:e6:<span class="number">14</span><span class="emoji" alias="de" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8">&#x1f1e9;&#xfe0f;&#x200d;&#x1f1ea;</span>bb:</span><br><span class="line">         <span class="number">11</span>:<span class="number">5</span>c:<span class="number">5</span>a:a1:bf:b4:f9:<span class="number">1</span>a:<span class="number">61</span>:<span class="number">08</span>:<span class="built_in">cd</span>:da:<span class="number">47</span>:d1:b4:<span class="number">68</span>:<span class="number">80</span>:<span class="number">81</span>:</span><br><span class="line">         d1:<span class="number">02</span>:<span class="number">21</span>:<span class="number">00</span>:e7:a1:b4:cb:<span class="number">06</span>:<span class="number">6</span>d:ad:<span class="number">80</span>:d3:<span class="number">89</span>:<span class="number">09</span>:c1:<span class="number">1</span>e:ca:</span><br><span class="line">         <span class="number">6</span>e:c7:<span class="number">2</span>e:<span class="number">14</span>:fd:<span class="number">99</span>:d9:df:<span class="number">44</span>:<span class="number">14</span>:cb:<span class="number">47</span>:<span class="number">39</span>:df:ea:<span class="number">5</span>e:e0:<span class="number">1</span>e</span><br></pre></td></tr></table></figure><p>인증서 정보를 확인하는 명령어를 실행하여 CA 인증서로 서명되었고 SAN이 설정되어있는 것을 확인했으므로 자체 서명 인증서 발급이 완료되었다고 할 수 있습니다.</p><h2 id="서버-인증서"><a href="#서버-인증서" class="headerlink" title="서버 인증서"></a>서버 인증서</h2><p>앞서, 애플리케이션 서버에서 사용할 자체 서명된 SSL 인증서를 발급했습니다. 웹 서비스를 HTTPS로 운영하기 위해서는 SSL 인증서를 <strong>애플리케이션 서버에 직접 등록</strong>하거나 <strong>Nginx와 같은 L7 로드밸런서에 SSL 인증서를 등록</strong>해야합니다. 스프링 부트 애플리케이션을 만들어서 SSL 인증서를 등록해보고 Nginx 서버를 추가로 구성하여 애플리케이션 서버가 아닌 로드밸런서에서 TLS 핸드쉐이킹을 수행함을 검증해봅니다.</p><h3 id="JKS-형식의-인증서로-변환"><a href="#JKS-형식의-인증서로-변환" class="headerlink" title="JKS 형식의 인증서로 변환"></a>JKS 형식의 인증서로 변환</h3><p>스프링 부트 애플리케이션에서 HTTPS를 활성화하기 위해서는 KeyStore 형식의 SSL 인증서를 사용해야합니다. 우리는 OpenSSL을 사용해서 PEM 형식의 인증서를 만들었기 때문에 KeyStore 형식의 인증서로 변환해야합니다. PEM 형식의 인증서를 KeyStore 형식으로 변환하기 위해서는 다음의 과정을 거쳐야합니다.</p><ol><li>PEM 인증서를 PFX 인증서로 변환</li><li>PFX 인증서를 JKS 인증서로 변환 </li></ol><h4 id="PEM-인증서를-PFX-인증서로"><a href="#PEM-인증서를-PFX-인증서로" class="headerlink" title="PEM 인증서를 PFX 인증서로"></a>PEM 인증서를 PFX 인증서로</h4><p>OpenSSL을 사용해서 다음의 명령어를 수행하면 PEM 형식의 인증서를 PKCS12 형식의 인증서로 변환할 수 있습니다. PKCS12 형식의 인증서로 변환할 때 입력한 비밀번호는 KeyStore 형식의 인증서로 변환할 때 인증용으로 사용됩니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> openssl pkcs12 <span class="literal">-export</span> <span class="literal">-inkey</span> server.key <span class="operator">-in</span> server.crt <span class="literal">-out</span> server.pfx</span><br><span class="line">Enter Export Password: [비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">Verifying - Enter Export Password: [비밀번호 입력:<span class="type">passwd</span>]</span><br></pre></td></tr></table></figure><h4 id="PFX-인증서를-JKS-인증서로"><a href="#PFX-인증서를-JKS-인증서로" class="headerlink" title="PFX 인증서를 JKS 인증서로"></a>PFX 인증서를 JKS 인증서로</h4><p>자바의 Keytool 도구를 사용해서 PKCS12 형식의 인증서를 KeyStore 형식의 인증서로 변환할 수 있습니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> keytool <span class="literal">-importkeystore</span> <span class="literal">-srckeystore</span> server.pfx <span class="literal">-srcstoretype</span> pkcs12 <span class="literal">-destkeystore</span> server.jks <span class="literal">-deststoretype</span> pkcs12</span><br><span class="line">키 저장소 server.pfx을(를) server.jks(으)로 임포트하는 중...</span><br><span class="line">대상 키 저장소 비밀번호 입력: [비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">새 비밀번호 다시 입력: [비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">소스 키 저장소 비밀번호 입력: [<span class="type">PFX</span> 비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line"><span class="number">1</span> 별칭에 대한 항목이 성공적으로 임포트되었습니다.</span><br><span class="line">임포트 명령 완료: 성공적으로 임포트된 항목은 <span class="number">1</span>개, 실패하거나 취소된 항목은 <span class="number">0</span>개입니다.</span><br></pre></td></tr></table></figure><h3 id="스프링-부트-애플리케이션"><a href="#스프링-부트-애플리케이션" class="headerlink" title="스프링 부트 애플리케이션"></a>스프링 부트 애플리케이션</h3><p>KeyStore 형식의 서버 인증서가 준비되었으니 스프링 부트 애플리케이션을 만든 후 HTTPS로 실행하기 위한 프로퍼티를 설정하고 애플리케이션을 구동합니다.</p><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="meta">server.ssl.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.ssl.protocol</span>=<span class="string">TLS</span></span><br><span class="line"><span class="meta">server.ssl.enabled-protocols</span>=<span class="string">TLSv1.2,TLSv1.3</span></span><br><span class="line"><span class="meta">server.ssl.key-store</span>=<span class="string">classpath:cert/server.jks</span></span><br><span class="line"><span class="meta">server.ssl.key-store-password</span>=<span class="string">passwd</span></span><br><span class="line"><span class="meta">server.ssl.key-store-type</span>=<span class="string">pkcs12</span></span><br></pre></td></tr></table></figure><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-06.png"></p><p>실행된 애플리케이션 서버는 자체 서명된 서버 인증서이기 때문에 발급자인 CA에 대한 정보를 브라우저가 확인할 수 없습니다. 따라서, 브라우저가 신뢰할 수 없는 사이트라고 알려주는 것은 당연한 부분으로 이 경고를 무시하고 접근할 수도 있지만 우리는 <strong>자체 서명 CA 인증서를 보유하고 있으므로 브라우저가 신뢰할 수 있는 기관으로 등록</strong>하겠습니다.</p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-07.png"></p><p><strong>설정 &gt; 개인정보 및 보안 &gt; 보안 &gt; 인증서 관리</strong>로 들어가서 자체 서명된 CA 인증서를 루트 인증 기관으로 등록할 수 있습니다.</p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-08.png"></p><p>루트 인증 기관 목록에 자체 서명 CA 인증서를 추가했으므로 다음과 같이 신뢰할 수 없던 애플리케이션 서버 인증서를 신뢰할 수 있게 됩니다. </p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-09.png" alt="127.0.0.1"><br><img data-src="/images/posts/ssl-certificate/ssl-certificate-10.png" alt="mambo.kr"></p><p>로컬호스트 대신에 SAN으로 지정하였던 127.0.0.1과 mambo.kr에 대해서도 신뢰하였습니다. 만약, 따라해보고 계시는 분들 중에서 여전히 신뢰할 수 없다고 나오는 경우 브라우저를 종료하고 다시 실행해보시기 바랍니다.</p><p>이제 Nginx을 추가적으로 구성하여 애플리케이션 서버가 아닌 Nginx에서 서버 인증서를 등록하여 TLS 핸드쉐이크를 수행하는 지 확인해보겠습니다. 실행했던 애플리케이션 서버는 종료합니다.</p><h3 id="PEM-형식의-인증서로-변환"><a href="#PEM-형식의-인증서로-변환" class="headerlink" title="PEM 형식의 인증서로 변환"></a>PEM 형식의 인증서로 변환</h3><p>인증 기관 대행 업체에서 발급해준 인증서가 KeyStore 형식의 인증서라면 PEM 형식의 인증서로 변환해야합니다. 이미 우리는 PEM 형식의 서버 인증서가 있는 상태이지만 없는 상태라고 가정하고 KeyStore 형식의 인증서를 PEM 형식으로 변환해봅니다.</p><p>변환 과정은 다음과 같이 KeyStore 인증서로 변환할 때의 반대 과정을 거칩니다.</p><ol><li>JKS 인증서를 PFX 인증서로 변환</li><li>PFX 인증서를 PEM 인증서로 변환</li></ol><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># JKS 인증서를 PFX 인증서로 변환</span></span><br><span class="line"><span class="built_in">PS</span> keytool <span class="literal">-importkeystore</span> <span class="literal">-srckeystore</span> server.jks <span class="literal">-destkeystore</span> server.pfx <span class="literal">-deststoretype</span> pkcs12</span><br><span class="line">키 저장소 server.jks을(를) server.pfx(으)로 임포트하는 중...</span><br><span class="line">대상 키 저장소 비밀번호 입력: [비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">새 비밀번호 다시 입력: [비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">소스 키 저장소 비밀번호 입력: [<span class="type">JKS</span> 비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line"><span class="number">1</span> 별칭에 대한 항목이 성공적으로 임포트되었습니다.</span><br><span class="line">임포트 명령 완료: 성공적으로 임포트된 항목은 <span class="number">1</span>개, 실패하거나 취소된 항목은 <span class="number">0</span>개입니다.</span><br><span class="line"></span><br><span class="line"><span class="comment"># PFX 인증서에서 PEM 형식의 인증서로 변환</span></span><br><span class="line"><span class="built_in">PS</span> openssl pkcs12 <span class="operator">-in</span> server.pfx <span class="literal">-out</span> server.crt <span class="literal">-clcerts</span> <span class="literal">-nokeys</span></span><br><span class="line">Enter Import Password: [<span class="type">PFX</span> 비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># PFX 인증서에서 개인키 추출</span></span><br><span class="line"><span class="built_in">PS</span> openssl pkcs12 <span class="operator">-in</span> server.pfx <span class="literal">-out</span> server.key <span class="literal">-nocerts</span></span><br><span class="line">Enter Import Password: [<span class="type">PFX</span> 비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">Enter PEM pass phrase: [비밀번호 입력:<span class="type">passwd</span>]</span><br><span class="line">Verifying - Enter PEM pass phrase: [비밀번호 입력:<span class="type">passwd</span>]</span><br></pre></td></tr></table></figure><p>PFX 인증서를 PEM 형식으로 변환하고나서는 부가적인 헤더가 들어가있으므로 PEM 형식에 관련된 부분만 별도로 다시 저장합니다. 예를 들어, 개인키의 경우 -----BEGIN PRIVATE KEY-----으로 시작해서 -----END PRIVATE KEY-----으로 끝나는 부분을 말합니다.</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx와 애플리케이션 서버를 실행하는 환경은 도커 컴포즈로 실행하겠습니다. 먼저, 앞선 스프링 부트 애플리케이션을 실행가능한 JAR 파일로 패키징하여 준비합니다.</p><figure class="highlight sh"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">gradle bootJar</span><br><span class="line">&gt; Task :compileJava UP-TO-DATE</span><br><span class="line">&gt; Task :processResources UP-TO-DATE</span><br><span class="line">&gt; Task :classes UP-TO-DATE</span><br><span class="line">&gt; Task :bootJarMainClassName</span><br><span class="line">&gt; Task :bootJar</span><br><span class="line"><span class="comment"># build/libs/demo-0.0.1-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><p>그리고 다음의 도커 컴포즈 문서를 작성하고 패키징된 애플리케이션과 서버 인증서 그리고 개인키 파일을 복사합니다.</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./server.crt:/etc/nginx/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./server.key:/etc/nginx/server.key</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adoptopenjdk/openjdk11</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;java -jar /etc/app.jar&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./demo-0.0.1-SNAPSHOT.jar:/etc/app.jar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>도커 컴포즈가 참조하는 Nginx 설정 파일에 443 포트에 SSL을 활성화하고 SSL 인증서를 지정하도록 작성합니다.</p><figure class="highlight plain"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">worker_processes auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    access_log      &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;</span><br><span class="line">    error_log       &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line"></span><br><span class="line">    include         &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen              443 ssl;</span><br><span class="line">        server_name         localhost 127.0.0.1 mambo.kr;</span><br><span class="line">        ssl_certificate     &#x2F;etc&#x2F;nginx&#x2F;server.crt;</span><br><span class="line">        ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;server.key;</span><br><span class="line">        ssl_protocols       TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass         http:&#x2F;&#x2F;app:8080;</span><br><span class="line">            proxy_redirect     off;</span><br><span class="line">            proxy_set_header   Host $host;</span><br><span class="line">            proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  60;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>도커 컴포즈 명령어로 Nginx와 함께 애플리케이션을 구동합니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">docker<span class="literal">-compose</span> up <span class="literal">-d</span></span><br></pre></td></tr></table></figure><p>정상적으로 실행되었다면 Nginx의 443 포트를 통해 애플리케이션 서버와의 통신을 수행할 수 있습니다. 그리고 다음 처럼 TLS 핸드쉐이크 과정이 Nginx에 의해 제대로 수행되었음을 확인할 수 있습니다.</p><p><img data-src="/images/posts/ssl-certificate/ssl-certificate-11.png"></p><p>이상으로 SSL 인증서에 대한 정리를 마치도록 하겠습니다. </p><p>인프라 구조상 SSL 인증서를 어디에 등록하고 TLS 핸드쉐이킹 과정을 수행하는지도 중요한 부분일 수 있습니다. 운영중인 웹 서비스를 분산 애플리케이션으로 로드밸런싱을 수행하고 있다면 로드밸런싱을 수행하는 Nginx 또는 NLB에서 TLS 핸드쉐이킹을 수행할 수 있도록 SSL 인증서를 등록하는 것이 좋을 수 있습니다. 이렇게 구성하면 애플리케이션 서버에서 지원하지 않는 요청에 대해서 애플리케이션 서버까지 도달하지 않도록 하여 서버 부하를 방지할 수 있습니다. 물론, 로드밸런서에서 TLS 핸드쉐이크를 수행하므로 상대적으로 로드밸런서 서버의 부하가 커지는 것은 감안해야합니다.</p><p>감사합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/create-tls-listener.html">Network Load Balancer를 위한 TLS 리스너</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/configuring-https-ssl.html">X509 인증서 생성 및 서명</a></li><li><a href="https://www.baeldung.com/java-keystore-convert-to-pem-format">Converting a Java Keystore Into PEM Format</a></li><li><a href="https://stackoverflow.com/questions/13732826/convert-pem-to-crt-and-key">Convert .pem to .crt and .key</a></li><li><a href="https://www.sslcert.co.kr/guides/SSL-Certificate-Convert-Format">Convert Certificate Format SSL 인증서 변환 가이드</a></li><li><a href="https://letsencrypt.org/ko/docs/certificates-for-localhost/">localhost를 위한 인증서</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 웹사이트 접속 시 필수적으로 사용되는 HTTPS 그리고 SSL 인증서에 대해 이야기하려합니다. 회사에서 운영중인 웹 서비스를 HTTPS로 배포되고있으나 정작 SSL에 대한 부분은 머리속에서 복잡하</summary>
      
    
    
    
    
    <category term="HTTPS" scheme="https://kdevkr.github.io/tags/HTTPS/"/>
    
    <category term="TLS" scheme="https://kdevkr.github.io/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>Github의 Git 작업에 대한 토큰 인증 요구 사항</title>
    <link href="https://kdevkr.github.io/token-authentication-requirements-for-git-operations-on-github/"/>
    <id>https://kdevkr.github.io/token-authentication-requirements-for-git-operations-on-github/</id>
    <published>2021-08-15T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>오늘은 변경된 사항을 깃허브 저장소에 반영시키기 위하여 깃 명령어를 수행할 때 사용되는 인증 방식을 비밀번호가 아닌 액세스 토큰으로 변경하는 것에 대해서 공유하려합니다. </p><p><img data-src="/images/posts/token-authentication-requirements/windows-git-credentials-01.png"></p><p>2020년 12월 15일에 깃허브에서는 <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">Token authentication requirements for Git operations</a>을 통해 2021년 8월 13일에 더이상 비밀번호 인증 방식으로 Git 작업을 수행할 수 없다고 알려주었으며 비밀번호를 사용하는 개발자들에게 지속적으로 Deprecation Notice 메일을 발송해왔습니다.</p><p>저는 이 문제에 대하여 당장은 변경하지않아도 무방하다고 생각하여 무시하였지만 이제는 비밀번호를 사용하여 인증할 수 없게되어 우리는 비밀번호가 아닌 깃허브에서 발급받은 토큰을 사용하도록 변경해야합니다.</p><h2 id="Git-Credential-Helper"><a href="#Git-Credential-Helper" class="headerlink" title="Git Credential Helper"></a>Git Credential Helper</h2><p>깃에서 사용하는 크레덴셜을 어떻게 저장했는지 기억나지 않으므로 찾아보니 깃 크레덴셜 헬퍼를 사용한다고 합니다. 그리고 윈도우에서 사용하는 크레덴셜 헬퍼는 <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows">Git Credential Manager for Windows</a>에서 <a href="https://github.com/microsoft/Git-Credential-Manager-Core">Git Credential Manager Core</a>되어 크로스 플랫폼으로 통합된 것 같습니다.</p><p><img data-src="/images/posts/token-authentication-requirements/windows-git-credentials-02.png"></p><p>위 스크린샷에서 확인할 수 있듯이 윈도우에서 크레덴셜 저장소는 <strong>자격 증명 관리자</strong>를 사용한다고 합니다. 제어판에서 자격 증명 관리자를 열어보면 일반 자격 증명 항목에 Github 관련 자격 증명이 있는 것을 확인할 수 있을겁니다.</p><p><img data-src="/images/posts/token-authentication-requirements/windows-git-credentials-03.png"></p><p>비밀번호가 저장되어있는 Github 자격 증명을 선택해서 삭제하시면 됩니다. </p><h3 id="Manager-Core"><a href="#Manager-Core" class="headerlink" title="Manager Core"></a>Manager Core</h3><p>윈도우에 설치된 Git 버전이 2.29 이상이라면 깃 크레덴셜 헬퍼를 초기화하고 Manager Core로 지정하는게 좋다고 생각되므로 다음과 같이 명령어를 수행합니다.</p><figure class="highlight ps"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">git -<span class="literal">-version</span></span><br><span class="line">git version <span class="number">2.32</span>.<span class="number">0</span>.windows.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">git config -<span class="literal">-unset</span> credential.helper</span><br><span class="line">git config -<span class="literal">-global</span> credential.helper manager<span class="literal">-core</span></span><br><span class="line">git config -<span class="literal">-global</span> credential.helper</span><br><span class="line">manager<span class="literal">-core</span></span><br></pre></td></tr></table></figure><blockquote><p>이미 깃 크레덴셜 헬퍼가 manager-core로 지정되어있다면 스킵하세요.</p></blockquote><h3 id="Token-Credential"><a href="#Token-Credential" class="headerlink" title="Token Credential"></a>Token Credential</h3><p>이제 리파지토리 폴더에서 깃허브를 대상으로 깃 명령어를 수행하면 깃허브 주소에 대한 자격 증명이 존재하지 않으므로 다음과 같이 크레덴셜을 요구하는 팝업창이 뜨게 됩니다.</p><p><img data-src="/images/posts/token-authentication-requirements/windows-git-credentials-04.png"></p><p>깃허브에서 발급받은 토큰을 입력하면 자격 증명 관리자에 깃허브 주소에 대한 자격 증명이 등록되고 성공적으로 깃 명령어를 수행되는 것을 확인할 수 있을겁니다.</p><h3 id="SourceTree-Authentication"><a href="#SourceTree-Authentication" class="headerlink" title="SourceTree Authentication"></a>SourceTree Authentication</h3><p>만약, 소스트리를 사용하고 계시다면 설정 &gt; 옵션 &gt; 인증에서 정상적으로 자격 증명을 확인할 수 있는 지 확인해보셔야합니다.</p><p><img data-src="/images/posts/token-authentication-requirements/windows-git-credentials-05.png"></p><p>이상으로 Github의 Git 작업에 대한 토큰 인증 요구 사항을 마치겠습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;오늘은 변경된 사항을 깃허브 저장소에 반영시키기 위하여 깃 명령어를 수행할 때 사용되는 인증 방식을 비밀번호가 아닌 액세스 토큰으로 변경하는 것에 대해서 공유하려합니다. &lt;/p&gt;
&lt;p&gt;&lt;img data-</summary>
      
    
    
    
    
    <category term="Github" scheme="https://kdevkr.github.io/tags/Github/"/>
    
    <category term="Git Credentials" scheme="https://kdevkr.github.io/tags/Git-Credentials/"/>
    
  </entry>
  
  <entry>
    <title>도커 데스크탑이 사용하는 WSL 리소스 제한하기</title>
    <link href="https://kdevkr.github.io/limit-resources-docker-desktop-using-wslconfig/"/>
    <id>https://kdevkr.github.io/limit-resources-docker-desktop-using-wslconfig/</id>
    <published>2021-08-13T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다. </p><p>오늘은 <strong>윈도우 환경의 도커 데스크탑에서 사용하는 WSL 리소스를 제한하는 방법</strong>에 대하여 공유하고자 합니다. 윈도우에서 도커 데스크탑을 사용할 때 컴퓨터가 느려진다는 느낌을 받고있다면 현재 도커 데스크탑과 WSL에 의해 점유되는 메모리를 확인하시고 이 글에서 소개하는 방법으로 WSL가 점유하는 리소스를 제한하시는게 좋습니다.</p><h2 id="Docker-Desktop-WSL-2"><a href="#Docker-Desktop-WSL-2" class="headerlink" title="Docker Desktop WSL 2"></a>Docker Desktop WSL 2</h2><p>윈도우 10 환경에서 WSL 2를 설치하고 활성화했다면 도커 데스크탑에서 WSL 2를 사용해서 컨테이너를 구동될 수 있도록 지원하고 있습니다. </p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-01.png"></p><blockquote><p>Docker Desktop uses the dynamic memory allocation feature in WSL 2 to greatly improve the resource consumption. This means, Docker Desktop only uses the required amount of CPU and memory resources it needs, while enabling CPU and memory-intensive tasks such as building a container to run much faster.</p></blockquote><p>도커 데스크탑 공식 문서에서는 WSL 2을 사용하면 메모리를 동적으로 할당할 수 있고 리소스를 효율적으로 소비한다고 소개합니다. 그런데 실제로 도커를 사용하여 다수의 컨테이너를 실행하다보면 컴퓨터 성능이 점점 느려지는 것을 체감하실 수도 있는 분들도 계실텐데요. 이 문제는 WSL 깃허브에 이슈로 등록되어있는데 WSL가 점유하는 메모리를 제대로 반환하지 못하는 현상인 것 같습니다.</p><p><a href="https://github.com/microsoft/WSL/issues/4166">WSL 2 consumes massive amounts of RAM and doesn’t return it</a></p><p>이슈가 등록된 날짜는 2019년이지만 아직도 해결되지 않고 오픈된 상태로 남아있는 이슈입니다. 개발자 한분은 <a href="https://github.com/microsoft/WSL/issues/4166#issuecomment-526725261">WSL2 VM이 점유하는 리소스를 제한하는 방법</a>을 사용하여 WSL에서 사용하는 메모리를 제한하라고 해결책을 제시합니다.</p><h3 id="WSL-Configuration"><a href="#WSL-Configuration" class="headerlink" title="WSL Configuration"></a>WSL Configuration</h3><p>위에서 소개한 방법은 이미 도커 데스크탑에서도 설정 메뉴에서 소개하고 있는 부분으로 리소스 제한은 윈도우에 의해 관리되므로 CPU, 메모리 등을 제한하기 위해서는 WSL 2의 설정을 수행하라고 합니다.</p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-02.png"></p><h4 id="wslconfig-정의"><a href="#wslconfig-정의" class="headerlink" title=".wslconfig 정의"></a>.wslconfig 정의</h4><p>사용자 폴더 위치에서 .wslconfig 파일을 직접 생성하거나 다음과 같이 윈도우 터미널에서 비쥬얼 스튜디오 코드를 사용하여 생성할 수 있습니다. </p><blockquote><p>파일을 만들기 위한 파워 쉘 명령어가 별도로 존재하지만 비쥬얼 스튜디오 코드로 여는게 더 편하다고 생각합니다.</p></blockquote><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-03.png"></p><p>비쥬얼 스튜디오 코드로 열어진 .wslconfig 파일의 내용을 다음과 같이 입력하고 저장합니다.</p><figure class="highlight plain"><figcaption><span>.wslconfig</span></figcaption><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory&#x3D;4GB</span><br><span class="line">processors&#x3D;2</span><br><span class="line">swap&#x3D;0</span><br></pre></td></tr></table></figure><h4 id="wslconfig-반영"><a href="#wslconfig-반영" class="headerlink" title=".wslconfig 반영"></a>.wslconfig 반영</h4><p>파일에 정의한 내용을 WSL에 반영하기 위해서는 도커 데스크탑을 종료하고 <strong>PowerShell</strong>을 관리자 권한으로 실행한 다음 <strong>LxssManager</strong>를 다시 실행해야합니다.</p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-04.png"></p><h3 id="비교해보기"><a href="#비교해보기" class="headerlink" title="비교해보기"></a>비교해보기</h3><p>다음은 간단하게 WSL 2의 기본 설정에 의해 동작하는 것과 .wslconfig을 정의해서 WSL 에서 사용할 리소스를 제한하였을 경우를 비교한 내용입니다. 대략적으로 어떤 차이를 보이는지만 확인해주시기 바랍니다.</p><h4 id="기본-WSL-2"><a href="#기본-WSL-2" class="headerlink" title="기본 WSL 2"></a>기본 WSL 2</h4><p>먼저, 기본 WSL 2 설정에 의해 도커 데스크탑이 점유하게 되는 리소스를 확인해보죠.</p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-05.gif"></p><p>기다리기 지겨워하실 분들을 위해서 설명하자면 컨테이너를 실행할때마다 메모리가 올라가면서 4GB를 점유한 것을 보여주고 있습니다. 사용하는 만큼 메모리를 점유하는 것은 당연한 부분일 수 있으나 문제는 그 다음부터 발생합니다.</p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-06.png"></p><p>위 화면을 살펴보시면 도커 데스크탑으로 실행했던 컨테이너를 전부 종료하고 이미지 그리고 볼륨을 전부 삭제했음에도 불구하고 <strong>WSL2에서 점유중인 메모리의 일부는 반환되지 않고 있음</strong>을 보여줍니다. </p><h4 id="사용자-정의-WSL-2"><a href="#사용자-정의-WSL-2" class="headerlink" title="사용자 정의 WSL 2"></a>사용자 정의 WSL 2</h4><p>이제 WSL 2에서 점유하여 사용할 프로세서를 2개, 메모리를 2GB 그리고 스왑을 하지않도록 설정하고 앞서 컨테이너를 실행했던 것을 다시 시도 해본 결과를 확인해보겠습니다.</p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-07.gif"></p><p>기본 설정때와는 다르게 여러개의 컨테이너를 실행하더라도 WSL2에서 할당하는 메모리는 2GB를 넘지않게 됨을 확인할 수 있습니다. 물론, 점유하고 있는 리소스가 제한되어있기 때문에 컨테이너 성능은 줄어들게 당연한 부분입니다. 따라서, 시스템 자원이 여유롭다면 적당하게 제한하시는 것을 추천합니다.</p><h2 id="느려짐을-체감하는-이유"><a href="#느려짐을-체감하는-이유" class="headerlink" title="느려짐을 체감하는 이유"></a>느려짐을 체감하는 이유</h2><p>.wslconfig 파일을 정의하지 않고 기본 설정으로 WSL 2를 사용하고 있을때 도커 데스크탑이 시스템 자원을 어느정도 까지 사용할 수 있을 지 확인해보겠습니다.</p><p><img data-src="/images/posts/docker-desktop-wsl-config/docker-desktop-wsl-config-08.png"></p><p>기본적으로 <strong><em>프로세서는 전부 사용</em></strong>한다고 하며 메모리는 <strong>총 메모리의 절반 또는 8GB 중 작은쪽으로 설정</strong>됩니다. 저의 경우는 32GB의 메모리이므로 메모리의 절반보다 작은 8GB가 설정되게 됩니다. 일반적으로 개발자가 사용하는 컴퓨터의 메모리 용량 16GB이라면 동일하게 8GB이므로 <strong>무려 총 메모리의 절반이나 점유</strong>할 수 있게 되고 컨테이너를 종료하더라도 일부의 메모리는 점유하고 있을 수 있다는 이야기입니다.</p><p>윈도우의 리소스 모니터를 사용해서 vmmem에 할당된 메모리가 높은지 확인해보시기 바라며 이상으로 도커 데스크탑이 사용하는 WSL 리소스 제한하기를 마치겠습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다. &lt;/p&gt;
&lt;p&gt;오늘은 &lt;strong&gt;윈도우 환경의 도커 데스크탑에서 사용하는 WSL 리소스를 제한하는 방법&lt;/strong&gt;에 대하여 공유하고자 합니다. 윈도우에서 도커 데스크탑을 사용할 때 컴퓨터가 느려진다는 느낌을</summary>
      
    
    
    
    
    <category term="WSL" scheme="https://kdevkr.github.io/tags/WSL/"/>
    
    <category term="Docker Desktop" scheme="https://kdevkr.github.io/tags/Docker-Desktop/"/>
    
  </entry>
  
  <entry>
    <title>HandlerInterceptor은 언제 사용하나요?</title>
    <link href="https://kdevkr.github.io/when-do-i-use-the-handler-interceptor/"/>
    <id>https://kdevkr.github.io/when-do-i-use-the-handler-interceptor/</id>
    <published>2021-08-09T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="../images/logo/spring.png#compact"></p><p>안녕하세요 Mambo입니다. 오늘은 스프링 MVC 모듈에 포함되어있는 HandlerInterceptor 인터페이스를 언제 사용하는가에 대해서 알아보겠습니다.</p><h2 id="HandlerInterceptor"><a href="#HandlerInterceptor" class="headerlink" title="HandlerInterceptor"></a>HandlerInterceptor</h2><blockquote><p>A HandlerInterceptor gets called before the appropriate HandlerAdapter triggers the execution of the handler itself. This mechanism can be used for a large field of preprocessing aspects, e.g. for authorization checks, or common handler behavior like locale or theme changes. Its main purpose is to allow for factoring out repetitive handler code.</p></blockquote><p><strong>HandlerInterceptor</strong>는 컨트롤러 핸들러 함수에 대한 전처리 동작을 수행할 수 있는 방법을 제공합니다. 필터도 전처리 동작을 수행할 수 있지만 web.xml에 정의되는 필터와 다르게 HandlerInterceptor는 애플리케이션 컨텍스트에서 관리하므로 요청 정보를 분석하여 사용자를 인증하거나 응답 뷰를 렌더링하기 전에 부가 데이터를 주입하는 동작을 수행할 수 있습니다.</p><p>예를 들어, 기본으로 제공되는 HandlerInterceptor 구현체인 <strong>LocaleChangeInterceptor</strong>는 로케일 파라미터에 따라 현재 로케일을 변경하는 동작을 수행하죠.</p><h3 id="정적-리소스-패턴-제외"><a href="#정적-리소스-패턴-제외" class="headerlink" title="정적 리소스 패턴 제외"></a>정적 리소스 패턴 제외</h3><p><strong>ResourceHandlerRegistry</strong>는 정적 리소스를 배포하기 위한 핸들러를 등록하는 것을 지원하는 클래스입니다. 이때, 리소스 핸들러가 처리할 경로를 매칭하기 위하여 AntPathMatcher 또는 PathPattern을 사용하게 되는데 Ant 스타일의 패턴 매칭을 사용하므로 특정 패턴을 제외하기 위한 Regex 같은 방식을 사용할 수 없습니다. </p><p>리소스 핸들러가 처리하는 경로에 대해서 특정 패턴을 제외하기 위해서는 해당 패턴을 처리하지 않도록 패턴별로 등록하여야합니다. 하지만, 이렇게 올바른 패턴마다 리소스 핸들러를 등록하는 것은 불편합니다.</p><figure class="highlight java"><figcaption><span>ResourceHandlerRegistry</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/images/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/static/images/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예시는 <strong>/images/**</strong> 패턴의 경로에 대해서 클래스패스의 <strong>static/images</strong> 폴더에 있는 정적 리소스로 처리하기 위한 핸들러를 등록합니다. images 폴더에는 이미지 파일만 있다고 가정했으나 개발자의 실수로 images 폴더에 이미지가 아닌 동영상 파일이나 오디오 파일이 들어있다면 해당 리소스도 처리하게 됩니다.</p><p>이렇게 특정 패턴을 방지해야하는 경우에 HandlerInterceptor를 등록하여 요청을 분석하여 리소스를 응답하지 않도록 전처리 동작을 구현할 수 있습니다.</p><p>다음과 같이 <strong>이미지 파일 패턴이 아니라면 요청을 404 Not Found로 처리</strong>하는 동작을 수행할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(onlyServeImagesHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/images/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/static/images/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">OnlyServeImagesHandlerInterceptor <span class="title">onlyServeImagesHandlerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OnlyServeImagesHandlerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlyServeImagesHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            String requestURI = request.getRequestURI();</span><br><span class="line">            <span class="keyword">if</span>(!requestURI.matches(<span class="string">&quot;.*\\/.*\\.(jpg|jpeg|png|gif)&quot;</span>)) &#123;</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 인터셉터가 정말로 이미지 파일에 대해서만 처리할 수 있게 사전 처리를 수행하는지 확인해보겠습니다.</p><p><img data-src="/images/posts/handler-interceptor-01.gif"></p><p>위 결과를 보면 이미지 파일은 정적 리소스로 배포되도록 처리되었지만 동영상 파일은 처리되지 않게 된걸 확인할 수 있습니다. </p><h3 id="뷰-응답-시-부가-정보-주입"><a href="#뷰-응답-시-부가-정보-주입" class="headerlink" title="뷰 응답 시 부가 정보 주입"></a>뷰 응답 시 부가 정보 주입</h3><p>두번째로는 뷰를 응답하는 핸들러 함수에 대하여 <strong>부가 정보를 주입</strong>하는데에 사용할 수 있습니다. </p><p>다음의 코드는 뷰를 응답하게되는 핸들러 함수에 사용 가능한 언어와 함께 현재 로케일에 대한 메시지 코드 목록을 주입하는 인터셉터 예시입니다.</p><figure class="highlight java"><figcaption><span>InjectionLocalesInterceptor</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionLocalesInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessagePool messagePool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(modelAndView != <span class="keyword">null</span> &amp;&amp; messagePool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Locale locale = messagePool.getLocale();</span><br><span class="line">            <span class="keyword">if</span>(locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">                locale = Locale.getDefault();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;lang&quot;</span>, locale.getLanguage());</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;locale&quot;</span>, locale.toString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">                HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">                Class&lt;?&gt; beanType = handlerMethod.getBeanType();</span><br><span class="line">                Controller controller = beanType.getAnnotation(Controller.class);</span><br><span class="line">                <span class="keyword">if</span>(controller != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    modelAndView.addObject(<span class="string">&quot;locales&quot;</span>, messagePool.getLocales());</span><br><span class="line">                    modelAndView.addObject(<span class="string">&quot;messages&quot;</span>, messagePool.getMessagesInJson().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 템플릿 엔진에서 주입된 부가 정보를 사용하여 렌더링을 할 수 있게 됩니다.</p><h3 id="인증을-위한-인터셉터"><a href="#인증을-위한-인터셉터" class="headerlink" title="인증을 위한 인터셉터"></a>인증을 위한 인터셉터</h3><p>또 다른 인터셉터의 활용 방안은 인증 처리입니다. 사용자에게 이메일 또는 카카오톡 메시지등을 발송하여 어떤 행동을 할 수 있는 링크를 주게 된다고 가정해보면 해당 링크를 통해 들어오는 사용자은 인증을 수행하기 전일 수 있습니다. 이때 주어지는 링크에 임시적으로 인증에 사용할 수 있는 만료성 토큰 파라미터를 포함시킴으로써 사용자를 인증하는 로직을 추가할 수 있습니다.</p><p><img data-src="https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/31015797034/original/89mawYXJeO_K082-5HF52bd73j_SN60nLQ.png" alt="코인원의 이메일 인증하기 버튼"></p><p>위 예시 이미지의 이메일 인증하기 버튼에 대한 링크에는 코인원에서 분석할 수 있는 어떠한 파라미터에 인증을 위한 식별 정보가 있을거라 추측합니다.</p><p>다음은 토큰 파라미터 유무를 확인하고 토큰 파라미터를 분석하여 인증을 수행하는 인터셉터 구현의 예시입니다.</p><figure class="highlight java"><figcaption><span>TokenBasedAuthenticationInterceptor</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenBasedAuthenticationInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PARAMETER_NAME = <span class="string">&quot;token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String parameter = request.getParameter(TOKEN_PARAMETER_NAME);</span><br><span class="line">        <span class="keyword">if</span>(parameter != <span class="keyword">null</span> &amp;&amp; !parameter.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> 토큰 파라미터 분석 및 검증</span></span><br><span class="line">            String token = analyticsToken(parameter);</span><br><span class="line">            <span class="keyword">boolean</span> valid = validateToken(token);</span><br><span class="line">            <span class="keyword">if</span>(valid) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">NOTE:</span> 토큰 기반 인증 처리</span></span><br><span class="line">                authenticationByToken(token);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> valid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>일정 시간이 만료</strong>되면 해당 토큰으로는 인증할 수 없고 이미 인증을 수행하여 <strong>사용이 완료된 토큰</strong>으로 확인하는 것은 토큰 파라미터 분석 및 검증 로직에 포함될겁니다.</p><p>간단하게 HandlerInterceptor의 활용 방안 3가지를 확인해보았습니다. 애플리케이션 마다 요구사항이 다르고 무궁무진 하기 때문에 HandlerInterceptor는 더 다양한 방식으로 활용할 수 있을 겁니다. 이상으로 HandlerInterceptor은 언제 사용하나요?를 마치겠습니다. 감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;../images/logo/spring.png#compact&quot;&gt;&lt;/p&gt;
&lt;p&gt;안녕하세요 Mambo입니다. 오늘은 스프링 MVC 모듈에 포함되어있는 HandlerInterceptor 인터페이스를 언제 사용하는가에 대해서 </summary>
      
    
    
    
    
    <category term="Spring MVC" scheme="https://kdevkr.github.io/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>AWS IoT Device SDK Java로 MQTT 연결하기</title>
    <link href="https://kdevkr.github.io/connecting-with-mqtt-using-aws-iot-device-sdk/"/>
    <id>https://kdevkr.github.io/connecting-with-mqtt-using-aws-iot-device-sdk/</id>
    <published>2021-08-07T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.698Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다. 오늘은 AWS IoT Core의 MQTT 클라이언트로 MQTT 브로커에 연결하여 메시지를 게시하고 수신해보는 방법에 대해서 알아봅니다.</p><h2 id="AWS-IoT-Core"><a href="#AWS-IoT-Core" class="headerlink" title="AWS IoT Core"></a>AWS IoT Core</h2><p><img data-src="https://docs.aws.amazon.com/iot/latest/developerguide/images/what-is-aws-iot.png"></p><p>AWS IoT Core는 클라우드 환경에 디바이스를 연결하고 연결된 디바이스간 통신을 제공하는 관리형 클라우드 플랫폼입니다. 그리고 AWS IoT Core를 사용하는 디바이스들이 다음의 표준 통신 프로토콜을 사용하여 서로 상호작용을 할 수 있도록 지원합니다.</p><ul><li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">MQTT (Message Queuing and Telemetry Transport)</a></li><li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html">MQTT over WSS (Websockets Secure)</a></li><li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/http.html">HTTPS (Hypertext Transfer Protocol - Secure)</a></li><li><a href="https://docs.aws.amazon.com/iot/latest/developerguide/connect-iot-lorawan.html">LoRaWAN (Long Range Wide Area Network)</a></li></ul><p>이 글에서는 두번째 방식인 <strong>MQTT over WebSocket</strong> 방식으로 AWS IoT Core 서비스에 연결하는 것을 알아봅니다.</p><h3 id="MQTT-3-1-1"><a href="#MQTT-3-1-1" class="headerlink" title="MQTT 3.1.1"></a>MQTT 3.1.1</h3><p>AWS IoT Core의 MQTT 메시지 브로커는 <a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">MQTT v3.1.1 specification</a>을 기반으로 구현되어있습니다. 그러나 몇가지 부분에 대해서 약간 다르다고 하는데 주요 사항은 다음과 같습니다.</p><ul><li>QoS(Quality of Service)는 0 또는 1 지원</li><li>클라이언트 ID 유일성</li><li>보관된 메시지 미지원</li></ul><blockquote><p>더 자세한 내용은 <a href="https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html#mqtt-differences">AWS IoT differences from MQTT version 3.1.1 specification</a>을 참고하세요.</p></blockquote><h3 id="AWS-IoT-Device-SDK-for-Java"><a href="#AWS-IoT-Device-SDK-for-Java" class="headerlink" title="AWS IoT Device SDK for Java"></a>AWS IoT Device SDK for Java</h3><p>AWS IoT 서비스에 연결하기위해서는 AWS CLI, AWS IoT API, AWS IoT Device SDK를 사용해야합니다. 여러 언어로 구현된 AWS IoT Device SDK 중에서 안타깝게 Go로 작성된 SDK는 없으므로 <strong>AWS IoT Device SDK for Java</strong> 를 사용합니다.</p><p>AWS IoT Device SDK는 버전 1과 버전 2가 있습니다. 회사에서는 버전 1을 사용하고 있지만 이 글에서는 <strong>AWS IoT Device SDK for Java v2</strong> 를 사용하여 AWS IoT 서비스에 연결해보도록 하겠습니다.</p><table><thead><tr><th>Version 1</th><th>Version 2</th></tr></thead><tbody><tr><td><a href="https://github.com/aws/aws-sdk-java">AWS SDK for Java</a></td><td><a href="https://github.com/aws/aws-sdk-java-v2">AWS SDK for Java 2.0</a></td></tr><tr><td><a href="https://github.com/aws/aws-iot-device-sdk-java">AWS IoT Device SDK for Java</a></td><td><a href="https://github.com/aws/aws-iot-device-sdk-java-v2">AWS IoT Device SDK for Java v2</a></td></tr></tbody></table><blockquote><p>기존 SDK를 기준으로 사용하기 쉽도록 새로 작성한 SDK이기 때문에 더 편리합니다.</p></blockquote><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation platform(<span class="string">&#x27;software.amazon.awssdk:bom:2.17.13&#x27;</span>)</span><br><span class="line">    implementation <span class="string">&#x27;software.amazon.awssdk:cognitoidentity&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;software.amazon.awssdk:lambda&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;software.amazon.awssdk.iotdevicesdk:aws-iot-device-sdk:1.4.3&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>회사에서는 모든 모듈을 포함하는 SDK를 사용하는데 필요한 SDK 모듈만 추가해서 사용하는게 좋아보입니다.<br><a href="https://search.maven.org/search?q=g:software.amazon.awssdk">SDK 모듈 목록</a>을 보면 이 글을 쓰는 기준으로 무려 <strong>352개</strong>가 포함됩니다.</p></blockquote><h2 id="MQTT-with-AWS-IoT-Core"><a href="#MQTT-with-AWS-IoT-Core" class="headerlink" title="MQTT with AWS IoT Core"></a>MQTT with AWS IoT Core</h2><p>AWS Iot Core의 MQTT 클라이언트는 연결 방식에 따라 다음의 두가지 방식으로 나누어집니다.</p><table><thead><tr><th>방식</th><th>설명</th></tr></thead><tbody><tr><td>MQTT</td><td>X.509 인증서 기반 인증</td></tr><tr><td>MQTT over WebSocket</td><td><a href="https://docs.aws.amazon.com/ko_kr/general/latest/gr/signature-version-4.html">서명 버전 4 (SIGv4)</a> 자격 증명을 사용하여 인증</td></tr></tbody></table><p>회사에서는 서버 애플리케이션의 경우 텔레노어 커넥션(Telenor Connexion) 서비스에서 제공하는 자격 증명을 통해 <strong>MQTT over WebSocket</strong> 으로 연결하고 있으며 데이터를 수집하는 디바이스에서는 자격 증명을 외부로 공개할 수 없으므로 <strong>X.509 인증서</strong> 를 기반으로 연결합니다. </p><h3 id="Amazon-Cognito-IdP"><a href="#Amazon-Cognito-IdP" class="headerlink" title="Amazon Cognito IdP"></a>Amazon Cognito IdP</h3><p>본 학습에서는 AWS IoT 서비스(MQTT 메시지 브로커)에 연결하기 위하여 <strong>Amazon Cognito의 자격 증명 공급자(IdP)</strong> 를 통해 AWS 서비스에 대해 인증합니다. 저는 텔레노어 커넥션에서 지원하는 플랫폼 서비스를 통해 <strong>사용자 풀 아이디(User Pool ID)</strong> 와 <strong>자격 증명 풀 아이디(Identity Pool ID)</strong> 를 제공받기 때문에 이 부분에 대해서는 다루지 않습니다.</p><blockquote><p>추후에 Amazon Cognito를 직접 다루게된다면 사용자 풀과 자격 증명 풀 아이디를 발급하는 부분에 대해서 추가하겠습니다.</p></blockquote><p>Amazon Cognito를 활용하여 <strong>AWS 서비스에 인증하는 순서</strong>는 다음과 같습니다.</p><ol><li>발급받은 자격 증명 풀 아이디로 Cogntio 자격 증명 풀에 인증하여 임시 자격 증명 발급</li><li>등록된 사용자 풀 아이디로 Cognito 사용자 풀에 인증하여 JWT 토큰 발급</li><li>Cogntio 자격 증명 공급자에 인증된 사용자의 JWT 토큰을 로그인 맵에 설정</li><li>인증된 사용자의 자격 증명 발급</li><li>Cognito 임시 자격 증명을 사용하여 AWS IoT 서비스에 연결</li></ol><h4 id="Identity-Pool-Credentials"><a href="#Identity-Pool-Credentials" class="headerlink" title="Identity Pool Credentials"></a>Identity Pool Credentials</h4><p>먼저, CognitoIdentityClient로 자격 증명 풀 아이디와 리전에 대한 자격 증명 풀 크레덴셜을 발급합니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AwsSessionCredentials <span class="title">baseCredentials</span><span class="params">(String identityPoolId, Region region)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (CognitoIdentityClient cognitoIdentityClient = CognitoIdentityClient.builder()</span><br><span class="line">            .credentialsProvider(AnonymousCredentialsProvider.create())</span><br><span class="line">            .region(region)</span><br><span class="line">            .build()) &#123;</span><br><span class="line"></span><br><span class="line">        GetIdRequest getIdRequest = GetIdRequest.builder()</span><br><span class="line">                .identityPoolId(identityPoolId)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        String identityId = cognitoIdentityClient.getId(getIdRequest).identityId();</span><br><span class="line">        GetCredentialsForIdentityRequest getCredentialsForIdentityRequest = GetCredentialsForIdentityRequest.builder()</span><br><span class="line">                .identityId(identityId)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Credentials credentials = cognitoIdentityClient.getCredentialsForIdentity(getCredentialsForIdentityRequest).credentials();</span><br><span class="line">        <span class="keyword">return</span> AwsSessionCredentials.create(credentials.accessKeyId(), credentials.secretKey(), credentials.sessionToken());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="User-Pool-JWT-Token"><a href="#User-Pool-JWT-Token" class="headerlink" title="User Pool JWT Token"></a>User Pool JWT Token</h4><p>발급된 크레덴셜으로 사용자 풀에 등록되어있는 사용자의 JWT 토큰을 조회하기 위하여 Lambda 함수를 호출합니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">jwt</span><span class="params">(AwsSessionCredentials awsSessionCredentials, Region region)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// https://docs.aws.amazon.com/code-samples/latest/catalog/javav2-lambda-src-main-java-com-example-lambda-LambdaInvoke.java.html</span></span><br><span class="line">    <span class="keyword">try</span> (LambdaClient lambdaClient = LambdaClient.builder()</span><br><span class="line">            .credentialsProvider(StaticCredentialsProvider.create(awsSessionCredentials))</span><br><span class="line">            .region(region)</span><br><span class="line">            .build()) &#123;</span><br><span class="line"></span><br><span class="line">        InvokeRequest invokeRequest = InvokeRequest.builder()</span><br><span class="line">                .functionName(authLambda)</span><br><span class="line">                .payload(SdkBytes.fromString(gson.toJson(authLambdaPayload), StandardCharsets.UTF_8))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        InvokeResponse invokeResponse = lambdaClient.invoke(invokeRequest);</span><br><span class="line">        Map&lt;String, Object&gt; responsePayload = gson.fromJson(<span class="keyword">new</span> String(invokeResponse.payload().asByteArray(), StandardCharsets.UTF_8),</span><br><span class="line">                <span class="keyword">new</span> TypeToken&lt;HashMap&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">                &#125;.getType());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (String) ((Map&lt;String, Object&gt;) responsePayload.get(<span class="string">&quot;credentials&quot;</span>)).get(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Identity-Provider-with-Logins"><a href="#Identity-Provider-with-Logins" class="headerlink" title="Identity Provider with Logins"></a>Identity Provider with Logins</h4><p>인증된 사용자의 JWT 토큰을 Cognito 자격 증명 공급자의 <strong>Logins</strong> 맵에 부여하여 크레덴셜을 발급합니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COGNITO_IDENTITY_PROVIDER_URL = <span class="string">&quot;cognito-idp.%s.amazonaws.com/%s&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Credentials <span class="title">loginsCredentials</span><span class="params">(String identityPoolId, Region region, String userPoolId, String accessToken)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; logins = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    logins.put(String.format(COGNITO_IDENTITY_PROVIDER_URL, region.id(), userPoolId), accessToken);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (CognitoIdentityClient cognitoIdentityClient = CognitoIdentityClient.builder()</span><br><span class="line">            .credentialsProvider(AnonymousCredentialsProvider.create())</span><br><span class="line">            .region(region)</span><br><span class="line">            .build()) &#123;</span><br><span class="line"></span><br><span class="line">        GetIdRequest getIdRequest = GetIdRequest.builder()</span><br><span class="line">                .identityPoolId(identityPoolId)</span><br><span class="line">                .logins(logins)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        String identityId = cognitoIdentityClient.getId(getIdRequest).identityId();</span><br><span class="line">        GetCredentialsForIdentityRequest getCredentialsForIdentityRequest = GetCredentialsForIdentityRequest.builder()</span><br><span class="line">                .identityId(identityId)</span><br><span class="line">                .logins(logins)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cognitoIdentityClient.getCredentialsForIdentity(getCredentialsForIdentityRequest).credentials();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-integrating-user-pools-with-identity-pools.html#amazon-cognito-integrating-user-pools-with-identity-pools-using">Integrating a User Pool with an Identity Pool</a></p></blockquote><h3 id="Connenction-using-MqttClient"><a href="#Connenction-using-MqttClient" class="headerlink" title="Connenction using MqttClient"></a>Connenction using MqttClient</h3><p>Amazon Cognito를 사용하여 AWS 서비스에 인증할 수 있는 크레덴셜을 발급했습니다. 이제 이 크레덴셜을 사용하여 MQTT 클라이언트로 AWS IoT의 MQTT 메시지 브로커에 연결할 수 있습니다. AWS IoT Device SDK에서는 AWSIotMqttClient로 연결할 수 있지만 <strong>AWS IoT Device SDK v2</strong>에서는 MqttClientConnection로 연결할 수 있습니다.</p><blockquote><p>SDK V2들은 C로 작성된 <a href="https://docs.aws.amazon.com/sdkref/latest/guide/common-runtime.html">AWS Common Runtime</a> 기반하에 동작하게 됩니다.</p></blockquote><p>MqttClientConnection는 자바 8의 CompletableFuture을 통해 비동기로 수행되어 다음과 같이 사용할 수 있습니다.</p><p>먼저, AwsIotMqttConnectionBuilder를 사용하여 크레덴셜을 기반으로 MqttClientConnection를 생성합니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> MqttClientConnection <span class="title">build</span><span class="params">(String clientEndpoint, String clientId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        String accessKeyId, String secretKey, String sessionToken, String region)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (EventLoopGroup eventLoopGroup = <span class="keyword">new</span> EventLoopGroup(<span class="number">1</span>);</span><br><span class="line">            HostResolver resolver = <span class="keyword">new</span> HostResolver(eventLoopGroup);</span><br><span class="line">            ClientBootstrap clientBootstrap = <span class="keyword">new</span> ClientBootstrap(eventLoopGroup, resolver);</span><br><span class="line">            AwsIotMqttConnectionBuilder builder = AwsIotMqttConnectionBuilder.newDefaultBuilder()) &#123;</span><br><span class="line"></span><br><span class="line">        StaticCredentialsProvider credentialsProvider =</span><br><span class="line">                <span class="keyword">new</span> StaticCredentialsProvider.StaticCredentialsProviderBuilder()</span><br><span class="line">                        .withAccessKeyId(accessKeyId.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                        .withSecretAccessKey(secretKey.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                        .withSessionToken(sessionToken.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .withEndpoint(clientEndpoint)</span><br><span class="line">                .withClientId(clientId)</span><br><span class="line">                .withBootstrap(clientBootstrap)</span><br><span class="line">                .withSocketOptions(<span class="keyword">new</span> SocketOptions())</span><br><span class="line">                .withWebsockets(<span class="keyword">true</span>)</span><br><span class="line">                .withWebsocketCredentialsProvider(credentialsProvider)</span><br><span class="line">                .withWebsocketSigningRegion(region)</span><br><span class="line">                .withConnectionEventCallbacks(clientConnectionEvents())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만들어진 MqttClientConnection는 자바 8의 CompletableFuture로 동작하므로 다음과 같이 비동기로 수행할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;squid:S3740&quot;, &quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Credentials credentials)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MqttClientConnection connection = build(clientEndpoint, clientId,</span><br><span class="line">                credentials.accessKeyId(), credentials.secretKey(), credentials.sessionToken(), region.id());</span><br><span class="line">        CompletableFuture&lt;Boolean&gt; connectFuture = connection.connect();</span><br><span class="line">        connectFuture.get();</span><br><span class="line"></span><br><span class="line">        ListenableFutureTask futureTask = <span class="keyword">new</span> ListenableFutureTask(() -&gt;</span><br><span class="line">                connection.subscribe(<span class="string">&quot;thing-update/#&quot;</span>, QualityOfService.AT_MOST_ONCE, handler -&gt; &#123;</span><br><span class="line">                    String payload = <span class="keyword">new</span> String(handler.getPayload(), StandardCharsets.UTF_8);</span><br><span class="line">                    log.info(<span class="string">&quot;topic:&#123;&#125;, qos: &#123;&#125;&quot;</span>, handler.getTopic(), handler.getQos());</span><br><span class="line">                    log.trace(<span class="string">&quot;===&gt; &#123;&#125;&quot;</span>, payload);</span><br><span class="line">                &#125;));</span><br><span class="line"></span><br><span class="line">        futureTask.run();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException | ExecutionException e) &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ListenableFutureTask는 스프링에서 지원하는 클래스입니다.</p></blockquote><h4 id="AWS-IoT-Client-Endpoint"><a href="#AWS-IoT-Client-Endpoint" class="headerlink" title="AWS IoT Client Endpoint"></a>AWS IoT Client Endpoint</h4><p>AWS IoT 엔드포인트는 <a href="distrust-symantec-ca-in-jdk">시만텍 CA 인증서를 신뢰하지 않음</a> 문제가 발생하지 않도록 <strong>ATS CA 인증서</strong> 에서 서명한 인증서를 제공하는 ATS 엔드포인트로 설정합니다.</p><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">aws-iot.client.endpoint</span>=<span class="string">&#123;ACCOUNT_SPECIFIC_PREFIX&#125;-ats.iot.&#123;REGION_ID&#125;.amazonaws.com</span></span><br><span class="line"><span class="meta">aws-iot.client.id</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><p>클라이언트 엔드포인트에 접근할 수 있는 인증된 사용자의 크레덴셜의 정보라면 메시지 페이로드가 구독된 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/aws-iot-mqtt-subscribe.png"></p><p>이상으로 AWS IoT Device SDK Java로 MQTT 연결하기를 마칩니다. 감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다. 오늘은 AWS IoT Core의 MQTT 클라이언트로 MQTT 브로커에 연결하여 메시지를 게시하고 수신해보는 방법에 대해서 알아봅니다.&lt;/p&gt;
&lt;h2 id=&quot;AWS-IoT-Core&quot;&gt;&lt;a href=&quot;#AWS-IoT-</summary>
      
    
    
    
    
    <category term="AWS" scheme="https://kdevkr.github.io/tags/AWS/"/>
    
    <category term="MQTT" scheme="https://kdevkr.github.io/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>쿠버네티스 클러스터 구성하기</title>
    <link href="https://kdevkr.github.io/setup-kubernetes-cluster/"/>
    <id>https://kdevkr.github.io/setup-kubernetes-cluster/</id>
    <published>2021-07-27T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다.</p><p>이번 글의 주제는 <strong>쿠버네티스 클러스터 구성하기</strong>입니다. IT 인프라에 대한 전문 인력이 아닌 일반 개발자가 컨테이너 환경을 위한 쿠버네티스 클러스터를 이해하고 구성하기까지는 생각보다 많은 시간이 소요되는 것 같습니다. 단순히 도커를 사용하여 컨테이너를 실행하는 것은 어렵지 않아서 도커 컴포즈 문서를 정의해서 여러가지 인스턴스를 별다른 설정없이 간단하게 실행해왔습니다. 하지만, 애플리케이션을 배포하고 운영하기 위하여 컨테이너 인프라 환경을 쿠버네티스 클러스터로 구성하는 것은 IT 인프라에 대한 전문 지식이 필요합니다.</p><p>현재 다니고 있는 회사의 소속팀에서는 애플리케이션을 아마존 웹 서비스의 빈스톡(Beanstalk)을 사용하여 배포하고 운영하기 때문에 컨테이너 환경의 쿠버네티스 클러스터에 대한 학습이 필요하진 않았습니다.</p><blockquote><p>물론, 쿠버네티스 클러스터 도입을 시도하긴 했습니다만… 현재 애플리케이션 규모 상 배보다 배꼽이 더 크다는 결과를 가진다고 판단하여 도입을 취소했습니다.</p></blockquote><p>그러나 2021년 클라우드 플래그십 프로젝트 중 에너지 분야에 참여함으로써 현재 운영중인 애플리케이션을 클라우드 환경에서 컨테이너 환경으로 배포하고 운영하기 위하여 모놀리식 아키텍처로 개발된 애플리케이션의 일정 부분을 마이크로서비스 아키텍처로 변경하여 기능적으로 분리하는 작업을 진행중입니다. 이렇게 마이크로서비스 아키텍처로 분리되는 애플리케이션들은 나무기술의 <strong>칵테일 클라우드</strong>라고하는 PaaS를 통해 배포되고 운영될 예정입니다.</p><p>쿠버네티스 클러스터를 직접 구성하여 운영 및 관리를 수행하는 것은 아니지만 쿠버네티스 클러스터 기반의 컨테이너 인프라 환경을 이해하기 위해 쿠버네티스 클러스터를 직접 구성해보고 간단한 애플리케이션을 배포해보는 것을 학습하고 이 글을 통해 공유하고자합니다.</p><h2 id="쿠버네티스-클러스터"><a href="#쿠버네티스-클러스터" class="headerlink" title="쿠버네티스 클러스터"></a>쿠버네티스 클러스터</h2><p>쿠버네티스는 분산형 코디네이터인 주키퍼처럼 다수의 호스트가 서로 통신하여 클러스터를 구성하게되며 컨트롤 플레인 노드의 API 서버가 동작하게 되는 마스터 노드와 컨테이너를 실행하는 환경이 되는 워커 노드로 구분됩니다. 우리는 워커 노드와는 통신할 필요가 없으며 마스터 노드의 API 서버와 통신하여 클러스터를 제어하고 애플리케이션을 배포하게됩니다.</p><h3 id="클러스터-구성의-어려움"><a href="#클러스터-구성의-어려움" class="headerlink" title="클러스터 구성의 어려움"></a>클러스터 구성의 어려움</h3><p>쿠버네티스 클러스터를 구성하는게 어려운 이유는 IT 인프라 지식 뿐만 아니라 클러스터 구성을 위해 여러가지 오픈소스 기술이 사용된다는 점입니다. 쿠버네티스 클러스터 구성에 대한 서비스를 PaaS로 제공하는 <a href="https://paas-ta.kr/intro/guideInstall">파스-타(PaaS-TA)</a> 또는 <a href="https://www.cocktailcloud.io/main.do">칵테일 클라우드</a>도 <strong>kubespray, istio</strong> 등 여러가지 오픈소스를 결합한 솔루션을 만들어 제공하는 것입니다. 또한, 쿠버네티스 클러스터 운영 관리의 어려움으로 인하여 쿠버네티스 클러스터를 쉽게 구성하고 관리할 수 있는 AWS의 <a href="https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html">Amazon EKS</a> 또는 구글 클라우드 플랫폼의 GKE와 같이 클라우드 서비스에서 쉽게 쿠버네티스 클러스터를 구성할 수 있는 서비스를 제공하는 이유이기도 합니다.</p><h3 id="쿠버네티스-클러스터-배포-도구"><a href="#쿠버네티스-클러스터-배포-도구" class="headerlink" title="쿠버네티스 클러스터 배포 도구"></a>쿠버네티스 클러스터 배포 도구</h3><p>쿠버네티스 클러스터를 구성할 수 있는 도구는 <strong>kubeadm, kops, kubespray</strong> 뿐만 아니라 IoT를 목적으로 경량화된 클러스터 구성을 목적으로하는 <a href="https://k3s.io/">k3s</a>, <a href="https://microk8s.io/">MicroK8s</a>등 여러가지 오픈소스가 존재합니다. 저는 쿠버네티스 공식 문서에서도 가이드를 제공하고 온-프레미스 환경에서 일반적으로 많이 사용될 수 있는 기본적인 배포 도구인 <code>kubeadm</code>을 사용하여 쿠버네티스 클러스터를 구성하겠습니다.</p><blockquote><p>본 글에서는 쿠버네티스 클러스터를 데비안 계열의 배포판인 우분투 리눅스를 사용합니다.</p></blockquote><figure class="highlight sh"><figcaption><span>우분투 kubeadm 패키지 설치</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y apt-transport-https ca-certificates curl</span><br><span class="line"></span><br><span class="line">sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&quot;</span> | sudo tee /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>위 명령어에 의해 설치된 패키지는 다음의 역할을 수행하게 되며 클러스터를 구성하는 모든 호스트에 설치해야합니다.</p><table><thead><tr><th>패키지</th><th>용도</th></tr></thead><tbody><tr><td>kubeadm</td><td>쿠버네티스 클러스터 배포</td></tr><tr><td>kubelet</td><td>컨트롤 플레인 노드와 통신하여 컨테이너가 파드에 실행될 수 있도록 도와주는 에이전트</td></tr><tr><td>kubectl</td><td>쿠버네티스 클러스터에 명령을 내리기 위해 사용하는 CLI</td></tr></tbody></table><blockquote><p>본 글에서는 최신 버전의 <strong>쿠버네티스 클러스터 1.21+</strong> 를 사용합니다.<br>쿠버네티스 클러스터를 안정적으로 유지하기 위하여 주기적으로 쿠버네티스 클러스터의 버전을 업그레이드하는 것을 권장한다고 합니다.</p></blockquote><h3 id="컨테이너-인프라-환경의-가용성"><a href="#컨테이너-인프라-환경의-가용성" class="headerlink" title="컨테이너 인프라 환경의 가용성"></a>컨테이너 인프라 환경의 가용성</h3><p>쿠버네티스 클러스터 구성 가이드에 따르면 클러스터를 구성하게 되는 모든 호스트가 컨테이너 인프라 환경을 구성할 수 있는지 가용성을 확인해야합니다. 따라서, 이미 사용하고 있는 호스트 보다는 쿠버네티스 클러스터를 구성을 위한 별도의 호스트를 사용하는게 좋습니다.</p><h4 id="메모리-스왑-기능-비활성화"><a href="#메모리-스왑-기능-비활성화" class="headerlink" title="메모리 스왑 기능 비활성화"></a>메모리 스왑 기능 비활성화</h4><p><a href="https://github.com/kubernetes/enhancements/issues/2400">Node swap support</a>와 같이 쿠버네티스 클러스터에서 스왑 기능을 활성화하기 위한 작업을 진행중이지만 현재로선 <strong>kubelet</strong>이 정상적으로 동작하기 위해서는 반드시 우분투 리눅스의 메모리 스왑 기능을 비활성화 해야합니다.</p><figure class="highlight sh"><figcaption><span>우분투 메모리 스왑 비활성화</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo swapoff -a &amp;&amp; sudo sed -i <span class="string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><h4 id="클러스터-노드의-고유-주소-확인"><a href="#클러스터-노드의-고유-주소-확인" class="headerlink" title="클러스터 노드의 고유 주소 확인"></a>클러스터 노드의 고유 주소 확인</h4><p>쿠버네티스 클러스터를 구성하는 호스트들이 서로 통신할 수 있도록 네트워크 환경에서 고유한 주소를 가지고 있는지 확인해야합니다. 쿠버네티스 클러스터에서는 각 노드를 <strong>호스트의 MAC 주소</strong> 및 <strong>product_uuid</strong>를 기준으로 구분한다고 합니다.</p><figure class="highlight sh"><figcaption><span>MAC 주소 및 product_uuid 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">sudo ifconfig -a</span><br><span class="line">sudo cat /sys/class/dmi/id/product_uuid</span><br></pre></td></tr></table></figure><p>그리고 쿠버네티스 클러스터를 구성하는 호스트의 역할에 맞게 사용해야될 포트를 점유하고 있는지 확인해야합니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/setup-kubernetes-cluster-01.png"></p><h4 id="컨테이너-런타임-선택하기"><a href="#컨테이너-런타임-선택하기" class="headerlink" title="컨테이너 런타임 선택하기"></a>컨테이너 런타임 선택하기</h4><p>쿠버네티스 클러스터에서 파드 안에 컨테이너를 실행하기 위해 사용하게 될 컨테이너 런타임을 선택하고 설치해야합니다. 쿠버네티스 클러스터를 구성하는 많은 글에서 도커를 컨테이너 런타임으로 사용하는 것으로 소개하고있지만 앞으로 최신 쿠버네티스 클러스터 버전에서는 <a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/">컨테이너 런타임 인터페이스를 준수하지 않는 도커</a>를 컨테이너 런타임으로 지원하지 않을 예정입니다. 따라서, 저는 <a href="https://cri-o.io/">CRI-O</a>를 컨테이너 런타임으로 선택하고 설치하겠습니다.</p><p>CRI-O를 설치하기 전에 우분투의 iptables가 브릿지된 트래픽을 바라보도록 설정해야합니다.</p><figure class="highlight sh"><figcaption><span>오버레이 네트워크 및 iptables 브릿지 트래픽 활성화</span></figcaption><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/crio.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><p>위 작업이 완료되었다면 다음의 명령어로 CRI-O 관련 패키지를 설치합니다.</p><figure class="highlight sh"><figcaption><span>CRI-O 관련 패키지 설치</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /&quot;</span> | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.21/xUbuntu_20.04/ /&quot;</span> | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:1.21.list</span><br><span class="line"></span><br><span class="line">curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.21/xUbuntu_20.04/Release.key | sudo apt-key add -</span><br><span class="line">curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y cri-o cri-o-runc</span><br><span class="line">sudo apt-mark hold cri-o cri-o-runc</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> crio --now</span><br></pre></td></tr></table></figure><h4 id="파드-네트워크-플러그인-결정하기"><a href="#파드-네트워크-플러그인-결정하기" class="headerlink" title="파드 네트워크 플러그인 결정하기"></a>파드 네트워크 플러그인 결정하기</h4><p>쿠버네티스 클러스터에 실행되는 파드에서 컨테이너 간 통신을 위해서 <a href="https://github.com/containernetworking/cni">컨테이너 네트워크 인터페이스(CNI)</a>를 사용하게 됩니다. 다양한 CNI 오픈소스 중에서 파드 네트워크 플러그인을 선택해야하며 파드 네트워크 플러그인에 따라 쿠버네티스 클러스터를 시작할 때 CIDR 블록을 지정해야할 수 있습니다. </p><p>예를 들어, <a href="https://github.com/flannel-io/flannel">플라넬(Flannel)</a>을 CNI로 사용하는 경우 쿠버네티스 클러스터 시작 시 <strong>10.244.0.0/16</strong>를 파드 네트워크 CIDR 블록으로 지정해야합니다.</p><figure class="highlight sh"><figcaption><span>플라넬을 파드 네트워크 플러그인으로 사용하는 클러스터 시작 예시</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --pod-network-cidr=10.244.0.0/16</span><br><span class="line">sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h4 id="네트워크-정책-플러그인"><a href="#네트워크-정책-플러그인" class="headerlink" title="네트워크 정책 플러그인"></a>네트워크 정책 플러그인</h4><p>파드 네트워크 플러그인으로 결정한 <strong>플라넬</strong>이라는 CNI는 네트워크 정책 기능을 포함하고 있지 않는 순수하게 네트워크 통신을 목적으로 만들어진 오픈소스입니다. 만약, 우리의 쿠버네티스 클러스터의 파드에 대한 트래픽 제어를 위해서 인그레스 또는 이그레스와 같은 기능을 적용해야한다면 <strong>네트워크 정책</strong> 기능이 포함된 플러그인을 파드 네트워크 플러그인으로 사용해야합니다.</p><p>일반적으로 구현 방식의 차이가 있지만 다음과 같은 네트워크 정책을 포함하는 플러그인을 사용합니다.</p><ul><li><a href="https://github.com/antrea-io/antrea">Antrea</a></li><li><a href="https://github.com/projectcalico/calico">Calico</a></li><li><a href="https://github.com/weaveworks/weave">Weave Net</a></li><li><a href="https://docs.projectcalico.org/getting-started/kubernetes/flannel/flannel">Canal</a></li></ul><p>예를 들어, 플라넬을 CNI로 사용하고 싶다면 캘리코(Calico)를 네트워크 정책 공급자로 사용할 수 있는 <strong>카날(Canal)</strong> 을 선택하면 됩니다.</p><figure class="highlight sh"><figcaption><span>카날을 사용하는 클러스터 시작 예시</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --pod-network-cidr=10.244.0.0/16</span><br><span class="line">sudo kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml</span><br></pre></td></tr></table></figure><blockquote><p>카날은 플라넬을 CNI로 사용하므로 플라넬의 파드 네트워크 CIDR 블록을 지정합니다.</p></blockquote><h3 id="쿠버네티스-클러스터-DNS-서버"><a href="#쿠버네티스-클러스터-DNS-서버" class="headerlink" title="쿠버네티스 클러스터 DNS 서버"></a>쿠버네티스 클러스터 DNS 서버</h3><p>쿠버네티스 클러스터에 서비스 디스커버리를 적용하기 위하여 DNS 서버를 설치해야합니다. 쿠버네티스 클러스터 1.11+ 부터는 <a href="https://github.com/kubernetes/dns">kube-dns</a> 보다는 <a href="https://coredns.io/">CoreDNS</a>을 권장하고 우리가 클러스터 시작 시 사용하게 될 kubeadm은 기본적으로 <strong>CoreDNS</strong>를 포함하고 있습니다. 기본적으로 포함되는 CoreDNS는 <strong>대기 상태</strong>에 있다가 우리가 쿠버네티스 클러스터에 파드 네트워크 플러그인을 설치하면 자동으로 실행됩니다.</p><h2 id="쿠버네티스-클러스터-시작하기"><a href="#쿠버네티스-클러스터-시작하기" class="headerlink" title="쿠버네티스 클러스터 시작하기"></a>쿠버네티스 클러스터 시작하기</h2><p>쿠버네티스 클러스터 구성을 위해 확인해야할 몇가지 항목에 대해서 알아보았습니다. 이제 저와 함께 쿠버네티스 클러스터를 구성할 호스트를 준비하고 쿠버네티스 배포 도구인 <strong>kubeadm</strong>을 사용하여 쿠버네티스 클러스터를 시작해보겠습니다.</p><p>먼저, 아마존 웹 서비스의 EC2 인스턴스를 <strong>우분투 20.04 LTS</strong> 로 시작하겠습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/setup-kubernetes-cluster-02.png"></p><p>그리고 kubeadm는 클러스터 시작을 위해 <strong>CPU 2코어 이상, 메모리 2GB 이상</strong> 을 요구하므로 t2.medium 인스턴스를 선택했습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/setup-kubernetes-cluster-03.png"></p><p>쿠버네티스 클러스터 구성을 위한 학습을 목적으로 하므로 <strong>마스터 노드와 함께 1개 이상의 워커 노드를 구성</strong>하기 위하여 <strong>최소 2개의 우분투 인스턴스</strong>를 준비합니다.</p><h3 id="클러스터-구성-호스트에-대한-사전-작업"><a href="#클러스터-구성-호스트에-대한-사전-작업" class="headerlink" title="클러스터 구성 호스트에 대한 사전 작업"></a>클러스터 구성 호스트에 대한 사전 작업</h3><p>우리가 준비한 우분투 인스턴스에 쿠버네티스 인프라 환경을 구성하기 위한 사전작업을 수행합니다.</p><figure class="highlight sh"><figcaption><span>메모리 스왑 기능 비활성화</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo swapoff -a &amp;&amp; sudo sed -i <span class="string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/crio.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>CRI-O 컨테이너 런타임 설치하기</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /&quot;</span> | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.21/xUbuntu_20.04/ /&quot;</span> | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:1.21.list</span><br><span class="line"></span><br><span class="line">curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.21/xUbuntu_20.04/Release.key | sudo apt-key add -</span><br><span class="line">curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y cri-o cri-o-runc</span><br><span class="line">sudo apt-mark hold cri-o cri-o-runc</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> crio --now</span><br></pre></td></tr></table></figure><h3 id="컨트롤-플레인-노드-초기화"><a href="#컨트롤-플레인-노드-초기화" class="headerlink" title="컨트롤 플레인 노드 초기화"></a>컨트롤 플레인 노드 초기화</h3><p>이제 쿠버네티스 클러스터를 시작하기 위해서 <strong>kubeadm init</strong> 명령어를 사용하여 <strong>컨트롤 플레인 노드를 초기화</strong> 합니다. 컨트롤 플레인 노드가 형성된 호스트를 <strong>마스터 노드</strong>라고 부르게 됩니다.</p><p>쿠버네티스 클러스터에서 파드 네트워크 플러그인을 플라넬을 사용할 예정이므로 컨트롤 플레인 노드 시작 시 <strong>파드 네트워크 CIDR 블록</strong>을 <code>10.244.0.0/16</code>으로 지정해야합니다.</p><figure class="highlight sh"><figcaption><span>컨트롤 플레인 노드를 초기화하여 클러스터 시작</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.31.11.193:6443 --token oov7g6.bi85jo3kv15oeryf \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:08874017445a8ddf06dde3e9e7be79097c470883f0384c046290e207ec3342bd</span><br></pre></td></tr></table></figure><p>컨트롤 플레인 노드가 성공적으로 초기화되었으니 파드 네트워크 플러그인으로 플라넬을 설치해야합니다. 플라넬을 설치하기 위해서는 쿠버네티스 클러스터를 제어하는데 사용하는 <strong>큐브컨트롤(kubectl)</strong> 에 클러스터 접근을 위한 설정을 진행해야합니다. 컨트롤 플레인 노드 초기화 시 출력된 다음의 명령어를 실행합니다.</p><figure class="highlight sh"><figcaption><span>큐브컨트롤에 클러스터 접근 설정</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>위 명령어를 수행하고 나면 큐브컨트롤이 <strong>$HOME/.kube</strong> 경로에 있는 클러스터 접근 구성파일이라고 하는 <code>kubeconfig</code>를 참조하여 클러스터에 접근하여 명령을 수행합니다. 클러스터 접근 구성파일에 대해서는 자세히 알아볼 필요가 없으므로 넘어가겠습니다.</p><p>쿠버네티스 클러스터에 실행된 모든 파드를 조회하기 위하여 다음의 명령어를 실행합니다.</p><figure class="highlight sh"><figcaption><span>클러스터의 모든 네임스페이스에 대한 파드 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br><span class="line">...</span><br><span class="line">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-558bd4d5db-b9t9v                   0/1     Pending   0          106s</span><br><span class="line">kube-system   coredns-558bd4d5db-bkhc4                   0/1     Pending   0          106s</span><br><span class="line">kube-system   etcd-ip-172-31-11-193                      1/1     Running   0          117s</span><br><span class="line">kube-system   kube-apiserver-ip-172-31-11-193            1/1     Running   0          117s</span><br><span class="line">kube-system   kube-controller-manager-ip-172-31-11-193   1/1     Running   0          2m4s</span><br><span class="line">kube-system   kube-proxy-gm8tr                           1/1     Running   0          106s</span><br><span class="line">kube-system   kube-scheduler-ip-172-31-11-193            1/1     Running   0          2m5s</span><br></pre></td></tr></table></figure><p>앞서 쿠버네티스 클러스터 DNS 서버 관련해서 CoreDNS는 파드 네트워크 플러그인이 설치되기까지 대기 상태에 있다고 하였습니다. 플라넬을 파드 네트워크 플러그인으로 설치하고나서 CoreDNS가 실행되는지 확인해보겠습니다.</p><h3 id="네트워크-플러그인-설치"><a href="#네트워크-플러그인-설치" class="headerlink" title="네트워크 플러그인 설치"></a>네트워크 플러그인 설치</h3><p>파드 네트워크 플러그인으로 플라넬을 사용하면서 네트워크 정책 기능을 추가하기 위해 네트워크 정책 플러그인으로 캘리코를 사용하는 카날(Canal)을 쿠버네티스 클러스터에 설치하겠습니다.</p><figure class="highlight sh"><figcaption><span>카날 네트워크 플러그인 설치</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">kubectl get pods -A</span><br><span class="line">...</span><br><span class="line">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   calico-kube-controllers-78d6f96c7b-ltz89   1/1     Running   0          22s</span><br><span class="line">kube-system   canal-2mmz5                                2/2     Running   0          23s</span><br><span class="line">kube-system   coredns-558bd4d5db-t4w4s                   1/1     Running   0          94s</span><br><span class="line">kube-system   coredns-558bd4d5db-wg7zg                   1/1     Running   0          94s</span><br><span class="line">kube-system   etcd-ip-172-31-11-193                      1/1     Running   0          102s</span><br><span class="line">kube-system   kube-apiserver-ip-172-31-11-193            1/1     Running   0          109s</span><br><span class="line">kube-system   kube-controller-manager-ip-172-31-11-193   1/1     Running   0          102s</span><br><span class="line">kube-system   kube-proxy-gmp4q                           1/1     Running   0          93s</span><br><span class="line">kube-system   kube-scheduler-ip-172-31-11-193            1/1     Running   0          102s</span><br></pre></td></tr></table></figure><p>카날을 설치하고나서 파드 조회 명령어를 실행하니 대기중이었던 <strong>CoreDNS</strong>가 실행되었음을 확인할 수 있습니다.</p><blockquote><p>눈치채신 분들도 계시겠지만 큐브컨트롤로 모든 네임스페이스에 대해서 조회하기 위해서 사용하는 <strong>–all-namespaces</strong> 옵션 대신에 <strong>-A</strong>를 대신 사용할 수 있습니다.<br>이렇게 큐브컨트롤을 사용할 때 긴 이름을 대신할 수 있는 축약어를 지원하니 여러가지 축약 형태를 찾아보세요.</p></blockquote><h3 id="쿠버네티스-클러스터-워커-노드-추가"><a href="#쿠버네티스-클러스터-워커-노드-추가" class="headerlink" title="쿠버네티스 클러스터 워커 노드 추가"></a>쿠버네티스 클러스터 워커 노드 추가</h3><p>앞선 작업까지 수행하면 쿠버네티스 클러스터 시작이 완료되었다고 볼 수 있습니다. 이제 쿠버네티스 클러스터 구성을 완료하기 위하여 클러스터가 파드에 컨테이너를 실행하는 환경이 되는 워커 노드를 참여시켜야합니다. 쿠버네티스 클러스터에 다른 호스트를 워커 노드로 참여시키기 위해서는 컨트롤 플레인 노드를 초기화하고 나서 출력되는 다음의 명령어를 워커 노드가 될 호스트에서 실행해야합니다.</p><blockquote><p>클러스터를 구성하는 모든 호스트에 kubectl, kubelet을 설치하는 것이 이러한 이유입니다.</p></blockquote><figure class="highlight sh"><figcaption><span>쿠버네티스 클러스터에 워커 노드 참여</span></figcaption><table><tr><td class="code"><pre><span class="line">kubeadm join 172.31.11.193:6443 --token oov7g6.bi85jo3kv15oeryf \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:08874017445a8ddf06dde3e9e7be79097c470883f0384c046290e207ec3342bd </span><br><span class="line">...</span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>마지막 문장에 따라 컨트롤 플레인 노드가 있는 마스터 노드에서 <strong>kubectl get nodes</strong> 명령어를 실행해봅니다.</p><figure class="highlight sh"><figcaption><span>쿠버네티스 클러스터의 노드 조회</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get [nodes/node/no]</span></span><br><span class="line">kubectl get no</span><br><span class="line">...</span><br><span class="line">NAME               STATUS   ROLES                  AGE     VERSION</span><br><span class="line">ip-172-31-11-193   Ready    control-plane,master   3m18s   v1.21.3</span><br><span class="line">ip-172-31-41-106   Ready    &lt;none&gt;                 42s     v1.21.3</span><br></pre></td></tr></table></figure><p>저는 클러스터를 구성하는 노드를 조회하는 명령어를 축약 형태로 실행했습니다. 이렇게 큐브컨트롤로 명령어를 실행할 때 쿠버네티스 리소스를 <strong>복수형, 단수형, 축약형</strong>을 모두 사용할 수 있습니다. 이렇게 쿠버네티스 배포 도구로 클러스터를 시작하고 워커 노드를 참여시켜 쿠버네티스 클러스터 구성을 완료했습니다.</p><blockquote><p>위 명령어 수행결과에서 워커 노드에 ROLES가 없는 것이 문제가 안되지만 정확한 구분을 위해 worker를 추가하고 싶다면 다음의 명령어를 실행하시면 됩니다.</p></blockquote><figure class="highlight sh"><figcaption><span>워커 노드에 worker ROLE 레이블 추가</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl label node ip-172-31-41-106 node-role.kubernetes.io/worker=worker</span><br></pre></td></tr></table></figure><h2 id="쿠버네티스-클러스터-제어하기"><a href="#쿠버네티스-클러스터-제어하기" class="headerlink" title="쿠버네티스 클러스터 제어하기"></a>쿠버네티스 클러스터 제어하기</h2><p>쿠버네티스 클러스터를 제어하기 위해서는 마스터 노드인 호스트에 접속하여 큐브컨트롤으로 명령어를 실행해야합니다. 그러나, 반드시 쿠버네티스 클러스터 제어를 위해서 마스터 노드에서 수행할 필요는 없습니다. 그 이유는 <strong>큐브컨트롤(kubectl)</strong> 이 쿠버네티스 클러스터 접근을 위해서 <strong>클러스터 접근 구성 파일(kubeconfig)</strong> 을 참조해서 클러스터에 접근하기 때문입니다. </p><p>쿠버네티스 클러스터의 마스터 노드가 아닌 <strong>로컬 컴퓨터(외부 호스트)</strong> 에서 큐브컨트롤을 사용하여 쿠버네티스 클러스터에 명령어를 실행하기 위해서 <a href="https://kubernetes.io/ko/docs/concepts/configuration/organize-cluster-access-kubeconfig">클러스터 접근 구성 파일을 정의</a>하고 <a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-certs">쿠버네티스 클러스터에서 사용중인 인증서를 갱신</a>하는 작업을 수행해야합니다.</p><h3 id="외부-호스트를-위한-클러스터-접근-구성-파일-정의"><a href="#외부-호스트를-위한-클러스터-접근-구성-파일-정의" class="headerlink" title="외부 호스트를 위한 클러스터 접근 구성 파일 정의"></a>외부 호스트를 위한 클러스터 접근 구성 파일 정의</h3><p>먼저, 마스터 노드에서 사용중인 클러스터 접근 구성파일을 외부 호스트인 로컬 컴퓨터에 복사하여 로컬 컴퓨터에 설치된 큐브컨트롤로 쿠버네티스 클러스터에 접근할 수 있는지 확인합니다.</p><blockquote><p>마스터 노드인 호스트의 외부 아이피는 54.180.137.161 입니다.</p></blockquote><figure class="highlight ps"><figcaption><span>외부 호스트에서 클러스터 접근 구성파일 복사</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir .kube</span><br><span class="line">scp <span class="literal">-i</span> .\keypair\mambo.pem ubuntu@<span class="number">54.180</span>.<span class="number">137.161</span>:.kube/config .kube/config</span><br></pre></td></tr></table></figure><p>로컬 컴퓨터에서 큐브컨트롤이 참조하는 클러스터 접근 구성정보를 조회해보면 마스터 노드에서 사용하던 클러스터 접근 구성 파일이기 때문에 클러스터의 주소가 마스터 노드의 내부 아이피인 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/control-kubernetes-cluster-03.png" alt="클러스터 주소가 마스터 노드의 내부 아이피"></p><p>클러스터 주소를 외부 아이피로 변경하기 위해서 다음의 명령어를 수행합니다.</p><figure class="highlight ps"><figcaption><span>클러스터 접근 구성 파일의 클러스터 주소 변경</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl config -<span class="literal">-kubeconfig</span>=config <span class="built_in">set-cluster</span> kubernetes -<span class="literal">-server</span>=https://<span class="number">54.180</span>.<span class="number">137.161</span>:<span class="number">6443</span> </span><br></pre></td></tr></table></figure><p>다시 큐브컨트롤이 참조하는 클러스터 접근 구성 정보를 조회해보면 다음과 같이 클러스터 주소가 외부 아이피로 변경된 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/control-kubernetes-cluster-04.png" alt="외부 아이피로 변경된 클러스터 주소"></p><p>이제 로컬 컴퓨터에서 큐브컨트롤이 클러스터에 접근할 수 있게 접근 구성 파일을 정의했습니다. (수정이지만…?) 큐브컨트롤로 클러스터의 모든 네임스페이스에 대한 파드를 조회해봅니다.</p><figure class="highlight ps"><figcaption><span>외부 호스트에서 클러스터의 모든 네임스페이스에 대한 파드 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl get po <span class="literal">-A</span></span><br><span class="line">...</span><br><span class="line">Unable to connect to the server: x509: certificate is valid <span class="keyword">for</span> <span class="number">10.96</span>.<span class="number">0.1</span>, <span class="number">172.31</span>.<span class="number">6.192</span>, not <span class="number">54.180</span>.<span class="number">137.16</span></span><br></pre></td></tr></table></figure><p>위와 같이 X509 인증서 관련 오류가 발생한 이유는 우리가 입력한 쿠버네티스 클러스터 주소인 54.180.137.161이 접근 구성 파일에 있는 인증서 정보에 포함되어있지 않기 때문입니다. 기본적으로 쿠버네티스 클러스터 시작 시 컨트롤 플레인 노드를 초기화할 때 API 서버에서 사용할 인증서를 생성하는 과정에서 내부 아이피만을 인증서에 포함시키기 때문입니다. </p><p>마스터 노드로 돌아가서 쿠버네티스 클러스터 시작 시 인증서에 외부아이피를 포함시키기 위해서 힘들게 구성하였던 클러스터를 초기화시키겠습니다.</p><figure class="highlight sh"><figcaption><span>쿠버네티스 클러스터 초기화</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm reset</span><br><span class="line">rm <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>쿠버네티스 클러스터 시작 시 외부 아이피를 API 서버에 대한 인증서에 포함하도록 <strong>--apiserver-cert-extra-sans</strong> 파라미터 옵션을 추가합니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/control-kubernetes-cluster-05.png"></p><p>위와 같이 쿠버네티스 클러스터 시작 시 출력되는 정보를 통해 우리가 파라미터로 입력한 <strong>외부 아이피(54.180.137.161)가 인증서에 포함됨</strong> 을 확인할 수 있었습니다. 쿠버네티스 클러스터를 시작하여 컨트롤 플레인 노드가 초기화되었으면 kubeconfig 파일을 로컬 컴퓨터로 복사하고 큐브컨트롤으로 파드 조회를 시도해봅니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/control-kubernetes-cluster-06.png"></p><p>쿠버네티스 클러스터에서 인증서에 포함된 외부 아이피를 확인하여 클러스터 접근을 허용하여 모든 네임스페이스에 대한 파드가 조회되었습니다.</p><h3 id="외부-호스트를-위한-사용자-및-인증서-발행"><a href="#외부-호스트를-위한-사용자-및-인증서-발행" class="headerlink" title="외부 호스트를 위한 사용자 및 인증서 발행"></a>외부 호스트를 위한 사용자 및 인증서 발행</h3><p>앞서 확인한 내용은 클러스터 접근 구성파일을 통해 외부 호스트에서 클러스터에 접근할 수 있는 것입니다. 그런데 우리가 마스터 노드에서 사용하던 클러스터 접근 구성파일에는 쿠버네티스 클러스터를 제어하기 위한 kubernetes-admin 사용자의 인증정보가 포함되어있습니다. 쿠버네티스 클러스터 관리 담당자는 클러스터에 대한 모든 권한을 가지는 접근 구성파일을 내보내지않고 클러스터에 접근할 수 있으며 특정 네임스페이스 권한이 부여된 사용자를 만들고 쿠버네티스 클러스터의 루트 CA 인증서를 기반으로 사용자의 인증서를 발행하여 클러스터 접근 구성 파일을 정의할 수 있게 지원하는 게 좋습니다.</p><p>쿠버네티스 클러스터에는 사용자라는 오브젝트는 없지만 인증서에 포함되는 주체를 통해 그룹과 사용자 개념을 사용해서 인증을 수행합니다. 따라서, 우리는 쿠버네티스 클러스터의 루트 CA 인증서를 기반으로 하위 인증서 발행하고 하위 인증서에 포함된 주체에 대한 RBAC 기반의 Role을 쿠버네티스 클러스터에 생성해야합니다.</p><p>먼저, 루트 CA 인증서를 기반으로 하위 인증서를 발행하기 위하여 클라우드플레어에서 만든 cfssl 설치합니다.</p><figure class="highlight sh"><figcaption><span>마스터 노드에 cfssl 패키지 설치</span></figcaption><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl_1.5.0_linux_amd64 -o cfssl</span><br><span class="line">curl -L https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssljson_1.5.0_linux_amd64 -o cfssljson</span><br><span class="line">curl -L https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl-certinfo_1.5.0_linux_amd64 -o cfssl-certinfo</span><br><span class="line"></span><br><span class="line">chmod +x cfssl* </span><br><span class="line">sudo mv cfssl* /usr/bin/</span><br></pre></td></tr></table></figure><p>cfssl이 설치되었으면 사용자 인증서가 발행될 폴더를 만들고나서 쿠버네티스 클러스터가 사용중인 루트 CA 인증서 파일을 복사합니다. 루트 CA 인증서 파일은 일반적으로 <strong>/etc/kubernetes/pki</strong> 폴더에 있습니다.</p><p>인증서 발행을 위해 다음의 명령어를 차례대로 실행합니다.</p><figure class="highlight sh"><figcaption><span>인증서 발행 폴더 이동 및 쿠버네티스 클러스터 루트 CA 인증서 복사</span></figcaption><table><tr><td class="code"><pre><span class="line">mkdir cert &amp;&amp; <span class="built_in">cd</span> cert</span><br><span class="line">sudo cp /etc/kubernetes/pki/ca* ./</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>하위 인증서 발행 정보 및 서명 요청 정의</span></figcaption><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | tee mambo-config.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;signing&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;default&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;expiry&quot;: &quot;8760h&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;profiles&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;mambo&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;usages&quot;: [</span></span><br><span class="line"><span class="string">          &quot;signing&quot;,</span></span><br><span class="line"><span class="string">          &quot;key encipherment&quot;,</span></span><br><span class="line"><span class="string">          &quot;server auth&quot;,</span></span><br><span class="line"><span class="string">          &quot;client auth&quot;</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        &quot;expiry&quot;: &quot;8760h&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | tee mambo-csr.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;CN&quot;: &quot;mambo&quot;,</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">    &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;names&quot;:[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;O&quot;: &quot;system:masters&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>사용자 인증서 발행</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo cfssl gencert -ca=ca.crt -ca-key=ca.key -config=mambo-config.json -profile=mambo mambo-csr.json | cfssljson -bare mambo</span><br><span class="line"></span><br><span class="line">ll</span><br><span class="line">-rw-r--r-- 1 mambo mambo 1066 Jul 28 15:04 ca.crt</span><br><span class="line">-rw------- 1 root  root  1679 Jul 28 15:04 ca.key</span><br><span class="line">-rw-rw-r-- 1 mambo mambo  277 Jul 28 15:02 mambo-config.json</span><br><span class="line">-rw-r--r-- 1 mambo mambo  920 Jul 28 15:08 mambo.csr</span><br><span class="line">-rw-rw-r-- 1 mambo mambo  129 Jul 28 15:02 mambo-csr.json</span><br><span class="line">-rw------- 1 mambo mambo 1675 Jul 28 15:08 mambo-key.pem</span><br><span class="line">-rw-rw-r-- 1 mambo mambo 1204 Jul 28 15:08 mambo.pem</span><br></pre></td></tr></table></figure><p>이렇게 만들어진 인증서를 기반으로 큐브컨트롤을 사용하여 클러스터 접근 구성 파일(kubeconfig)를 정의합니다.</p><figure class="highlight sh"><figcaption><span>사용자 클러스터 접근 구성 파일 정의</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl config --kubeconfig=mambo-config set-cluster kubernetes --server=https://54.180.137.161:6443 --certificate-authority=ca.crt</span><br><span class="line">kubectl config --kubeconfig=mambo-config set-credentials mambo --client-certificate=mambo.pem --client-key=mambo-key.pem</span><br><span class="line">kubectl config --kubeconfig=mambo-config set-context kubernetes-master --cluster=kubernetes --user=mambo</span><br><span class="line">kubectl config --kubeconfig=mambo-config use-context kubernetes-master</span><br></pre></td></tr></table></figure><p>만들어진 클러스터 접근 구성 정보를 조회하고 파드를 조회합니다.</p><figure class="highlight sh"><figcaption><span>클러스터 접근 구성 정보 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl config view --kubeconfig=mambo-config</span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority: ca.crt</span><br><span class="line">    server: https://54.180.137.161:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: mambo</span><br><span class="line">  name: kubernetes-master</span><br><span class="line">current-context: kubernetes-master</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: mambo</span><br><span class="line">  user:</span><br><span class="line">    client-certificate: mambo.pem</span><br><span class="line">    client-key: mambo-key.pem</span><br></pre></td></tr></table></figure><p>우리는 mambo 사용자에 대한 Role을 쿠버네티스 클러스터에 생성하지 않았지만 파드가 조회가 가능한 이유는 인증서 발행 시 <strong>system:masters</strong> 라고 지정하였기 때문입니다. 쿠버네티스 클러스터에는 미리 정의된 <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles">Role</a>이 존재하는데 그 중에서 <code>system:masters</code>는 모든 권한을 가지는 사용자 그룹(cluster-admin)을 가리키게되어 mambo라는 사용자는 모든 권한을 보유한 것으로 처리된 것입니다.</p><blockquote><p>결국 mambo 라는 사용자는 모든 권한을 가지는 사용자 kubernetes-admin과 같습니다.</p></blockquote><p>우리는 모든 권한을 가지는 사용자가 아니라 특정 권한을 가지는 사용자를 만들고 인증해야하므로 기존에 만들었던 인증서를 삭제하고 특정 권한을 가지는 인증서를 다시 발행해야합니다. </p><figure class="highlight sh"><figcaption><span>인증서 서명 요청 파일 수정 및 인증서 재발행</span></figcaption><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | tee mambo-csr.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;CN&quot;: &quot;mambo&quot;,</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">    &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;names&quot;:[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;O&quot;: &quot;admin:mambo&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo cfssl gencert -ca=ca.crt -ca-key=ca.key -config=mambo-config.json -profile=mambo mambo-csr.json | cfssljson -bare mambo</span><br></pre></td></tr></table></figure><p>이제 다시 큐브컨트롤을 사용하여 클러스터의 파드를 조회합니다.</p><figure class="highlight sh"><figcaption><span>클러스터 파드 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl get po -n kube-system --kubeconfig=config</span><br><span class="line">Error from server (Forbidden): pods is forbidden: User <span class="string">&quot;mambo&quot;</span> cannot list resource <span class="string">&quot;pods&quot;</span> <span class="keyword">in</span> API group <span class="string">&quot;&quot;</span> <span class="keyword">in</span> the namespace <span class="string">&quot;kube-system&quot;</span></span><br></pre></td></tr></table></figure><p><strong>system:masters</strong>을 지정했던것과 다르게 mambo 사용자는 kube-system 네임스페이스에 대한 파드 조회를 수행할 수 없게되었습니다. 이것은 우리가 아직 쿠버네티스 클러스터에 mambo 사용자에 대한 Role을 생성하지 않았기 때문입니다. 이제 다음과 같이 쿠버네티스 클러스터에 Mambo 사용자가 파드 조회를 위한 권한을 가지도록 Role을 생성합니다. </p><figure class="highlight sh"><figcaption><span>사용자 Role 및 Rolebinding 생성</span></figcaption><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | tee mambo-rbac.yaml</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: Role</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  namespace: kube-system</span></span><br><span class="line"><span class="string">  name: mambo-rbac-role</span></span><br><span class="line"><span class="string">rules:</span></span><br><span class="line"><span class="string">- apiGroups: [&quot;&quot;]</span></span><br><span class="line"><span class="string">  resources: [&quot;pods&quot;]</span></span><br><span class="line"><span class="string">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: RoleBinding</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  namespace: kube-system</span></span><br><span class="line"><span class="string">  name: mambo-rbac-rolebinding</span></span><br><span class="line"><span class="string">subjects:</span></span><br><span class="line"><span class="string">- kind: User</span></span><br><span class="line"><span class="string">  name: mambo</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">roleRef:</span></span><br><span class="line"><span class="string">  kind: Role</span></span><br><span class="line"><span class="string">  name: mambo-rbac-role</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">kubectl create -f mambo-rbac.yaml</span><br><span class="line">role.rbac.authorization.k8s.io/mambo-rbac-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/mambo-rbac-rolebinding created</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>클러스터 파드 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl get po -n kube-system --kubeconfig=mambo-config</span><br><span class="line">...</span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-558bd4d5db-kvfhl                  1/1     Running   0          4h33m</span><br><span class="line">coredns-558bd4d5db-z7kf7                  1/1     Running   0          4h33m</span><br><span class="line">etcd-ip-172-31-6-192                      1/1     Running   0          3h54m</span><br><span class="line">kube-apiserver-ip-172-31-6-192            1/1     Running   0          3h54m</span><br><span class="line">kube-controller-manager-ip-172-31-6-192   1/1     Running   0          3h54m</span><br><span class="line">kube-flannel-ds-dh2xp                     1/1     Running   0          4h23m</span><br><span class="line">kube-proxy-tbm76                          1/1     Running   0          4h33m</span><br><span class="line">kube-scheduler-ip-172-31-6-192            1/1     Running   0          3h54m</span><br></pre></td></tr></table></figure><p>신규 사용자에 대한 인증서를 발행하고 Role을 만들어 사용자에게 바인딩함으로써 쿠버네티스 클러스터에 동작중인 파드를 조회할 수 있게 되었습니다.</p><h2 id="쿠버네티스-클러스터-관리하기"><a href="#쿠버네티스-클러스터-관리하기" class="headerlink" title="쿠버네티스 클러스터 관리하기"></a>쿠버네티스 클러스터 관리하기</h2><p>쿠버네티스 클러스터 시작 시 발행되는 인증서는 기본적으로 1년동안 사용할 수 있게 만료일자가 설정됩니다. 따라서, 쿠버네티스 클러스터가 시작된 지 1년이 지나게되면 쿠버네티스 클러스터 동작이 정상적이지 않을 수 있습니다. 그래서 우리는 쿠버네티스 클러스터에서 사용중인 인증서가 만료되기전에 인증서를 갱신할 수 있어야합니다.</p><h3 id="클러스터-인증서-갱신하기"><a href="#클러스터-인증서-갱신하기" class="headerlink" title="클러스터 인증서 갱신하기"></a>클러스터 인증서 갱신하기</h3><p>앞서 우리는 클러스터 외부 호스트에서 접근할 수 있도록 쿠버네티스 클러스터 시작 시 외부 아이피를 파라미터 옵션으로 추가했습니다. 하지만, 쿠버네티스 클러스터를 운영하고 있는 도중에는 클러스터를 초기화하고 다시 시작할 수 없습니다. 그래서 쿠버네티스 클러스터에서 사용중인 인증서를 다시 발행하기 위해서는 <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init-phase/#cmd-phase-certs">kubeadm init phase certs</a> 명령어를 사용해야합니다. </p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/kubernetes/pki</span><br><span class="line"><span class="comment"># 기존 인증서 삭제 또는 백업</span></span><br><span class="line">sudo cp apiserver.crt apiserver.crt.old</span><br><span class="line">sudo cp apiserver.key apiserver.key.old</span><br><span class="line">sudo rm apiserver.crt apiserver.key</span><br><span class="line"></span><br><span class="line">sudo kubeadm init phase certs apiserver --apiserver-advertise-address=172.31.6.192 --apiserver-cert-extra-sans=54.180.137.161</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver&quot;</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [ip-172-31-6-192 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.6.192 54.180.137.161]</span><br><span class="line"></span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>쿠버네티스 시작 시 수행하는 과정 중 일부를 수행하여 API 서버에 대한 인증서를 발행하면서 외부 아이피가 포함된 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/control-kubernetes-cluster-07.png"></p><p>위와 같이 외부 호스트인 로컬 컴퓨터에서도 클러스터에 접근할 수 있게 됩니다.</p><h3 id="클러스터-인증서-만료일자-조회하기"><a href="#클러스터-인증서-만료일자-조회하기" class="headerlink" title="클러스터 인증서 만료일자 조회하기"></a>클러스터 인증서 만료일자 조회하기</h3><p>쿠버네티스 클러스터에서 사용중인 인증서를 발행할 수 있는 방법을 알았지만 인증서가 언제 만료되는지도 알아야합니다. <strong>kubeadm certs check-expiration</strong> 명령어를 사용하면 쿠버네티스 클러스터에서 사용중인 인증서의 만료일자를 조회할 수 있습니다. </p><figure class="highlight sh"><figcaption><span>클러스터 인증서 만료일자 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Jul 28, 2022 11:17 UTC   364d                                    no</span><br><span class="line">apiserver                  Jul 28, 2022 11:17 UTC   364d            ca                      no</span><br><span class="line">apiserver-etcd-client      Jul 28, 2022 11:17 UTC   364d            etcd-ca                 no</span><br><span class="line">apiserver-kubelet-client   Jul 28, 2022 11:17 UTC   364d            ca                      no</span><br><span class="line">controller-manager.conf    Jul 28, 2022 11:17 UTC   364d                                    no</span><br><span class="line">etcd-healthcheck-client    Jul 28, 2022 11:17 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-peer                  Jul 28, 2022 11:17 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-server                Jul 28, 2022 11:17 UTC   364d            etcd-ca                 no</span><br><span class="line">front-proxy-client         Jul 28, 2022 11:17 UTC   364d            front-proxy-ca          no</span><br><span class="line">scheduler.conf             Jul 28, 2022 11:17 UTC   364d                                    no</span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Jul 26, 2031 11:17 UTC   9y              no</span><br><span class="line">etcd-ca                 Jul 26, 2031 11:17 UTC   9y              no</span><br><span class="line">front-proxy-ca          Jul 26, 2031 11:17 UTC   9y              no</span><br></pre></td></tr></table></figure><h3 id="클러스터-인증서-수동-갱신"><a href="#클러스터-인증서-수동-갱신" class="headerlink" title="클러스터 인증서 수동 갱신"></a>클러스터 인증서 수동 갱신</h3><p>쿠버네티스 클러스터에서 사용중인 인증서를 갱신하는 방법에는 쿠버네티스 클러스터 버전을 업그레이드하여 자동으로 갱신되게하거나 사용중인 인증서를 수동으로 갱신하는 명령어를 실행해야합니다. <strong>kubeadm certs renew all</strong> 명령어를 실행하면 쿠버네티스 클러스터에서 사용중인 인증서를 수동으로 갱신할 수 있습니다.</p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm certs renew all</span><br><span class="line">[renew] Reading configuration from the cluster...</span><br><span class="line">[renew] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class="line"></span><br><span class="line">certificate embedded <span class="keyword">in</span> the kubeconfig file <span class="keyword">for</span> the admin to use and <span class="keyword">for</span> kubeadm itself renewed</span><br><span class="line">certificate <span class="keyword">for</span> serving the Kubernetes API renewed</span><br><span class="line">certificate the apiserver uses to access etcd renewed</span><br><span class="line">certificate <span class="keyword">for</span> the API server to connect to kubelet renewed</span><br><span class="line">certificate embedded <span class="keyword">in</span> the kubeconfig file <span class="keyword">for</span> the controller manager to use renewed</span><br><span class="line">certificate <span class="keyword">for</span> liveness probes to healthcheck etcd renewed</span><br><span class="line">certificate <span class="keyword">for</span> etcd nodes to communicate with each other renewed</span><br><span class="line">certificate <span class="keyword">for</span> serving etcd renewed</span><br><span class="line">certificate <span class="keyword">for</span> the front proxy client renewed</span><br><span class="line">certificate embedded <span class="keyword">in</span> the kubeconfig file <span class="keyword">for</span> the scheduler manager to use renewed</span><br><span class="line"></span><br><span class="line">Done renewing certificates. You must restart the kube-apiserver, kube-controller-manager, kube-scheduler and etcd, so that they can use the new certificates.</span><br></pre></td></tr></table></figure><p>마지막에 출력된 정보에 따라 갱신된 인증서를 사용할 수 있도록 kube-apiserver, kube-controller-manager, kube-scheduler, etcd 파드를 다시 실행해야하므로 큐브컨트롤을 사용하여 파드 삭제 명령을 실행하면 쿠버네티스 클러스터는 파드를 제거한 뒤 다시 실행하게 됩니다. </p><figure class="highlight sh"><figcaption><span>인증서를 갱신한 파드를 삭제하여 재실행</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 삭제할 파드 조회</span></span><br><span class="line">kubectl get po -n kube-system</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-558bd4d5db-6fqm2               1/1     Running   0          33m</span><br><span class="line">coredns-558bd4d5db-kgdfs               1/1     Running   0          33m</span><br><span class="line">etcd-mambo-master                      1/1     Running   0          33m</span><br><span class="line">kube-apiserver-mambo-master            1/1     Running   0          33m</span><br><span class="line">kube-controller-manager-mambo-master   1/1     Running   0          33m</span><br><span class="line">kube-flannel-ds-g59bl                  1/1     Running   0          23m</span><br><span class="line">kube-flannel-ds-nf4xt                  1/1     Running   0          23m</span><br><span class="line">kube-flannel-ds-q5hkb                  1/1     Running   0          32m</span><br><span class="line">kube-proxy-7j5b6                       1/1     Running   0          33m</span><br><span class="line">kube-proxy-8f47j                       1/1     Running   0          23m</span><br><span class="line">kube-proxy-rflgf                       1/1     Running   0          23m</span><br><span class="line">kube-scheduler-mambo-master            1/1     Running   0          33m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 인증서가 갱신된 파드를 삭제</span></span><br><span class="line">kubectl delete po kube-apiserver-mambo-master kube-controller-manager-mambo-master kube-scheduler-mambo-master etcd-mambo-master -n kube-system</span><br><span class="line">pod <span class="string">&quot;kube-apiserver-mambo-master&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;kube-controller-manager-mambo-master&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;kube-scheduler-mambo-master&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;etcd-mambo-master&quot;</span> deleted</span><br><span class="line"></span><br><span class="line"><span class="comment"># 삭제한 파드가 다시 실행되었는지 조회</span></span><br><span class="line">kubectl get po -n kube-system</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-558bd4d5db-6fqm2               1/1     Running   0          38m</span><br><span class="line">coredns-558bd4d5db-kgdfs               1/1     Running   0          38m</span><br><span class="line">etcd-mambo-master                      1/1     Running   0          11s</span><br><span class="line">kube-apiserver-mambo-master            1/1     Running   0          11s</span><br><span class="line">kube-controller-manager-mambo-master   1/1     Running   0          11s</span><br><span class="line">kube-flannel-ds-g59bl                  1/1     Running   0          29m</span><br><span class="line">kube-flannel-ds-nf4xt                  1/1     Running   0          29m</span><br><span class="line">kube-flannel-ds-q5hkb                  1/1     Running   0          38m</span><br><span class="line">kube-proxy-7j5b6                       1/1     Running   0          38m</span><br><span class="line">kube-proxy-8f47j                       1/1     Running   0          29m</span><br><span class="line">kube-proxy-rflgf                       1/1     Running   0          29m</span><br><span class="line">kube-scheduler-mambo-master            1/1     Running   0          11s</span><br></pre></td></tr></table></figure><p>쿠버네티스 클러스터에서 사용중인 인증서에 대한 만료일자를 다시 조회합니다.</p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo kubeadm certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Jul 28, 2022 11:45 UTC   364d                                    no</span><br><span class="line">apiserver                  Jul 28, 2022 11:45 UTC   364d            ca                      no</span><br><span class="line">apiserver-etcd-client      Jul 28, 2022 11:45 UTC   364d            etcd-ca                 no</span><br><span class="line">apiserver-kubelet-client   Jul 28, 2022 11:45 UTC   364d            ca                      no</span><br><span class="line">controller-manager.conf    Jul 28, 2022 11:45 UTC   364d                                    no</span><br><span class="line">etcd-healthcheck-client    Jul 28, 2022 11:45 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-peer                  Jul 28, 2022 11:45 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-server                Jul 28, 2022 11:45 UTC   364d            etcd-ca                 no</span><br><span class="line">front-proxy-client         Jul 28, 2022 11:45 UTC   364d            front-proxy-ca          no</span><br><span class="line">scheduler.conf             Jul 28, 2022 11:45 UTC   364d                                    no</span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Jul 26, 2031 11:17 UTC   9y              no</span><br><span class="line">etcd-ca                 Jul 26, 2031 11:17 UTC   9y              no</span><br><span class="line">front-proxy-ca          Jul 26, 2031 11:17 UTC   9y              no</span><br></pre></td></tr></table></figure><p>쿠버네티스 클러스터의 만료일자가 갱신되었음을 확인할 수 있습니다.</p><h2 id="쿠버네티스-대시보드-설치하기"><a href="#쿠버네티스-대시보드-설치하기" class="headerlink" title="쿠버네티스 대시보드 설치하기"></a>쿠버네티스 대시보드 설치하기</h2><p>쿠버네티스 대시보드 애드온은 쿠버네티스 클러스터를 웹 UI 기반으로 제어하고 클러스터에 대한 정보를 조회하고 모니터링할 수 있는 기능을 제공합니다. 쿠버네티스 대시보드를 클러스터에 추가하기 위하여 다음의 명령어를 실행합니다.</p><figure class="highlight sh"><figcaption><span>쿠버네티스 대시보드 애드온 설치</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br><span class="line">---</span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br><span class="line"></span><br><span class="line">kubectl get deploy -n kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">dashboard-metrics-scraper   1/1     1            1           24s</span><br><span class="line">kubernetes-dashboard        1/1     1            1           24s</span><br></pre></td></tr></table></figure><p>쿠버네티스 대시보드를 설치했지만 서비스를 조회해보면 다음과 같이 <strong>ClusterIP</strong> 유형인 것을 확인할 수 있습니다.</p><figure class="highlight sh"><figcaption><span>쿠버네티스 대시보드 서비스 조회</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl get svc -n kubernetes-dashboard</span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.108.18.117   &lt;none&gt;        8000/TCP   74s</span><br><span class="line">kubernetes-dashboard        ClusterIP   10.100.36.145   &lt;none&gt;        443/TCP    74s</span><br></pre></td></tr></table></figure><p>쿠버네티스 대시보드에 대한 서비스는 기본적으로 ClusterIP 유형으로 되어있으므로 쿠버네티스 클러스터 환경에서만 접근할 수 있습니다. 마스터 노드에서 큐브컨트롤로 쿠버네티스 클러스터에 프록시를 활성화하고나서 로컬 컴퓨터에서 마스터 노드에 대해서 SSH 터널링을 통해 쿠버네티스 대시보드에 접근할 수 있습니다.</p><figure class="highlight sh"><figcaption><span>쿠버네티스 클러스터 프록시 및 SSH 터널링</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line">Kubernetes control plane is running at https://192.168.0.5:6443</span><br><span class="line">CoreDNS is running at https://192.168.0.5:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br><span class="line"><span class="comment"># http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</span></span><br><span class="line"></span><br><span class="line">ssh -L 8001:localhost:8001 mambo@192.168.0.5</span><br></pre></td></tr></table></figure><p>이제 로컬 컴퓨터에서 <a href="http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/%EB%A1%9C">http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/로</a> 접속하면 쿠버네티스 대시보드 로그인 화면이 표시됩니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-02.png"></p><p>하지만, 이렇게 SSH 터널링으로 쿠버네티스 대시보드로 접근하는 방식은 불편한점이 있기 때문에 쿠버네티스 대시보드를 외부에서 직접 접근할 수 있으면 좋겠습니다. 외부에서 접근하기 위해서는 쿠버네티스 대시보드를 외부로 노출할 수 있도록 쿠버네티스 대시보드 서비스의 유형을 ClusterIP 에서 <strong>NodePort</strong>로 변경해야합니다.</p><h3 id="쿠버네티스-대시보드-서비스-유형-변경하기"><a href="#쿠버네티스-대시보드-서비스-유형-변경하기" class="headerlink" title="쿠버네티스 대시보드 서비스 유형 변경하기"></a>쿠버네티스 대시보드 서비스 유형 변경하기</h3><figure class="highlight sh"><figcaption><span>쿠버네티스 대시보드 서비스 변경</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-30T10:47:00Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">  resourceVersion: <span class="string">&quot;240375&quot;</span></span><br><span class="line">  uid: ae974cb2-d0af-46be-8036-4a9d33c9afbd</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.100.36.145</span><br><span class="line">  clusterIPs:</span><br><span class="line">  - 10.100.36.145</span><br><span class="line">  ipFamilies:</span><br><span class="line">  - IPv4</span><br><span class="line">  ipFamilyPolicy: SingleStack</span><br><span class="line">  ports:</span><br><span class="line">  - port: 443</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get service kubernetes-dashboard -n kubernetes-dashboard -o jsonpath=&quot;&#123;.spec.ports[0].nodePort&#125;&quot; | awk &#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line">kubectl get svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line">NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.100.36.145   &lt;none&gt;        443:31532/TCP   21m</span><br></pre></td></tr></table></figure><p>쿠버네티스 대시보드가 31532 포트로 노출되었으니 <strong><a href="https://192.168.0.5:31532/">https://192.168.0.5:31532</a></strong>으로 접속합니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-01.png"></p><p>쿠버네티스 클러스터에서 사용하는 루트 CA 인증서가 현재 브라우저에 신뢰할 수 있는 CA 인증서로 등록되어있지 않기 때문에 <strong>안전하지 않음으로 이동</strong>을 눌러 쿠버네티스 대시보드로 들어갑니다.</p><h3 id="쿠버네티스-대시보드-로그인하기"><a href="#쿠버네티스-대시보드-로그인하기" class="headerlink" title="쿠버네티스 대시보드 로그인하기"></a>쿠버네티스 대시보드 로그인하기</h3><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-02.png"></p><p>쿠버네티스 대시보드 서비스 어카운트의 토큰으로 쿠버네티스 대시보드에 로그인할 수 있습니다. 큐브컨트롤로 다음의 명령어를 실행하여 쿠버네티스 대시보드 사용자의 토큰을 조회합니다.</p><figure class="highlight sh"><figcaption><span>쿠버네티스 대시보드 사용자 토큰 조회</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get secret -n kubernetes-dashboard $(kubectl get sa kubernetes-dashboard -n kubernetes-dashboard -o jsonpath=&quot;&#123;.secrets[0].name&#125;&quot;) -o jsonpath=&quot;&#123;.data.token&#125;&quot; | base64 --decode | awk &#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">kubectl describe secret $(kubectl get secret -n kubernetes-dashboard | grep kubernetes-dashboard-token | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">Name:         kubernetes-dashboard-token-4qs2r</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: kubernetes-dashboard</span><br><span class="line">              kubernetes.io/service-account.uid: 52ab8346-d0ce-465a-b170-1a240cbcbf83</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6InhrcWdOeEV2RFh2ajZES0Z1b0lLb3F2TmtuSUVnLVdFbktadk9SWjNYXzQifQ....</span><br><span class="line">ca.crt:     1066 bytes</span><br></pre></td></tr></table></figure><p>쿠버네티스 대시보드 사용자의 토큰을 복사해서 쿠버네티스 대시보드에 로그인합니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-03.png"></p><p>토큰을 사용하여 로그인되었지만 이 서비스 어카운트는 쿠버네티스 클러스터에 대한 권한을 가지고 있지 않아서 어떠한 정보도 표시되지 않습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-04.png"></p><p>우리는 쿠버네티스 클러스터에 대한 권한을 쿠버네티스 대시보드 사용자에게 부여해야합니다.</p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl delete clusterrole kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line">kubectl delete clusterrolebinding kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF | tee dashboard-admin.yaml</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRoleBinding</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: kubernetes-dashboard</span></span><br><span class="line"><span class="string">  namespace: kubernetes-dashboard</span></span><br><span class="line"><span class="string">roleRef:</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">  kind: ClusterRole</span></span><br><span class="line"><span class="string">  name: cluster-admin</span></span><br><span class="line"><span class="string">subjects:</span></span><br><span class="line"><span class="string">  - kind: ServiceAccount</span></span><br><span class="line"><span class="string">    name: kubernetes-dashboard</span></span><br><span class="line"><span class="string">    namespace: kubernetes-dashboard</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">kubectl create -f dashboard-admin.yaml</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br></pre></td></tr></table></figure><p>쿠버네티스 대시보드 사용자에게 모든 권한을 부여하는 <strong>ClusterRole</strong>과 <strong>ClusterRoleBinding</strong>을 다시 만들었으니 쿠버네티스 대시보드에 다시 로그인해보겠습니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-05.png"></p><p>쿠버네티스 대시보드의 서비스 어카운트가 클러스터 권한을 가지게 되었으므로 대시보드에 <strong>모든 네임스페이스</strong>에 대한 워크로드 상태를 조회할 수 있습니다.</p><h3 id="쿠버네티스-대시보드에서-매트릭-서버-설치하기"><a href="#쿠버네티스-대시보드에서-매트릭-서버-설치하기" class="headerlink" title="쿠버네티스 대시보드에서 매트릭 서버 설치하기"></a>쿠버네티스 대시보드에서 매트릭 서버 설치하기</h3><p>쿠버네티스 대시보드에서 클러스터 제어가 가능한지 검증하기 위해서 대시보드를 통해 클러스터에 매트릭 서버(metrics-server)를 설치해보도록 하겠습니다. </p><p><a href="https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml">https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</a></p><p>위 YAML 파일을 다운받아서 아래 화면과 같이 <strong>kubelet-insecure-tls</strong> 옵션을 추가하여 업로드 버튼을 선택합니다.</p><p><img data-src="/images/posts/setup-kubernetes-cluster/access-kubernetes-dashboard-06.png"></p><p>매트릭 서버가 설치되었으므로 큐브컨트롤으로 매트릭을 조회할 수 있는지 확인합니다.</p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">kubectl top no --use-protocol-buffers</span><br><span class="line"></span><br><span class="line">NAME              CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">mambo-master      136m         13%    1275Mi          67%</span><br><span class="line">mambo-worker-01   22m          2%     710Mi           37%</span><br><span class="line">mambo-worker-02   33m          3%     815Mi           43%</span><br></pre></td></tr></table></figure><p>이렇게 쿠버네티스 대시보드를 통해서도 클러스터를 제어할 수 있음을 확인했습니다. 그러나, 쿠버네티스 대시보드는 클러스터 외부에 노출되어있으므로 사용자의 토큰이 유출되지 않도록 잘 관리해야합니다. 저는 학습 목적으로 기본으로 제공하는 쿠버네티스 대시보드 사용자가 모든 권한을 가지게 하였지만 클러스터에 대한 모든 권한을 가지는게 아니라 쿠버네티스 대시보드에 로그인할 사용자를 별도로 만들어서 특정 네임스페이스와 리소스에 대한 권한을 개별적으로 지정하는게 좋습니다.</p><p>이상으로 쿠버네티스 클러스터에 대한 학습을 마칩니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다.&lt;/p&gt;
&lt;p&gt;이번 글의 주제는 &lt;strong&gt;쿠버네티스 클러스터 구성하기&lt;/strong&gt;입니다. IT 인프라에 대한 전문 인력이 아닌 일반 개발자가 컨테이너 환경을 위한 쿠버네티스 클러스터를 이해하고 구성하기까지는 </summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="https://kdevkr.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Pushgateway를 활용하여 사설망 인스턴스 모니터링하기</title>
    <link href="https://kdevkr.github.io/using-pushgateway-to-monitor-private-network-instance/"/>
    <id>https://kdevkr.github.io/using-pushgateway-to-monitor-private-network-instance/</id>
    <published>2021-07-17T00:00:00.000Z</published>
    <updated>2021-10-11T09:08:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 Mambo 입니다. 오늘은 Promethues의 Pushgateway를 왜 사용해야하는지에 대해서 알아보려고 합니다.</p><p>프로메테우스(Promethues)는 기본적으로 매트릭 지표를 제공하는 서버에게 주기적으로 요청하여 매트릭을 수집하도록 되어있습니다. 그래서 매트릭을 수집하기 위해서는 프로메테우스가 수집해야할 설정 파일에 매트릭 수집을 위한 주소를 입력해야합니다. 하지만 모든 인스턴스가 외부 인터넷망을 통해 접근할 수 있는 공인 IP를 할당하지는 않습니다. 또한, 클라우드를 통해 애플리케이션을 운영하는 경우에도 외부로 나가는 트래픽은 허용하지만 외부에서 내부로 들어오는 트래픽은 특정 IP 대역에서만 접근할 수 있도록 보안 규칙을 설정하기도 합니다.</p><p>사설망에 있는 인스턴스는 내부 아이피만 할당되어있고 외부 인터넷망과의 통신은 별도의 장비를 통해 수행합니다. 이 경우 인스턴스에는 공인 IP가 할당되어있지 않기 때문에 프로메테우스에 주소를 입력할 수 없는 상황이 됩니다. 그래서 Polling 방식이 아닌 프로메테우스에 매트릭을 Push 할 수 있도록 해야합니다. 매트릭을 푸시할 수 있도록 지원하는게 바로 <code>Pushgateway</code> 입니다.</p><h2 id="Pushgateway"><a href="#Pushgateway" class="headerlink" title="Pushgateway"></a>Pushgateway</h2><p>프로메테우스에서 제공하는 <a href="https://github.com/prometheus/pushgateway">Pushgateway</a>는 매트릭을 푸시할 수 있도록 지원하며 푸시된 매트릭을 프로메테우스에서 가져갈 수 있도록 중개자 역할을 수행합니다. 따라서, Pushgateway에 푸시된 매트릭을 프로메테우스에서 가져갈 수 있습니다.</p><h3 id="How-to-install-Pushgateway"><a href="#How-to-install-Pushgateway" class="headerlink" title="How to install Pushgateway"></a>How to install Pushgateway</h3><p>Pushgateway는 운영체제별 바이너리 파일을 받아 설치할 수 있습니다. 저는 운영체제에 상관없이 실행하기 위하여 바이너리 파일이 아닌 도커를 사용하여 Pushgateway를 실행하도록 하겠습니다.</p><figure class="highlight yaml"><figcaption><span>pushgateway/docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">pushgateway:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">pushgateway</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">prom/pushgateway:latest</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">9091</span><span class="string">:9091</span></span><br></pre></td></tr></table></figure><h4 id="Optinal-Listening-Port"><a href="#Optinal-Listening-Port" class="headerlink" title="(Optinal) Listening Port"></a>(Optinal) Listening Port</h4><p>Pushgatway는 기본적으로 9091 포트를 할당합니다.<br>만약, 9091 포트가 이미 사용중이라면 <code>web.listen-address</code> 플래그를 설정해야합니다.</p><h4 id="Optional-Enable-Persistence-Mode"><a href="#Optional-Enable-Persistence-Mode" class="headerlink" title="(Optional) Enable Persistence Mode"></a>(Optional) Enable Persistence Mode</h4><p>기본적으로 Pushgateway는 푸시된 매트릭을 저장하지 않습니다.<br>만약, Pushgateway가 예기치 못하게 중단되더라도 푸시된 매트릭을 유지하고 싶다면 <code>persistence.file</code> 플래그로 푸시된 매트릭을 저장할 파일을 지정해야합니다.</p><h4 id="Optional-TLS-and-basic-authentication"><a href="#Optional-TLS-and-basic-authentication" class="headerlink" title="(Optional) TLS and basic authentication"></a>(Optional) TLS and basic authentication</h4><p>Pushgateway는 TLS 및 기본 인증을 지원합니다. 이를 설정하기 위해서는 <code>web.config.file</code> 플래그에 <a href="https://github.com/prometheus/exporter-toolkit/blob/master/docs/web-configuration.md">Web Configuration</a> 파일을 지정하세요.</p><h3 id="Run-Pushgateway"><a href="#Run-Pushgateway" class="headerlink" title="Run Pushgateway"></a>Run Pushgateway</h3><figure class="highlight cmd"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>도커 컴포즈 명령어로 Pushgateway를 실행하고 브라우저를 통해 127.0.0.1:9091로 접근할 수 있습니다.</p><p><img data-src="/images/posts/using-pushgateway/pushgateway-01.png" alt="Pushgateway"></p><h3 id="How-to-push-metrics"><a href="#How-to-push-metrics" class="headerlink" title="How to push metrics"></a>How to push metrics</h3><p>Pushgateway로 매트릭을 푸시하는 것은 HTTP로 수행할 수 있습니다. 다음의 HTTP 요청 예시를 살펴보시죠.</p><figure class="highlight sh"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;some_metric 3.14&quot;</span> | curl --data-binary @- http://127.0.0.1:9091/metrics/job/some_job</span><br></pre></td></tr></table></figure><p><code>curl</code>과 같은 HTTP 요청 도구로 매트릭을 쉽게 푸시할 수 있으며 윈도우 환경에서는 <a href="https://curl.se/windows/">curl</a>을 다운로드하여 설치하거나 Powershell의 Invoke-WebRequest 명령어로 HTTP 요청을 수행할 수도 있습니다.</p><figure class="highlight cmd"><figcaption><span>명령 프롬프트</span></figcaption><table><tr><td class="code"><pre><span class="line">powershell -Command &quot;Invoke-WebRequest -Uri http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9091</span>/metrics/job/some_job -Method POST -Body \&quot;some_metric <span class="number">3</span>.<span class="number">14</span>`n\&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="Push-Examples"><a href="#Push-Examples" class="headerlink" title="Push Examples"></a>Push Examples</h3><p>앞서 HTTP 요청을 통해 매트릭을 푸시할 수 있음을 확인했으므로 node_exporter 또는 windows_exporter와 같은 OS 매트릭을 제공하는 Promethues Exporter에서 매트릭을 받아서 Pushgateway에 매트릭을 보내보도록 하겠습니다.</p><p>다음처럼 curl를 사용하여 매트릭을 쉽게 Pushgateway로 보낼 수 있습니다.</p><figure class="highlight cmd"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">curl -s http://localhost:<span class="number">9100</span>/metrics | curl --data-binary @- http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9091</span>/metrics/job/node-exporter/instance/<span class="number">1</span></span><br><span class="line">curl -s http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9182</span>/metrics | curl --data-binary @- http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9091</span>/metrics/job/windows-exporter/instance/<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Node-Exporter"><a href="#Node-Exporter" class="headerlink" title="Node Exporter"></a>Node Exporter</h4><p><a href="https://github.com/prometheus/node_exporter">prometheus/node_exporter</a>는 리눅스 커널을 사용하는 OS에 대한 매트릭을 제공합니다. 바이너리 뿐만 아니라 도커 이미지를 제공하므로 컨테이너로 실행할 수 있습니다.</p><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">node-exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/prometheus/node-exporter:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node-exporter</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/:/host:ro,rslave&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Windows-Exporter"><a href="#Windows-Exporter" class="headerlink" title="Windows Exporter"></a>Windows Exporter</h4><p><a href="https://github.com/prometheus-community/windows_exporter">prometheus-community/windows_exporter</a>는 윈도우 머신에 대한 매트릭을 제공합니다. windows_exporter는 파일을 다운로드 받아서 설치하거나 실행해야합니다.</p><figure class="highlight cmd"><figcaption><span>Windows Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">.\windows_exporter-<span class="number">0</span>.<span class="number">16</span>.<span class="number">0</span>-<span class="number">386</span>.exe --collectors.enabled &quot;cpu,<span class="built_in">net</span>,cs&quot;</span><br></pre></td></tr></table></figure><p>명령어가 정상적으로 수행되었다면 Pushgateway에서 다음과 같이 Exporter로 부터 받은 매트릭이 보내졌음을 확인할 수 있습니다.<br><img data-src="/images/posts/using-pushgateway/pushgateway-03.png"></p><h3 id="Pushgateway-with-TTL"><a href="#Pushgateway-with-TTL" class="headerlink" title="Pushgateway with TTL"></a>Pushgateway with TTL</h3><p>Pushgateway는 푸시된 매트릭을 지우지 않습니다. 따라서, 매트릭이 다시 푸시되지 않는다면 Pushgateway는 이전에 푸시된 매트릭을 현재 매트릭 정보로 제공합니다. </p><p>몇몇 사용자들이 일정시간이 지나면 매트릭을 지우는 옵션을 적용해달라고 요청하였지만 Pushgateway 개발팀은 적용하지 않는게 맞다고 판단하였습니다.</p><blockquote><p>A while ago, we decided to not implement a “timeout” or TTL for pushed metrics because almost all proposed use cases turned out to be anti-patterns we strongly discourage.</p></blockquote><p>만약, 푸시된 매트릭이 일정시간 이후에 지워져야한다면 푸시된 매트릭을 지우도록 DELETE API를 호출하는 배치 작업을 만들어야합니다. 배치를 만들고 싶지 않고 최신 버전을 사용하지 않아도 괜찮다면 Pushgateway를 포크하여 TimeToLive 옵션을 추가한 <a href="https://github.com/dinumathai/pushgateway">pushgateway-ttl</a>을 사용하시는 것을 추천합니다.</p><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">pushgateway-ttl:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">pushgateway-ttl</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">dmathai/prom-pushgateway-ttl:latest</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">9091</span><span class="string">:9091</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;--metric.timetolive=60s&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Promethues-Scrap-Configs"><a href="#Promethues-Scrap-Configs" class="headerlink" title="Promethues Scrap Configs"></a>Promethues Scrap Configs</h3><p>우리는 사설망의 인스턴스에서 Pushgateway로 매트릭을 푸시할 수 있음을 확인하였습니다. 이제는 Pushgateway에 푸시된 매트릭을 프로메테우스에서 가져갈 수 있도록 설정해야합니다. <a href="https://github.com/prometheus/pushgateway#configure-the-pushgateway-as-a-target-to-scrape">Configure the Pushgateway as a target to scrape</a></p><figure class="highlight yaml"><figcaption><span>promethues.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;pushgateway&#x27;</span></span><br><span class="line">    <span class="attr">honor_labels:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;pushgateway:9091&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p><code>honor_labels</code> 항목이 true로 설정되어야한다는 점에 주의하시기 바랍니다.</p></blockquote><p>프로메테우스가 Pushgateway로부터 매트릭을 수집하였다면 다음과 같이 매트릭을 확인할 수 있습니다.</p><p><img data-src="/images/posts/using-pushgateway/pushgateway-04.png"></p><h3 id="Grafana-Dashboard"><a href="#Grafana-Dashboard" class="headerlink" title="Grafana Dashboard"></a>Grafana Dashboard</h3><p>위 화면에서 확인한 windows_net_bytes_total 매트릭은 windows_expoter로 수집된 매트릭으로 이를 그라파나로 시각화하기 위해 <a href="https://grafana.com/grafana/dashboards/14694">Windows Exporter Dashboardby girb90</a>를 추가하면 다음과 같이 확인할 수 있습니다.</p><p><img data-src="/images/posts/using-pushgateway/pushgateway-05.png"></p><p>이로써 Pushgateway를 활용해 사설망에 위치한 인스턴스에 대한 모니터링을 수행할 수 있음을 알게되었습니다. 감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안녕하세요 Mambo 입니다. 오늘은 Promethues의 Pushgateway를 왜 사용해야하는지에 대해서 알아보려고 합니다.&lt;/p&gt;
&lt;p&gt;프로메테우스(Promethues)는 기본적으로 매트릭 지표를 제공하는 서버에게 주기적으로 요청하여 매트릭</summary>
      
    
    
    
    
    <category term="Promethues" scheme="https://kdevkr.github.io/tags/Promethues/"/>
    
    <category term="Pushgateway" scheme="https://kdevkr.github.io/tags/Pushgateway/"/>
    
  </entry>
  
</feed>
