<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2023-05-27T06:22:24.751Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>서버 타임존을 바꾸지 말자 (Feat. 글로벌)</title>
    <link href="https://kdevkr.github.io/don&#39;t-change-server-timezone/"/>
    <id>https://kdevkr.github.io/don&#39;t-change-server-timezone/</id>
    <published>2023-05-26T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash">ubuntu@ubuntu:~$ timedatectl               Local time: Wed <span class="token number">2023</span>-05-24 <span class="token number">17</span>:21:45 UTC           Universal time: Wed <span class="token number">2023</span>-05-24 <span class="token number">17</span>:21:45 UTC                 RTC time: Wed <span class="token number">2023</span>-05-24 02:16:41                    Time zone: Etc/UTC <span class="token punctuation">(</span>UTC, +0000<span class="token punctuation">)</span>       System clock synchronized: no                                       NTP service: active                               RTC <span class="token keyword">in</span> <span class="token builtin class-name">local</span> TZ: no</code></pre><p>기본적으로 서버와 데이터베이스의 타임존은 UTC를 사용한다. 그러다보니 국내 사용자들을 대상으로 하는 서비스를 제공하는 회사들의 경우 <a href="https://jojoldu.tistory.com/513">서버 타임존을 한국 시간(Asia&#x2F;Seoul, +09:00)로 변경해서 사용</a>하기도 한다. 서비스 도메인 그리고 환경을 이해하고 있어야만 올바른 행위로 생각해야하는데 간혹 애플리케이션의 타임존이 한국시간이라 데이터베이스의 타임존과의 차이로 인한 문제를 해결하려고 데이터베이스에 대한 타임존을 한국시간으로 변경하는 방법에 대해 배경 설명없이 블로그에 공유하는 분들이 꽤나 많다.</p><p>결론적으로 이야기하자면 백엔드 개발자는 시간 정보에 타임존을 적용하는 것을 프레젠테이션 계층인 클라이언트 영역에 위임하는 것이 좋다. 그러니까 사용자는 서버에 저장된 데이터에 상관없이 본인의 시간대를 기준으로 정확한 시간이 표시되어야 하는게 요구하는 바이기 때문이다. 간혹 신입 개발자 뿐만 아니라 어느정도 경험이 있는 경력 개발자들도 국내에서만 일하다보니 고정된 관점을 가지게 되는게 아닌가 싶다. 아무튼 프론트엔드 개발자는 단순히 서버에서 제공하는 데이터를 그대로 표시하고자 하는 직무가 아니며 서버에서 정제되어 제공된 데이터를 사용자에게 적합한 데이터로 변환하여 표시하는 작업도 요구된다. 그리고 그 변환 작업 중 하나가 바로 시간 정보에 사용자의 타임존을 더해서 표시해주는 것이다.</p><p>다음은 오키 커뮤니티 사이트에서 개발자 도구의 네트워크 기능으로 확인한 배너 정보이다. </p><p><img data-src="/images/posts/don't-change-server-timezone/01.png"></p><p>배너의 시작날짜(startDate)와 마감날짜(endDate)가 보이는데 2023-06-02T00:00:00는 아마도 한국 시간을 의미할 것이다. 그렇다면 한국 사람이 아닌 해외에서 접속한 사람이 오키 커뮤니티 사이트에 접속했다면 배너가 정상적으로 표시될 수 있을까? 일반적으로 시간에 대한 데이털르 주고받을 때는 타임존이 표현된 문자열이나 UTC Timestamp(밀리초)와 같은 숫자로 변환된 형태로 구성하는 편이다. 이와 비교해서 아래는 아마존 웹 서비스에서 내려주고 있는 시간값이고 <strong>UTC 타임존이라는 것을 알 수 있도록 +0000을 포함</strong>해주고 있다.</p><p><img data-src="/images/posts/don't-change-server-timezone/02.png"></p><p>오키 프로덕트팀의 개발자들이 잘못되었다고는 볼 수 없지만 (아마도 로컬 타임존이 전달되어 변환해주었을 것) 글로벌 서비스를 준비하는 회사에서 일하고자 하는 개발자나 글로벌 서비스로 전환하려는 회사에 있다면 시간과 타임존에 대해서는 생각보다 중요하게 생각해야한다. 웹 개발자로써 애플리케이션에서 사용되는 타임존은 UTC라는 관점을 가지도록 하자.</p><p>비록 애플리케이션 서버나 데이터베이스에 저장된 시간을 보더라도 한국 시간으로 쉽게 변환하여 인지하지 못할지라도…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;div class=&quot;caption&quot;&gt;&lt;span&gt;Terminal&lt;/span&gt;&lt;/div&gt;&lt;code class=&quot;language-bash&quot;&gt;ubuntu@ubuntu:~$</summary>
      
    
    
    
    
    <category term="Timezone" scheme="https://kdevkr.github.io/tags/Timezone/"/>
    
    <category term="UTC" scheme="https://kdevkr.github.io/tags/UTC/"/>
    
  </entry>
  
  <entry>
    <title>cURL</title>
    <link href="https://kdevkr.github.io/curl/"/>
    <id>https://kdevkr.github.io/curl/</id>
    <published>2023-05-20T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://curl.se/">cURL</a>은 리눅스와 맥 터미널에서 HTTP 요청을 수행해보기 위해서 많이 사용된다. 윈도우에서도 <a href="https://curl.se/windows/microsoft.html">마이크로소프트에서 제공하는 컬 프로그램</a>이 내장되어있다. 그래서 명령 프롬프트(cmd)로 curl 명령어를 수행해보면 아래와 같이 정상적으로 사용할 수 있음을 알 수 있다. 하지만, 윈도우 터미널에서는 명령 프롬프트가 아니라 파워쉘(Powershll)을 사용하고 있으므로 <strong>Invoke-WebRequest</strong> 으로 호출되어 기본적으로 알던 명령어가 수행되지 않는다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>명령 프롬프트</span></div><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Mambo<span class="token operator">></span>curl <span class="token parameter variable">-V</span><span class="token function">curl</span> <span class="token number">8.0</span>.1 <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span> libcurl/8.0.1 Schannel WinIDNRelease-Date: <span class="token number">2023</span>-03-20Protocols: dict <span class="token function">file</span> <span class="token function">ftp</span> ftps http https imap imaps pop3 pop3s smtp smtps telnet tftpFeatures: AsynchDNS HSTS HTTPS-proxy IDN IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI threadsafe Unicode UnixSockets</code></pre><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> curlcmdlet <span class="token function">Invoke-WebRequest</span><span class="token punctuation">(</span>명령 파이프라인 위치 1<span class="token punctuation">)</span>다음 매개 변수에 대한 값을 제공하십시오<span class="token punctuation">.</span> Uri: okky<span class="token punctuation">.</span>krStatusCode        : 200StatusDescription : OKContent           : &lt;<span class="token operator">!</span>DOCTYPE html>&lt;html lang=<span class="token string">"ko"</span> <span class="token keyword">class</span>=<span class="token string">"js-focus-visible h-full"</span>>&lt;head>&lt;meta charSet=<span class="token string">"utf-8"</span><span class="token operator">/</span>>&lt;title>                    OKKY <span class="token operator">-</span> All That Developer&lt;<span class="token operator">/</span>title>&lt;meta name=<span class="token string">"robots"</span> content=<span class="token string">"index,follow"</span><span class="token operator">/</span>>&lt;meta name=<span class="token string">"descriptio                    n"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>RawContent        : HTTP/1<span class="token punctuation">.</span>1 200 OK                    Transfer-Encoding: chunked                    Connection: keep-alive                    Vary: Accept-Encoding                    Cache-Control: private<span class="token punctuation">,</span> no-cache<span class="token punctuation">,</span> no-store<span class="token punctuation">,</span> max-age=0<span class="token punctuation">,</span> must-revalidate                    Content-<span class="token function">Type</span>: text/html<span class="token punctuation">;</span> charset=utf<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Forms             : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Headers           : <span class="token punctuation">&#123;</span><span class="token namespace">[Transfer-Encoding, chunked]</span><span class="token punctuation">,</span> <span class="token namespace">[Connection, keep-alive]</span><span class="token punctuation">,</span> <span class="token namespace">[Vary, Accept-Encoding]</span><span class="token punctuation">,</span> <span class="token namespace">[Cache-Control, p                    rivate, no-cache, no-store, max-age=0, must-revalidate]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>Images            : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>InputFields       : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Links             : <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>ParsedHtml        : mshtml<span class="token punctuation">.</span>HTMLDocumentClassRawContentLength  : 22832</code></pre><p>cURL의 <a href="https://curl.se/windows/microsoft.html">curl shipped by Microsoft</a> 문서를 참고해보면 Powershell Alias에 대한 문제로 인해 curl.exe 로 프로그램을 지정하여 명령어를 수행하도록 안내한다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Mambo<span class="token operator">></span> curl.exe <span class="token parameter variable">-V</span><span class="token function">curl</span> <span class="token number">8.0</span>.1 <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span> libcurl/8.0.1 Schannel WinIDNRelease-Date: <span class="token number">2023</span>-03-20Protocols: dict <span class="token function">file</span> <span class="token function">ftp</span> ftps http https imap imaps pop3 pop3s smtp smtps telnet tftpFeatures: AsynchDNS HSTS HTTPS-proxy IDN IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI threadsafe Unicode UnixSockets</code></pre><h4 id="파워쉘-Alias-제거하기"><a href="#파워쉘-Alias-제거하기" class="headerlink" title="파워쉘 Alias 제거하기"></a>파워쉘 Alias 제거하기</h4><p>Remove-Item 명령어로 Alias를 제거할 수 있으며 명령어를 실행하고나서 상태를 유지할 수 있도록 현재 프로파일을 메모장으로 열어 curl에 대한 Alias를 삭제할 수 있도록 코드를 작성하여 저장하도록 하자. 이제는 굳이 curl.exe 라는 프로그램을 지정해서 호출할 필요가 없어진다.</p><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo> <span class="token function">remove-item</span> alias:\curl<span class="token function">PS</span> C:\Users\Mambo> curl <span class="token operator">-</span>Vcurl 8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span> libcurl/8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 Schannel WinIDNRelease-Date: 2023-03-20Protocols: dict file ftp ftps http https imap imaps pop3 pop3s smtp smtps telnet tftpFeatures: AsynchDNS HSTS HTTPS-proxy IDN IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI threadsafe Unicode UnixSocketsnotepad <span class="token variable">$profile</span><span class="token comment"># 메모장 상단에 입력</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path alias:curl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">Remove-Item</span> alias:curl <span class="token punctuation">&#125;</span></code></pre><h4 id="팁-리눅스에서-cURL-명령어-출력이-개행되지-않을-경우"><a href="#팁-리눅스에서-cURL-명령어-출력이-개행되지-않을-경우" class="headerlink" title="[팁] 리눅스에서 cURL 명령어 출력이 개행되지 않을 경우"></a>[팁] 리눅스에서 cURL 명령어 출력이 개행되지 않을 경우</h4><p>간혹 리눅스에서 cURL 명령어를 수행하면 출력 결과가 개행되지 않아서 다음 명령어를 호출할 때 불편함을 느낄 수 있다. <a href="https://stackoverflow.com/questions/12849584/automatically-add-newline-at-end-of-curl-response-body/14614203#14614203">https://stackoverflow.com/a/14614203</a>에 나와있는 것처럼 사용자 디렉토리에 .curlrc 파일을 만들어서 개행이 동작하도록 작성해두면 된다.</p><pre class="language-bash" data-language="bash"><div class="caption"><span>Terminal</span></div><code class="language-bash"><span class="token function">vi</span> ~/.curlrc<span class="token parameter variable">-w</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://curl.se/&quot;&gt;cURL&lt;/a&gt;은 리눅스와 맥 터미널에서 HTTP 요청을 수행해보기 위해서 많이 사용된다. 윈도우에서도 &lt;a href=&quot;https://curl.se/windows/microsoft.html&quot;&gt;마이크</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sentry</title>
    <link href="https://kdevkr.github.io/sentry/"/>
    <id>https://kdevkr.github.io/sentry/</id>
    <published>2023-05-18T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<p>Sentry는 오류 또는 예외를 추적하기 위한 도구로 회사에서 시스템을 구성하는 언어인 자바, 파이썬, Vue 등 다양한 언어 플랫폼과의 연동을 지원한다. Sentry를 도입하게 되는 이유는 개발자가 테스트하는 과정에서 발견되지 않고 QA 엔지니어가 테스트하는 과정 혹은 고객 테스트 환경에서 마지막으로 검수하는 과정에서 발견되지 않은 취약점을 알아채기 위함이다. 그동안 경험했던 대부분의 품질 이슈는 명확하지 않은 요구사항과 부족한 리뷰 과정으로 인해서 인프라 구성과 사용자의 동작에 따라 발생하는 상황이 대부분이었다고 생각한다.</p><ul><li><a href="https://docs.sentry.io/platforms/java/guides/spring-boot/">Platforms &gt; Java &gt; Spring Boot</a></li><li><a href="https://docs.sentry.io/platforms/javascript/guides/vue/">Platforms &gt; Browser JavaScript &gt; Vue</a></li><li><a href="https://docs.sentry.io/platforms/python/guides/flask/">Platforms &gt; Python &gt; Flask</a></li></ul><blockquote><p>시스템의 데이터를 분석하고 예측하는 기능의 경우 별도의 파이썬 애플리케이션을 담당하는 팀에서 관리하고 있으므로 Sentry를 도입하진 않고 있다.</p></blockquote><h2 id="Self-Hosted-Sentry"><a href="#Self-Hosted-Sentry" class="headerlink" title="Self-Hosted Sentry"></a>Self-Hosted Sentry</h2><p><a href="https://develop.sentry.dev/self-hosted/">Self-Hosted Sentry</a>에서 제공하는 설치 스크립트를 사용하여 On-Premise 환경에서 Sentry를 구성하고 실행하였다. 설치 스크립트와 도커 컴포즈 문서를 제공하기 때문에 실행 자체는 간단한데 생각보다 많은 컨테이너가 구동되는 부분이 있다. 인프라 비용을 아끼고자 리소스 자원 사용률이 저조한 인스턴스에 실행한 상태인데 별도의 인스턴스로 분리하는 것을 고려하고 있다.</p><blockquote><p>Keep in mind that all this setup uses single-nodes for all services, including Kafka. For larger loads, you’d need a beefy machine with lots of RAM and disk storage. To scale up even further, you are very likely to use clusters with a more complex tool, such as Kubernetes. Due to self-hosted installations’ very custom nature, we do not offer any recommendations or guidance around scaling up.</p></blockquote><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>시스템을 구성하는 애플리케이션에서 <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/">Spring Boot</a>를 사용하고 있다면 sentry-spring-boot-starter를 추가하여 자동 구성을 사용할 수 있다. </p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">'io.sentry:sentry-bom:6.19.0'</span><span class="token punctuation">)</span>implementation <span class="token string">'io.sentry:sentry-spring-boot-starter'</span></code></pre><blockquote><p>When you are using multiple Sentry dependencies, you can avoid specifying the version of each dependency with a <a href="https://docs.sentry.io/platforms/java/configuration/bill-of-materials/">BOM or Bill Of Materials</a>.</p></blockquote><p>개발자가 체크하지 않은 예외는 기본적으로 수집되며 @ExceptionHandler를 선언한 예외 처리 함수에서 Sentry 서버로 예외 정보를 전달하도록 코드를 구현하면 된다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>sentry<span class="token punctuation">.</span></span><span class="token class-name">Sentry</span></span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"This is a test."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Sentry</span><span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="예외-수집-정보-커스터마이징"><a href="#예외-수집-정보-커스터마이징" class="headerlink" title="예외 수집 정보 커스터마이징"></a>예외 수집 정보 커스터마이징</h3><p><a href="https://docs.sentry.io/platforms/java/guides/spring-boot/advanced-usage/">Advanced Usage</a> 문서에 따르면 이벤트를 처리하거나 Sentry에 수집된 오류를 보내기 직전에 조작할 수 있는 콜백을 제공하고 있다. 노출되면 안되는 정보는 명시적으로 제거할 수 있으며 수집하지 않을 예외 클래스에 대해서는 <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/configuration/#ignored-exceptions-for-type">Ignored Exceptions For Type</a>을 지정하여 제외시킬 수 있다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sentry.ignored-exceptions-for-type</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> org.springframework.security.access.AccessDeniedException  <span class="token punctuation">-</span> org.springframework.security.authentication.BadCredentialsException</code></pre><p>특정 예외 클래스 이외에 일부 에러 이벤트를 필터링하고자 한다면 SentryOptions.BeforeSendCallback 인터페이스를 구현한 클래스를 빈으로 등록하여 처리할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBeforeSendCallback</span> <span class="token keyword">implements</span> <span class="token class-name">SentryOptions<span class="token punctuation">.</span>BeforeSendCallback</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SentryEvent</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SentryEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">Hint</span> hint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Example: Never send server name in events</span>        event<span class="token punctuation">.</span><span class="token function">setServerName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> event<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="사용자-정보-수집하기"><a href="#사용자-정보-수집하기" class="headerlink" title="사용자 정보 수집하기"></a>사용자 정보 수집하기</h3><p>Spring MVC 모듈을 사용하고 있다면 <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/record-user/">Record User Information</a> 문서를 참고하여 사용자 이름(Principal#name)과 IP 주소를 수집하도록 활성화 할 수 있다. 만약, 스프링 시큐리티를 사용하여 인증 체계를 구현하였다면 UserDetails의 Username이 오류와 함께 기록된다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sentry.send-default-pii</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="비동기-함수-처리"><a href="#비동기-함수-처리" class="headerlink" title="비동기 함수 처리"></a>비동기 함수 처리</h3><p>Sentry’s SDK for Java는 스코프와 컨텍스트를 ThreadLocal에 저장하도록 구현되어있다. <a href="https://docs.sentry.io/platforms/java/guides/spring-boot/async/">Async Methods</a> 문서에 따르면 Sentry Context에서 비동기 함수에 올바르게 접근하기 위해서는 ThreadPoolTaskExecutor 내에 SentryTaskDecorator를 적용해야 한다고 설명한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentryConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SentryTaskDecorator</span> <span class="token function">sentryTaskDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentryTaskDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncMethodConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SentryTaskDecorator</span> sentryTaskDecorator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AsyncMethodConfiguration</span><span class="token punctuation">(</span><span class="token class-name">SentryTaskDecorator</span> sentryTaskDecorator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sentryTaskDecorator <span class="token operator">=</span> sentryTaskDecorator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setTaskDecorator</span><span class="token punctuation">(</span>sentryTaskDecorator<span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="메모리-누수"><a href="#메모리-누수" class="headerlink" title="메모리 누수"></a>메모리 누수</h3><p><img data-src="/images/posts/sentry/01.png"></p><p>TransactionPerfomanceCollector에 의한 메모리 누수 문제가 있었으며 6.13.0 그리고 6.13.1 에서 OOM 문제가 해결되었다.</p><ul><li>6.13.0 - Prevent OOM by disabling TransactionPerformanceCollector for now (<a href="https://github.com/getsentry/sentry-java/pull/2498">#2498</a>)</li><li>6.13.1 - Fix transaction performance collector oom (<a href="https://github.com/getsentry/sentry-java/pull/2505">#2505</a>)</li></ul><p>이외에도 지속적으로 성능 개선과 여러가지 문제가 해결되고 있으니 주기적으로 Sentry 서버를 업그레이드해야할 필요성이 있어보인다.</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p><a href="https://docs.sentry.io/platforms/javascript/guides/vue/">Sentry for Vue</a>를 참고하여 Vue 애플리케이션에서 발생하는 오류들도 수집할 수 있다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @sentry/vue</code></pre><pre class="language-javascript" data-language="javascript"><div class="caption"><span>sentry.js</span></div><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Sentry <span class="token keyword">from</span> <span class="token string">'@sentry/vue'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">router</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        Vue<span class="token punctuation">,</span>        <span class="token literal-property property">dsn</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_DSN</span><span class="token punctuation">,</span>        <span class="token literal-property property">envinroment</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">,</span>        <span class="token literal-property property">release</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_RELEASE</span>        <span class="token literal-property property">integrations</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token keyword">new</span> <span class="token class-name">Sentry<span class="token punctuation">.</span>BrowserTracing</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">routingInstrumentation</span><span class="token operator">:</span> Sentry<span class="token punctuation">.</span><span class="token function">vueRouterInstrumentation</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">tracingOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">trackComponents</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">attachProps</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">logErrors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">tracesSampleRate</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>process.env.SENTRY_DSN와 process.env.SENTRY_RELEASE는 빌드하는 과정에서 주입되도록 구현해야하며 process.env.SENTRY_RELEASE는 SourceMap을 업로드하는 과정에서 등록하는 릴리즈 버전과 동일해야한다.</p></blockquote><h3 id="API-오류-시-요청과-응답-정보-수집하기"><a href="#API-오류-시-요청과-응답-정보-수집하기" class="headerlink" title="API 오류 시 요청과 응답 정보 수집하기"></a>API 오류 시 요청과 응답 정보 수집하기</h3><p>Browser JavaScript SDK에서도 기본적인 스크립트 오류는 자동으로 수집되며 Axios와 같은 HTTP 클라이언트 요청 라이브러리를 사용한다면 아래와 같이 API 요청 과정에서 오류가 발생한다면 Sentry로 수집되도록 작성해야한다. </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>config        Sentry<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token string">'Request'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            url<span class="token punctuation">,</span>            params<span class="token punctuation">,</span>            data        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> status<span class="token punctuation">,</span> data <span class="token punctuation">&#125;</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>config        Sentry<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token string">'Response'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            status<span class="token punctuation">,</span>            data        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        Sentry<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="인증-사용자-정보-수집하기"><a href="#인증-사용자-정보-수집하기" class="headerlink" title="인증 사용자 정보 수집하기"></a>인증 사용자 정보 수집하기</h3><p><a href="https://docs.sentry.io/platforms/javascript/enriching-events/identify-user/">Identify Users</a> 문서를 참고하면 사용자 이름과 아이피 주소를 수집할 수 있도록 구성할 수 있다. 기본적으로는 아이피 주소가 수집되는데 인증된 사용자라면 사용자 식별 아이디나 이름을 가져올 수 있으므로 아래와 같이 보다 정확한 정보를 수집할 수 있다.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Sentry<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span> window<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>userId<span class="token punctuation">,</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> window<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>userName<span class="token punctuation">,</span>  <span class="token literal-property property">ip_address</span><span class="token operator">:</span> <span class="token string">'&#123;&#123;auto&#125;&#125;'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><blockquote><p>If the user’s ip_address is set to ““, Sentry will infer the IP address from the connection between your app and Sentry’s server.</p></blockquote><h3 id="스택-트레이스-추적하기"><a href="#스택-트레이스-추적하기" class="headerlink" title="스택 트레이스 추적하기"></a>스택 트레이스 추적하기</h3><p>일반적으로 Vue와 같은 애플리케이션은 빌드되어 배포되는 경우에 번들을 최소화하는 과정을 거치게 되므로 오류가 Sentry에 수집되더라도 스택 트레이스를 통해 원인이 되는 코드 라인을 제대로 찾아가기 힘들 가능성이 있다. 브라우저가 아닌 Sentry 에서 만큼은 스택 트레이스를 깔끔하게 볼 수 있도록 SourceMap을 지원하고 있다. 다음은 Webpack을 번들러로써 사용하고 있을때 사용할 수 있는 플러그인을 설치하는 예시를 보여준다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @sentry/webpack-plugin</code></pre><pre class="language-javascript" data-language="javascript"><div class="caption"><span>webpack.config.prd.js</span></div><code class="language-javascript"><span class="token keyword">const</span> SentryWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@sentry/webpack-plugin"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">SentryWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">org</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_ORG</span><span class="token punctuation">,</span>      <span class="token literal-property property">project</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_PROJECT</span><span class="token punctuation">,</span>      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>      <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"webpack.config.js"</span><span class="token punctuation">,</span> <span class="token string">"webpack.config.prod.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">authToken</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_AUTH_TOKEN</span><span class="token punctuation">,</span>      <span class="token literal-property property">release</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_RELEASE</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>SENTRY_RELEASE는 빌드와 런타임 시점의 값을 동일하게 사용해야 Sentry에서 제대로 추적할 수 있음에 주의해야한다. 런타임 구성 시 사용하는 DSN가 아니라 <a href="https://docs.sentry.io/api/auth/#auth-tokens">Sentry 사용자에 대한 토큰</a>을 발급해야하며 프로젝트 정보도 포함해야한다.</p><h2 id="끝마치며"><a href="#끝마치며" class="headerlink" title="끝마치며"></a>끝마치며</h2><p>카카오페이에서 공유한 <a href="https://tech.kakaopay.com/post/frontend-sentry-monitoring/">Sentry로 우아하게 프론트엔드 에러 추적하기</a>와 라인에서 공유한 <a href="https://engineering.linecorp.com/ko/blog/log-collection-system-sentry-on-premise">Sentry로 사내 에러 로그 수집 시스템 구축하기</a>를 참고하여 Sentry 활용에 대해 더 자세히 알아갈 수 있다. 개인적으로 도입은 쉬워보이지만 원하는 방식대로 커스터마이징 하기에는 생각보다 어려운 것 같다. 서버 애플리케이션과 다르게 프론트엔드 애플리케이션에서는 Data Source Name (DSN)가 브라우저에 노출되므로 보안 관점에서는 테스트 환경에만 도입해야할 것으로 생각된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sentry는 오류 또는 예외를 추적하기 위한 도구로 회사에서 시스템을 구성하는 언어인 자바, 파이썬, Vue 등 다양한 언어 플랫폼과의 연동을 지원한다. Sentry를 도입하게 되는 이유는 개발자가 테스트하는 과정에서 발견되지 않고 QA 엔지니</summary>
      
    
    
    
    
    <category term="sentry-java" scheme="https://kdevkr.github.io/tags/sentry-java/"/>
    
    <category term="sentry-javascript" scheme="https://kdevkr.github.io/tags/sentry-javascript/"/>
    
  </entry>
  
  <entry>
    <title>SSH 터널링</title>
    <link href="https://kdevkr.github.io/ssh-tunneling/"/>
    <id>https://kdevkr.github.io/ssh-tunneling/</id>
    <published>2023-05-10T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<p>기본적으로는 운영 환경의 Amazon Aurora PostgreSQL에는 로컬 호스트에서 접근하지 않는다. 그러나, 스테이징이나 테스트 환경에서 동작하는 데이터베이스에는 원인 검토를 위해 로컬 호스트에서 애플리케이션을 실행하고 디버그해야할 필요성이 요구되기도 한다. 일반적으로 데이터베이스는 외부에서 접근할 수 없는 프라이빗 서브넷에 위치하도록 인프라를 구성한다. 따라서, 데이터베이스에 접근하기 위해서는 퍼블릭 서브넷에 위치하는 배스천 호스트를 통해 Amazon Aurora PostgreSQL에 접근할 수 있는 호스트로 이동한 후 접근하게 된다.</p><p><img data-src="/images/posts/ssh-tunneling/01.png"></p><p>창천향로님이 작성해두신 <a href="https://jojoldu.tistory.com/623">DataGrip 에서 SSH 터널링으로 DB 접근하기</a>를 참고하면 SSH Configuration을 설정해두고 데이터베이스 연결 시 SSH Tunnel 을 구성하여 RDS 엔드포인트로 연결할 수 있다. 이와 같이 데이터베이스 관리를 위해서 SSH 터널링으로 접속하여 데이터베이스 상태나 데이터 그리고 SQL을 수행해볼 수 있다. 하지만, 데이터베이스 도구로써 연결하는 것이므로 애플리케이션에서는 다른 방식으로 SSH 터널링을 수행해야한다.</p><p>회사에서는 상용 SSH 클라이언트인 SecureCRT를 사용하고 있다. 배스천 호스트에 대한 연결 세션을 생성해놓고 Amazon Aurora PostgreSQL에 접속할 수 있는 호스트로 연결하기 위해 <a href="https://documentation.help/SecureCRT/GO_Firewall.htm">Firewall</a>을 배스천 호스트 세션으로 선택할 수 있다. </p><p><img data-src="/images/posts/ssh-tunneling/02.png"></p><p>인스턴스 연결 세션은 배스천 호스트를 Firewall로써 선택해두었기에 프록시 연결을 수행할 수 있다. 위와 같이 인스턴스 연결에 성공하였다면 RDS 엔드포인트에 대해 포트포워딩을 설정하면 된다. 포트포워딩 시에는 Dynamic forwarding using SOCKS 4 or 5을 선택하면 RDS 엔드포인트를 지정할 수 없으므로 Destnation host is different from the SSH Server를 체크하고 RDS 엔드포인트 주소를 입력하자.</p><p><img data-src="/images/posts/ssh-tunneling/03.png"></p><p>이제 인텔리제이나 DataGrip으로 로컬 호스트 주소를 사용하여 Amazon Aurora PostgreSQL에 연결할 수 있다. </p><p><img data-src="/images/posts/ssh-tunneling/04.png"></p><p>일반적으로 개발 환경에 대한 데이터베이스는 퍼블릭 서브넷에 구성하고 일부 IP 대역에 대해서는 다이렉트 접속이 가능하도록 하기도 하므로 이와 같은 SSH 터널링은 필요하지 않을 수 있다. 퍼블릭 서브넷에 위치하지 않고 다이렉트 연결이 불가능한 인프라 구성이라면 SSH 터널링을 통해 로컬 호스트에서 RDS 엔드포인트에 연결할 수 있으므로 로컬 개발 환경에서 애플리케이션을 실행하는 경우에도 스테이징이나 테스트 환경에서 운영중인 데이터베이스에 연결하여 디버그할 수 있게 된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;기본적으로는 운영 환경의 Amazon Aurora PostgreSQL에는 로컬 호스트에서 접근하지 않는다. 그러나, 스테이징이나 테스트 환경에서 동작하는 데이터베이스에는 원인 검토를 위해 로컬 호스트에서 애플리케이션을 실행하고 디버그해야할 필요성</summary>
      
    
    
    
    
    <category term="SSH" scheme="https://kdevkr.github.io/tags/SSH/"/>
    
    <category term="SecurtCRT Firewall" scheme="https://kdevkr.github.io/tags/SecurtCRT-Firewall/"/>
    
  </entry>
  
  <entry>
    <title>OPENSSH-RSA 개인키를 RSA 개인키로 변경하기</title>
    <link href="https://kdevkr.github.io/convert-openssh-private-to-rsa/"/>
    <id>https://kdevkr.github.io/convert-openssh-private-to-rsa/</id>
    <published>2023-04-22T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.747Z</updated>
    
    <content type="html"><![CDATA[<p>OpenSSL 라이브러리를 통해 SSH 접속을 위한 키 페어를 발급하는 경우에 기본적으로 RSA 형식의 키 페어가 생성되어도 실제로는 OPENSSH PRIVATE KEY로 저장되게 된다. RSA PRIVATE KEY로 저장되기 위해서는 -m 옵션으로 PEM을 지정해야 한다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ----- OPENSSH PRIVATE KEY -----</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-C</span> <span class="token string">"mambo"</span> <span class="token parameter variable">-N</span> <span class="token string">""</span><span class="token comment"># ----- RSA PRIVATE KEY -----</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-C</span> <span class="token string">"mambo"</span> <span class="token parameter variable">-N</span> <span class="token string">""</span></code></pre><p>일본 고객으로부터 자체적으로 구축한 서버에 접속하기 위한 계정과 개인키 PEM 파일을 받아보니 OPENSSH 형식으로 저장되어있음을 확인하였다. 그러나, SecureCRT를 사용해서 서버에 처음으로 연결하려고 했을때 키 형식이 올바르지 않다는 오류가 발생하며 접속에 실패하였다.</p><pre class="language-pem" data-language="pem"><code class="language-pem">-----BEGIN RSA PRIVATE KEY-----[KEY CONTENT]-----END RSA PRIVATE KEY-----</code></pre><p>OPENSSH PRIVATE KEY로 저장되어있는 것을 RSA PRIVATE KEY로 변경하고 시도해보니 정상적으로 연결이 되었으며 자세한 원인은 모르겠으나 2FA 인증을 설정하고 나서는 OPENSSH PRIVATE KEY로 저장되어있는 PEM 파일로도 연결이 정상적으로 연결을 할 수 있는 상황이 되었다.</p><h4 id="OpenSSH-개인키를-RSA-개인키로-변환"><a href="#OpenSSH-개인키를-RSA-개인키로-변환" class="headerlink" title="OpenSSH 개인키를 RSA 개인키로 변환"></a>OpenSSH 개인키를 RSA 개인키로 변환</h4><p>아무튼, RSA PEM 형식으로 다시 만들어달라고 요청하기에는 시간이 많이 소요될 수 있으므로 OPENSSH 형식으로 되어있는 RSA 개인키를 RSA PEM 형식으로 변환해보도록 하자.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-C</span> <span class="token string">"mambo"</span> <span class="token parameter variable">-N</span> <span class="token string">""</span> <span class="token parameter variable">-f</span> openssh.pem<span class="token comment"># cat ~/.ssh/id_rsa</span>-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcnNhAAAAAwEAAQAAAQEAw4o9aOfBCkCzsuz3hMJT/v058pMki16Ft56tim4r5mJRbBd0EQPJ3gm1FiJmp0fqrnJo+H3o4hBH0LlCbeXiXHloPnTi1JZTSzWat1ItcBG+xezx8BdmtKqdTyPWfYL9ujLse5AAXkvVHhYHJ7koV72X9whH94Tci4zAEHRypKbuz+9lj5P94u1n/nYAt2PTJmdP/Y+62qFiSGhKEh/Jed5TVvIrabOi+qcHQ0VmcXkTGiOTXLTmHMbce26dqsGRRb4YPf1alXECX28b8QpbarlXHPeGJyQ5d8dxEhsOz60LDoUEy/ytn0gIrP0+Ro2aS9N73JVdTXKuFFQRyHMP0QAAA8DEFEvUxBRL1AAAAAdzc2gtcnNhAAABAQDDij1o58EKQLOy7PeEwlP+/TnykySLXoW3nq2KbivmYlFsF3QRA8neCbUWImanR+qucmj4fejiEEfQuUJt5eJceWg+dOLUllNLNZq3Ui1wEb7F7PHwF2a0qp1PI9Z9gv26Mux7kABeS9UeFgcnuShXvZf3CEf3hNyLjMAQdHKkpu7P72WPk/3i7Wf+dgC3Y9MmZ0/9j7raoWJIaEoSH8l53lNW8itps6L6pwdDRWZxeRMaI5NctOYcxtx7bp2qwZFFvhg9/VqVcQJfbxvxCltquVcc94YnJDl3x3ESGw7PrQsOhQTL/K2fSAis/T5GjZpL03vclV1Ncq4UVBHIcw/RAAAAAwEAAQAAAQA50f/UrGrtkDJS3zVVwWy7AsAG1bHBsGKT6EzimS9MAZiYANtmSJuBl5c/g06demuPx+74Q6sAZdYGhzF4c7iapZ/IkCGewRDCNYiZWqhq8iRaPHVSDGlnVOgNRcif9oL2cyZwZyVkvMG5EsRs35hpUXvFJWK6c0QP07/bXcOkod+XlvWXwJ9hkwoakC3kKYSLsdil3rKqTapaNg3edcJb0/0Nx4gW24hO1m0hevoN0rJuzoMf/uK0hwazyZbE4H1q39StWrFrGz+zp6yHkC3Els6W+ExOHUeTEaE+ya8FR9MOcmrECgePxDFBnlPVumk0SIJ+NRQjH3ArpNvp1ZrdAAAAgQCc4jOZ9zBOpeP4ZyT2OFY7E9J8jA/nlsoI164TuJYK1fiv5WH2x3SN95vt1s8R9cUzznA2IWbCRs4Nei34STlTReBkpfWyg3Skp3FcYIyR2lpQX/7utfPd3X8KpUYR01E1RPgequyyixDtJjguVsrimoz81vF9y7Q0/ueO3iBmSgAAAIEA6nFTFA9oOzQyM3zgQgt8J9lW8/XjFIF3LZRhu0e0xlsmv54OsGag17zAOR5cfj7hUzQcGTWJRSHv95gDLJmSgourNRUlPZcZ8AdZCGD8GEwXr1dh2d7Qk3UT2jwDKS0IFNM6UX67CKSdYK/YFLAv3gtPEgrZ43ec1W6zlHUWmusAAACBANWFKfE3Ky1ubomZIovLa0XUs2h9rSUMDX3Su+Es/0x+qHP0bq2JKWTzVWoa0NgfnPAVJo/Fd8NVhIMs1od6iBO3Kgz7A2Esg5sOtkK06nwSYMcfXMyuf+7fj0v0nBtjVH6EdOrU0muH4vvtxiYcw2N4cI+5Fnns05+DCtL4o9kzAAAABW1hbWJvAQIDBAU<span class="token operator">=</span>-----END OPENSSH PRIVATE KEY-----</code></pre><p>OPENSSH PRIVATE KEY로 저장되어있음을 확인하였으니 아래의 명령어들을 실행하여 변환되는지 확인해보면 된다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># [1] OpenSSH</span><span class="token function">sudo</span> ssh-keygen <span class="token parameter variable">-p</span> <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-f</span> openssh.pem<span class="token comment"># [2] OpenSSL</span>openssl rsa <span class="token parameter variable">-in</span> openssh.pem <span class="token parameter variable">-outform</span> pem <span class="token operator">></span> openssh-rsa.pem<span class="token comment"># [3] Putty</span>puttygen openssh.pem <span class="token parameter variable">-O</span> private-openssh <span class="token parameter variable">-o</span> openssh-rsa.pem</code></pre><h4 id="1-OpenSSH"><a href="#1-OpenSSH" class="headerlink" title="[1] OpenSSH"></a>[1] OpenSSH</h4><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell">ssh-keygen <span class="token operator">-</span>p <span class="token operator">-</span>m PEM <span class="token operator">-</span>f openssh<span class="token punctuation">.</span>pemFailed to load key openssh<span class="token punctuation">.</span>pem: invalid format</code></pre><p>첫번째 OpenSSH 명령어를 이용하는 방법은 가상 환경에 실행한 우분투 리눅스에서는 정상적으로 변환된 반면에 윈도우 터미널에서는 알 수 없는 형식이라는 오류 메시지와 함께 실패하였다.</p><h4 id="2-OpenSSL-💥"><a href="#2-OpenSSL-💥" class="headerlink" title="[2] OpenSSL 💥"></a>[2] OpenSSL 💥</h4><pre class="language-bash" data-language="bash"><code class="language-bash">openssl rsa <span class="token parameter variable">-in</span> openssh.pem <span class="token parameter variable">-outform</span> pem <span class="token operator">></span> openssh-rsa.pemunable to load Private Key<span class="token number">140038194394432</span>:error:0909006C:PEM routines:get_name:no start line:<span class="token punctuation">..</span>/crypto/pem/pem_lib.c:745:Expecting: ANY PRIVATE KEY</code></pre><p>두번째 OpenSSL 라이브러리를 이용하는 방법은 ChatGTP에서 알려준 것인데 OpenSSH는 OpenSSL 라이브러리를 활용하기는 하나 OpenSSH 프로그램에서 인식하는 형식이므로 변환하는 과정에서 오류가 발생하였다.</p><h4 id="3-Putty-🍀"><a href="#3-Putty-🍀" class="headerlink" title="[3] Putty 🍀"></a>[3] Putty 🍀</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># [Mac] brew install putty</span><span class="token comment"># [Ubuntu] apt install putty-tools</span>puttygen openssh.pem <span class="token parameter variable">-O</span> private-openssh <span class="token parameter variable">-o</span> openssh-rsa.pem</code></pre><p>세번째 방법은 PuTTYgen을 이용하는 것으로 윈도우 환경에서는 커맨드라인 옵션을 인식하지 못한 관계로 PuTTYgen(PuTTY Key Generator)을 실행한 후 Conversions 메뉴의 Import Key로 불러온 후 Export OpenSSH Key로 저장하면 RSA PRIVATE KEY로 변환할 수 있었으며 우분투 리눅스에서는 커맨드라인으로 별다른 문제없이 변환할 수 있다.</p><p><img data-src="/images/posts/convert-openssh-private-to-rsa/01.png" alt="Conversions &gt; Import Key"></p><p><img data-src="/images/posts/convert-openssh-private-to-rsa/02.png" alt="Conversions &gt; Export OpenSSH Key"></p><p>개인적으로는 오래된 내용이지만 한번 하고나서는 더이상 다루지 않는 정보이기에 잊어버릴 것 같아 기록으로 남기고자 공유한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenSSL 라이브러리를 통해 SSH 접속을 위한 키 페어를 발급하는 경우에 기본적으로 RSA 형식의 키 페어가 생성되어도 실제로는 OPENSSH PRIVATE KEY로 저장되게 된다. RSA PRIVATE KEY로 저장되기 위해서는 -m 옵션</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 프로젝트를 만들고나서</title>
    <link href="https://kdevkr.github.io/spring-boot-project/"/>
    <id>https://kdevkr.github.io/spring-boot-project/</id>
    <published>2023-03-25T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 이니셜라이저를 통해서 스프링 부트 기반의 프로젝트 폴더를 구성하더라도 회사마다 혹은 개발자마다 너무나도 당연하게 하는 것들이 조금씩 있기 마련이다. 스프링 부트 프로젝트를 만들고나서 너무나도 당연하게 습과적으로 매번 하는 것들에 대해서 정리해보고자 한다. </p><h4 id="1-Properties가-아닌-YAML-방식으로-변경하기"><a href="#1-Properties가-아닌-YAML-방식으로-변경하기" class="headerlink" title="1. Properties가 아닌 YAML 방식으로 변경하기"></a>1. Properties가 아닌 YAML 방식으로 변경하기</h4><p>스프링 이니셜라이저를 통해서 만들어진 기본적인 프로젝트 폴더에는 application.properties 파일이 존재한다. 스프링 부트에서는 Java Properties, YAML 그리고 환경 변수를 통해서 애플리케이션 프로퍼티 속성 값을 적용하여 활용할 수 있게 지원한다. 하지만, ISO-8859-1 인코딩으로 강제되는 자바 프로퍼티 파일에는 한계가 있고 대부분의 애플리케이션에서 UTF-8을 사용하는 편이므로 YAML 방식으로 변경하는 것이 편리하다.</p><blockquote><p>It is recommended to stick with one format for your entire application. If you have configuration files with both .properties and .yml format in the same location, .properties takes precedence.</p></blockquote><p>위와 같이 공식 문서에 나와있는 것처럼 프로퍼티와 야믈 파일을 동시에 사용하는 경우 자바 프로퍼티 파일을 우선하여 적용하므로 주의하자.</p><h4 id="2-스프링-부트-기본-배너-옵션-끄기"><a href="#2-스프링-부트-기본-배너-옵션-끄기" class="headerlink" title="2. 스프링 부트 기본 배너 옵션 끄기"></a>2. 스프링 부트 기본 배너 옵션 끄기</h4><p>두번째로 하는 일은 스프링 부트에서 제공하여 콘솔에 표시되는 기본 배너 로그를 비활성화하는 것이다. 대부분의 애플리케이션에서 스프링 배너를 통해서 버전을 확인할 필요성은 굉장히 적으며 중요시 해야하는 것은 빌드 정보일 뿐이기에 불필요하다.</p><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">spring.main.banner-mode</span><span class="token punctuation">:</span> off</code></pre><h4 id="3-그래들-롬복-패키지-구성을-롬복-플러그인으로-변경하기"><a href="#3-그래들-롬복-패키지-구성을-롬복-플러그인으로-변경하기" class="headerlink" title="3. 그래들 롬복 패키지 구성을 롬복 플러그인으로 변경하기"></a>3. 그래들 롬복 패키지 구성을 롬복 플러그인으로 변경하기</h4><p>그래들 기반으로 스프링 부트 프로젝트를 만드는 경우 그래들 롬복 플러그인이 아닌 직접 패키지를 디펜던시에 지정하는 방식으로 되어있다. <a href="https://plugins.gradle.org/plugin/io.freefair.lombok">io.freefair.lombok</a>을 플러그인으로 등록하여 사용하는 것이 더 효율적이다.</p><pre class="language-gradle" data-language="gradle"><div class="caption"><span>build.gradle</span></div><code class="language-gradle"><span class="token keyword">plugins</span> <span class="token punctuation">&#123;</span>    id <span class="token string">'io.freefair.lombok'</span> version <span class="token string">'8.0.1'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4-기본-톰캣-컨테이너를-언더토우로-대체하기"><a href="#4-기본-톰캣-컨테이너를-언더토우로-대체하기" class="headerlink" title="4. 기본 톰캣 컨테이너를 언더토우로 대체하기"></a>4. 기본 톰캣 컨테이너를 언더토우로 대체하기</h4><p>스프링 부트 프로젝트에서 기본적으로 의존하는 임베디드 톰캣도 준수한 성능을 보여주지만 자바를 사용하여 NIO 기반으로 작성된 경량의 웹 서버 애플리케이션인 언더토우를 사용하고 있다. 웹 스타터 모듈에는 톰캣에 대한 의존성이 포함되어있으므로 아래와 같이 톰캣에 대한 모듈은 제외되도록 하자.</p><pre class="language-gradle" data-language="gradle"><div class="caption"><span>build.gradle</span></div><code class="language-gradle">configurations<span class="token punctuation">.</span>configureEach <span class="token punctuation">&#123;</span>    exclude group<span class="token punctuation">:</span> <span class="token string">'org.springframework.boot'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'spring-boot-starter-tomcat'</span><span class="token punctuation">&#125;</span><span class="token keyword">dependencies</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">implementation</span> <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    <span class="token keyword">implementation</span> <span class="token string">'org.springframework.boot:spring-boot-starter-undertow'</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>스프링 프레임워크 6.1 에서는 JDK 21과 Virtual Threads를 우선적으로 톰캣에서 지원할 예정인 것 같아 언더토우가 아닌 톰캣을 선택해야할 경우가 될 가능성도 보인다. 관련 프로젝트: <a href="https://github.com/mp911de/spring-boot-virtual-threads-experiment">mp911de&#x2F;spring-boot-virtual-threads-experiment</a></p></blockquote><h4 id="5-인텔리제이-IDEA의-빌드-및-실행-옵션-변경하기"><a href="#5-인텔리제이-IDEA의-빌드-및-실행-옵션-변경하기" class="headerlink" title="5. 인텔리제이 IDEA의 빌드 및 실행 옵션 변경하기"></a>5. 인텔리제이 IDEA의 빌드 및 실행 옵션 변경하기</h4><p>마지막으로 인텔리제이 IDEA를 통해서 스프링 부트 프로젝트를 빌드하고 실행하는 경우 컴파일러와 그래들에 대한 옵션을 변경하는 것이 더 효율적으로 프로젝트를 개발하고 실행하는 환경이 되므로 적용하는 편이다.</p><ul><li>Build, Execution, Deployment &gt; Build Tools &gt; Gradle &gt; Build and run using Intellij IDEA</li><li>Build, Execution, Deployment &gt; Build Tools &gt; Compiler &gt; Build project automatically</li></ul><p>기본 Gradle이 아닌 Intellij IDEA로 빌드 및 실행을 하도록 설정한다면 프로젝트 루트 폴더에 out 이라는 이름의 폴더에 현재 실행중인 애플리케이션에 대한 클래스 파일과 정적 리소스 파일들이 이동되어 어떠한 문제가 발생했을 때 곧바로 살펴볼 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;스프링 이니셜라이저를 통해서 스프링 부트 기반의 프로젝트 폴더를 구성하더라도 회사마다 혹은 개발자마다 너무나도 당연하게 하는 것들이 조금씩 있기 마련이다. 스프링 부트 프로젝트를 만들고나서 너무나도 당연하게 습과적으로 매번 하는 것들에 대해서 정</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 빌드 정보</title>
    <link href="https://kdevkr.github.io/spring-boot-build-info/"/>
    <id>https://kdevkr.github.io/spring-boot-build-info/</id>
    <published>2023-03-20T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글에 대한 관련 코드는 <a href="https://github.com/kdevkr/spring-demo">https://github.com/kdevkr/spring-demo</a> 에서 참고할 수 있습니다.</p></blockquote><p>스프링 부트 프로젝트에서 빌드 정보를 가져오기 위해서는 그래들이나 메이븐 플러그인에 따라 아래와 같이 buildInfo()가 동작하도록 구성해야한다. 이렇게 구성하면 빌드 단계에서 클래스패스에 META-INF&#x2F;build.properties라는 파일에 빌드 정보가 포함된다.</p><pre class="language-gradle" data-language="gradle"><div class="caption"><span>build.gradle</span></div><code class="language-gradle">springBoot <span class="token punctuation">&#123;</span>    <span class="token function">buildInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>클래스패스에 추가된 build-info.properties의 내용은 ProjectInfoAutoConfiguration 클래스에 의해서 BuildProperties 클래스가 빈으로 등록되게 된다. 그래서 우리는 아래와 같이 BuildProperties를 기반으로 빌드 정보를 제공하는 API를 작성할 수 있다.</p><pre class="language-java" data-language="java"><div class="caption"><span>BuildController.java</span></div><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuildController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BuildProperties</span> buildProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BuildController</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">BuildProperties</span> buildProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildProperties <span class="token operator">=</span> buildProperties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"build-info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BuildProperties</span> <span class="token function">buildInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> buildProperties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>하지만, 그래들 명령어에 의해 빌드된 애플리케이션 파일으로 실행된 것이 아니라 인텔리제이와 같은 IDE로 구동하는 경우라면 BuildProperties가 등록되지 않으므로 오류가 발생한다. 클래스패스에 있는 빌드 정보를 먼저 사용할 수 있도록 @AutoConfiguration을 통해 자동 구성 클래스를 만들고 ProjectInfoAutoConfiguration가 동작한 이후에 수행하도록 하면 된다.</p><pre class="language-java" data-language="java"><div class="caption"><span>BuildConfiguration.java</span></div><code class="language-java"><span class="token comment">//@Import(ProjectInfoAutoConfiguration.class)</span><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>after <span class="token operator">=</span> <span class="token class-name">ProjectInfoAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuildConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">BuildProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">BuildProperties</span> <span class="token function">buildProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_INSTANT</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"artifact"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span> <span class="token string">"kr.kdev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BuildProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>위 코드에서 @AutoConfiguration는 스프링 부트 2.7 에서 추가된 어노테이션이므로 이전 버전이라면 @Import를 통해 수동으로 동작하도록 해야한다.</p></blockquote><p>그러면 이제 개발 환경에서는 ProjectInfoAutoConfiguration에 의해 BuildProperties가 등록되지 않더라도 코드로 정의된 BuildProperties가 등록되어 오류가 발생하지 않는다. 빌드된 애플리케이션에서는 빌드 정보 API가 등록되므로 아래와 같이 빌드 정보를 확인할 수 있다.</p><pre class="language-powershell" data-language="powershell"><div class="caption"><span>Windows Terminal</span></div><code class="language-powershell"><span class="token comment"># java -jar '-Dspring.profiles.active=prod' .\demo-1.0.0.jar</span><span class="token comment"># /build-info</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span>:<span class="token string">"demo"</span><span class="token punctuation">,</span><span class="token string">"version"</span>:<span class="token string">"local"</span><span class="token punctuation">,</span><span class="token string">"time"</span>:<span class="token string">"2023-03-22T13:13:58.186Z"</span><span class="token punctuation">,</span><span class="token string">"artifact"</span>:<span class="token string">"demo"</span><span class="token punctuation">,</span><span class="token string">"group"</span>:<span class="token string">"kr.kdev"</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에 대한 관련 코드는 &lt;a href=&quot;https://github.com/kdevkr/spring-demo&quot;&gt;https://github.com/kdevkr/spring-demo&lt;/a&gt; 에서 참고할 수 있습니다.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 언더토우</title>
    <link href="https://kdevkr.github.io/spring-boot-undertow/"/>
    <id>https://kdevkr.github.io/spring-boot-undertow/</id>
    <published>2023-03-15T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<p>인텔리제이 또는 <a href="https://start.spring.io/">스프링 이니셜라이저</a>를 통해 스프링 부트 프로젝트를 간단하게 생성할 수 있다. 스프링 이니셜라이저를 통해 만들고자 하는 프로젝트에서 필요한 모듈을 쉽게 선택할 수 있게 지원하지만 세부적인 모듈의 선택은 지원하지 않기 때문에 만들어진 프로젝트를 수정해야할 필요성이 생길 수 있다. 아파치 톰캣은 기본적으로 지원하는 기본 컨테이너로써 충분히 입증된 기술이지만 현재 조직과 같이 일부 실무 프로젝트에서는 언더토우를 사용하는 편이다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">configurations<span class="token punctuation">.</span>configureEach <span class="token punctuation">&#123;</span>    exclude group<span class="token punctuation">:</span> <span class="token string">'org.springframework.boot'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'spring-boot-starter-tomcat'</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-websocket'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-undertow'</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>위 예시에서 spring-boot-starter-websocket 모듈에 의해 spring-boot-starter-web은 명시할 필요가 없다.</p></blockquote><h4 id="WebSocketDeploymentInfo-경고-로그-없애기"><a href="#WebSocketDeploymentInfo-경고-로그-없애기" class="headerlink" title="WebSocketDeploymentInfo 경고 로그 없애기"></a>WebSocketDeploymentInfo 경고 로그 없애기</h4><p>spring-boot-starter-websocket 모듈을 추가하면 아래처럼 WebSocketDeploymentInfo가 설정되지 않아 기본 버퍼 풀이 사용된다는 경고 로그가 출력된다. 로그 레벨 조정을 통해 무시해도 되지만 WebServerFactoryCustomizer를 통해서 WebSocketDeploymentInfo가 등록되도록 구현할 수 있다.</p><pre class="language-none"><code class="language-none">2023-03-16T21:49:43.249+09:00  WARN 35488 --- [main] io.undertow.websockets.jsr : UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used</code></pre><pre class="language-java" data-language="java"><div class="caption"><span>UndertowWebsocketCustomizer</span></div><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UndertowWebsocketCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UndertowServletWebServerFactory</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerProperties<span class="token punctuation">.</span>Undertow</span> undertow<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UndertowWebsocketCustomizer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>undertow <span class="token operator">=</span> serverProperties<span class="token punctuation">.</span><span class="token function">getUndertow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">UndertowServletWebServerFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        factory<span class="token punctuation">.</span><span class="token function">addDeploymentInfoCustomizers</span><span class="token punctuation">(</span>deploymentInfo <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> direct <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getDirectBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getDirectBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undertow<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">;</span>            <span class="token class-name">WebSocketDeploymentInfo</span> webSocketDeploymentInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketDeploymentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webSocketDeploymentInfo<span class="token punctuation">.</span><span class="token function">setBuffers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultByteBufferPool</span><span class="token punctuation">(</span>direct<span class="token punctuation">,</span> bufferSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deploymentInfo<span class="token punctuation">.</span><span class="token function">addServletContextAttribute</span><span class="token punctuation">(</span><span class="token string">"io.undertow.websockets.jsr.WebSocketDeploymentInfo"</span><span class="token punctuation">,</span> webSocketDeploymentInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="HTTPS-포트로-리다이렉트"><a href="#HTTPS-포트로-리다이렉트" class="headerlink" title="HTTPS 포트로 리다이렉트"></a>HTTPS 포트로 리다이렉트</h4><p>이제는 AWS ELB와 같은 로드밸런서 또는 엔진엑스와 같은 웹 서버들을 통해서 리버스 프록시를 구성하므로 애플리케이션이 HTTP&#x2F;2를 지원하도록 구동하지 않는 편이지만 TLS 오프로드가 필요하다면 아래와 같이 HTTP로 연결되었을때 HTTPS로 연결되도록 구성할 수 있다.</p><pre class="language-java" data-language="java"><div class="caption"><span>UndertowHttp2Customizer</span></div><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UndertowHttp2Customizer</span>    <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UndertowServletWebServerFactory</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> httpPort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UndertowHttp2Customizer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> serverProperties<span class="token punctuation">,</span>                                   <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties <span class="token operator">=</span> serverProperties<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpPort <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"server.http-port"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">UndertowServletWebServerFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        factory<span class="token punctuation">.</span><span class="token function">addBuilderCustomizers</span><span class="token punctuation">(</span>builder <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">addHttpListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpPort<span class="token punctuation">,</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addDeploymentInfoCustomizers</span><span class="token punctuation">(</span>deploymentInfo <span class="token operator">-></span> deploymentInfo<span class="token punctuation">.</span><span class="token function">addSecurityConstraint</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addWebResourceCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebResourceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addUrlPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setTransportGuaranteeType</span><span class="token punctuation">(</span><span class="token class-name">TransportGuaranteeType</span><span class="token punctuation">.</span><span class="token constant">CONFIDENTIAL</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setEmptyRoleSemantic</span><span class="token punctuation">(</span><span class="token class-name">SecurityInfo<span class="token punctuation">.</span>EmptyRoleSemantic</span><span class="token punctuation">.</span><span class="token constant">PERMIT</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setConfidentialPortManager</span><span class="token punctuation">(</span>exchange <span class="token operator">-></span> serverProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;인텔리제이 또는 &lt;a href=&quot;https://start.spring.io/&quot;&gt;스프링 이니셜라이저&lt;/a&gt;를 통해 스프링 부트 프로젝트를 간단하게 생성할 수 있다. 스프링 이니셜라이저를 통해 만들고자 하는 프로젝트에서 필요한 모듈을 쉽게 선택할 수</summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
    <category term="Undertow" scheme="https://kdevkr.github.io/tags/Undertow/"/>
    
  </entry>
  
  <entry>
    <title>언더토우</title>
    <link href="https://kdevkr.github.io/undertow/"/>
    <id>https://kdevkr.github.io/undertow/</id>
    <published>2023-03-11T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<p>자바 언어로 웹 애플리케이션을 개발하는 경우에 대부분 스프링 프레임워크 또는 스프링 부트 프로젝트를 기반으로 시작하기 때문에 직접 자바 서블릿을 작성하여 아파치 톰캣이나 언더토우와 같은 웹 애플리케이션 서버를 실행하여 배포해보는 경험을 하는 신입 개발자가 많지 않을 것 같다. 그래서 초보 개발자들을 위해 그래들 프로젝트로 언더토우 라이브러리를 추가하고 간단하게 Hello World를 찍어보는 것을 공유하고자 한다.</p><h4 id="인텔리제이-커뮤니티-에디션-설치하기"><a href="#인텔리제이-커뮤니티-에디션-설치하기" class="headerlink" title="인텔리제이 커뮤니티 에디션 설치하기"></a>인텔리제이 커뮤니티 에디션 설치하기</h4><p>인텔리제이 커뮤니티 에디션은 스프링에 대한 유용한 기능을 지원하지는 않지만 메이븐이나 그래들 프로젝트에 대해서는 지원하고 있다. 빌드 시스템은 Gradle로 선택하고 Download JDK를 통해서 Temurin 17을 선택하여 다운로드 하자. 그러면 JUnit이 기본적으로 포함된 그래들 프로젝트가 생성된다. </p><p><img data-src="/images/posts/undertow/01.png"><br><img data-src="/images/posts/undertow/02.png"></p><h4 id="언더토우-패키지-추가하기"><a href="#언더토우-패키지-추가하기" class="headerlink" title="언더토우 패키지 추가하기"></a>언더토우 패키지 추가하기</h4><p><a href="https://central.sonatype.com/search?smo=true&q=io.undertow&namespace=io.undertow">메이븐 중앙 저장소</a>에 등록되어 있는 패키지 중에서 undertow-core와 undertow-servlet 모듈을 추가하자. </p><pre class="language-gradle" data-language="gradle"><code class="language-gradle"><span class="token keyword">dependencies</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">implementation</span> <span class="token string">'io.undertow:undertow-core:2.3.4.Final'</span>    <span class="token keyword">implementation</span> <span class="token string">'io.undertow:undertow-servlet:2.3.4.Final'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Hello-World-핸들러-작성하기"><a href="#Hello-World-핸들러-작성하기" class="headerlink" title="Hello World 핸들러 작성하기"></a>Hello World 핸들러 작성하기</h4><p><a href="https://undertow.io/undertow-docs/undertow-docs-2.1.0/index.html#undertow-core">언더토우 공식 문서</a>에 따라 기본적으로 생성되어있는 Main 클래스를 수정해서 Hello World를 출력하는 웹 애플리케이션을 작성해보자. 그리고 Main 클래스 좌측에 표시된 화살표를 눌러서 디버그 모드로 애플리케이션을 실행하자. 특히 백엔드 개발자라면 무조건 디버그 모드로 실행하는 습관을 들여야한다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span></span><span class="token class-name">Undertow</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Headers</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Undertow</span> server <span class="token operator">=</span> <span class="token class-name">Undertow</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addHttpListener</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>exchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    exchange<span class="token punctuation">.</span><span class="token function">getResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Headers</span><span class="token punctuation">.</span><span class="token constant">CONTENT_TYPE</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    exchange<span class="token punctuation">.</span><span class="token function">getResponseSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="언더토우-HTTP-핸들러-교체하기"><a href="#언더토우-HTTP-핸들러-교체하기" class="headerlink" title="언더토우 HTTP 핸들러 교체하기"></a>언더토우 HTTP 핸들러 교체하기</h4><p>크롬 브라우저를 실행해서 localhost:8080을 입력하면 Hello World가 출력된다. 그러나, 인텔리제이 콘솔에 표시된 것을 살펴보면 Hello World가 두번 출력될 것이다. 우리는 브라우저로 한번 접근했을 뿐인데 왜 두번 출력되는지 의아한 것을 인지해야한다. 이러한 접근은 문제 파악의 시작점이다. (아직은 익숙치 않겠지만) F12를 눌러 개발자 도구를 표시한 후 Network 탭을 누른 뒤 F5를 눌러서 페이지를 새로고침 해보면 localhost 이외에 favicon.ico라는 것이 있음을 확인할 수 있다. 이 파비콘이라는 것은 웹 사이트 탭 왼쪽에 표시되는 작은 로고를 의미한다. 그러니까, 브라우저는 파비콘 표시를 위해 자동으로 추가 요청하고 있는 것이다. 더 자세하게 살펴보면 우리가 작성한 코드대로 text&#x2F;plain 타입에 Hello World가 전달되었음을 확인할 수 있을 것이다.</p><p><img data-src="/images/posts/undertow/03.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span></span><span class="token class-name">Handlers</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span></span><span class="token class-name">Undertow</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Headers</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Undertow</span> server <span class="token operator">=</span> <span class="token class-name">Undertow</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addHttpListener</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span><span class="token class-name">Handlers</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">addExactPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> exchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                            exchange<span class="token punctuation">.</span><span class="token function">getResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Headers</span><span class="token punctuation">.</span><span class="token constant">CONTENT_TYPE</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            exchange<span class="token punctuation">.</span><span class="token function">getResponseSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>결국, 기존 코드의 핸들러는 모든 요청에 대해 Hello World를 출력하는 애플리케이션이 된 것을 의미한다. 이것을 메인 요청에 대해서만 Hello World를 출력할 수 있도록 핸들러를 교체해보자. 위와 같이 PathHandler를 사용하면 특정 경로를 처리할 핸들러를 별도로 등록할 수 있게 제공한다. 실행중인 애플리케이션을 종료한 후 다시 시작해보면 favicon.ico에 대해서는 요청을 처리하지 않아 404라는 의미로 빨간색으로 표시되었고 인텔리제이 콘솔에는 의도한 것처럼 Hello World가 단 한번 출력됨을 알 수 있다.</p><h4 id="언더토우-서블릿-컨테이너로-전환하기"><a href="#언더토우-서블릿-컨테이너로-전환하기" class="headerlink" title="언더토우 서블릿 컨테이너로 전환하기"></a>언더토우 서블릿 컨테이너로 전환하기</h4><p>앞선, Hello World 출력은 언더토우의 코어 모듈을 사용하여 처리하는 핸들러를 등록했을 뿐이다. 우리는 처음에 서블릿 모듈까지 추가했으므로 자바 서블릿을 사용하는 웹 애플리케이션으로 전환해보자. 언더토우 서블릿 모듈의 사용법도 <a href="https://undertow.io/undertow-docs/undertow-docs-2.1.0/index.html#undertow-servlet">공식 문서를 참고</a>하면 된다. 어느정도 눈치챈 사람들이 있다면 MVC 패턴을 들어봤거나 DispatcherServlet의 용도를 아는 것일 것이다. 현재는 본래 용도가 아닌 Hello World를 출력하기 위한 서블릿이기에 몰라도 되므로 궁금한 사람들만 찾아보자.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span></span><span class="token class-name">Handlers</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span></span><span class="token class-name">Undertow</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Servlets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">DeploymentInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">DeploymentManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DeploymentInfo</span> deployment <span class="token operator">=</span> <span class="token class-name">Servlets</span><span class="token punctuation">.</span><span class="token function">deployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContextPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDeploymentName</span><span class="token punctuation">(</span><span class="token string">"main.war"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addServlets</span><span class="token punctuation">(</span><span class="token class-name">Servlets</span><span class="token punctuation">.</span><span class="token function">servlet</span><span class="token punctuation">(</span><span class="token string">"DispatcherServlet"</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeploymentManager</span> manager <span class="token operator">=</span> <span class="token class-name">Servlets</span><span class="token punctuation">.</span><span class="token function">defaultContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addDeployment</span><span class="token punctuation">(</span>deployment<span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Undertow</span> server <span class="token operator">=</span> <span class="token class-name">Undertow</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addHttpListener</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span><span class="token class-name">Handlers</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">addExactPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> manager<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>undertow<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Headers</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">Headers</span><span class="token punctuation">.</span><span class="token constant">CONTENT_TYPE</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>앞선 코드의 문제점은 디스패처서블릿이 본 용도가 아니므로 시간이 많다면 본인이 생각하는 방식대로 고쳐보는 것도 추천한다. 많은 신입 개발자들이 오해하는 것은 효율적인 관점에서 코드 작성에 대해 정답이 있다는 것이라고 생각한다는 것일지 모르겠다. 유용한 정보일지는 모르겠으나 누군가에게는 도움이 되는 글이었으면 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;자바 언어로 웹 애플리케이션을 개발하는 경우에 대부분 스프링 프레임워크 또는 스프링 부트 프로젝트를 기반으로 시작하기 때문에 직접 자바 서블릿을 작성하여 아파치 톰캣이나 언더토우와 같은 웹 애플리케이션 서버를 실행하여 배포해보는 경험을 하는 신입</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>프리마커 템플릿</title>
    <link href="https://kdevkr.github.io/freemarker-template/"/>
    <id>https://kdevkr.github.io/freemarker-template/</id>
    <published>2023-03-07T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 부트 프로젝트에 대한 예제를 살펴보면 대부분 템플릿 엔진으로 타임리프를 선택하여 사용함을 알 수 있다. 대부분 타임리프에 대해서 설명하므로 프리마커 템플릿 엔진에 대해서 정리한 글은 생각보다 많지 않다. 나는 타임리프라는 템플릿 엔진 보다는 프리마커의 문법이 더 간단하고 느끼기에 더 선호하는 편이다. <a href="https://github.com/jreijn/spring-comparing-template-engines">여러가지 템플릿 엔진과 비교</a>해서도 준수한 렌더링 성능을 보여주고 있다.</p><pre class="language-gradle" data-language="gradle"><code class="language-gradle"><span class="token keyword">dependencies</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">implementation</span> <span class="token string">'org.springframework.boot:spring-boot-starter-freemarker'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="FreeMarkerAutoConfiguration"><a href="#FreeMarkerAutoConfiguration" class="headerlink" title="FreeMarkerAutoConfiguration"></a>FreeMarkerAutoConfiguration</h4><p>스프링 부트의 자동 구성은 FreeMarkerAutoConfiguration로 시작되며 FreeMarkerServletWebConfiguration에서 뷰 리졸버가 등록되며 FreeMarkerNonWebConfiguration으로 FreeMarkerConfigurationFactoryBean가 등록되어 이메일 내용 처리와 같은 웹 요청과 관련되지 않은 곳에서도 템플릿 처리가 가능하도록 지원한다. 스프링 프레임워크에서는 SpringTemplateLoader로 클래스패스에 존재하는 템플릿을 불러올 수 있도록 지원하며 프리마커에서는 StringTemplateLoader를 통해 문자열로 정의된 템플릿을 만들 수 있게 제공한다.</p><h4 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h4><p>스프링 프레임워크에서는 프리마커 템플릿을 사용해서 다국어 메시지를 처리할 수 있도록 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/resources/org/springframework/web/servlet/view/freemarker/spring.ftl">spring.ftl</a>라는 매크로가 포함된 템플릿 파일을 제공하고 있으며 아래와 같이 프리마커 템플릿에서 스프링 메시지를 처리할 수 있다. 프리마커 템플릿 파일에 직접 명시하거나 애플리케이션 프로퍼티로 auto_import 옵션을 사용해서 추가할 수도 있다.</p><pre class="language-ftl" data-language="ftl"><div class="caption"><span>index.ftlh</span></div><code class="language-ftl"><span class="token ftl language-ftl"><span class="token ftl-directive"><span class="token punctuation">&lt;</span><span class="token directive keyword">#import</span><span class="token content ftl"> <span class="token string">"/spring.ftl"</span> <span class="token keyword">as</span> spring</span><span class="token punctuation">/></span></span></span><span class="token ftl language-ftl"><span class="token ftl-directive"><span class="token punctuation">&lt;</span><span class="token directive keyword">@spring</span><span class="token content ftl"><span class="token punctuation">.</span>message <span class="token string">"messageKey"</span></span><span class="token punctuation">/></span></span></span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">freemarker</span><span class="token punctuation">:</span>    <span class="token key atrule">settings</span><span class="token punctuation">:</span>      <span class="token key atrule">auto_import</span><span class="token punctuation">:</span> spring.ftl as spring</code></pre><blockquote><p>다만, 위 spring.ftl 파일에 정의된 메시지 처리는 웹 요청에 의한 스레드 내에서만 사용될 수 있기 때문에 이메일 내용 처리와 같이 웹 요청이 아닌 백그라운드 작업에서 사용할 순 없다.</p></blockquote><h4 id="백그라운드-작업-시-다국어-메시지-처리"><a href="#백그라운드-작업-시-다국어-메시지-처리" class="headerlink" title="백그라운드 작업 시 다국어 메시지 처리"></a>백그라운드 작업 시 다국어 메시지 처리</h4><p>사용자의 웹 요청에 의한 템플릿 처리가 아닌 백그라운드 작업에서 프리마커 템플릿 엔진을 사용하는 경우에 다국어 메시지를 제공하기 위해서는 프리마커 템플릿 엔진에서 리소스 번들을 모델로 메시지 보간을 처리할 수 있는 <strong>ResourceBundleModel</strong>를 사용해야 한다. 다음은 스프링 부트 자동 구성에 의해 등록되는 FreeMarkerConfigurationFactoryBean과 ResourceBundleModel을 통해 메시지를 처리할 수 있는 방법에 대한 예시이다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> configurationFactoryBean<span class="token punctuation">.</span><span class="token function">createConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringTemplateLoader</span> stringTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringTemplateLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> <span class="token string">"$&#123;bundle(\"application.name\")&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configuration<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>stringTemplateLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Template</span> template <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResourceBundle</span> resourceBundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"messages"</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleModel</span><span class="token punctuation">(</span>resourceBundle<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeansWrapperBuilder</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_INCOMPATIBLE_IMPROVEMENTS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">FreeMarkerTemplateUtils</span><span class="token punctuation">.</span><span class="token function">processTemplateIntoString</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="템플릿-체이닝"><a href="#템플릿-체이닝" class="headerlink" title="템플릿 체이닝"></a>템플릿 체이닝</h4><p>프리마커 템플릿 엔진에서 지원하는 <a href="https://freemarker.apache.org/docs/api/freemarker/cache/MultiTemplateLoader.html">MultiTemplateLoader</a>를 사용하면 여러가지 방식의 <a href="https://freemarker.apache.org/docs/pgui_config_templateloading.html">템플릿 로딩</a>을 통해 템플릿 로더에 의해 로드되는 템플릿을 함께 사용할 수 있다. 또한, MultiTemplateLoader에 전달되는 템플릿 로더의 순서에 따라 SpringTemplateLoader로 기본 템플릿 레이아웃을 만들고 실제 템플릿 내용은 StringTemplateLoader로 재정의하는 것도 가능하다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringTemplateLoader</span> stringTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringTemplateLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"email.ftlh"</span><span class="token punctuation">,</span> <span class="token string">"$&#123;bundle(\"application.name\")&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringTemplateLoader<span class="token punctuation">.</span><span class="token function">putTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> <span class="token string">"&lt;#include \"email.ftlh\" >"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> configurationFactoryBean<span class="token punctuation">.</span><span class="token function">createConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SpringTemplateLoader</span> springTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringTemplateLoader</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MultiTemplateLoader</span> multiTemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiTemplateLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateLoader</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>stringTemplateLoader<span class="token punctuation">,</span> springTemplateLoader<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configuration<span class="token punctuation">.</span><span class="token function">setTemplateLoader</span><span class="token punctuation">(</span>multiTemplateLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Template</span> template <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>MultiTemplateLoader의 생성자에 전달되는 템플릿 로더의 순서대로 템플릿을 찾도록 위임한다는 것에 주의해야한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;스프링 부트 프로젝트에 대한 예제를 살펴보면 대부분 템플릿 엔진으로 타임리프를 선택하여 사용함을 알 수 있다. 대부분 타임리프에 대해서 설명하므로 프리마커 템플릿 엔진에 대해서 정리한 글은 생각보다 많지 않다. 나는 타임리프라는 템플릿 엔진 보다</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 로그백 운영 설정</title>
    <link href="https://kdevkr.github.io/logback-spring/"/>
    <id>https://kdevkr.github.io/logback-spring/</id>
    <published>2023-02-25T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 부트 프로젝트를 기반으로 하는 애플리케이션에서는 기본적인 로깅 라이브러리로써 로그백이 사용됩니다. 스프링 부트의 포함된 org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;base.xml 파일을 토대로 콘솔 및 파일로 로그를 출력할 수 있게 기본값이 정의되어 있습니다. LoggingApplicationListener에 의해 애플리케이션이 실행될 때 호출되는 여러가지 이벤트에 의해 LogbackLoggingSystem 으로써 로그백 설정이 적용됩니다.</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--Base logback configuration provided for compatibility with Spring Boot 1.1--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>included</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/console-appender.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/file-appender.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>included</span><span class="token punctuation">></span></span></code></pre><p>위와 같이 설정되어있어도 기본적으로는 애플리케이션 로그는 콘솔이라는 표준 출력에 의해 기록되는 편입니다. 그러나 애플리케이션을 운영하다보면 보안 감사 혹은 비즈니스 동작에 대한 검증을 위해 일부 로그를 별도로 남겨야할 수 있습니다. 이러한 요구사항이 있다면 기본적인 로그백 설정 보다는 운영을 위한 커스텀 구성을 하는 것이 좋습니다.</p><h4 id="logback-spring-xml"><a href="#logback-spring-xml" class="headerlink" title="logback-spring.xml"></a>logback-spring.xml</h4><blockquote><p>When possible, we recommend that you use the -spring variants for your logging configuration (for example, logback-spring.xml rather than logback.xml). If you use standard configuration locations, Spring cannot completely control log initialization.</p></blockquote><p>스프링 부트 공식 문서의 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging.custom-log-configuration">Custom Log Configuration</a>에 대한 내용에 따라 logback-spring.xml 이라는 파일명으로 로그백에 대한 설정 파일을 구성하는 것이 효율적입니다. <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging.logback-extensions.profile-specific">Profile-specific Configuration</a>에서 설명하는 것처럼 <springProfile> 및 <springProperty> 태그를 기반으로 애플리케이션에서 사용하는 속성값을 그대로 사용할 수 있습니다.</p><h4 id="ch-qos-logback-core-rolling-RollingFileAppender"><a href="#ch-qos-logback-core-rolling-RollingFileAppender" class="headerlink" title="ch.qos.logback.core.rolling.RollingFileAppender"></a>ch.qos.logback.core.rolling.RollingFileAppender</h4><p>오류에 대한 로그만 별도로 추출하여 기록한다거나 특정 비즈니스 로직에 대한 로그를 별도로 나누어서 관리하고자 한다면 FileAppender 또는 RollingFileAppender과 함께 SizeAndTimeBasedRollingPolicy를 적용하여 원하는 출력 형태로 로그가 남도록 구성하는게 좋습니다. </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/console-appender.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_LOG_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_PATH&#125;/error_$&#123;LOG_FILE&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;FILE_LOG_PATTERN&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>$&#123;FILE_LOG_CHARSET&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>$&#123;ERROR_LOG_FILE&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-$&#123;ERROR_LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>$&#123;LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>$&#123;LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>$&#123;LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>$&#123;LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-7&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">></span></span></code></pre><blockquote><p>리눅스 서버의 로그 로테이션을 별도로 활용중이라면 굳이 로그백에서 RollingFileAppender를 사용할 필요는 없다. </p></blockquote><p>위 ERROR_FILE appender는 org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;file-appender.xml를 기반으로 작성하였으며 애플리케이션 속성에 의해 결정된 LOG_PATH에 error_를 파일명에 포함하여 남기도록 했습니다.</p><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://www.baeldung.com/spring-boot-logging">Logging in Spring Boot</a></li><li><a href="https://www.baeldung.com/logback">A Guide To Logback</a></li><li><a href="https://logback.qos.ch/manual/index.html">The logback manual</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;스프링 부트 프로젝트를 기반으로 하는 애플리케이션에서는 기본적인 로깅 라이브러리로써 로그백이 사용됩니다. 스프링 부트의 포함된 org&amp;#x2F;springframework&amp;#x2F;boot&amp;#x2F;logging&amp;#x2F;logback&amp;#x2F;</summary>
      
    
    
    
    
    <category term="Logging" scheme="https://kdevkr.github.io/tags/Logging/"/>
    
    <category term="Logback" scheme="https://kdevkr.github.io/tags/Logback/"/>
    
  </entry>
  
  <entry>
    <title>젠킨스 프로젝트 빌드</title>
    <link href="https://kdevkr.github.io/jenkins/"/>
    <id>https://kdevkr.github.io/jenkins/</id>
    <published>2023-02-22T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/jenkins/01.png"></p><p>젠킨스를 사용해서 프로젝트를 빌드하기 위해서는 아이템을 만들어야 한다. 아이템을 생성할 때에는 프로젝트 빌드 유형에 따라 웹 UI 방식의 프리스타일 또는 스크립트로 작성하는 파이프라인 등을 선택할 수 있게 지원하고 있다. 인터넷에 공유된 내용에 따라서는 파이프라인 스크립트를 작성하는 예제가 많이 보이지만 몸을 담고 있는 조직에서는 프리스타일 유형으로도 간단하게 원하는 빌드 결과를 구성하여 사용하고 있다.</p><p>본 글에서 사용될 프로젝트 : <a href="https://github.com/kdevkr/beanstalk-deploy-sample">kdevkr&#x2F;beanstalk-deploy-sample</a>  </p><p>위 리파지토리는 예전에 AWS Beanstalk Java SE Platform 으로 배포하기 위한 예제를 작성한 간단한 스프링 부트 프로젝트이다. 별다른 기능은 포함하고 있지 않으며 build.gradle에 몇가지 프로젝트 빌드를 위한 설정을 해둔 상태이다. 예를 들어, -Pversion 라는 프로젝트 속성을 통해서 빌드 버전을 적용할 수 있음을 알 수 있다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">./gradlew zipBeanstalk <span class="token parameter variable">-Pversion</span><span class="token operator">=</span><span class="token string">'1.0.1'</span><span class="token comment"># build/distributions/beanstalk-1.0.1.zip</span></code></pre><ul><li>build&#x2F;libs: .war 파일 및 Procfile이 생성되는 폴더</li><li>build&#x2F;distributions: Beanstalk 번들 파일이 생성되는 폴더</li></ul><h4 id="빌드-시-매개변수로-깃-태그-선택하기"><a href="#빌드-시-매개변수로-깃-태그-선택하기" class="headerlink" title="빌드 시 매개변수로 깃 태그 선택하기"></a>빌드 시 매개변수로 깃 태그 선택하기</h4><p>Parameterized Build 와 <a href="https://plugins.jenkins.io/git-parameter/">Git Parameter</a> 플러그인을 사용해서 깃 커밋에 릴리즈를 위한 버전을 태그로 달아놓고 젠킨스에서 깃 태그를 필터하여 선택함으로써 원하는 기준의 소스 코드를 가지는 애플리케이션을 빌드할 수 있다. 아래와 같이 설정하면 프로젝트 빌드 시 깃 태그를 찾아서 선택할 수 있고 해당 태그가 있는 커밋의 소스를 기준으로 한다.</p><p><img data-src="/images/posts/jenkins/02.png"><br><img data-src="/images/posts/jenkins/03.png"><br><img data-src="/images/posts/jenkins/04.png"></p><h4 id="프로젝트-빌드-버전-적용하기"><a href="#프로젝트-빌드-버전-적용하기" class="headerlink" title="프로젝트 빌드 버전 적용하기"></a>프로젝트 빌드 버전 적용하기</h4><p>위에서 <a href="https://github.com/kdevkr/beanstalk-deploy-sample/releases/tag/v1.0.0">v1.0.0</a> 태그를 버전으로 선택할 수 있으며 이 버전을 빌드되는 애플리케이션 버전에도 적용하기 위해서는 그래들 프로젝트 빌드 시 프로젝트 속성으로써 지정되도록 해야한다. 빌드 단계에서 Invoke Gradle script의 고급 옵션을 열어보면 모든 잡 파라미터를 프로젝트 속성으로 전달하는 항목을 선택할 수 있다.</p><p><img data-src="/images/posts/jenkins/05.png"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 만약, 그래들 스크립트가 아닌 직접 쉘에서 빌드 명령어를 수행하고 싶다면 아래와 같이 선택한 태그 파라미터를 적용시킬 수 있다. </span>./gradlew <span class="token parameter variable">-Pversion</span><span class="token operator">=</span><span class="token variable">$version</span> zipBeanstalk</code></pre><h4 id="프로젝트-빌드-결과를-슬랙으로-보내기"><a href="#프로젝트-빌드-결과를-슬랙으로-보내기" class="headerlink" title="프로젝트 빌드 결과를 슬랙으로 보내기"></a>프로젝트 빌드 결과를 슬랙으로 보내기</h4><p>프로젝트 규모에 따라 빌드 수행 시간이 상당히 소요될 수 있으므로 프로젝트 릴리즈를 담당하는 인원들이 릴리즈 버전 빌드에 성공 또는 실패 유무를 확인할 수 있도록 슬랙 메신저(구글 챗이나 이메일도 가능)로 메시지를 보내도록 알림 설정을 하는 것이 좋다. <a href="https://kdevkr.slack.com/apps/A0F7VRFKN-jenkins-c">Jenkins CI 슬랙 앱</a> 그리고 <a href="https://plugins.jenkins.io/slack/">Slack Notification</a> 플러그인과 함께 커스텀 메시지를 활용한다면 SFTP 서버를 사용해서 별도로 빌드된 애플리케이션을 전달하고 수동 배포를 해야한다면 업로드된 SFTP 경로를 메시지로 전달한다거나 애플리케이션 배포를 위해서 실행해야할 명령어를 안내하도록 구성할 수도 있다.</p><p><img data-src="/images/posts/jenkins/06.png"><br><img data-src="/images/posts/jenkins/07.png"></p><h4 id="빌드-파일을-원격-호스트로-전달하기"><a href="#빌드-파일을-원격-호스트로-전달하기" class="headerlink" title="빌드 파일을 원격 호스트로 전달하기"></a>빌드 파일을 원격 호스트로 전달하기</h4><p>AWS Beanstalk 환경에 배포하기 위해서는 <a href="https://plugins.jenkins.io/aws-beanstalk-publisher-plugin/">AWS Elastic Beanstalk Publisher</a> 플러그인을 사용하겠지만 보안 상의 문제로 애플리케이션 빌드 파일을 SFTP 서버로 업로드해야할 환경이라면 <a href="https://plugins.jenkins.io/publish-over-ssh/">Publish Over SSH</a> 플러그인을 사용해서 PEM 인증서를 통해 빌드 파일을 원격 호스트로 전달하도록 구성할 수 있다.</p><ul><li>AWS Elastic Beanstalk Publisher</li><li>S3 publisher</li><li>Publish Over SSH</li></ul><p>이에 대한 다양한 예제는 <a href="https://github.com/kdevkr/mambo-box/tree/main/jenkins">kdevkr&#x2F;mambo-box&#x2F;jenkins</a>에 기록해놓고자 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/jenkins/01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;젠킨스를 사용해서 프로젝트를 빌드하기 위해서는 아이템을 만들어야 한다. 아이템을 생성할 때에는 프로젝트 빌드 유형에 따라 웹 UI 방식의 프리스타일 또</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>프로세스 시작 및 종료 스크립트</title>
    <link href="https://kdevkr.github.io/autorun-script/"/>
    <id>https://kdevkr.github.io/autorun-script/</id>
    <published>2023-01-31T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.747Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu와 같은 리눅스 배포판은 APT 그리고 CentOS와 같은 리눅스 배포판은 YUM 이나 DNF를 사용하여 패키지를 설치할 수 있습니다. 패키지 매니저를 통해서 설치하는 경우 <a href="https://systemd.io/">System and Service Manager</a>를 통해 서비스 등록으로 쉽게 프로세스를 실행하고 종료할 수 있게 지원합니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> <span class="token function">docker</span> </code></pre><p>그러나, 가끔은 패키지 매니저에서 기본적으로 등록된 리파지토리(Repository)에서 다양한 버전을 지원하지 않음으로 인해 <a href="https://www.elastic.co/kr/downloads/past-releases/elasticsearch-7-12-0">엘라스틱서치 7.12.0 바이너리 다운로드</a>를 통해 운영체제 아키텍처 단위로 빌드된 소스를 사용하기도 합니다. 이러한 경우 직접 Systemd에 서비스를 만들어서 등록하거나 프로세스 시작 또는 종료를 위한 스크립트를 만들어야합니다.</p><blockquote><p>서비스 등록 이외에도 도커 컨테이너를 기반으로 간단하게 프로세스를 자동으로 재시작할 수 있게 구성할 수 있습니다.</p></blockquote><p>현재 담당하고 있는 일본 고객 환경의 경우에는 아마존 웹 서비스의 도쿄(ap-northeast-1) 리전의 대규모 장애와 잦은 지진으로 인한 정전 사태등을 고려해서 시스템이 안정적인 상태로 자동으로 복구되도록 프로세스를 재시작하는 것이 필요합니다. 이와 같은 이유로 고객 환경에서 사용중인 알마리눅스(AlmaLinux)를 기준으로 엘라스틱서치 프로세스를 실행하고 종료하는 스크립트를 작성해보도록 하겠습니다.</p><h4 id="엘라스틱서치-실행-스크립트"><a href="#엘라스틱서치-실행-스크립트" class="headerlink" title="엘라스틱서치 실행 스크립트"></a>엘라스틱서치 실행 스크립트</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">ES_USER</span><span class="token operator">=</span><span class="token string">"ec2-user"</span><span class="token assign-left variable">ES_HOME</span><span class="token operator">=</span><span class="token string">"/home/<span class="token variable">$ES_USER</span>/elasticsearch-7.3.2"</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> $ES_HOME <span class="token operator">|</span> pidof <span class="token function">java</span><span class="token variable">`</span></span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">$ES_HOME</span> <span class="token operator">|</span> pidof <span class="token function">java</span> <span class="token operator">></span> /dev/null<span class="token assign-left variable">RESULT</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token variable">$RESULT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [WARN] Already running with pid(<span class="token variable">$PID</span>)."</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Starting elasticsearch..."</span>    <span class="token variable">$&#123;ES_HOME&#125;</span>/bin/elasticsearch <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;ES_HOME&#125;</span>/elasticsearch.pid<span class="token keyword">fi</span></code></pre><p>프로세스를 실행할 때에는 예상되는 프로세스가 이미 실행중인지를 ps 명령어를 통해 프로세스 상태를 체크하여 프로세스 아이디가 존재하는지의 결과에 따라 프로세스를 실행해야하는지 판단할 수 있습니다. 위와 같이 실행 스크립트를 작성하는 경우 크론탭을 통해서 서버 또는 프로세스가 예상하지 못하는 이유로 종료되더라도 다시 실행될 수 있도록 적용할 수 있게 됩니다.</p><h4 id="엘라스틱서치-종료-스크립트"><a href="#엘라스틱서치-종료-스크립트" class="headerlink" title="엘라스틱서치 종료 스크립트"></a>엘라스틱서치 종료 스크립트</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">ES_USER</span><span class="token operator">=</span><span class="token string">"ec2-user"</span><span class="token assign-left variable">ES_HOME</span><span class="token operator">=</span><span class="token string">"/home/<span class="token variable">$ES_USER</span>/elasticsearch-7.3.2"</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> $ES_HOME <span class="token operator">|</span> pidof <span class="token function">java</span><span class="token variable">`</span></span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">$ES_HOME</span> <span class="token operator">|</span> pidof <span class="token function">java</span> <span class="token operator">></span> /dev/null<span class="token assign-left variable">RESULT</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token variable">$RESULT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Stopping elasticsearch..."</span>    <span class="token function">kill</span> <span class="token parameter variable">-15</span> <span class="token variable">$PID</span>    <span class="token function">sleep</span> <span class="token number">3</span>    <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">$ES_HOME</span> <span class="token operator">|</span> pidof <span class="token function">java</span> <span class="token operator">></span> /dev/null    <span class="token assign-left variable">RESULT</span><span class="token operator">=</span><span class="token variable">$?</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token variable">$RESULT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [ERROR] Cannot stop elasticsearch"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [INFO] Stopped elasticsearch."</span>    <span class="token keyword">fi</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> --rfc-3339<span class="token operator">=</span>seconds<span class="token variable">`</span></span>] [WARN] Elasticsearch not running."</span><span class="token keyword">fi</span></code></pre><p>프로세스를 종료는 단순하게 kill 명령어와 함께 프로세스에 대한 아이디를 지정하면 됩니다. 그러나, SIGTERM 시그널을 보내도 프로세스가 정상적으로 종료되지 않을 수 있으므로 kill 명령어를 수행하고나서 잠시 대기한 다음 프로세스 실행 상태를 다시 한번 체크하여 제대로 종료되었는지를 체크하였습니다. 위 스크립트를 더 보완한다면 일정 시간을 대기하는 것과 함께 N번 더 프로세스 종료를 수행하도록 반복문을 적용해볼 수 있습니다. 저는 프로세스 종료 스크립트를 실행하는 것은 사용자에 의한 명시적인 행위라고 생각하여 한번 만 수행하고 결과에 따라 확인할 수 있도록 메시지를 출력하였습니다. </p><h4 id="스크립트-주의사항"><a href="#스크립트-주의사항" class="headerlink" title="스크립트 주의사항"></a>스크립트 주의사항</h4><p>엘라스틱서치는 자체적으로 실행중인 프로세스 아이디를 파일로 생성하는 파라미터 옵션을 제공하지만 일부 프로세스는 지원하지 않을 수 있습니다. 그래서 nohup 명령어를 수행하고나서 <strong>echo $!</strong> 를 호출하여 실행된 프로세스에 대한 아이디를 가져와서 파일로 기록하기도 합니다. 프로세스 아이디가 저장된 파일을 통해서 프로세스 여부를 판단하게 되면 프로세스가 중복으로 실행될 수 있는 취약점을 가지고 있습니다.</p><p>또한, 위 스크립트에서는 pidof 명령어로 커맨드 기반으로 프로세스 아이디를 가져왔지만 커맨드 이름만으로는 제대로 구분할 수 없어서 아래와 같이 grep 과 awk 명령어를 통해 프로세스 아이디를 추출해야할 수 있습니다. 단일 프로세스라면 pidof 명령어가 간단하지만 다수의 프로세스로 실행하는 시스템이라면 주의해야만 합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 특정 프로세스 찾기</span>ubuntu@ubuntu:~$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'/home/ubuntu/q/l64/q -p 5000'</span>ubuntu     <span class="token number">60379</span>  <span class="token number">0.0</span>  <span class="token number">0.2</span> <span class="token number">298068</span>  <span class="token number">5584</span> ?        Sl   Jan30   <span class="token number">0</span>:04 /home/ubuntu/q/l64/q <span class="token parameter variable">-p</span> <span class="token number">5000</span>ubuntu     <span class="token number">76497</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">6440</span>   <span class="token number">720</span> pts/0    S+   <span class="token number">13</span>:51   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto /home/ubuntu/q/l64/q <span class="token parameter variable">-p</span> <span class="token number">5000</span><span class="token comment"># Grep 명령어는 제외</span>ubuntu@ubuntu:~$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'/home/ubuntu/q/l64/q -p 5000'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span>ubuntu     <span class="token number">60379</span>  <span class="token number">0.0</span>  <span class="token number">0.2</span> <span class="token number">298068</span>  <span class="token number">5584</span> ?        Sl   Jan30   <span class="token number">0</span>:04 /home/ubuntu/q/l64/q <span class="token parameter variable">-p</span> <span class="token number">5000</span><span class="token comment"># 2번째 프로세스 아이디 추출</span>ubuntu@ubuntu:~$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'/home/ubuntu/q/l64/q -p 5000'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token number">60379</span></code></pre><p>크론탭을 사용해서 자동으로 재시작하도록 스크립트를 주기적으로 실행할때에도 리눅스 배포판의 기본 쉘의 차이로 인해 사용자의 환경변수가 제대로 등록되지 않을 수 있습니다. 예를 들어, 우분투의 경우에는 아래와 같이 크론탭을 사용할 때 bash를 지정하는게 좋습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-e</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash@reboot /home/ubuntu/start.sh <span class="token operator">>></span> /home/ubuntu/start.log</code></pre><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://stackoverflow.com/a/27302946">https://stackoverflow.com/a/27302946</a></li><li><a href="https://askubuntu.com/a/157787">https://askubuntu.com/a/157787</a></li><li><a href="https://unix.stackexchange.com/a/94459">https://unix.stackexchange.com/a/94459</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ubuntu와 같은 리눅스 배포판은 APT 그리고 CentOS와 같은 리눅스 배포판은 YUM 이나 DNF를 사용하여 패키지를 설치할 수 있습니다. 패키지 매니저를 통해서 설치하는 경우 &lt;a href=&quot;https://systemd.io/&quot;&gt;Syst</summary>
      
    
    
    
    
    <category term="Autorun" scheme="https://kdevkr.github.io/tags/Autorun/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 웹 콘솔</title>
    <link href="https://kdevkr.github.io/linux-web-console/"/>
    <id>https://kdevkr.github.io/linux-web-console/</id>
    <published>2023-01-28T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<p>AWS에서는 웹 콘솔을 통해서 EC2에 연결할 수 있는 다양한 방법을 제공한다. 그러나, 개인적인 학습을 위해서 Oracle VM VirtualBox를 사용해서 우분투와 같은 리눅스에 대한 VM 머신을 실행하면 윈도우 터미널을 통해 SSH 접속을 수행해야한다. 알고보니 리눅스 서버에 웹 콘솔 기능을 제공하는 <a href="https://cockpit-project.org/">Cockpit</a> 패키지가 있었음을 이제야 확인했다.</p><h4 id="Cockpit-패키지-추가"><a href="#Cockpit-패키지-추가" class="headerlink" title="Cockpit 패키지 추가"></a>Cockpit 패키지 추가</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> cockpit<span class="token comment"># CentOS</span><span class="token function">sudo</span> dnf update <span class="token parameter variable">-y</span><span class="token function">sudo</span> dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> cockpit</code></pre><h4 id="Cockpit-서비스-실행"><a href="#Cockpit-서비스-실행" class="headerlink" title="Cockpit 서비스 실행"></a>Cockpit 서비스 실행</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start cockpit<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> cockpit.socket</code></pre><p>이제 https:&#x2F;&#x2F;사설IP:9090 으로 접속하면 리눅스 웹 콘솔이 표시된다.</p><p><img data-src="https://file.okky.kr/images/1674996458378.png"></p><p>SSH 접속 명령어를 학습해야할 상황이 아니라면 웹 콘솔을 통해서 리눅스 명령어를 수행해볼 수 있게 되었다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;AWS에서는 웹 콘솔을 통해서 EC2에 연결할 수 있는 다양한 방법을 제공한다. 그러나, 개인적인 학습을 위해서 Oracle VM VirtualBox를 사용해서 우분투와 같은 리눅스에 대한 VM 머신을 실행하면 윈도우 터미널을 통해 SSH 접속을</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>깃허브 풀 리퀘스트 상태 검사</title>
    <link href="https://kdevkr.github.io/github-pr-status-checks/"/>
    <id>https://kdevkr.github.io/github-pr-status-checks/</id>
    <published>2023-01-09T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<p>현재 회사에서 새해 목표는 빠른 업무 처리를 위해서 간단한 방식을 취함에 따라서 지속적인 성장을 이루어냈으나 제품에 대한 신뢰성의 문제를 경험하고나서는 제품 품질을 강화하기 위한 코드 품질 또는 테스트 자동화에 대한 환경 구축의 필요성을 느끼고 많은 것들을 시도하고 있다. 깃허브 풀 리퀘스트를 수행하고 있었으나 코드 리뷰가 주요 테크 기업이나 스타트업처럼 개발 문화로 정착되어있지 않음으로 인해서 단위 테스트 코드를 작성하도록 요구한다거나 정적 분석 도구를 통해 코드 품질에 대해서 분석하고 리팩토링을 수행하는 과정이 없다보니 개발자들이 스스로 편한 방식을 사용해서 작업 요건에 대해서 처리해왔다.</p><p>페어 프로그래밍을 선호하는 시니어 개발자도 깃허브 코드리뷰에 대해서는 습관화 되어있지 않았기에 비록 브랜치 보호 기능을 통해 리뷰어 승인을 받도록 강제하더라도 상세하게 코드 변경사항을 검토하지 않고 승인만 해버리는 상황이 발생했었다. 그럼에도 브랜치 보호 기능으로 불편함을 강제함으로써 작업에 대해 브랜치를 만들어서 작업하고 풀 리퀘스트를 요청하는 방법에 대해서는 모든 개발자들이 익숙해졌다고 생각이 든다. 아무튼 깃허브 풀 리퀘스트를 활용함에도 제대로 된 코드 리뷰 문화가 이루어지지 않기 때문에 최소한 코드 품질에 대해서 개발자들이 인지할 수 있도록 깃허브 풀 리퀘스트 시 상태 검사를 통해 리뷰 이외에도 상태 검사가 통과되어야만 원하는 브랜치에 머지할 수 있도록 강제하고자 한다. </p><blockquote><p>풀 리퀘스트에 대해 제대로 리뷰해야한다고 말했으나 당장 업무를 처리하는데 불편함이 있으므로 받아들여지지 않았다.</p></blockquote><p>데브옵스에 이어 GitOps가 떠오르던 시기에 확인했던 것은 풀 리퀘스트에 대해 상태 체크를 수행할 수 있도록 설정할 수 있다는 것이었다. 실제로 다음과 같이 대부분의 오픈소스에서는 풀 리퀘스트로 변경되는 부분에 대해서 상태 체크를 수행하도록 깃허브 액션을 통해 워크플로우를 구성해놓은 것을 확인할 수 있다.</p><p><img data-src="/images/posts/github-pr-status-check/01.png"></p><p>풀 리퀘스트 시 코드 상태 검사를 수행하는 것에 대한 이점은 무엇이 있을까? 현재 조직의 기준에서는 제대로 된 코드 리뷰 문화가 갖추어져 있지 않기 때문에 기본적인 코드 품질에 대해서는 Checkstyle 또는 ESLint를 수행하여 정적 분석을 수행하고 자동으로 컨벤션을 맞추도록 강제할 수 있다는 것에 있다. 자신만의 코딩 컨벤션이 갖추어지지 않은 신입 개발자들에게는 시니어 개발자들이 리뷰하지 않더라도 컨벤션에 대한 중요성을 인지시키고 가이드할 수 있기 때문이다.</p><h4 id="깃허브-액션"><a href="#깃허브-액션" class="headerlink" title="깃허브 액션"></a>깃허브 액션</h4><p>풀 리퀘스트 시 상태 검사를 수행할 수 있도록 깃허브 액션을 통해 워크플로우를 작성할 수 있다. 많은 개발자들이 공유하여 사용하는 액션들 중에서 상태 검사를 위해 <a href="https://github.com/reviewdog/reviewdog">reviewdog</a>를 기반으로 수행하는 아래의 두가지 워크플로우를 적용해보기로 하였다. 조직 내에서 결정한 자바 코딩 컨벤션이 없어도 기본적인 구글 자바 스타일을 통해서 상태 검사를 수행할 수 있으며 프론트엔드 코드에 대해서도 ESLint를 수행하도록 되어있으므로 위 두가지 워크플로우만 수행하더라도 충분히 코드 품질을 향상시키고 유지할 수 있을 것이라 생각된다.</p><ul><li><a href="https://github.com/marketplace/actions/run-java-checkstyle">Run java checkstyle</a></li><li><a href="https://github.com/marketplace/actions/run-eslint-with-reviewdog">Run eslint with reviewdog</a></li></ul><blockquote><p>깃허브 액션 워크플로우 파일 : <a href="https://github.com/kdevkr/mambo-box/blob/main/.github/workflows/pr-checks.yml">.github&#x2F;workflows&#x2F;pr-checks.xml</a></p></blockquote><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> PR Checks<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> main    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'**.java'</span>      <span class="token punctuation">-</span> <span class="token string">'**.js'</span>      <span class="token punctuation">-</span> <span class="token string">'**.vue'</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">checks</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Checks    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># ubuntu-22.04</span>    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">java</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span>        <span class="token key atrule">node</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> dorny/paths<span class="token punctuation">-</span>filter@v2        <span class="token key atrule">id</span><span class="token punctuation">:</span> changes        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            java:              - '**.java'            vuejs:              - '**.vue'              - '**.js'</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token comment">###########################################</span>      <span class="token comment">## Java Checkstyle</span>      <span class="token comment">###########################################</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.java == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up JDK $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.Java <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>java@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">distribution</span><span class="token punctuation">:</span> corretto          <span class="token key atrule">java-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.java <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">'gradle'</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.java == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Run checkstyle        <span class="token key atrule">uses</span><span class="token punctuation">:</span> nikitasavinov/checkstyle<span class="token punctuation">-</span>action@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">reporter</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>pr<span class="token punctuation">-</span>check          <span class="token key atrule">tool_name</span><span class="token punctuation">:</span> <span class="token string">'checkstyle'</span>          <span class="token key atrule">checkstyle_version</span><span class="token punctuation">:</span> <span class="token number">10.3</span>          <span class="token key atrule">checkstyle_config</span><span class="token punctuation">:</span> checkstyle.xml      <span class="token comment">###########################################</span>      <span class="token comment">## Node ESLint</span>      <span class="token comment">###########################################</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">'npm'</span>          <span class="token key atrule">cache-dependency-path</span><span class="token punctuation">:</span> npm<span class="token punctuation">-</span>shrinkwrap.json      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache Dependencies        <span class="token key atrule">id</span><span class="token punctuation">:</span> npm<span class="token punctuation">-</span>cache        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">'**/node_modules'</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> runner.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>node<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> hashFiles('<span class="token important">**/npm-shrinkwrap.json')</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            $&#123;&#123; runner.os &#125;&#125;-node-</span>      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true' <span class="token important">&amp;&amp;</span> steps.npm<span class="token punctuation">-</span>cache.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci      <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.changes.outputs.vuejs == 'true'        <span class="token key atrule">name</span><span class="token punctuation">:</span> Run eslint        <span class="token key atrule">uses</span><span class="token punctuation">:</span> reviewdog/action<span class="token punctuation">-</span>eslint@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">reporter</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>pr<span class="token punctuation">-</span>check          <span class="token key atrule">eslint_flags</span><span class="token punctuation">:</span> <span class="token string">'--ext .js,.vue ./src/main/resources/static/js'</span></code></pre><p>처음에는 간단하게 풀 리퀘스트가 생성되고 커밋이 푸시되었을때 <strong>체크스타일</strong>과 <strong>ESLint</strong>가 동작하도록 작성하였으나 백엔드 작업시에도 불필요하게 ESLint를 수행하고 프론트엔드 작업시에도 불필요하게 자바 파일에 대한 체크스타일을 수행하는 비효율적인 동작을 수행하는 구조였다. 추가적인 개선을 통해 풀 리퀘스트 시 <a href="https://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore">paths</a> 문법을 활용해서 .java, .js, .vue 파일에 대한 변경사항이 있을때만 상태 검사에 대한 워크플로우가 실행될 수 있도록 변경했으며 <a href="https://github.com/dorny/paths-filter">dorny&#x2F;paths-filter</a>를 통해서 자바 파일에 대한 변경사항이 있다면 체크스타일을 수행하고 프론트 파일에 대한 변경사항이 있다면 ESLint가 개별적으로 수행할 수 있도록 하였다.</p><blockquote><p>구글 체크스타일은 회사 코드에 적합하지 않다고 판단되어 가장 간단한 규칙으로 수행할 수 있도록 커스터마이징 된 체크스타일 파일을 추가했습니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 회사에서 새해 목표는 빠른 업무 처리를 위해서 간단한 방식을 취함에 따라서 지속적인 성장을 이루어냈으나 제품에 대한 신뢰성의 문제를 경험하고나서는 제품 품질을 강화하기 위한 코드 품질 또는 테스트 자동화에 대한 환경 구축의 필요성을 느끼고 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>젠킨스에 Amazon Corretto JDK 추가하기</title>
    <link href="https://kdevkr.github.io/add-jdk-installations-jenkins/"/>
    <id>https://kdevkr.github.io/add-jdk-installations-jenkins/</id>
    <published>2022-12-31T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.747Z</updated>
    
    <content type="html"><![CDATA[<p>최근에는 <a href="https://www.youtube.com/watch?v=iLqGzEkusIw">깃허브 액션의 워크플로우 활용</a>하는 경우가 늘고 있는 것 같지만 대부분의 회사에서는 <a href="https://www.youtube.com/watch?v=0Emq5FypiMM">CI&#x2F;CD</a> 도구로 젠킨스를 많이 사용할 것이다. 그런데 대부분 어떤 개발자에 의해서 젠킨스가 이미 구성되어있기 때문에 신입 또는 주니어 개발자가 직접 경험하는 부분이 없을 수 있다. 리눅스 서버에 JDK를 설치하고 젠킨스를 실행하더라도 운영되는 환경에 따라 사용되는 JDK를 사용하여 애플리케이션을 빌드하도록 구성해야한다.</p><h4 id="JDK-Installations"><a href="#JDK-Installations" class="headerlink" title="JDK Installations"></a>JDK Installations</h4><p>Jenkins 관리 &gt; Global Tool Configuration &gt; JDK installations 에서 젠킨스 시스템에서 사용될 JDK 목록을 관리할 수 있도록 제공하고 있다. 이를 활용해서 각 프로젝트에서 사용될 JDK을 설치해서 운영 환경에서 사용될 JVM 버전과 동일한 JDK 벤더를 사용해서 애플리케이션을 빌드할 수 있다.</p><ul><li><a href="https://github.com/adoptium/temurin17-binaries/releases">https://github.com/adoptium/temurin17-binaries/releases</a></li><li><a href="https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz">https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz</a></li></ul><p>일반적으로 범용적인 목적으로는 Temurin이라는 OpenJDK를 사용하고 회사에서는 운영 환경인 CSP와 동일한 Amazon Corretto JDK를 사용하고 있다. 기본적으로는 젠킨스가 설치된 서버 시스템에 <a href="https://www.youtube.com/watch?v=qx3XK82BZPk">여러개의 JDK를 설치</a>해서 사용하는 것으로 설명한다. 다행히도 JDK Tool Plugin 에서는 다운로드 링크를 지정해서 추가할 수 있는 <a href="https://stackoverflow.com/a/55244659">Extract .zip&#x2F;.tar.gz</a>을 제공하고 있다. </p><blockquote><p>Downloads a tool archive and installs it within Jenkins’s working directory.<br>Example: https:&#x2F;&#x2F;downloads.apache.org&#x2F;ant&#x2F;binaries&#x2F;apache-ant-1.10.12-bin.zip and specify a subdir of apache-ant-1.10.12 .</p></blockquote><p>위 설명에 따라서 다운로드 링크에 의해서 압축이 해제될 폴더를 지정해야한다.</p><p><img data-src="/images/posts/add-jdk-installations-jenkins/01.png"></p><h4 id="프로젝트에서-Amazon-Corretto-JDK-사용하기"><a href="#프로젝트에서-Amazon-Corretto-JDK-사용하기" class="headerlink" title="프로젝트에서 Amazon Corretto JDK 사용하기"></a>프로젝트에서 Amazon Corretto JDK 사용하기</h4><p>프로젝트 빌드 유형에 따라서 설치한 JDK를 지정하는 방법을 공유하고자 한다. 회사에서는 Freestyle Project로 간단하게 사용하고 있는데 인터넷에서는 파이프라인도 많이 활용하고 있는 것 같다.</p><p><img data-src="/images/posts/add-jdk-installations-jenkins/02.png" alt="Freestyle Project"></p><pre class="language-bash" data-language="bash"><code class="language-bash">Started by user mamboRunning as SYSTEM<span class="token punctuation">[</span>EnvInject<span class="token punctuation">]</span> - Loading <span class="token function">node</span> environment variables.Building <span class="token keyword">in</span> workspace /var/jenkins_home/workspace/Test<span class="token punctuation">[</span>Test<span class="token punctuation">]</span> $ /bin/sh <span class="token parameter variable">-xe</span> /tmp/jenkins17925040181999271110.sh+ <span class="token function">which</span> <span class="token function">java</span>/var/jenkins_home/tools/hudson.model.JDK/Amazon_Corretto_11/amazon-corretto-11.0.17.8.1-linux-x64/bin/java+ <span class="token function">java</span> <span class="token parameter variable">--version</span>openjdk <span class="token number">11.0</span>.17 <span class="token number">2022</span>-10-18 LTSOpenJDK Runtime Environment Corretto-11.0.17.8.1 <span class="token punctuation">(</span>build <span class="token number">11.0</span>.17+8-LTS<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM Corretto-11.0.17.8.1 <span class="token punctuation">(</span>build <span class="token number">11.0</span>.17+8-LTS, mixed mode<span class="token punctuation">)</span>Finished: SUCCESS</code></pre><p>위와 같이 Execute Shell 커맨드를 사용해서 현재 빌드 환경에 대한 자바 버전을 확인해보니 정상적으로 JDK로 지정한 Amazon Corretto 11을 사용중인 것으로 출력되었다. 그리고 파이프라인 프로젝트에서는 어떻게 지정하는지 검색해보니 아래와 같이 문법을 작성한다고 한다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">pipeline <span class="token punctuation">&#123;</span>    agent any        tools <span class="token punctuation">&#123;</span>        jdk <span class="token interpolation-string"><span class="token string">"Amazon Corretto 11"</span></span>    <span class="token punctuation">&#125;</span>        environment <span class="token punctuation">&#123;</span>        JAVA_HOME <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"tool Amazon Corretto 11"</span></span>    <span class="token punctuation">&#125;</span>    stages <span class="token punctuation">&#123;</span>        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'Java Version'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            steps <span class="token punctuation">&#123;</span>                sh <span class="token string">'java -version'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>프론트엔드 빌드에 사용될 Node 버전을 설치하기 위해서는 NodeJS 플러그인을 설치하면 동일하게 Global Tool Configuration 기능에 NodeJS installations 항목이 추가됩니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;최근에는 &lt;a href=&quot;https://www.youtube.com/watch?v=iLqGzEkusIw&quot;&gt;깃허브 액션의 워크플로우 활용&lt;/a&gt;하는 경우가 늘고 있는 것 같지만 대부분의 회사에서는 &lt;a href=&quot;https://www.youtube</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>인텔리제이 자바 에이전트 실행하기</title>
    <link href="https://kdevkr.github.io/idea-javaagent/"/>
    <id>https://kdevkr.github.io/idea-javaagent/</id>
    <published>2022-12-28T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글의 APM 자바 에이전트 적용 예제는 <a href="https://github.com/kdevkr/spring-demo-apm">kdevkr&#x2F;spring-demo-apm</a> 리포지토리를 참고하실 수 있습니다.</p></blockquote><p><a href="/load-testing/">부하 및 성능 테스트는 어떻게 하는거지?</a>에서 언급한 것처럼 로컬 환경에 성능 테스트에 대한 환경을 구성하기 위해서 Scouter, Pinpoint, Elastic APM과 같은 APM 솔루션들의 자바 에이전트를 실행해야하는 상황이 발생합니다. 실제로는 테스트 환경에 애플리케이션을 배포하고 애플리케이션 서버를 구동하는 경우에 <a href="https://docs.newrelic.com/docs/apm/agents/java-agent/installation/include-java-agent-jvm-argument/#spring-boot">javaagent 플래그로 에이전트 파일을 지정</a>하면 됩니다.</p><p>제가 하고싶었던 것은 로컬 환경에 APM 서버를 구축하고 인텔리제이를 통해 애플리케이션 서버를 실행하는 경우에 자바 에이전트를 적용해보고 싶었습니다. 인텔리제이를 사용하면서 스프링 부트 애플리케이션을 실행할 때 특정 프로파일을 활성화하거나 환경변수를 통해서 일부 프로퍼티를 커스텀하게 적용해본 케이스는 있으나 자바 에이전트를 지정해본 경험은 없었습니다. </p><h4 id="Path-Variables"><a href="#Path-Variables" class="headerlink" title="Path Variables"></a>Path Variables</h4><p>인텔리제이 문서 상에는 <a href="https://www.jetbrains.com/help/idea/absolute-path-variables.html">Path variables</a> 항목으로 경로 변수를 추가하거나 빌트인되어 있는 경로 변수를 확인할 수 있습니다. 그리고 아래와 같이 실행 구성에서 Path Variables를 사용할 수 있다고도 안내해주고 있네요.</p><blockquote><p>You can use path variables to specify paths and command-line arguments for external tools and in some run configurations. For more information, see Built-in IDE macros.</p></blockquote><p>따라서 프로젝트 폴더에 자바 에이전트 파일이 위치한다면 빌트인 된 경로 변수를 사용하여 지정할 수 있다는 의미가 됩니다.</p><h4 id="Elastic-APM-자바-에이전트"><a href="#Elastic-APM-자바-에이전트" class="headerlink" title="Elastic APM 자바 에이전트"></a>Elastic APM 자바 에이전트</h4><pre class="language-none"><code class="language-none">-javaagent:$PROJECT_DIR$&#x2F;agent&#x2F;elastic-apm-agent-1.26.1.jar-Delastic.apm.server_urls&#x3D;http:&#x2F;&#x2F;localhost:8200-Delastic.apm.service_name&#x3D;spring-demo-apm-Delastic.apm.application_packages&#x3D;com.example.demo-Delastic.apm.environment&#x3D;dev</code></pre><p><strong>$PROJECT_DIR$</strong> 는 인텔리제이에 내장된 프로젝트 경로에 대한 변수이며 JVM 옵션에서도 사용할 수 있습니다. 프로젝트 경로 변수가 아니라 직접 프로젝트 경로를 입력해야하는 경우에는 <a href="https://stackoverflow.com/a/45115316">쌍따옴표를 사용</a>해야만 합니다.</p><p><img data-src="/images/posts/idea-javaagent/01.png"></p><h4 id="실행-구성-저장"><a href="#실행-구성-저장" class="headerlink" title="실행 구성 저장"></a>실행 구성 저장</h4><p>인텔리제이에서는 실행 및 디버그 구성을 파일로도 저장하여 공유할 수 있도록 지원합니다. Run&#x2F;Debug Configurations의 상단 우측을 보면 파일로 저장 옵션이 있으며 이를 체크하는 경우 프로젝트 루트 경로의 .run 폴더에 실행 구성 파일이 생성됩니다. 예제 리포지토리의 <a href="https://github.com/kdevkr/spring-demo-apm/blob/main/.run/SpringDemoApplication%20%5BElastic%20APM%5D.run.xml">SpringDemoApplication [Elastic APM].run.xml</a>와 같이 확인하실 수 있습니다. 주의해야할 사항은 빌트인 경로 변수를 사용하여 프로젝트 경로를 자동으로 지정할 수 있었으나 실행 구성을 다시 확인해보니 프로젝트 경로 변수는 실제 프로젝트 경로로 변경되어있음을 확인할 수 있습니다. 따라서, 누군가에게 실행 구성을 공유해야한다면 프로젝트 경로 변수로 지정된 상태에서 저장하는게 좋을 것 같습니다.</p><p><img data-src="/images/posts/idea-javaagent/02.png"></p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글의 APM 자바 에이전트 적용 예제는 &lt;a href=&quot;https://github.com/kdevkr/spring-demo-apm&quot;&gt;kdevkr&amp;#x2F;spring-demo-apm&lt;/a&gt; 리포지토리를 참고하실 수 있습</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>X-Accel-Buffering</title>
    <link href="https://kdevkr.github.io/x-accel-buffering/"/>
    <id>https://kdevkr.github.io/x-accel-buffering/</id>
    <published>2022-12-25T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.755Z</updated>
    
    <content type="html"><![CDATA[<p>오래전에 개인적으로 <a href="/reverse-proxy-using-nginx/">엔진엑스로 알아보는 리버스 프록시</a>를 학습하면서 이벤트 스트림에 대한 프록시 구성 시 <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering">proxy_buffering</a> 과 같은 버퍼링 옵션을 비활성화 해야한다고 정리하였습니다. HTTP&#x2F;2 연결과 함께 <a href="https://www.baeldung.com/spring-server-sent-events">SSE(Server Sent Event)</a>를 활용하면 굳이 웹소켓 구현을 하지 않아도 서버 측에서 클라이언트로 원하는 데이터를 지속적으로 전달할 수 있습니다. </p><p>하지만, Nginx 측에서는 Nginx 구성에 대한 10가지 실수에서 <a href="https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/#proxy_buffering-off">Mistake 5: The proxy_buffering off Directive</a>으로 버퍼링 옵션에 대한 비활성화에 대해서 이야기합니다. </p><blockquote><p>Buffering can also be enabled or disabled by passing “yes” or “no” in the “X-Accel-Buffering” response header field. This capability can be disabled using the <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_headers">proxy_ignore_headers</a> directive.</p></blockquote><p>위와 같이 엔진엑스 공식 문서 상에는 프록시 버퍼링을 무시할 수 있는 헤더에 대한 설명을 해주고 있으며 회사 내 인프라 엔지니어 분의 의견에 따라서 프록시 구성 시 버퍼링 옵션을 일괄적으로 변경하기보다는 애플리케이션 서버에서 이벤트 스트림에 대한 응답을 수행할 때 <a href="https://serverfault.com/a/801629">X-Accel-Buffering 헤더를 응답</a>하는 것으로 최종 결정했습니다. </p><h4 id="X-Accel-Buffering-헤더-응답하기"><a href="#X-Accel-Buffering-헤더-응답하기" class="headerlink" title="X-Accel-Buffering 헤더 응답하기"></a>X-Accel-Buffering 헤더 응답하기</h4><p>스프링 프레임워크에서는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.html">SseEmitter</a>를 제공하므로 간단하게 SSE 연결을 구현할 수 있으며 이 클래스는 ResponseBodyEmitter를 확장하였기에 extendResponse 함수를 통해 응답하기 전 HTTP 상태코드 또는 응답 헤더를 변경할 수 있게 지원합니다. 따라서, 컨트롤러 핸들러 함수에서 HttpServletResponse를 인자로 받은 후 X-Accel-Buffering 헤더에 대한 값을 no로 설정하면 됩니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SseController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/sse"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM_VALUE</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SseEmitter</span> <span class="token function">sse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-Accel-Buffering"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SseEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img data-src="/images/posts/x-accel-buffering/01.png"></p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오래전에 개인적으로 &lt;a href=&quot;/reverse-proxy-using-nginx/&quot;&gt;엔진엑스로 알아보는 리버스 프록시&lt;/a&gt;를 학습하면서 이벤트 스트림에 대한 프록시 구성 시 &lt;a href=&quot;http://nginx.org/en/docs/htt</summary>
      
    
    
    
    
    <category term="SSE" scheme="https://kdevkr.github.io/tags/SSE/"/>
    
    <category term="X-Accel" scheme="https://kdevkr.github.io/tags/X-Accel/"/>
    
  </entry>
  
  <entry>
    <title>KDB Connection Pool</title>
    <link href="https://kdevkr.github.io/kdb-connection-pool/"/>
    <id>https://kdevkr.github.io/kdb-connection-pool/</id>
    <published>2022-12-09T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>TCP 소켓이 연결된 상태로 남아있는 <a href="https://github.com/kdevkr/mambo-box/blob/main/errors/2022-12-08.md">TCP 커넥션 누수 문제</a>를 경험하고나서 커넥션 풀 기능 구현에 대해서 다시한번 학습해보고 정리하는 글입니다.</p></blockquote><p>아마도 관계형 데이터베이스와 자주 사용되는 일부 데이터베이스들에 대한 커넥션 풀 기능은 직접 구현하지 않아도 되는 경우가 많습니다. 시스템에서 사용중인 시계열 데이터베이스는 <a href="https://github.com/KxSystems/javakdb/blob/master/javakdb/src/main/java/com/kx/c.java">자바 클라이언트 라이브러리</a>를 제공하고 있지만 시계열 데이터베이스가 단일 요청을 순차적으로 처리하는 싱글 스레드 방식임에 따라서 커넥션 풀 기능은 자체적으로 내장하고 있지 않습니다. 커넥션 풀 기능이 반드시 필요한 것은 아니지만 TCP 연결에 대한 부하를 생각한다면 자주 TCP 소켓을 연결하므로 발생할 수 있는 레이턴시를 및 자원 낭비를 무시할 수 없습니다.</p><h4 id="자바-커넥션-풀-라이브러리"><a href="#자바-커넥션-풀-라이브러리" class="headerlink" title="자바 커넥션 풀 라이브러리"></a>자바 커넥션 풀 라이브러리</h4><p>자바 애플리케이션은 대부분 <a href="https://commons.apache.org/proper/commons-pool/">Apache Commons Pool2</a> 라이브러리를 활용해서 커넥션 풀 기능을 구현하는 경우가 많습니다. 대표적으로 레디스 클라이언트로 많이 사용중인 <a href="https://github.com/lettuce-io/lettuce-core/blob/main/src/main/java/io/lettuce/core/support/ConnectionPoolSupport.java">Lettuce의 커넥션 풀 지원</a>을 확인할 수 있으며 <a href="https://commons.apache.org/proper/commons-dbcp/">Apache Commons DBCP2</a>라고 하는 관계형 데이터베이스에 대한 대표적인 커넥션 풀 라이브러리도 Commons Pool로 구현되어있음을 확인할 수 있습니다.</p><blockquote><p>Apache Commons Pool2에서는 <a href="https://commons.apache.org/proper/commons-pool/examples.html">간단한 PooledObjectFactory 예제</a>를 제공하고 있지만 자세한 설명이 없습니다.</p></blockquote><p>커넥션 풀 구현 예제를 검색해보면 생각보다 관련된 글이 없었기에 직접적으로 커넥션 풀 기능을 구현하는 개발자는 많지 않을 것이라 생각됩니다. 커넥션 오브젝트에 대한 라이프 사이클을 관리하는 것은 PooledObjectFactory 인터페이스가 담당하므로 원하는 커넥션 풀 동작을 BasePooledObjectFactory를 상속하여 구현하면 됩니다. 다만, 커네션 풀 구현 시 중요하게 생각해야할 부분은 BasePooledObjectFactory에서 기본적으로 구현해두어서 구현을 강제하지 않는 함수 중 커넥션 풀에서 관리하는 오브젝트가 삭제되는 대상이 되는 경우 호출되는 destoryObject 함수 동작을 생략해버릴 수 있다는 점 입니다.</p><h4 id="CPooledObjectFactory"><a href="#CPooledObjectFactory" class="headerlink" title="CPooledObjectFactory"></a>CPooledObjectFactory</h4><p>커넥션 풀 기능을 처음 구현했을 당시에 고려하지 못한 미흡한 점을 인지하고 KDB 프로세스에 대한 커넥션의 라이프 사이클을 관리하는 CPooledObjectFactory를 다시 작성해보았습니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CPooledObjectFactory</span> <span class="token keyword">extends</span> <span class="token class-name">BasePooledObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CPooledObjectFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> c <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">c</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> <span class="token function">wrap</span><span class="token punctuation">(</span>c c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateObject</span><span class="token punctuation">(</span><span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            c c <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            c<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span>KException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyObject</span><span class="token punctuation">(</span><span class="token class-name">PooledObject</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> p<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>c c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// ignored</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>더 자세하게 PooledObjectFactory 구현에 대해서 고민하고 싶은 분들이라면 아래의 오픈소스들을 참고해보시기 바랍니다.</p><ul><li><a href="https://github.com/lettuce-io/lettuce-core/blob/main/src/main/java/io/lettuce/core/support/ConnectionPoolSupport.java#L201">RedisPooledObjectFactory</a></li><li><a href="https://github.com/apache/commons-dbcp/blob/master/src/main/java/org/apache/commons/dbcp2/PoolableConnectionFactory.java">PoolableConnectionFactory</a></li></ul><h4 id="CObjectPool"><a href="#CObjectPool" class="headerlink" title="CObjectPool"></a>CObjectPool</h4><p>이제는 커넥션 오브젝트를 관리할 방식에 대해서 설정하는 것을 고민해보아야 합니다. Apache Commons Pool에서 커넥션 오브젝트 라이프사이클에 따라 어떻게 관리할지 결정하기 위해서는 GenericObjectPoolConfig를 사용해야 합니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CObjectPoolConfig</span> <span class="token keyword">extends</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token generics"><span class="token punctuation">&lt;</span>c<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxWait</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTimeBetweenEvictionRuns</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTestWhileIdle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setJmxEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>커넥션 풀 라이브러리에서 제공하는 기본값 중에서 JMX 모니터링 기능을 사용하지 않으므로 비활성화 해두었으며 유휴 상태로 관리중인 커넥션에 대해서도 미리 커넥션 상태를 확인할 수 있도록 TestWhileIdle 옵션을 활성화하였습니다. MaxWait의 경우 사용중인 각 커넥션이 최대로 소요할 수 있는 임계치에 따라 3분 까지 기다릴 수 있도록 해두었습니다. </p><blockquote><p>By default, kdb+ is single-threaded, and processes incoming queries sequentially.</p></blockquote><p>커넥션 라이프 사이클에 따라서 커넥션 풀에서 커넥션 오브젝트가 삭제되는 사유에는 대표적으로 두가지가 있는데요. 하나는 유휴 상태에 있는 커넥션이 벨리데이션 쿼리를 수행하는 과정에서 소켓 통신 오류가 발생하거나 너무 오랬동안 커넥션이 사용되지 않아서 버려지고 새로운 커넥션을 만들어서 풀을 유지하는 상황입니다. 위 문구 내용처럼 시계열 데이터베이스는 빠르게 요청을 처리하기 위해서 싱글 스레드 방식을 통해서 단일 요청을 순차적으로 처리하는게 기본적인 기술 관점입니다. 이는 레디스에서 동시성을 구현하기 위해서 채택한 방법이기도 하므로 단순히 싱글 스레드여서 문제가 있다고 바라보면 안됩니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> <span class="token number">0</span> ms <span class="token punctuation">(</span><span class="token number">481900</span> ns<span class="token punctuation">)</span></code></pre><p>시계열 데이터베이스가 아무리 빠르다고 해도 긴 범위의 시계열 데이터를 조회하고 연산을 한다거나 TCP 소켓을 통해 전달해야할 데이터가 상당히 많은 경우라면 싱글 스레드의 단점으로 인하여 선행 요청에 의해 후행 요청이 기다리는 시간으로 인해 병목 현상이 발생할 수 있다는 점을 고려해야합니다. 만약, 그러한 상황이 자주 발생한다면 빠른 성능을 위해 싱글 스레드를 채택한 시계열 데이터베이스를 활용하는 방법이 잘못된 것일 수 있습니다.</p><p>KDB 시계열 데이터베이스와 커넥션 풀 동작에 대해서 확인하고 싶다면 아래의 링크들을 참고하시기 바랍니다.</p><ul><li><a href="https://github.com/kdevkr/kdb">Learning KDB+</a></li><li><a href="https://github.com/kdevkr/spring-demo-kdb">Spring Demo KDB</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;TCP 소켓이 연결된 상태로 남아있는 &lt;a href=&quot;https://github.com/kdevkr/mambo-box/blob/main/errors/2022-12-08.md&quot;&gt;TCP 커넥션 누수 문제&lt;/a&gt;를 경험하고나서 </summary>
      
    
    
    
    
    <category term="TCP" scheme="https://kdevkr.github.io/tags/TCP/"/>
    
    <category term="Connection Pool" scheme="https://kdevkr.github.io/tags/Connection-Pool/"/>
    
  </entry>
  
  <entry>
    <title>레디스 장애 회고</title>
    <link href="https://kdevkr.github.io/redis-memory-usage-issue/"/>
    <id>https://kdevkr.github.io/redis-memory-usage-issue/</id>
    <published>2022-12-07T15:00:00.000Z</published>
    <updated>2023-05-27T06:22:24.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2022년 11월 30일 단 한줄의 코드로 인하여 시스템을 정상적으로 이용할 수 없는 상태로 만들어버리는 심각한 결함을 만들었다. 과연 어떤 문제가 발생했고 그 원인은 무엇이었는지 되돌아보며 여러분에게 공유하고자 한다.</p></blockquote><p>일반적인 웹 서비스처럼 실시간으로 많은 사용자와 그리고 각 사용자에 의해 대량의 트래픽이 발생하는 시스템 환경은 아닙니다만 애플리케이션이 스케일 아웃되어 분산화되는 것을 고려하여 세션 클러스터링을 위하여 스프링 세션과 함께 세션 정보를 레디스라는 인메모리 저장소에 연계하도록 스프링 세션 레디스를 사용하고 있었다. 시스템 환경 규모 상 많은 사용자의 세션 데이터가 저장되는 것은 아니므로 1GB 정도의 메모리 사양을 가지는 작은 단일 인스턴스에 레디스를 설치하여 스탠다드-얼론 모드로써 사용하더라도 큰 문제가 없었다. 세션 저장소로써 레디스를 도입하였으나 실제로 사용자에 의해 발생하는 세션 데이터가 많이 저장되지 않을 것이므로 일부 데이터베이스 조회에 대해서 부하를 줄일 수 있도록 자주 변경될 가능성이 없는 일부 데이터를 조회하는 프로시저 호출에 대해서 스프링 캐시를 적용하였다. 그러나, 세션과 캐시 데이터를 포함하여 생각보다 사용되는 메모리는 미비했었기에 세션이나 캐시에 대해 그다지 고민할 필요성은 없었다고 생각된다.</p><p>그러나, 어느 시점부터 특정 환경에서 레디스가 설치된 서버의 메모리 사용량이 조금씩 오른다는 모니터링 지표를 전달받았으며 모니터링 지표가 전달되는 과정에서 시간이 많이 흘렀기에 긴급하게 레디스가 설치된 서버의 메모리 사용량이 높으며 애플리케이션 서버의 CPU 부하가 높고 시스템을 정상적으로 이용할 수 없는 상태가 되었다고 보고 받게 되었다.</p><h4 id="레디스의-메모리-사용량이-높아진-원인"><a href="#레디스의-메모리-사용량이-높아진-원인" class="headerlink" title="레디스의 메모리 사용량이 높아진 원인"></a>레디스의 메모리 사용량이 높아진 원인</h4><p>처음에는 레디스가 설치된 서버의 메모리 사용량이 높아진다는 이야기만 전달받았기에 (이전에 발생한 이력을 토대로) 보안 및 모니터링 목적으로 각 서버에 설치된 백신 프로그램이나 모니터링 에이전트로 인해 메모리 누수가 발생했을 것이라고 의심했으나 레디스 서버에 접속 후 명령어를 수행하는데 버벅거릴 정도로 서버의 여유 메모리가 남아있지 않은 상태가 되어있었으며 레디스가 실시간으로 사용하는 메모리의 사용량이 서버 메모리를 거의 점유하고 있었음을 확인하였다.</p><h4 id="레디스가-서버-메모리를-거의-사용한-이유"><a href="#레디스가-서버-메모리를-거의-사용한-이유" class="headerlink" title="레디스가 서버 메모리를 거의 사용한 이유"></a>레디스가 서버 메모리를 거의 사용한 이유</h4><p>서버의 메모리 사용량이 엄청나게 높았던 이유는 레디스가 거의 대부분의 메모리를 사용하고 있었기 때문이며 이렇게까지 되어버린 사유에 대해서는 운영적인 측면을 고려하지 않고 인프라 및 서버 환경 구축 시 레디스를 설치하고나서 비밀번호를 제외한 나머지 옵션에 대해서는 기본값으로 구동하였기 때문이다. 사실 상 레디스라는 기술에 대해서 라인이나 카카오와 같은 규모의 조직이 아니라면 기술적인 경험이 부족해서 레디스에서 제공하는 기본값을 사용하는 곳이 많을지도 모르겠다.</p><p>아무튼 레디스를 설치하였을때 기본적으로 제공하는 설정 파일에서 레디스가 사용하는 최대 매모리에 대한 제한은 없도록 되어있으며 경고 문구를 통해 세션이나 캐시를 위해서 레디스를 사용하는 경우 최대 메모리 설정을 하는 것이 좋을 수 있다고 안내하고 있다. 레디스가 서버 메모리를 제한없이 사용하게 되면서 서버 상태가 이상해진 것을 경험하고 나서야 해당 옵션이 적용되어 있지 않음을 확인하였고 이에 대해 긴급 잠정 조치가 필요함을 우선 전달하였다.</p><blockquote><p>최대 메모리 설정은 서버 메모리를 너무 많이 사용하게 되어 가상 메모리까지 스왑하여 사용하지 않도록 하기 위한 예방책일 뿐 근본적인 원인에 대해 검토되지 않았고 해결 방법은 아니다. 우선 레디스 서버의 상태를 안정적으로 유지할 수 있도록 최대 메모리를 설정 및 스냅샷된 파일을 삭제하고 레디스를 재시작하였다.</p></blockquote><h4 id="레디스-스냅샷을-통해-데이터-분석"><a href="#레디스-스냅샷을-통해-데이터-분석" class="headerlink" title="레디스 스냅샷을 통해 데이터 분석"></a>레디스 스냅샷을 통해 데이터 분석</h4><p>레디스의 최대 메모리 설정 조치를 수행하기 전에 레디스에서 기본값에 의해 자체적으로 저장해두었던 스냅샷(dump.rdb) 파일을 백업한 후 로컬 환경에서 도커 컨테이너를 통해 레디스를 스냅샷 기준으로 구동한 후 레디스가 점유하고 있던 메모리가 어떤 데이터로 인한 것인지 검토하였다. 레디스 클라이언트(redis-cli)를 통해 저장된 데이터들의 키를 조회하였으며 운영중인 환경이 아니므로 KEYS 명령어를 수행하여 대략적인 키들을 확인했고 너무 많은 키들로 인하여 제대로 확인을 할 수 없다고 판단되어 <a href="https://docs.spring.io/spring-session/reference/api.html#api-redisindexedsessionrepository-storage">스프링 세션 관련 키</a>와 캐시로 저장하는 키들을 정리하고 스택오버플로우에 공유된 댓글 중 <a href="https://stackoverflow.com/a/18247870">eval 명령어를 활용한 예시</a>를 참고하여 아래와 같이 수행하였다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:*')"</span> <span class="token number">0</span><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:sessions:*')"</span> <span class="token number">0</span><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:sessions:expires*')"</span> <span class="token number">0</span><span class="token builtin class-name">eval</span> <span class="token string">"return #redis.call('keys', 'spring:session:expirations*')"</span> <span class="token number">0</span></code></pre><p>세션 관련 키들은 약 60만 개가 등록되어있었으며 세션 관련 키들을 삭제하니 남아있던 캐시 데이터로 인해 점유중인 메모리의 사용량은 약 200MB가 되었다. 일부 테스트를 위한 사용자의 추가로 인하여 캐시되는 데이터의 양이 조금은 많아졌으나 시스템에 실시간으로 접속하는 사용자에 대한 세션은 많지 않기에 무분별하게 불필요한 세션 키들이 등록되었음을 인지하게 되었다. 단순하게 바라보면 일반적으로 세션의 만료 시간을 짧게 하는데 시스템 요구사항 특성 상 세션 타임아웃이 7일로 지정되어 있었기에 등록된 세션 관련 키들을 오래동안 레디스를 점유하게 되는 상황이 되어버렸다.</p><h4 id="스프링-프레임워크의-구현을-이해하지-못한-이유로-불필요한-세션-정보를-저장"><a href="#스프링-프레임워크의-구현을-이해하지-못한-이유로-불필요한-세션-정보를-저장" class="headerlink" title="스프링 프레임워크의 구현을 이해하지 못한 이유로 불필요한 세션 정보를 저장"></a>스프링 프레임워크의 구현을 이해하지 못한 이유로 불필요한 세션 정보를 저장</h4><p>보안 요구사항에 의해 사용자의 요청이나 내부적인 스케줄 작업에 의해 호출되는 데이터베이스 요청에 대해서 일련의 과정을 감시할 수 있도록 API 요청에 대한 로그나 어떤 프로시저를 호출하는지 로그로써 기록해야했고 이 과정에서 데이터베이스에 대한 요청을 수행하는 세션의 아이디가 저장되어야할 항목에 포함되어있었다. 이 요구사항에 대한 작업은 공통 모듈로써 코드를 작성했는데 데이터베이스를 호출하는 클래스가 공통 모듈에 있었으며 해당 클래스가 스프링 컨테이너를 통해 빈으로 관리되는 것이 아니라 매번 생성되어야하는 구조로 되어있다보니 스프링에서 지원하는 AOP를 통해 데이터베이스 요청에 대해서 가로채어 기록할 수 없었다.</p><p>아무튼 데이터베이스에 대한 프로시저를 호출하는 과정에서 적당한 위치를 고려하여 선정했고 프로시저 명과 여러가지 정보와 함께 세션 아이디를 기록하기 위해서 스프링 프레임워크에서 제공하는 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java">RequestContextHolder</a>를 통해 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/context/request/RequestAttributes.java">RequestAttributes</a>를 가져온 후 세션 아이디를 반환하는 함수를 호출하도록 작성하였다.</p><blockquote><p>이 방식이 어떤 문제가 있는지 바로 알아챈 분들이라면 스프링 프레임워크 구현을 제대로 알거나 많은 경험이 있다고 보여진다. 아마 대부분은 저 함수를 호출하는게 왜 레디스와 연관이 있는지 예상하기 힘들것이다.</p></blockquote><p>사실 단순히 저 함수명을 바라본다면 보안 요구사항에 대한 처리 로직 과정에서 무분별하게 세션 정보가 저장될 수 있는지 검토하는 건 코드 리뷰를 했더라도 어려웠을 것이라는 생각이 든다. 스프링 프레임워크에서 제공하는 인터페이스에 적혀있는 상세한 내용을 확인하면 아래와 같이 NULL 값이 될 수 없는 문자열이 반환되어야한다고 되어있기 때문이다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Return an id for the current underlying session. * @return the session id as String (never &#123;@code null&#125;) */</span><span class="token class-name">String</span> <span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>이에 따라 스프링 프레임워크에서는 <a href="https://github.com/spring-projects/spring-framework/blob/52e967a5256d389f486b0159e05e2656e4411701/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java#L138-L142">ServletRequestAttributes</a> 구현체에서 세션 아이디가 반드시 반환되어야하므로 요청 정보에서 세션을 가져올 때 없으면 생성되도록 인자가 반드시 true인 상태로 동작하게 구현해두었다. 일반적으로 세션 방식과 토큰 기반의 인증이나 API 요청으로 구분되는데 스프링 웹 MVC 에서는 두개 모두 서블릿 요청일 뿐이므로 스레드 로컬에 요청 스레드가 저장되어 언제든 가져올 수 있는 상태가 된다.</p><p>그런데, 세션 아이디라 함은 세션 방식의 요청에 대해서만 의미가 있으므로 세션이 활용되지 않는 토큰 기반 요청에 대해서는 내부적으로 세션을 저장하는 코드가 호출되지 않는다. 따라서, 토큰 기반 요청 시 세션이 생성되지 않아야 함에 불구하고 세션 아이디를 가져올 수 있는 위 함수를 호출하게 되면 새로운 세션이 생성되고 스프링 세션에 대한 필터가 가장 먼저 처리되므로 요청을 처리하고 응답하는 과정에서 생성된 세션이나 변경된 세션 정보를 갱신하기 위해 스프링 세션 레디스 구현 동작이 호출되어 레디스에 불필요한 세션 키들을 생성하게 된 것이다.</p><h4 id="세션-아이디를-조회하는-코드-로직의-변경"><a href="#세션-아이디를-조회하는-코드-로직의-변경" class="headerlink" title="세션 아이디를 조회하는 코드 로직의 변경"></a>세션 아이디를 조회하는 코드 로직의 변경</h4><p>스프링 프레임워크에서 제공하는 함수의 구현을 제대로 확인하지 못한 상태에서 요구사항을 처리한 나의 실수 인 것은 명확하다. ServletRequestAttributes를 통해 세션 아이디를 쉽게 가져올 수 있었으나 상황에 따라 예상하지 못했던 결과를 가져오게 되었으므로 세션 아이디를 조회하는 코드를 HttpServletRequest로부터 현재 스레드 로컬 내에 세션이 있다면 가져오도록 변경했다. 이제는 새로운 세션을 만드는 과정이 없으므로 토큰 기반 API가 요청될 때 레디스에 무수히 많은 세션 키가 등록되지 않는다.</p><h4 id="운영적인-측면의-레디스-옵션-권고"><a href="#운영적인-측면의-레디스-옵션-권고" class="headerlink" title="운영적인 측면의 레디스 옵션 권고"></a>운영적인 측면의 레디스 옵션 권고</h4><pre class="language-conf" data-language="conf"><code class="language-conf">tcp-backlog 1024maxmemory 400mbmaxmemory-policy allkeys-lfu</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span> <span class="token number">65535</span><span class="token builtin class-name">echo</span> <span class="token string">'net.ipv4.tcp_max_syn_backlog=1024'</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> <span class="token string">'net.core.somaxconn = 65535'</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> <span class="token string">'vm.overcommit_memory = 1'</span> <span class="token operator">>></span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> never <span class="token operator">></span> /sys/kernel/mm/transparent_hugepage/enabled</code></pre><p>레디스 결함으로 인해 확인된 레디스 옵션에 대한 문제도 검토하여 위와 같이 운영적인 측면에서의 옵션을 정리한 후 레디스 서버 환경에 적용할 준비를 하고 있다. 한가지 명확하지 않은 부분은 최대 메모리 옵션에 적용되어야할 적당한 수치가 무엇이냐인데 BGSAVE를 통해 RDB 스냅샷을 수행하는 경우 Fork 방식으로 프로세스를 복제하여 덤프 파일을 생성하기 때문에 실제로 메모리 사용량이 두배 이상이 될 수 있다는 점을 감안한다면 절반 이하의 메모리를 사용할 수 있도록 해야할 것 같다. 더구나 레디스 뿐만 아니라 CPU나 메모리를 사용할 수 있는 백신 프로그램이 구동중이므로 인터넷에 정리된 60% 정도의 메모리 설정은 적합하지 않다고 생각된다.</p><h4 id="트러블슈팅-회고"><a href="#트러블슈팅-회고" class="headerlink" title="트러블슈팅 회고"></a>트러블슈팅 회고</h4><p>개발자로써는 생각지도 못하게 단 한줄의 코드로 인하여 시스템을 마비시키는 경험을 한 큰 이슈였으며 고객의 입장에서는 사용중인 시스템에 대한 안정성과 신뢰성을 문제삼을 수 있는 건이었다. 아무튼 조직에서는 이에 대한 장애 보고를 고객 측에게 전달하기 위하여 관련 정보를 정리하고 있으며 관련 이슈가 발생하지 않도록 어떤 조치를 할 것인지를 고민하고 있다. 이 문제에 대해서 돌아보면서 확인하게 된 아래의 글들을 공유하며 마치고자 한다.</p><ul><li><a href="https://perfectacle.github.io/2019/05/29/redis-monitoring/">(Troubleshooting) 레디스 사망일기</a></li><li><a href="https://www.youtube.com/watch?v=92NizoBL4uA">Redis 야무지게 사용하기</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2022년 11월 30일 단 한줄의 코드로 인하여 시스템을 정상적으로 이용할 수 없는 상태로 만들어버리는 심각한 결함을 만들었다. 과연 어떤 문제가 발생했고 그 원인은 무엇이었는지 되돌아보며 여러분에게 공유하고자 한다.&lt;/</summary>
      
    
    
    
    
    <category term="레디스" scheme="https://kdevkr.github.io/tags/%EB%A0%88%EB%94%94%EC%8A%A4/"/>
    
    <category term="스프링 세션 레디스" scheme="https://kdevkr.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%84%B8%EC%85%98-%EB%A0%88%EB%94%94%EC%8A%A4/"/>
    
  </entry>
  
</feed>
