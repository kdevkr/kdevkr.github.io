<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2024-03-14T22:06:19.443Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>레디스 웹소켓 알람 동기화</title>
    <link href="https://kdevkr.github.io/spring-boot-redis-websocket-sync/"/>
    <id>https://kdevkr.github.io/spring-boot-redis-websocket-sync/</id>
    <published>2024-03-14T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<h4 id="웹소켓-알람-갱신-동기화"><a href="#웹소켓-알람-갱신-동기화" class="headerlink" title="웹소켓 알람 갱신 동기화"></a>웹소켓 알람 갱신 동기화</h4><p>대부분의 예제는 채팅으로 공유되고 있지만 일반적인 웹 애플리케이션에서의 웹소켓 기능은 서버에서 클라이언트로의 알람과 이벤트를 즉시 전달하기 위해서 사용하고 있을 것이다. 단일 애플리케이션에서는 고려하지 않아도 될 부분이지만 스케일 아웃되어 분산 처리되는 애플리케이션에 각각 연결된 웹소켓으로 특정 서버에서 발생하여 만들어지는 알람 정보를 즉시 전달하기 위해서는 전파하고 동기화하는 방안이 필요하다. <a href="https://pompitzz.github.io/blog/Redis/LocalCacheSyncWithRedisPubSub.html">Redis(Pub&#x2F;Sub)로 로컬 캐시 동기화하기</a>와 비슷하다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ChannelTopic</span> topic <span class="token operator">=</span> <span class="token class-name">ChannelTopic</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"NOTIFICATIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">commandLineRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> args <span class="token operator">-></span> redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"REQUIRE.SYNC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisMessageListenerContainer</span> <span class="token function">redisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MessageListenerAdapter</span> <span class="token function">listenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MessageListenerAdapter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"receive: &#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="활용-클래스-목록"><a href="#활용-클래스-목록" class="headerlink" title="활용 클래스 목록"></a>활용 클래스 목록</h4><p>레디스에 의한 Pub&#x2F;Sub을 구현하기 위해서 사용되는 스프링 프레임워크 클래스들은 아래와 같다.</p><ul><li>RedisMessageListenerContainer</li><li>RedisConnectionFactory</li><li>MessageListenerAdapter</li><li>MessageListener</li><li>StringRedisTemplate</li><li>ChannelTopic</li></ul><h4 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h4><ul><li><a href="https://redis.io/docs/interact/pubsub/">How to use pub&#x2F;sub channels in Redis</a></li><li><a href="https://docs.spring.io/spring-data/redis/reference/redis/pubsub.html">Pub&#x2F;Sub Messaging</a></li><li><a href="https://www.baeldung.com/spring-data-redis-pub-sub">PubSub Messaging with Spring Data Redis</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;웹소켓-알람-갱신-동기화&quot;&gt;&lt;a href=&quot;#웹소켓-알람-갱신-동기화&quot; class=&quot;headerlink&quot; title=&quot;웹소켓 알람 갱신 동기화&quot;&gt;&lt;/a&gt;웹소켓 알람 갱신 동기화&lt;/h4&gt;&lt;p&gt;대부분의 예제는 채팅으로 공유되고 있지만 일반적</summary>
      
    
    
    
    
    <category term="Redis" scheme="https://kdevkr.github.io/tags/Redis/"/>
    
    <category term="Websocket" scheme="https://kdevkr.github.io/tags/Websocket/"/>
    
  </entry>
  
  <entry>
    <title>구글 주소 검색으로 위 경도 조회</title>
    <link href="https://kdevkr.github.io/google-address-search/"/>
    <id>https://kdevkr.github.io/google-address-search/</id>
    <published>2024-03-10T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mapsplatform.google.com/">Google Maps Platform</a>을 통해 주소 또는 위 • 경도 정보를 조회할 수 있다. Places 또는 Geocoding API 모두에서 한국어를 포함한 다양한 언어에 대해 검색을 지원한다. 비록 국내 대상으로 사용할 수 있는 <a href="https://postcode.map.daum.net/guide">우편번호 서비스</a>를 사용하는 것보다 자세한 정보를 가져오기는 힘들지만 국내 주소 뿐만 아니라 해외 주소나 위치에 대한 검색을 커버하기 위해서는 거의 대안이 없다고 생각된다. 또한, HTTP 요청을 직접 사용해서 구현하지 않아도 쉽게 적용할 수 있는 라이브러리가 있다.</p><ul><li><a href="https://github.com/googlemaps/react-wrapper">Google Maps JavaScript API React Wrapper</a></li><li><a href="https://vue-map.netlify.app/">Vue 3 Google maps</a></li><li><a href="https://github.com/googlemaps/google-maps-services-java">Java Client for Google Maps Services</a></li></ul><h4 id="FE-Vue-3-Google-maps"><a href="#FE-Vue-3-Google-maps" class="headerlink" title="[FE] Vue 3 Google maps"></a>[FE] Vue 3 Google maps</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> VueGoogleMaps <span class="token keyword">from</span> <span class="token string">'@fawmi/vue-google-maps'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueGoogleMaps<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">load</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_GOOGLE_MAP_API_KEY</span><span class="token punctuation">,</span>        <span class="token literal-property property">libraries</span><span class="token operator">:</span> <span class="token string">"places"</span><span class="token punctuation">,</span>        <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">'ja'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GMapAutocomplete</span>    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please input address<span class="token punctuation">"</span></span>    <span class="token attr-name">@place_changed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(result) => console.log(result)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GMapAutocomplete</span><span class="token punctuation">></span></span></code></pre><h4 id="BE-Java-Client-for-Google-Maps-Services"><a href="#BE-Java-Client-for-Google-Maps-Services" class="headerlink" title="[BE] Java Client for Google Maps Services"></a>[BE] Java Client for Google Maps Services</h4><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'com.google.maps:google-maps-services:2.2.0'</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">GoogleMapTests</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> apiKey <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token class-name">Test_Places</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GeoApiContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeoApiContext<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">apiKey</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">queryRateLimit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">PlaceAutocompleteRequest<span class="token punctuation">.</span>SessionToken</span> session <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlaceAutocompleteRequest<span class="token punctuation">.</span>SessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"강남역"</span><span class="token punctuation">;</span>            <span class="token class-name">AutocompletePrediction</span><span class="token punctuation">[</span><span class="token punctuation">]</span> predictions <span class="token operator">=</span> <span class="token class-name">PlacesApi</span><span class="token punctuation">.</span><span class="token function">placeAutocomplete</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> input<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>predictions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Place-Autocomplete-최적화"><a href="#Place-Autocomplete-최적화" class="headerlink" title="Place Autocomplete 최적화"></a>Place Autocomplete 최적화</h4><p>Places API 와 Geocoding API 모두 <a href="https://developers.google.com/maps/documentation/geocoding/usage-and-billing">사용한 만큼 지불하는 가격 모델</a>을 가지므로 <a href="https://developers.google.com/maps/documentation/places/web-service/autocomplete">Place Autocomplete 최적화</a> 와 <a href="https://developers.google.com/maps/documentation/geocoding/best-practices">주소 지오코딩 권장사항</a> 같은 정보가 도움이 될 수 있다. 주소에 대한 자세한 정보가 필요한 것이 아닌 주소 및 위치 정보만 필요로 하는 경우에는 아래의 항목을 체크해보도록 하자.</p><ul><li>주소와 위치 정보만을 필요로 한다면 Place Autocomplete 보다는 Geocoding API가 효율적이다.</li><li>사용자가 원하는 주소를 명확하게 알고 있다면 Geocoding API를 사용하는게 좋다.</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">GoogleMapTests</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> apiKey <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">GeoApiContext</span> context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeforeAll</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeoApiContext<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiKey</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">queryRateLimit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token class-name">Test_Geocoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">"강남역"</span><span class="token punctuation">;</span>            <span class="token class-name">GeocodingResult</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span>  <span class="token class-name">GeocodingApi</span><span class="token punctuation">.</span><span class="token function">geocode</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> address<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">language</span><span class="token punctuation">(</span><span class="token string">"ko"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">locationType</span><span class="token punctuation">(</span><span class="token class-name">LocationType</span><span class="token punctuation">.</span><span class="token constant">ROOFTOP</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resultType</span><span class="token punctuation">(</span><span class="token class-name">AddressType</span><span class="token punctuation">.</span><span class="token constant">STREET_ADDRESS</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h4><ul><li><a href="https://developers.google.com/maps/documentation/javascript/examples/geocoding-simple">Geocoding Service</a></li><li><a href="https://developers.google.com/maps/documentation/javascript/examples/geocoding-reverse">Reverse Geocoding</a></li><li><a href="https://developers.google.com/maps/documentation/javascript/examples/geocoding-place-id">Get the Address for a Place ID</a></li><li><a href="https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete">Place Autocomplete</a></li><li><a href="https://developers.google.com/maps/documentation/javascript/examples/place-details">Place Details</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mapsplatform.google.com/&quot;&gt;Google Maps Platform&lt;/a&gt;을 통해 주소 또는 위 • 경도 정보를 조회할 수 있다. Places 또는 Geocoding API 모두에서 한국어를 포함한 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>엔진엑스 트래픽 미러링</title>
    <link href="https://kdevkr.github.io/nginx-mirror/"/>
    <id>https://kdevkr.github.io/nginx-mirror/</id>
    <published>2024-03-02T03:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>엔진엑스(Nginx)의 <code>ngx_http_mirror_module</code> 모듈을 사용하면 리버스 프록시로 애플리케이션에 전달하는 <a href="https://medium.com/gaurav-shukla/testing-your-code-against-production-using-nginx-mirroring-567b3c2f4921">일부 트래픽을 복제하여 다른 애플리케이션으로 전달</a>할 수 있다. 우리는 이것을 활용해서 애플리케이션에 전달하는 트래픽을 알 수 없는 상황이지만 어떠한 문제가 발생하고 있을때 테스트를 위한 애플리케이션을 만들어서 구동하고 디버그할 수 있는 환경을 만들 수 있다.</p><h4 id="트래픽-미러링-설정"><a href="#트래픽-미러링-설정" class="headerlink" title="트래픽 미러링 설정"></a>트래픽 미러링 설정</h4><pre class="language-conf" data-language="conf"><div class="caption"><span>nginx.conf</span></div><code class="language-conf">http &#123;    upstream backend_for_test &#123;        server app:8081;        keepalive 128;    &#125;    server &#123;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        # hop-by-hop        proxy_http_version 1.1;        location &#x2F;mtls&#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;backend;            mirror &#x2F;mirror;            mirror_request_body on;        &#125;        location &#x2F;mtls_mirror &#123;            internal;            proxy_pass http:&#x2F;&#x2F;backend_for_test$request_uri;        &#125;    &#125;&#125;</code></pre><blockquote><p>문제에 대한 원인을 파악하기 위한 요청에 바디 정보가 필요하지 않은 경우 mirror_request_body 옵션을 비활성화(off) 하세요.</p></blockquote><h4 id="트래픽-미러링-출력"><a href="#트래픽-미러링-출력" class="headerlink" title="트래픽 미러링 출력"></a>트래픽 미러링 출력</h4><p>일반적으로 서버 포트 오픈을 확인하는데 사용하는 Netcat 명령어를 통해 간단한 서버를 실행하고 복제된 트래픽에 대한 정보를 출력해볼 수 있다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lp</span> localhost <span class="token number">8081</span></code></pre><blockquote><p>AWS 환경에서 운영하는 애플리케이션에 대한 트래픽 미러링은 <a href="https://aws.amazon.com/ko/blogs/tech/mirror-production-traffic-to-test-environment-with-vpc-traffic-mirroring/">VPC 트래픽 미러링</a>을 구성하는 것이 적합합니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;엔진엑스(Nginx)의 &lt;code&gt;ngx_http_mirror_module&lt;/code&gt; 모듈을 사용하면 리버스 프록시로 애플리케이션에 전달하는 &lt;a href=&quot;https://medium.com/gaurav-shukla/testing-your-co</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://kdevkr.github.io/tags/nginx/"/>
    
    <category term="mirror" scheme="https://kdevkr.github.io/tags/mirror/"/>
    
  </entry>
  
  <entry>
    <title>AWS Elastic Beanstalk 로그 알아보기</title>
    <link href="https://kdevkr.github.io/beanstalk-logs/"/>
    <id>https://kdevkr.github.io/beanstalk-logs/</id>
    <published>2024-03-01T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/beanstalk-logs/01.png"></p><p>AWS Elastic Beanstalk 환경 콘솔의 로그 메뉴에서 로그 요청을 통해 전체(번들) 또는 마지막 100줄(테일) 로그를 조회할 수 있다. 이러한 요청에 대한 로그는 아래의 파일들을 사용하여 가져오며 사용자 권한을 통해 S3 버킷에 저장한 후 다운로드할 수 있게 제공한다. 따라서, 인스턴스 프로파일에 S3에 대한 권한 정책이 포함되어있어야 한다.</p><ul><li>테일 로그 - &#x2F;opt&#x2F;elasticbeanstalk&#x2F;tasks&#x2F;taillogs.d&#x2F;</li><li>번들 로그 - &#x2F;opt&#x2F;elasticbeanstalk&#x2F;tasks&#x2F;bundlelogs.d&#x2F;</li><li>회전된 로그 - &#x2F;opt&#x2F;elasticbeanstalk&#x2F;tasks&#x2F;publishlogs.d&#x2F;</li></ul><blockquote><p>S3에 저장되는 로그 위치는 elasticbeanstalk-{region}-{account-id}&#x2F;resources&#x2F;environments&#x2F;logs 입니다.<br>Elastic Beanstalk는 요청한 번들 또는 테일 로그에 대해서 15분이 경과된 이후에 파일을 S3에서 삭제합니다.</p></blockquote><h4 id="테일-로그"><a href="#테일-로그" class="headerlink" title="테일 로그"></a>테일 로그</h4><p>테일(마지막 100줄) 로그는 EB 엔진 및 Nginx 그리고 애플리케이션 서버 로그의 마지막 100줄을 모아 단일 텍스트 파일을 생성하고 S3에 업로드한다. Amazon Linux 2 리눅스 플랫폼에서 포함되는 로그 항목은 아래와 같다.</p><ul><li>&#x2F;var&#x2F;log&#x2F;web.stdout.log</li><li>&#x2F;var&#x2F;log&#x2F;eb-engine.log</li><li>&#x2F;var&#x2F;log&#x2F;eb-hooks.log</li><li>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</li><li>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</li></ul><h4 id="번들-로그"><a href="#번들-로그" class="headerlink" title="번들 로그"></a>번들 로그</h4><p>번들(전체) 로그는 시스템 전체 메시지 뿐만 아니라 yum 및 cron 로그와 같은 다양한 로그를 포함하여 Zip 파일로 압축한 후 S3에 업로드한다. 다운로드한 번들 로그에는 아래와 같은 로그 항목이 포함되어있다.</p><ul><li>&#x2F;var&#x2F;log&#x2F;healthd&#x2F;</li><li>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;</li><li>&#x2F;var&#x2F;log&#x2F;rotate&#x2F;</li><li>&#x2F;var&#x2F;log&#x2F;cfn-hup.log</li><li>&#x2F;var&#x2F;log&#x2F;cfn-init.log</li><li>&#x2F;var&#x2F;log&#x2F;cfn-init-cmd.log</li><li>&#x2F;var&#x2F;log&#x2F;cfn-wire.log</li><li>&#x2F;var&#x2F;log&#x2F;cloud-init.log</li><li>&#x2F;var&#x2F;log&#x2F;cloud-init-output.log</li><li>&#x2F;var&#x2F;log&#x2F;cron</li><li>&#x2F;var&#x2F;log&#x2F;eb-cfn-init.log</li><li>&#x2F;var&#x2F;log&#x2F;eb-cfn-init-call.log</li><li>&#x2F;var&#x2F;log&#x2F;eb-engine.log</li><li>&#x2F;var&#x2F;log&#x2F;eb-publish.log</li><li>&#x2F;var&#x2F;log&#x2F;eb-tools.log</li><li>&#x2F;var&#x2F;log&#x2F;messages</li><li>&#x2F;var&#x2F;log&#x2F;web.stdout.log</li><li>&#x2F;var&#x2F;log&#x2F;yum.log</li></ul><blockquote><p>번들 로그에는 시스템 전반적인 메시지를 포함하는 &#x2F;var&#x2F;log&#x2F;messages 가 포함되어있어 더 자세하게 원인을 분석할 수 있습니다.</p></blockquote><h4 id="로그-로테이션"><a href="#로그-로테이션" class="headerlink" title="로그 로테이션"></a>로그 로테이션</h4><p>AWS Elastic Beanstalk 의 리눅스 플랫폼에서는 logrotate 를 사용해서 로그를 주기적으로 회전하고 Amazon S3에 업로드한다. 환경 콘솔에서 요청하는 번들 또는 마지막 100줄 로그 요청에는 회전되는 로그는 포함되지 않는다. 로그 회전에 대한 구성 파일은 &#x2F;etc&#x2F;logrotate.elasticbeanstalk.hourly&#x2F; 에서 찾을 수 있으며 &#x2F;etc&#x2F;cron.hourly&#x2F; 에서 크론 작업으로 호출된다.</p><hr><p>서버 엔지니어 또는 데브옵스 엔지니어에게 전달받은 로그들이 어떠한 정보를 포함하고 있는지를 알고 빠르고 자세하게 문제에 대한 원인을 분석하는데에 사용하는 것에 대한 역량은 백엔드 엔지니어에게 필요한 부분이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/beanstalk-logs/01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS Elastic Beanstalk 환경 콘솔의 로그 메뉴에서 로그 요청을 통해 전체(번들) 또는 마지막 100줄(테일) 로그를 조회할</summary>
      
    
    
    
    
    <category term="Beanstalk" scheme="https://kdevkr.github.io/tags/Beanstalk/"/>
    
    <category term="TailLogs" scheme="https://kdevkr.github.io/tags/TailLogs/"/>
    
    <category term="Bundlelogs" scheme="https://kdevkr.github.io/tags/Bundlelogs/"/>
    
  </entry>
  
  <entry>
    <title>문자열에서 로케일로 변환하는 방법</title>
    <link href="https://kdevkr.github.io/java-locale-from-language/"/>
    <id>https://kdevkr.github.io/java-locale-from-language/</id>
    <published>2024-02-21T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Locale-forLanguageTag"><a href="#Locale-forLanguageTag" class="headerlink" title="Locale.forLanguageTag"></a>Locale.forLanguageTag</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">forLanguageTag</span><span class="token punctuation">(</span><span class="token string">"ko_KR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → ""</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">forLanguageTag</span><span class="token punctuation">(</span><span class="token string">"ko_KR"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// → ko_KR</span></code></pre><p>Locale.forLanguageTag 함수에서 <code>ko-KR</code> 이 아닌 <code>ko_KR</code> 과 같이 언어(Langauge)와 국가(Country)에 대한 정보를 언더스코어 형태의 문자열을 파라미터에 넣는 경우 오류가 발생하지 않고 <strong>비어있는 Locale</strong>이 만들어진다. 따라서, <code>Locale.forLanguageTag</code> 함수를 이용해서 로케일로 변환하려는 경우에는 <strong>언더스코어(_)를 하이픈(-)으로 변환</strong>해야한다.</p><h4 id="LocaleUtils-와-StringUtils"><a href="#LocaleUtils-와-StringUtils" class="headerlink" title="LocaleUtils 와 StringUtils"></a>LocaleUtils 와 StringUtils</h4><p>String 클래스에 포함되어있는 replace 함수를 이용해서 <code>IETF BCP 47 언어 태그</code> 형식으로 변경해도 되지만 스프링 프레임워크 또는 프로젝트에서 많이 사용되는 라이브러리에 포함되어있는 아래와 같은 유틸 함수들을 이용해도 문자열을 Locale로 올바르게 변환할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span>LocaleUtils</span><span class="token punctuation">.</span><span class="token function">toLocale</span><span class="token punctuation">(</span><span class="token string">"ko_KR"</span><span class="token punctuation">)</span>l<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>StringUtils</span><span class="token punctuation">.</span><span class="token function">parseLocale</span><span class="token punctuation">(</span><span class="token string">"ko_KR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Locale-forLanguageTag&quot;&gt;&lt;a href=&quot;#Locale-forLanguageTag&quot; class=&quot;headerlink&quot; title=&quot;Locale.forLanguageTag&quot;&gt;&lt;/a&gt;Locale.forLanguageTag&lt;/</summary>
      
    
    
    
    
    <category term="Locale" scheme="https://kdevkr.github.io/tags/Locale/"/>
    
    <category term="LocaleUtils" scheme="https://kdevkr.github.io/tags/LocaleUtils/"/>
    
    <category term="StringUtils" scheme="https://kdevkr.github.io/tags/StringUtils/"/>
    
  </entry>
  
  <entry>
    <title>라인 로그인 연동</title>
    <link href="https://kdevkr.github.io/line-login/"/>
    <id>https://kdevkr.github.io/line-login/</id>
    <published>2024-02-18T13:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글에 대한 코드는 <a href="https://github.com/kdevkr/spring-boot-line-login">kdevkr&#x2F;spring-boot-line-login</a> 에서 확인할 수 있습니다.</p></blockquote><p>우리가 이용하는 수 많은 웹 서비스에서는 회원가입 한 계정 혹은 이메일로 로그인하기 뿐만 아니라 카카오, 네이버, 구글, 메타, 애플, 깃허브와 같은 소셜 프로바이더의 계정으로 인증하여 쉽게 로그인할 수 있는 연동 기능을 제공한다. 국내의 경우 대부분 카카오 로그인이나 네이버 로그인을 사용하는 편인데 라인 플러스에서 제공하는 라인 메신저는 국내 보다는 일본이나 태국과 같은 해외 국가에서 많이 사용되는 편이다. <a href="https://linepluscorp.com/">라인 플러스</a>가 있지만 라인 개발자 사이트 및 개발 문서의 경우 영어와 일본어만 지원하고 있다. 만약, 회사에서 만드는 서비스가 일본이나 태국 그리고 말레시이아 국가의 고객들을 대상으로 한다면 라인 메신저를 통한 연동 기능 지원은 거의 필수적으로 도입될 가능성이 있다.</p><p><img data-src="https://lineapiusecase.com/img/LINE_login_en.webp" alt="LINE Login Diagram"></p><h4 id="LINE-Developers-Console"><a href="#LINE-Developers-Console" class="headerlink" title="LINE Developers Console"></a>LINE Developers Console</h4><p><a href="https://manager.line.biz/">라인 비즈니스 콘솔</a>을 통해 비즈니스 계정을 생성할 수 있으며 라인 비즈니스 계정을 만든 후에 <a href="https://developers.line.biz/">개발자 콘솔</a>에 별도로 접속하여 라인 로그인 이나 메시지 채널을 등록하고 설정할 수 있다. 라인 플랫폼에 연동할 서비스 프로바이더를 생성해야하며 라인 로그인과 메시징 API 채널은 별도로 구분되어 만들어진다. 각 채널은 별도로 운영될 수 있지만 라인 로그인 채널에 친구 옵션으로 메시지 채널 계정을 연결할 수 있게 지원한다.</p><blockquote><p>라인 사용자가 로그인 채널에 연동하더라도 서비스 앱에서 사용자에게 메시지를 보내기 위해서는 사용자가 메시지 채널에 친구로 등록되어있어야만 합니다.</p></blockquote><h4 id="라인-로그인-채널-추가하기"><a href="#라인-로그인-채널-추가하기" class="headerlink" title="라인 로그인 채널 추가하기"></a>라인 로그인 채널 추가하기</h4><p>사용자가 라인 플랫폼을 통해 서비스에 연동할 수 있도록 웹 애플리케이션 방식의 라인 로그인 채널을 추가해야한다. 서비스 지역 옵션의 경우 일본 • 태국 • 대만 • 인도네이사 뿐이며 한국을 선택할 수 없는게 의아하긴 하지만 국내의 경우 가장 가까운 일본을 선택하면 될 것 같다.</p><p><img data-src="/images/posts/line-login/01.png"></p><h4 id="라인-로그인-콜백-주소-설정"><a href="#라인-로그인-콜백-주소-설정" class="headerlink" title="라인 로그인 콜백 주소 설정"></a>라인 로그인 콜백 주소 설정</h4><p>라인 로그인 채널을 추가했다면 LINE Login 설정 페이지로 이동하여 라인 로그인 과정에서 라인 플랫폼이 인증된 코드를 전달해줄 서비스 콜백 주소를 등록해두어야 한다. 반드시 백엔드 서버 주소가 콜백 주소일 필요는 없으며 프론트엔드에서 콜백을 받은 후 코드값을 백엔드에 REST API로 전달해도 무방하다. 콜백 주소는 개행으로 여러개를 등록하여 사용할 수 있도록 지원한다.</p><p><img data-src="/images/posts/line-login/02.png"></p><pre class="language-bash" data-language="bash"><div class="caption"><span>Callback URL</span></div><code class="language-bash">https://access.line.me/oauth2/v2.1/authorize?response_type<span class="token operator">=</span>code<span class="token operator">&amp;</span><span class="token assign-left variable">client_id</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>LOGIN_CHANNEL_ID<span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token assign-left variable">redirect_uri</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>CALLBACK_URL<span class="token punctuation">&#125;</span></code></pre><blockquote><p>콜백 주소는 서비스에서 인증 코드로 액세스 토큰을 발급하는 경우에도 사용자 로그인 시 사용된 동일한 콜백 주소를 요구하므로 백엔드 서버에서도 채널 아이디와 채널 시크릿 뿐만 아니라 별도로 콜백 주소를 관리해야합니다.</p></blockquote><h4 id="OIDC-이메일-권한-요청"><a href="#OIDC-이메일-권한-요청" class="headerlink" title="OIDC 이메일 권한 요청"></a>OIDC 이메일 권한 요청</h4><p>서비스 연동시 사용자가 사용하는 이메일 주소가 반드시 필요하다면 이메일 획득 권한을 위해서 로그인 채널 옵션의 OpenID Connect에 대한 이메일 주소 권한을 별도로 활성화 해야한다. 실제로는 이메일을 어떻게 사용하는지에 대한 스크린샷을 업로드 해야하겠지만 개발 단계에서는 임의의 이미지를 등록해도 허용된다. 사용자 로그인 시 전달하는 URL 파라미터 중 스코프에 아래와 같이 email을 추가하면 이메일에 대한 권한 옵션이 UI에 노출될 것이다.</p><p><img data-src="/images/posts/line-login/03.png"><br><img data-src="/images/posts/line-login/04.png"><br><img data-src="/images/posts/line-login/05.png"></p><pre class="language-bash" data-language="bash"><div class="caption"><span>profile+openid+email</span></div><code class="language-bash">https://access.line.me/oauth2/v2.1/authorize?response_type<span class="token operator">=</span>code<span class="token operator">&amp;</span><span class="token assign-left variable">client_id</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>LOGIN_CHANNEL_ID<span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token assign-left variable">scope</span><span class="token operator">=</span>profile%20openid%20email</code></pre><blockquote><p>사용자 인증 화면에서 이메일 주소 권한을 필수로 요구하는 옵션은 지원하지 않습니다.</p></blockquote><h4 id="OAuth-v2-1-액세스-토큰-발급"><a href="#OAuth-v2-1-액세스-토큰-발급" class="headerlink" title="OAuth v2.1 액세스 토큰 발급"></a>OAuth v2.1 액세스 토큰 발급</h4><p>사용자 로그인 후 콜백되어 전달되는 URL에 포함된 code 파라미터를 사용하여 서버에서는 <a href="https://developers.line.biz/en/reference/line-login/#issue-access-token">액세스 토큰</a>을 발급할 수 있다. OpenID Connect 에 따라 액세스 토큰과 함께 ID Token이 제공되는데 JWT 형식으로 구성된 문자열이므로 페이로드를 확인하거나 <a href="https://developers.line.biz/en/reference/line-login/#verify-id-token">Verify ID token</a>을 통해 토큰 검증과 함께 분석된 결과를 응답으로 받아볼 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> idToken <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getIdToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> payload <span class="token operator">=</span> idToken<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"https://access.line.me"</span><span class="token punctuation">,</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"U1234567890abcdef1234567890abcdef"</span><span class="token punctuation">,</span>  <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1504169092</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1504263657</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"0987654asdf"</span><span class="token punctuation">,</span>  <span class="token property">"amr"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Taro Line"</span><span class="token punctuation">,</span>  <span class="token property">"picture"</span><span class="token operator">:</span> <span class="token string">"https://sample_line.me/aBcdefg123456"</span><span class="token punctuation">,</span>  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"taro.line@example.com"</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>JWT 페이로드에 포함되는 항목 중 <code>sub</code> 는 라인 사용자에 대한 User ID를 의미합니다.</p></blockquote><hr><h4 id="메시지-채널과-연동하기-친구-추가-옵션"><a href="#메시지-채널과-연동하기-친구-추가-옵션" class="headerlink" title="메시지 채널과 연동하기 (친구 추가 옵션)"></a>메시지 채널과 연동하기 (친구 추가 옵션)</h4><p>라인 로그인 기능을 도입하더라도 로그인 채널과 메시지 채널은 별도로 분리되어있어 메시지 채널을 별도로 생성한 후 로그인 채널에서 메시지 채널에 등록할 수 있는 기능을 활성화하고 <a href="https://developers.line.biz/en/docs/line-login/link-a-bot/">사용자에게 친구 추가를 요구</a>해야한다. 친구 추가 옵션(Add friend option)에 메시지 채널을 선택한다면 로그인 연동 시 사용할 수 있는 bot_prompt 파라미터에 값에 따라 친구 추가 옵션 노출 방식을 제공할 수 있다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">https://client.example.org/cb?code<span class="token operator">=</span><span class="token punctuation">&#123;</span>CODE<span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token assign-left variable">state</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>STATE<span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token assign-left variable">friendship_status_changed</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>FRIENDSHIP_STATUS_CHANGED<span class="token punctuation">&#125;</span></code></pre><p>친구 추가 옵션을 사용하는 경우에 사용자 로그인 후 콜백 시 전달되는 코드 파라미터 이외에 friendship_status_changed 파라미터가 추가적으로 전달되어 해당 사용자가 친구 추가를 수행했는지 여부를 확인할 수 있다. 만약, 로그인 화면에 메시지 채널을 친구로 추가할 수 있는 버튼이 노출되지 않는다면 아래와 같은 항목을 제대로 설정했는지 다시 한번 체크해보도록 하자.</p><ul><li><a href="https://developers.line.biz/en/docs/line-login/link-a-bot/#link-a-line-official-account">Link a LINE Official Account with your channel</a></li><li><a href="https://developers.line.biz/en/docs/line-login/link-a-bot/#redirect-users">Redirect users to the LINE Login authorization URL with the bot_prompt query parameter</a></li></ul><h4 id="사용자에게-메시지-보내기"><a href="#사용자에게-메시지-보내기" class="headerlink" title="사용자에게 메시지 보내기"></a>사용자에게 메시지 보내기</h4><p>사용자가 메시지 채널에 친구로 등록하였다면 로그인 연동을 수행한 사용자에게 메시지를 보낼 수 있다. 사용자 프로필 정보를 포함하고 있는 <a href="https://developers.line.biz/en/docs/line-login/verify-id-token/#page-title">JWT 형식의 IDToken</a>의 항목 중 sub 가 라인에서 제공하는 API에서 내부적으로 사용할 수 있는 User ID이며 <a href="https://developers.line.biz/en/reference/messaging-api/#send-push-message">Messaging API</a> 에서는 User ID를 사용하여 사용자에게 메시지를 보낼 수 있도록 제공한다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">line</span><span class="token punctuation">:</span>  <span class="token key atrule">bot</span><span class="token punctuation">:</span>    <span class="token key atrule">channel-token</span><span class="token punctuation">:</span> WQ9SQjcWBJqD020+ri<span class="token important">***</span>    <span class="token key atrule">channel-secret</span><span class="token punctuation">:</span> 1ba24f197605a2<span class="token important">***</span></code></pre><blockquote><p>User ID는 U1234567890abcdef1234567890abcdef 와 같이 UXXX 로 시작하는 값 입니다.<br>Line Java SDK 에서 채널 토큰은 메시지 채널의 아이디가 아닌 Messaging API의 액세스 토큰임을 주의해야합니다.</p></blockquote><h4 id="라인-로그인-인증-화면-국제화"><a href="#라인-로그인-인증-화면-국제화" class="headerlink" title="라인 로그인 인증 화면 국제화"></a>라인 로그인 인증 화면 국제화</h4><p><img data-src="/images/posts/line-login/06.png"></p><p><code>ui_locales</code> 파라미터에 로케일을 전달하여 사용자가 라인 플랫폼에 인증하기 위한 화면에 대해 국제화를 적용할 수 있다. 또한, 라인 로그인 채널 설정에서 Localization 설정을 통해 채널 이름과 설명 부분을 언어에 따라 표시되도록 설정할 수 있다. 단, 친구 옵션으로 표시되는 메시지 채널에 대한 이름은 별도로 지원하지 않는다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">https://access.line.me/oauth2/v2.1/authorize?response_type<span class="token operator">=</span>code<span class="token operator">&amp;</span><span class="token assign-left variable">client_id</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>LOGIN_CHANNEL_ID<span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token assign-left variable">redirect_uri</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>CALLBACK_URL<span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token assign-left variable">ui_locales</span><span class="token operator">=</span>ja_JP</code></pre><p><img data-src="/images/posts/line-login/07.png">  </p><p><img data-src="/images/posts/line-login/08.png">  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에 대한 코드는 &lt;a href=&quot;https://github.com/kdevkr/spring-boot-line-login&quot;&gt;kdevkr&amp;#x2F;spring-boot-line-login&lt;/a&gt; 에서 확인할 수 있습니다.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Springdoc OpenAPI UI</title>
    <link href="https://kdevkr.github.io/springdoc-openapi-ui/"/>
    <id>https://kdevkr.github.io/springdoc-openapi-ui/</id>
    <published>2024-02-04T00:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>Springdoc OpenAPI UI는 OpenAPI 3 기반의 Swagger API 문서를 작성할 수 있게 제공해주는 라이브러리이다. 오늘은 Springdoc OpenAPI UI 를 사용하는 방법에 대해서 학습해보면서 알게된 유용한 정보들 대해서 공유해보고자 한다. </p><h4 id="Select-a-definition-기본-선택하기"><a href="#Select-a-definition-기본-선택하기" class="headerlink" title="Select a definition 기본 선택하기"></a>Select a definition 기본 선택하기</h4><p>GroupeOpenAPI를 등록하여 하나가 아닌 다수의 API 그룹을 정의하고자 할때 <code>springdoc.swagger-ui.urls-primary-name</code>에 기본으로 선택하고 싶은 <a href="https://github.com/springdoc/springdoc-openapi/issues/2022">그룹 이름을 입력하면 기본으로 선택</a>되어진다. 그룹 표시 순서 정렬에 의해 기본값이 먼저 노출되지 않을 때 유용하다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">springdoc</span><span class="token punctuation">:</span>  <span class="token key atrule">swagger-ui</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /swagger<span class="token punctuation">-</span>ui.html    <span class="token key atrule">groups-order</span><span class="token punctuation">:</span> desc    <span class="token key atrule">urls-primary-name</span><span class="token punctuation">:</span> v1</code></pre><p><img data-src="/images/posts/springdoc-openapi-ui/01.png"></p><h4 id="서버-URL-직접-관리하기"><a href="#서버-URL-직접-관리하기" class="headerlink" title="서버 URL 직접 관리하기"></a>서버 URL 직접 관리하기</h4><p>기본으로 만들어주는 URL로도 충분할 수 있지만 API 문서에 대한 서버를 별도로 제공하고자 한다면 호출할 수 있는 엔드포인트를 노출해줄 필요가 있다. 이러한 경우 해당 기능은 제공해주지 않기 때문에 서버 주소에 대한 ConfigurationProperties를 만들고 주입하면 된다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">springdoc</span><span class="token punctuation">:</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> /      <span class="token key atrule">description</span><span class="token punctuation">:</span> Default</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@ConstructorBinding</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"springdoc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringdocServersProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">></span></span> servers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">OpenAPI</span> <span class="token function">openAPI</span><span class="token punctuation">(</span><span class="token class-name">SpringdocServersProperties</span> serversProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">servers</span><span class="token punctuation">(</span>serversProperties<span class="token punctuation">.</span><span class="token function">getServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="기본-응답-메시지-표시-비활성화"><a href="#기본-응답-메시지-표시-비활성화" class="headerlink" title="기본 응답 메시지 표시 비활성화"></a>기본 응답 메시지 표시 비활성화</h4><p>실무에서는 GlobalOpenApiCustomizer 를 사용해서 <a href="https://github.com/springdoc/springdoc-openapi/issues/381#issuecomment-579583870">기본으로 제공되는 응답 메시지 중에서 일부에 대해서만 표시</a>되도록 했는데 <a href="https://stackoverflow.com/a/66871601">스택오버플로우의 답변</a>을 보니 기본적으로 @ControllerAdvice에 의해 찾아주어 추가해주는 응답 메시지를 제외할 수 있다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">springdoc</span><span class="token punctuation">:</span>  <span class="token key atrule">override-with-generic-response</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">GlobalOpenApiCustomizer</span> <span class="token function">globalOpenApiCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> openapi <span class="token operator">-></span> openapi<span class="token punctuation">.</span><span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pathItem <span class="token operator">-></span> pathItem<span class="token punctuation">.</span><span class="token function">readOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>operation <span class="token operator">-></span> operation<span class="token punctuation">.</span><span class="token function">getResponses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addApiResponse</span><span class="token punctuation">(</span><span class="token string">"500"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"Server Error"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addMediaType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MediaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Could-not-resolve-pointer-components-schemas-XXX-does-not-exist-in-document"><a href="#Could-not-resolve-pointer-components-schemas-XXX-does-not-exist-in-document" class="headerlink" title="Could not resolve pointer: &#x2F;components&#x2F;schemas&#x2F;XXX does not exist in document"></a>Could not resolve pointer: &#x2F;components&#x2F;schemas&#x2F;XXX does not exist in document</h4><p>API 그룹마다 다른 인증 방식을 사용하기 위해서 분리한다면 아래와 같이 .components 를 지정하는 것을 주의하도록 해야한다. 인증 스키마 이외에 요청과 응답에 대한 스키마 클래스가 포함되지 않기 때문에 .getComponents 를 이용하여 인증 스키마를 추가하자.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">GroupedOpenApi</span> <span class="token function">apiV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SecurityScheme</span> bearerScheme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">SecurityScheme<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">SecurityScheme<span class="token punctuation">.</span>In</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bearerFormat</span><span class="token punctuation">(</span><span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">GroupedOpenApi</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pathsToMatch</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addOpenApiCustomiser</span><span class="token punctuation">(</span>openapi <span class="token operator">-></span> openapi<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addSecurityItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecurityRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addList</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">//.components(new Components().addSecuritySchemes(DEFAULT_AUTH, bearerScheme)) // Resolve error!</span>            <span class="token punctuation">.</span><span class="token function">getComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addSecuritySchemes</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_AUTH</span><span class="token punctuation">,</span> bearerScheme<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>이에 대한 자세한 코드는 <a href="https://github.com/kdevkr/spring-boot-2-springdoc.git">spring-boot2-springdoc</a> 에서 확인할 수 있습니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Springdoc OpenAPI UI는 OpenAPI 3 기반의 Swagger API 문서를 작성할 수 있게 제공해주는 라이브러리이다. 오늘은 Springdoc OpenAPI UI 를 사용하는 방법에 대해서 학습해보면서 알게된 유용한 정보들 대해</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringDoc UI 인증을 위한 토큰 기본값 표시</title>
    <link href="https://kdevkr.github.io/springdoc-ui-bearer-authentication/"/>
    <id>https://kdevkr.github.io/springdoc-ui-bearer-authentication/</id>
    <published>2024-02-03T02:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.baeldung.com/openapi-jwt-authentication">Configure JWT Authentication for OpenAPI</a>를 참고하면 SpringDoc UI를 사용할 때 JWT 인증을 위해 Bearer 스키마 유형을 구성할 수 있음을 쉽게 알 수 있다. 그러나, Bearer와 같은 인증 방식의 경우 OAuth 와는 다르게 기본값을 적용할 수 있는 방안이 없다. 스웨거 문서에서 API를 호출해보고 싶은 경우 대부분 스프링 시큐리티에서 제공하는 HTTP 기본 인증이나 폼 로그인을 하지 못하도록 비활성화하기 때문에 사용자 로그인을 수행할 수 있는 엔드포인트를 만들어서 문서에 노출하여 토큰을 발급할 수 있도록 해야한다.</p><blockquote><p>기본적으로 프로젝트 개발 시 Bearer 인증 시 Input 박스에 기본값을 넣어둘 방안은 없습니다.</p></blockquote><h4 id="SecurityScheme"><a href="#SecurityScheme" class="headerlink" title="SecurityScheme"></a>SecurityScheme</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SecurityScheme</span><span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"Bearer Authentication"</span><span class="token punctuation">,</span>    type <span class="token operator">=</span> <span class="token class-name">SecuritySchemeType</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">,</span>    in <span class="token operator">=</span> <span class="token class-name">SecuritySchemeIn</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">,</span>    bearerFormat <span class="token operator">=</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span>    scheme <span class="token operator">=</span> <span class="token string">"bearer"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocsConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p><img data-src="https://www.baeldung.com/wp-content/uploads/2022/06/auth-modal.png" alt="Configure JWT Authentication for OpenAPI"></p><p>위 링크에서 <code>Bearer Authentication</code> 에 대한 이미지를 잘 살펴보면 <code>Description</code> 이 표시되는 걸 확인할 수 있다. 인증 방법에 대한 설명을 제공하는 부분이지만 일반 텍스트 뿐만 아니라 HTML 태그가 가능한 것으로 보인다. 본 글에서는 이것을 이용해서 <strong>개발 환경에서는 테스트 사용자에 대한 이름과 토큰이 표시될 수 있도록</strong> 할 예정이다.</p><h4 id="Customize-SecurityScheme"><a href="#Customize-SecurityScheme" class="headerlink" title="Customize SecurityScheme"></a>Customize SecurityScheme</h4><p><code>@SecurityScheme</code> 어노테이션으로 글로벌 인증에 대한 설정을 구성했다면 <a href="https://www.baeldung.com/openapi-jwt-authentication#3-global-configuration">OpenAPI를 빈으로 등록하는 구성</a>으로 변경이 필요하다.<br>아래는 애플리케이션 속성으로 등록된 사용자 토큰 정보를 Description 영역에 표시될 수 있도록 구현한 예제이다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocsConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_AUTH</span> <span class="token operator">=</span> <span class="token string">"JWT Authentication"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">OpenAPI</span> <span class="token function">openAPI</span><span class="token punctuation">(</span><span class="token class-name">BearerTokenProperties</span> bearerTokenProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecurityRequirement</span> securityRequirement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addList</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecurityScheme</span> securityScheme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_AUTH</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">SecurityScheme<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">SecurityScheme<span class="token punctuation">.</span>In</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">bearerFormat</span><span class="token punctuation">(</span><span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bearerTokenProperties<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bearerTokenProperties<span class="token punctuation">.</span><span class="token function">getTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BearerTokenProperties<span class="token punctuation">.</span>BearerToken</span><span class="token punctuation">></span></span> tokens <span class="token operator">=</span> bearerTokenProperties<span class="token punctuation">.</span><span class="token function">getTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// NOTE: It is rendered as a markdown.</span>            <span class="token class-name">String</span> description <span class="token operator">=</span> tokens<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"**%s** %s"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            securityScheme<span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addSecurityItem</span><span class="token punctuation">(</span>securityRequirement<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Components</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addSecuritySchemes</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_AUTH</span><span class="token punctuation">,</span> securityScheme<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ConstructorBinding</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"springdoc.bearer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BearerTokenProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BearerToken</span><span class="token punctuation">></span></span> tokens<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@RequiredArgsConstructor</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BearerToken</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application-dev.yml</span></div><code class="language-yaml"><span class="token key atrule">springdoc</span><span class="token punctuation">:</span>  <span class="token key atrule">bearer</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> on    <span class="token key atrule">tokens</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Default        <span class="token key atrule">token</span><span class="token punctuation">:</span> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> User2        <span class="token key atrule">token</span><span class="token punctuation">:</span> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></pre><p><img data-src="/images/posts/springdoc-ui-bearer-authentication/01.png"></p><blockquote><p>참고로 위 예제 코드를 보면 마크다운 형식으로 문자열을 구성했는데 개발자 도구로 Description 영역을 살펴보니 마크다운 렌더링으로 되고 있어서 굳이 HTML 태그를 사용하지 않았습니다. 마크다운에 익숙하지 않는 개발자라면 일반 HTML 태그로 만드시면 됩니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/openapi-jwt-authentication&quot;&gt;Configure JWT Authentication for OpenAPI&lt;/a&gt;를 참고하면 SpringDoc UI를 사용할 때 JWT </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PathVariable 값을 RequestBody 오브젝트에 주입하기</title>
    <link href="https://kdevkr.github.io/spring-boot-path-variable-with-request-body/"/>
    <id>https://kdevkr.github.io/spring-boot-path-variable-with-request-body/</id>
    <published>2024-02-02T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 정리하고 공유하고자 하는 내용은 @PathVariable로 지정된 파라미터가 있을 경우 @RequestBody가 지정된 오브젝트 필드에 데이터를 주입할 수 있도록 하는 구현 방안이다. @PathVariable로 지정된 파라미터가 있을 경우 @ModelAttribute에 주입되도록 ServletModelAttributeMethodProcessor가 구현되어있는 반면에 @RequestBody에 대해서 변환을 담당하는 MappingJackson2HttpMessageConverter 에서는 ObjectMapper 에 의해 변환만 수행하도록 되어있다.</p><blockquote><p>따라서, 기본적으로는 @PathVariable 파라미터 값이 @RequestBody 오브젝트에 주입되지 않는다.</p></blockquote><h4 id="RequestBodyAdviceAdapter"><a href="#RequestBodyAdviceAdapter" class="headerlink" title="RequestBodyAdviceAdapter"></a>RequestBodyAdviceAdapter</h4><p>ChatGPT 에게 힌트를 얻어 <code>RequestBodyAdvice</code> 인터페이스를 구현하여 <strong>RequestBody를 전후처리를 수행할 수 있다</strong>는 것을 알아냈다. 대부분 @RestControllerAdvice와 함께 공통 오류처리를 위한 핸들러를 작성해왔을텐데 RequestBodyAdviceAdapter를 확장하여 ServletModelAttributeMethodProcessor 에서의 구현처럼 @PathVariable로 지정된 파라미터의 값을 RequestBody 오브젝트에 주입할 수 있지 않을까 시도해보았다.</p><pre class="language-java" data-language="java"><div class="caption"><span>PathVariableRequestBodyBinder</span></div><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathVariableRequestBodyBinder</span> <span class="token keyword">extends</span> <span class="token class-name">RequestBodyAdviceAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ParameterNameDiscoverer</span> parameterNameDiscoverer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">afterBodyRead</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span>                                <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterBodyRead</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> inputMessage<span class="token punctuation">,</span> methodParameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> methodParameter<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> pathVariables <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>            <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token constant">URI_TEMPLATE_VARIABLES_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">RequestAttributes</span><span class="token punctuation">.</span><span class="token constant">SCOPE_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pathVariables <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pathVariables<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNames <span class="token operator">=</span> parameterNameDiscoverer<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterNames <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parameterNames<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Parameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> parameterNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> parameterName <span class="token operator">=</span> parameterNames<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">Parameter</span> parameter <span class="token operator">=</span> parameters<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// NOTE: Set PathVariable into RequestBody.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">PathVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pathVariables<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>parameterName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>parameterName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> object<span class="token punctuation">,</span> pathVariables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameterName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// ignored</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span>                            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> methodParameter<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Parameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Parameter</span> parameter <span class="token operator">:</span> parameters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">PathVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>컨트롤러 핸들러 함수의 파라미터에 @PathVariable 이 존재한다면 처리하도록 <code>supports</code> 결과를 구현하였다. RequestBodyAdviceAdapter 자체가 RequestBody를 처리함으로 @PathVariable 파라미터가 존재하는지만 체크해도 무방해보인다. RequestBody가 오브젝트로 변환되고나서 주입을 시도하기 위해서 <code>afterBodyRead</code> 함수를 오버라이딩하여 구현하였는데 <code>HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE</code>로 PathVariable 값을 가져오고 파라미터 이름을 추론하기 위하여 <code>DefaultParameterNameDiscoverer</code>를 사용했는데 그 이유에는 <code>@PathVariable</code> 처럼 이름을 별도로 지정하지 않는 경우 <code>arg0</code> 과 같이 이름이 부여되기 때문에 기본적으로는 가져올 수 없다.</p><p>@RequestBody로 변환되어야하는 오브젝트 파라미터에 실제로 필드가 존재하는지에 대해서는 <strong>리플렉션 API에 대해서 깊은 이해가 없는 관계로</strong> 스프링 프레임워크에 포함되어있는 <code>ReflectionUtils</code> 클래스를 이용하였다. 자바에서 대부분의 오브젝트 필드에는 private 접근 제어자를 선언하므로 접근할 수 있도록 한 이후에 필드에 값이 없는 경우에 한해서만 PathVariable에 대한 값을 바인딩하였다. 결과적으로 아래의 이미지와 같이 요청 데이터에 아이디가 포함되지 않아도 PathVariable에 해당되는 <strong>111</strong> 값이 포함됨을 알 수 있다.</p><p><img data-src="/images/posts/spring-boot-path-variable-with-request-body/01.png"></p><h4 id="DefaultParameterNameDiscoverer"><a href="#DefaultParameterNameDiscoverer" class="headerlink" title="DefaultParameterNameDiscoverer"></a>DefaultParameterNameDiscoverer</h4><p>스프링 부트 3.2 부터는 <code>LocalVariableTableParameterNameDiscoverer</code>가 아닌 <code>StandardReflectionParameterNameDiscoverer</code>가 사용되므로 <code>-parameters</code> 컴파일 옵션을 활성해야한다. 스프링 부트 2.7.18 버전 기준의 <code>DefaultParameterNameDiscoverer</code>를 보면 아래와 같이 되어있음을 확인할 수 있다.</p><pre class="language-java" data-language="java"><div class="caption"><span>DefaultParameterNameDiscoverer</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultParameterNameDiscoverer</span> <span class="token keyword">extends</span> <span class="token class-name">PrioritizedParameterNameDiscoverer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DefaultParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KotlinDetector</span><span class="token punctuation">.</span><span class="token function">isKotlinReflectPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">NativeDetector</span><span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDiscoverer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KotlinReflectionParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDiscoverer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardReflectionParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDiscoverer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalVariableTableParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오늘 정리하고 공유하고자 하는 내용은 @PathVariable로 지정된 파라미터가 있을 경우 @RequestBody가 지정된 오브젝트 필드에 데이터를 주입할 수 있도록 하는 구현 방안이다. @PathVariable로 지정된 파라미터가 있을 경우 </summary>
      
    
    
    
    
    <category term="RequestBodyAdviceAdapter" scheme="https://kdevkr.github.io/tags/RequestBodyAdviceAdapter/"/>
    
    <category term="LocalVariableTableParameterNameDiscoverer" scheme="https://kdevkr.github.io/tags/LocalVariableTableParameterNameDiscoverer/"/>
    
  </entry>
  
  <entry>
    <title>Immutable Configuration Properties</title>
    <link href="https://kdevkr.github.io/spring-boot-immutable-configuration-properties/"/>
    <id>https://kdevkr.github.io/spring-boot-immutable-configuration-properties/</id>
    <published>2024-02-01T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 부트 2.2 부터 @ConstructorBinding을 사용하여 생성자를 가지지 않는 클래스를 작성할 수 있으며 스프링 부트 3.0 부터는 @ConstructorBinding 선언 대상이 생성자로 축소되어 아래와 같이 스프링 부트 3 에서는 생성자가 하나인 경우에는 굳이 지정하지 않는다.</p><pre class="language-java" data-language="java"><div class="caption"><span>Spring Boot 2.7</span></div><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@ConstructorBinding</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"feature"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeatureProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ConfigurationPropertiesScan</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>Spring Boot 3.2</span></div><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"feature"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeatureProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ConfigurationPropertiesScan</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Parameter-Name-Discovery-from-Spring-Boot-3-1"><a href="#Parameter-Name-Discovery-from-Spring-Boot-3-1" class="headerlink" title="Parameter Name Discovery from Spring Boot 3.1"></a>Parameter Name Discovery from Spring Boot 3.1</h5><blockquote><p>Ensure that your compiler is configured to use the ‘-parameters’ flag.</p></blockquote><p>스프링 부트 3.2 에서 생성자 바인딩을 통해 Immutable Configuration Properties를 만드려는 경우 위와 같은 오류가 발생할 수 있다. 위 오류 메시지는 <a href="https://github.com/spring-projects/spring-boot/issues/38603">MissingParametersFailureAnalyzer</a> 에 의해 출력되는 것으로 스프링 부트 3.2 에서 의존하는 스프링 프레임워크 버전에서 바이트코드를 분석하여 파라미터 이름을 추론해오던 <a href="https://github.com/spring-projects/spring-framework/issues/29559">LocalVariableTableParameterNameDiscoverer 클래스가 제거</a>되어 파라미터 이름으로 추론하는 대상에 해당하는 생성자 바인딩을 위해 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java">StandardReflectionParameterNameDiscoverer</a> 가 사용될 수 있도록 컴파일러에 대해 <code>-parameters</code> 옵션을 지정해야한다.</p><pre class="language-groovy" data-language="groovy"><div class="caption"><span>build.gradle</span></div><code class="language-groovy"><span class="token comment">// NOTE: https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention</span>tasks<span class="token punctuation">.</span><span class="token function">withType</span><span class="token punctuation">(</span>JavaCompile<span class="token punctuation">)</span><span class="token punctuation">.</span>configureEach <span class="token punctuation">&#123;</span>    options<span class="token punctuation">.</span>compilerArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"-parameters"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>만약, 인텔리제이를 사용하고 있으며 그래들이 아닌 <strong>Build and run using</strong> 옵션으로 Intellij IDEA를 지정하는 편이라면 자바 컴파일러 옵션에 <code>-parameters</code> 옵션을 별도로 설정해야한다. 자바 컴파일러 옵션에 <code>-paramters</code> 플래그를 설정했음에도 파라미터 이름 추론을 위한 오류가 출력된다면 인텔리제이가 생성한 <code>out</code> 폴더를 삭제하고 다시 빌드를 수행해보도록 하자.</p><p><img data-src="/images/posts/spring-boot-immutable-configuration-properties/01.png"></p><blockquote><p>Spring Boot 3.2 에서 Immutable Configuration Properties 를 사용하기 위해 생각지도 못한 삽질을 했습니다.</p></blockquote><h4 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h4><ul><li><a href="https://www.baeldung.com/configuration-properties-in-spring-boot#immutable-configurationproperties-binding">Immutable @ConfigurationProperties Binding</a></li><li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes#constructingbinding-no-longer-needed-at-the-type-level">@ConstructingBinding No Longer Needed at the Type Level</a></li><li><a href="https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention">LocalVariableTableParameterNameDiscoverer has been removed in 6.1</a></li><li><a href="https://github.com/spring-projects/spring-framework/issues/29559">Remove LocalVariableTableParameterNameDiscoverer</a></li><li><a href="https://github.com/spring-projects/spring-boot/issues/38603">Failures due to code not being compiled with ‘-parameters’ are hard to identify</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;스프링 부트 2.2 부터 @ConstructorBinding을 사용하여 생성자를 가지지 않는 클래스를 작성할 수 있으며 스프링 부트 3.0 부터는 @ConstructorBinding 선언 대상이 생성자로 축소되어 아래와 같이 스프링 부트 3 에서</summary>
      
    
    
    
    
    <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
    <category term="Configuration Properties" scheme="https://kdevkr.github.io/tags/Configuration-Properties/"/>
    
    <category term="Constructor Binding" scheme="https://kdevkr.github.io/tags/Constructor-Binding/"/>
    
  </entry>
  
  <entry>
    <title>Amazon Linux 2023을 VirtualBox에서 실행하기</title>
    <link href="https://kdevkr.github.io/amazonlinux2023-virtualbox/"/>
    <id>https://kdevkr.github.io/amazonlinux2023-virtualbox/</id>
    <published>2024-01-29T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/amazonlinux2-virtualbox/">Amazon Linux 2를 VirtualBox에서 실행하기</a>처럼 Amazon Linux 2023을 VM 가상머신으로 실행해보자.</p><h4 id="Amazon-Linux-2023-가상-머신-이미지-다운로드"><a href="#Amazon-Linux-2023-가상-머신-이미지-다운로드" class="headerlink" title="Amazon Linux 2023 가상 머신 이미지 다운로드"></a>Amazon Linux 2023 가상 머신 이미지 다운로드</h4><ul><li><a href="https://drive.google.com/file/d/17iBVLBLLJahQDb-3kgsWRCh72hzt1FIp/view?usp=sharing">seed.io 부트 이미지</a></li><li><a href="https://cdn.amazonlinux.com/al2023/os-images/2023.3.20240122.0/kvm/">Amazon Linux 2023 LTS 2023.3.20240122.0 kernel-6.1 x86_64 KVM image</a></li></ul><h4 id="가상-머신-만들기-및-실행"><a href="#가상-머신-만들기-및-실행" class="headerlink" title="가상 머신 만들기 및 실행"></a>가상 머신 만들기 및 실행</h4><p><img data-src="/images/posts/amazonlinux2023-virtualbox/01.png" alt="1. 가상 머신 만들기"></p><p>새로 만들기 버튼을 눌러 가상 머신을 만들자. 리눅스 유형에 대한 운영 체제 종류는 공식 문서에 나와있지 않으나 Fedora 기반으로 알려져있으므로 Fedora (64-bit)를 선택했다. 그리고 가상 디스크는 미리 정의된 가상 머신으로 추가해야 한다. 위 스크린샷에 나와있듯이 <a href="https://cdn.amazonlinux.com/al2023/os-images/2023.3.20240122.0/">Amazon Linux 2023 가상 머신 이미지</a> 페이지에서 다운로드 받은 KVM 이미지를 선택하면 된다.</p><p><img data-src="/images/posts/amazonlinux2023-virtualbox/02.png" alt="2. 부팅 이미지 디스크 추가"></p><p>부팅 디스크 이미지 파일은 이전 <a href="/amazonlinux2-virtualbox/">Amazon Linux 2를 VirtualBox에서 실행하기</a> 글에서 공유한 seed.iso 파일을 그대로 사용하도록 하자. 사용자 이름은 ec2-user 이며 초기 비밀번호는 amazon 이다.</p><p><img data-src="/images/posts/amazonlinux2023-virtualbox/03.png" alt="3. 사용자 계정 구성"></p><p><img data-src="/images/posts/amazonlinux2023-virtualbox/04.png" alt="4. ec2-user 로그인"></p><p>ec2-user 및 amazon 을 입력하면 Amazon Linux 2 와는 다르게 초기 비밀번호 변경을 요구한다. 위 스크린샷처럼 신규 비밀번호를 입력하고 로그인을 완료하자. 또한, 사용자 계정 구성이 올바르지 않게 될 수 있어 부팅 디스크로 사용한 seed.iso를 해제하지 않는 것을 권장한다.</p><p><img data-src="/images/posts/amazonlinux2023-virtualbox/05.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/amazonlinux2-virtualbox/&quot;&gt;Amazon Linux 2를 VirtualBox에서 실행하기&lt;/a&gt;처럼 Amazon Linux 2023을 VM 가상머신으로 실행해보자.&lt;/p&gt;
&lt;h4 id=&quot;Amazon-Linux-</summary>
      
    
    
    
    
    <category term="Oracle VirtualBox" scheme="https://kdevkr.github.io/tags/Oracle-VirtualBox/"/>
    
    <category term="AL2023" scheme="https://kdevkr.github.io/tags/AL2023/"/>
    
  </entry>
  
  <entry>
    <title>메소드 보안에 의한 트랜잭션 이슈</title>
    <link href="https://kdevkr.github.io/spring-boot-method-security-transaction-issue/"/>
    <id>https://kdevkr.github.io/spring-boot-method-security-transaction-issue/</id>
    <published>2024-01-28T13:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>메소드 보안을 잘 활용하고 있었으나 메소드 보안에 의해 트랜잭션이 적용되지 않게 된 문제가 발생했던 시스템은 스프링 부트 기반의 프로젝트로 아래와 같이 구성되어 있음을 공유하고자 한다. 시스템을 이용하는 사용자가 클라이언트 크레덴셜을 발급하고 OAuth 토큰을 발급하여 OpenAPI를 이용할 수 있으며 OpenAPI 에 대한 권한을 처리하기 위해서 스프링 시큐리티의 <a href="https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html">메소드 보안</a>과 함께 PermissionEvaluator를 구현하여 커스텀 표현식을 사용하고 있었다.</p><ul><li>Spring Boot 2.3.12.RELEASE</li><li>Spring Security OAuth</li><li>EnableGlobalMethodSecurity with PermissionEvaluator</li><li>UserDetailsService + ClientDetailsService</li></ul><pre class="language-java" data-language="java"><div class="caption"><span>JdbcConfiguration</span></div><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionManagementConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">annotationDrivenTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>MethodSecurityConfiguration</span></div><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodSecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">GlobalMethodSecurityConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">MethodSecurityExpressionHandler</span> <span class="token function">createExpressionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OAuth2MethodSecurityExpressionHandler</span> expressionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2MethodSecurityExpressionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expressionHandler<span class="token punctuation">.</span><span class="token function">setApplicationContext</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expressionHandler<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>AuthPermissionEvaluator</span></div><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"auth"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthPermissionEvaluator</span> <span class="token keyword">implements</span> <span class="token class-name">PermissionEvaluator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClientDetails</span> clientDetails <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">loadClientByClientId</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientDetails <span class="token keyword">instanceof</span> <span class="token class-name">UserClient</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UserClient</span> userClient <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserClient</span><span class="token punctuation">)</span> clientDetails<span class="token punctuation">;</span>            <span class="token keyword">return</span> userClient<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> targetDomainObject<span class="token punctuation">,</span> <span class="token class-name">Object</span> permission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Serializable</span> targetId<span class="token punctuation">,</span> <span class="token class-name">String</span> targetType<span class="token punctuation">,</span> <span class="token class-name">Object</span> permission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">aop</span><span class="token punctuation">:</span>    <span class="token key atrule">auto</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">proxy-target-class</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><h4 id="메소드-보안과-트랜잭션-처리-순서-문제"><a href="#메소드-보안과-트랜잭션-처리-순서-문제" class="headerlink" title="메소드 보안과 트랜잭션 처리 순서 문제"></a>메소드 보안과 트랜잭션 처리 순서 문제</h4><p>트랜잭션이 동작하지 않는 문제에 대해서 확인해보면 아래와 같이 TransactionAspectSupport가 스택트레이스에 포함되지 않는 것을 확인할 수가 있다. @EnableGlobalMethodSecurity(prePostEnabled &#x3D; true) 와 GlobalMethodSecurityConfiguration 그리고 @EnableTransactionManagement() 인 상태에서 커스텀 PermissionEvaluator를 사용하게 되면 트랜잭션 인터셉터가 동작하지 않을 수 있게 되고 @Transactional을 명시하더라도 트랜잭션이 생성되지 않을 수 있는 문제를 내재하게 된다.</p><pre class="language-java" data-language="java"><div class="caption"><span>TransactionAspectSupport 가 동작하지 않는 경우</span></div><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span>$$<span class="token class-name">FastClassBySpringCGLIB</span>$$c53b685e<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>MethodProxy</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">218</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">792</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>PersistenceExceptionTranslationInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">PersistenceExceptionTranslationInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authorization<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span>AuthorizationManagerBeforeMethodInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationManagerBeforeMethodInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">DynamicAdvisedInterceptor</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">707</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$<span class="token number">7</span>a11f77b<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserService</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserService</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserApi</span><span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserApi</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserApi</span>$$<span class="token class-name">FastClassBySpringCGLIB</span>$$df90bb86<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre><pre class="language-java" data-language="java"><div class="caption"><span>TransactionAspectSupport 가 동작하는 경우</span></div><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span>$$<span class="token class-name">FastClassBySpringCGLIB</span>$$c53b685e<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>TransactionInterceptor</span>$<span class="token number">1.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">388</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>TransactionInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">DynamicAdvisedInterceptor</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">707</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$<span class="token number">964218d</span><span class="token number">2.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserService</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserService</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserApi</span><span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserApi</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserApi</span>$$<span class="token class-name">FastClassBySpringCGLIB</span>$$df90bb86<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre><h4 id="Migrating-from-EnableGlobalMethodSecurity"><a href="#Migrating-from-EnableGlobalMethodSecurity" class="headerlink" title="Migrating from @EnableGlobalMethodSecurity"></a><a href="https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html#migration-enableglobalmethodsecurity">Migrating from @EnableGlobalMethodSecurity</a></h4><p>이와 같이 트랜잭션 인터셉터가 적용되지 않는 문제로 인하여 @EnableGlobalMethodSecurity 를 @EnableMethodSecurity를 사용하여 아래와 같이 @EnableTransactionManagement 의 순서를 0으로 지정하면 해결된다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionManagementConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">annotationDrivenTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@EnableMethodSecurity</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodSecurityConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span>$$<span class="token class-name">FastClassBySpringCGLIB</span>$$c53b685e<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>MethodProxy</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">218</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">792</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>PersistenceExceptionTranslationInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">PersistenceExceptionTranslationInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>TransactionInterceptor</span>$<span class="token number">1.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">388</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span>TransactionInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">TransactionInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">DynamicAdvisedInterceptor</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">707</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserRepository</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$<span class="token number">38621</span>c9f<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserService</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserService</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserApi</span><span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserApi</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span>UserApi</span>$$<span class="token class-name">FastClassBySpringCGLIB</span>$$df90bb86<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>generated<span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>MethodProxy</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">218</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">792</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>ReflectiveMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>CglibAopProxy</span>$<span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">CglibAopProxy</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">762</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authorization<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span>AuthorizationManagerBeforeMethodInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationManagerBeforeMethodInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span></code></pre><p>UserApi의 핸들러 함수에 부여된 @PreAuthorize 로 인하여 AuthorizationManagerBeforeMethodInterceptor가 스택트레이스에 포함되는 걸 확인할 수 있고 TransactionInterceptor 에 의해 @Transactional 이 적용된 리파지토리 함수가 호출되기 이전에 트랜잭션 생성을 시도하는 걸 확인할 수 있다. 재현한 샘플 프로젝트와 다르게 실제로는 @EnableGlobalMethodSecurity를 사용하고 PermissionEvaluator 구현체 내에서 UserService를 나중에 참조하도록 @Lazy 를 부여하는 방식으로 해결이 되었는데 그 이유에 대해서는 조금 더 찾아봐야할 것 같다.</p><blockquote><p>참고로, hikari.auto-commit 옵션이 적용되어 있었다면 @Transactional 이 동작하지 않아도 인지하지 못하고 반영되었을 것 같네요.</p></blockquote><h4 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h4><ul><li><a href="https://stackoverflow.com/a/40724843">https://stackoverflow.com/a/40724843</a></li><li><a href="https://github.com/spring-projects/spring-security/issues/13152">https://github.com/spring-projects/spring-security/issues/13152</a></li><li><a href="https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html#changing-the-order">https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html#changing-the-order</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;메소드 보안을 잘 활용하고 있었으나 메소드 보안에 의해 트랜잭션이 적용되지 않게 된 문제가 발생했던 시스템은 스프링 부트 기반의 프로젝트로 아래와 같이 구성되어 있음을 공유하고자 한다. 시스템을 이용하는 사용자가 클라이언트 크레덴셜을 발급하고 O</summary>
      
    
    
    
    
    <category term="Transactional" scheme="https://kdevkr.github.io/tags/Transactional/"/>
    
    <category term="EnableGlobalMethodSecurity" scheme="https://kdevkr.github.io/tags/EnableGlobalMethodSecurity/"/>
    
    <category term="PermissionEvaluator" scheme="https://kdevkr.github.io/tags/PermissionEvaluator/"/>
    
    <category term="TransactionInterceptor" scheme="https://kdevkr.github.io/tags/TransactionInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 개발 환경 설정 (Feat. Code Style)</title>
    <link href="https://kdevkr.github.io/intellij-java-code-style/"/>
    <id>https://kdevkr.github.io/intellij-java-code-style/</id>
    <published>2024-01-21T08:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="EditorConfig-에서-K-R-스타일-강제하기"><a href="#EditorConfig-에서-K-R-스타일-강제하기" class="headerlink" title="EditorConfig 에서 K&amp;R 스타일 강제하기"></a>EditorConfig 에서 K&amp;R 스타일 강제하기</h4><p>개발자 커뮤니티의 글들을 참고해보니 자바 언어에서의 기본 K&amp;R 코드 스타일이 아닌 BSD 스타일로 바꾸어서 개발하는 사람들이 있나보다. 프로젝트에서 EditorConfig를 사용하고 인텔리제이에서 <strong>EditorConfig 에 의해 IDE 코드 스타일 설정을 오버라이드할 수 있도록 활성화</strong> 했다면 아래와 같이 강제할 수 있다.</p><pre class="language-toml" data-language="toml"><div class="caption"><span>.editorconfig</span></div><code class="language-toml"><span class="token punctuation">[</span>*<span class="token punctuation">.</span>java<span class="token punctuation">]</span><span class="token key property">ij_java_block_brace_style</span> <span class="token punctuation">=</span> end_of_line<span class="token key property">ij_java_class_brace_style</span> <span class="token punctuation">=</span> end_of_line<span class="token key property">ij_java_method_brace_style</span> <span class="token punctuation">=</span> end_of_line<span class="token key property">ij_java_line_comment_add_space</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span class="token key property">ij_java_line_comment_add_space_on_reformat</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span class="token key property">ij_java_line_comment_at_first_column</span> <span class="token punctuation">=</span> <span class="token boolean">false</span></code></pre><blockquote><p>이외에도 수 많은 규칙을 설정할 수 있게 제공하므로 프로젝트에서 강제해야할 필요성이 있는 규칙이 무엇인지 체크해보는게 필요합니다.</p></blockquote><h5 id="주석에-대한-들여쓰기-기본-옵션-비활성화"><a href="#주석에-대한-들여쓰기-기본-옵션-비활성화" class="headerlink" title="주석에 대한 들여쓰기 기본 옵션 비활성화"></a>주석에 대한 들여쓰기 기본 옵션 비활성화</h5><p><img data-src="/images/posts/intellij-java-code-style/01.png"></p><p>위 예시에서 <code>ij_java_line_comment_at_first_column</code> 은 라인 단위 주석에 대해 들여쓰기 기본 옵션으로 선택되어있는 첫번째 열에 주석을 추가하는 것을 비활성화하도록 하는 옵션 설정이다. 체크스타일에서 들여쓰기 규칙이 있어도 인텔리제이 기본값이 첫번째 열에 추가하는 것이기에 들여쓰기 규칙에 올바르지 않은 형태로 만들어질 수 있다. 따라서, 위와 같이 명시적으로 비활성화한다면 인텔리제이 IDE 자바 코드 스타일 설정 중 <code>Code Generation → Comment Code → Line comment at first column</code> 이 선택되어있어도 라인 중 코드가 시작되는 곳부터 주석이 되는 걸 확인할 수 있다.</p><blockquote><p>Line comment at first column 을 비활성화하는 건 꽤나 많은 조직에서 유용할 것 같습니다.<br>그래도 무의미한 주석인지에 대한 유무는 리뷰 단계에서 검출하는게 좋겠죠?</p></blockquote><h4 id="Checkstyle-및-프로젝트-코드-스타일-설정-공유하기"><a href="#Checkstyle-및-프로젝트-코드-스타일-설정-공유하기" class="headerlink" title="Checkstyle 및 프로젝트 코드 스타일 설정 공유하기"></a>Checkstyle 및 프로젝트 코드 스타일 설정 공유하기</h4><p><img data-src="/images/posts/intellij-java-code-style/02.png"></p><p>프로젝트 폴더 내에 Checkstyle에 대한 구성 파일이 포함되어있더라도 인텔리제이에서 Checkstyle 플러그인에서 사용되도록 수동으로 설정하고 코드 스타일에 체크스타일 설정을 스키마로 임포트하는 과정은 개발자마다 수행해야하는 작업이다. 대부분 자바 프로젝트를 보면 .idea 와 같은 인텔리제이에서 참조하는 폴더를 .gitignore로 추적되지 않도록 해두었을 가능성이 높다. 프로젝트에서 체크스타일을 사용하고 있다면 아래의 3가지 파일에 대해서는 프로젝트에서 관리되도록 추가하는 게 좋을 수도 있다.</p><p>아래와 같이 이미 무시되는 규칙에 대해서도 .gitignore 규칙에서 제외되는 패턴을 둘 수 있다.</p><pre class="language-toml" data-language="toml"><div class="caption"><span>.gitignore</span></div><code class="language-toml"><span class="token comment">### IntelliJ IDEA ###</span><span class="token punctuation">.</span>idea!<span class="token punctuation">.</span>idea/codeStyles/codeStyleConfig<span class="token punctuation">.</span>xml!<span class="token punctuation">.</span>idea/codeStyles/Project<span class="token punctuation">.</span>xml!<span class="token punctuation">.</span>idea/checkstyle-idea<span class="token punctuation">.</span>xml</code></pre><blockquote><p>이미 .idea 폴더가 제외되어있다면 수동으로 3개의 파일을 오른쪽 마우스를 눌러 Git → Add 기능으로 추적이되도록 추가해야합니다.<br>신규 프로젝트를 시작할때 프로젝트 단위의 설정을 공유하는 걸 고려하시는게 좋아보입니다.</p></blockquote><p><img data-src="/images/posts/intellij-java-code-style/03.png"></p><p>끝으로, 이렇게 하더라도 개발 환경 설정에 대한 가이드 문서를 남기고 정말로 설정이 동일한지 체크해주는 과정은 필요하다. 프로젝트 코드를 받아도 개발자마다 사용하는 IDE 설정이 완전히 동일하게 맞춰지진 않기 때문에 메인 브랜치에 커밋하는 업무 방식은 지양하고 <a href="/github-pr-status-checks/">작업 브랜치와 PR을 통해 강제로 검증하는 프로세스</a>가 필요할 수 밖에 없다.</p><p>인텔리제이와 이클립스를 혼용하는 조직이라면 GG… 😅</p><hr><h4 id="Checkstyle로-일관되지-않을-수-있는-코드-스타일"><a href="#Checkstyle로-일관되지-않을-수-있는-코드-스타일" class="headerlink" title="Checkstyle로 일관되지 않을 수 있는 코드 스타일"></a>Checkstyle로 일관되지 않을 수 있는 코드 스타일</h4><p>앞서 다룬것 처럼 Checkstyle을 사용하더라도 일관되지 않을 수 있는 코드 스타일이 있을 수 있다. 예를 들어, 함수 파라미터가 많아지는 경우 어떤 방식으로 관리할 것이냐에 따라 개발자마다 관점이 다를 수 있지만 인텔리제이 기본 포맷터와 체크스타일 규칙에 따라 일관되게 포맷팅되지 않을 수 있다. 아래와 같은 코드 스타일 중에서 마지막 D 스타일은 <strong>Method declaration parameters</strong> 와 같은 규칙을 수동으로 설정하거나 아래와 같이 EditorConfig 규칙으로 강제하여 일관되게 만들 수 있다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// A 스타일</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// B 스타일</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                     <span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">,</span> <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// C 스타일</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                    <span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">,</span>                    <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// D 스타일</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>    <span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">,</span>    <span class="token class-name">Principal</span> principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-toml" data-language="toml"><div class="caption"><span>.editorconfig</span></div><code class="language-toml"><span class="token punctuation">[</span>*<span class="token punctuation">.</span>java<span class="token punctuation">]</span><span class="token key property">ij_java_call_parameters_new_line_after_left_paren</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span class="token key property">ij_java_call_parameters_right_paren_on_new_line</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span class="token key property">ij_java_method_parameters_new_line_after_left_paren</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span class="token key property">ij_java_method_parameters_right_paren_on_new_line</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></code></pre><p>개인적으로는 A 스타일로 개발하다가 파라미터가 많아질수록 B 스타일 그리고 C 스타일로 변경하는 것 같고 D 스타일은 마음에 들지 않는데 <strong>자동으로 검출할 수가 없는 케이스</strong>라 PR 리뷰 단계에서 체크가 필요해보인다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;EditorConfig-에서-K-R-스타일-강제하기&quot;&gt;&lt;a href=&quot;#EditorConfig-에서-K-R-스타일-강제하기&quot; class=&quot;headerlink&quot; title=&quot;EditorConfig 에서 K&amp;amp;R 스타일 강제하기&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="Code Style" scheme="https://kdevkr.github.io/tags/Code-Style/"/>
    
    <category term="Checkstyle" scheme="https://kdevkr.github.io/tags/Checkstyle/"/>
    
    <category term="EditorConfig" scheme="https://kdevkr.github.io/tags/EditorConfig/"/>
    
  </entry>
  
  <entry>
    <title>AWS ALB 에서 mTLS를 지원하지 않았다고?!</title>
    <link href="https://kdevkr.github.io/aws-alb-mtls-passthrough/"/>
    <id>https://kdevkr.github.io/aws-alb-mtls-passthrough/</id>
    <published>2024-01-20T08:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="OpenADR-요청-시-451-오류가-발생합니다-💥"><a href="#OpenADR-요청-시-451-오류가-발생합니다-💥" class="headerlink" title="OpenADR 요청 시 451 오류가 발생합니다 💥"></a>OpenADR 요청 시 451 오류가 발생합니다 💥</h4><p>OpenADR 프로토콜에서 NOT_ALLOWED(451)은 요청이 올바르지 않을때 응답되는 메시지이다. 처음에는 OpenADR 클라이언트 요청 시 전달한 인증서가 올바르지 않은 것을 체크했으나 테스트 환경에서 확인해보니 인증서가 서버까지 전달되지 않음을 확인할 수 있었다. 해당 테스트 환경은 그동안 조직에서 구성한 인프라 방식이 아닌 일본 고객 환경을 최대한 모방해서 만든 신규 환경에 해당된다. 현재 조직에서 제공하는 솔루션은 아마존 웹 서비스에서 인프라를 구성하는 경우 Elastic Beanstalk 와 (ELB 중 L4에 해당하는) NLB 로 구성된다.</p><blockquote><p>로드밸런서를 ALB로 구성하지 않는 이유는 빠른 트래픽 전달과 에너지 관련 시스템 특성 상 외부에서 고정되어야하는 아이피가 필요하기 때문이다.</p></blockquote><h4 id="AWS-ALB-는-mTLS를-지원해요-🌼"><a href="#AWS-ALB-는-mTLS를-지원해요-🌼" class="headerlink" title="AWS ALB 는 mTLS를 지원해요 🌼"></a>AWS ALB 는 mTLS를 지원해요 🌼</h4><p>2023년 12월에 <a href="https://aws.amazon.com/ko/blogs/korea/mutual-authentication-for-application-load-balancer-to-reliably-verify-certificate-based-client-identities/">Application Load Balancer 상호 인증 기능</a>을 지원하게 되었고 아래와 같이 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/create-https-listener.html">Application Load Balancer용 HTTPS 리스너 생성</a>문서에는 그동안 ALB 에서 mTLS 적용을 할 수 없다는 정보가 남아있는 걸 확인할 수 있다. 고객 환경과 동일한 인프라를 구성하면서도 ALB 에서 mTLS를 지원하지 않는다는 부분에 제약이 있다는 것을 알아채지 못했다.</p><p><img data-src="/images/posts/aws-alb-mtls-passthrough/03.png"></p><h5 id="원래는-지원하지-않았다는걸-알-수-있는-스택오버플로우-답변-링크"><a href="#원래는-지원하지-않았다는걸-알-수-있는-스택오버플로우-답변-링크" class="headerlink" title="원래는 지원하지 않았다는걸 알 수 있는 스택오버플로우 답변 링크"></a>원래는 지원하지 않았다는걸 알 수 있는 스택오버플로우 답변 링크</h5><ul><li><a href="https://stackoverflow.com/a/41596778">https://stackoverflow.com/a/41596778</a></li><li><a href="https://stackoverflow.com/a/42027781">https://stackoverflow.com/a/42027781</a></li></ul><h4 id="mTLS-패스스루-옵션"><a href="#mTLS-패스스루-옵션" class="headerlink" title="mTLS 패스스루 옵션"></a>mTLS 패스스루 옵션</h4><blockquote><p>상호 인증 옵션은 두 가지가 있습니다. <strong>패스스루</strong> 옵션을 선택하면 HTTP 헤더를 사용하여 클라이언트로부터 받은 모든 클라이언트 인증서 체인을 백엔드 애플리케이션으로 보냅니다. mTLS가 활성화된 Application Load Balancer는 핸드셰이크에서 클라이언트 인증서를 가져오고, TLS 연결을 설정한 다음, HTTPS 헤더에 있는 모든 항목을 대상 애플리케이션으로 보냅니다. 애플리케이션은 클라이언트를 인증하기 위해 클라이언트 인증서 체인을 확인해야 합니다.</p></blockquote><p>위 문장으로만 해석하면 ALB 에서 패스스루 옵션을 적용한 뒤 백엔드 애플리케이션까지 클라이언트 인증서가 도달해야하지만 패스스루 옵션을 활성화하여도 해당 증상은 동일하게 발생했다. 최근 갱신된 페이지라 한국어로 번역이 되지 않은 <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/mutual-authentication.html#mtls-http-headers">Mutual authentication with TLS in Application Load Balancer</a>를 참고하면 <code>X-Amzn-Mtls-Clientcert</code> 헤더의 URL-encoded PEM 형태의 값으로 로드밸런서의 대상으로 전달되는 것을 확인할 수 있었다.</p><p><img data-src="/images/posts/aws-alb-mtls-passthrough/01.png"><br><img data-src="/images/posts/aws-alb-mtls-passthrough/02.png"></p><h4 id="URL-encoded-PEM-with-as-safe-characters-로-인한-오류-⚡️"><a href="#URL-encoded-PEM-with-as-safe-characters-로-인한-오류-⚡️" class="headerlink" title="URL-encoded PEM with +=/ as safe characters 로 인한 오류 ⚡️"></a>URL-encoded PEM with <code>+=/</code> as safe characters 로 인한 오류 ⚡️</h4><p>원래는 NLB를 사용하더라도 AWS Elastic Beanstalk 환경의 Nginx에 전달되는 인증서를 백엔드 애플리케이션에 전달하기 위해서 <a href="https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_escaped_cert">$ssl_client_escaped_cert</a> 변수를 <code>X-SSL-CERT</code> 헤더에 포함하여 전달하면 헤더의 값을 추출하여 인증서로 변환하여 사용하도록 조치되어 있었기에 <code>X-Amzn-Mtls-Clientcert</code> 헤더로 전달되는 인증서 정보를 그대로 <code>X-SSL-CERT</code> 헤더에 전달하는 조치로 해결하려 했으나 오류가 발생했다. 알고보니 일반적인 URL 인코딩이 아니라 +&#x3D;&#x2F; 와 같은 일부 문자는 인코딩에서 제외되었기 때문에 코드에서 사용하고 있던 <code>URLDecoder</code>로 디코딩하는 경우 올바르지 않은 인증서가 되어버리는 상황이 되었다.</p><blockquote><p>위와 같은 상황으로 애플리케이션 코드 수정없이는 조치가 불가능하기 때문에 X-SSL-CERT 헤더 이외에 X-Amzn-Mtls-Clientcert 가 있다면 인증서로 변환하도록 하는 코드를 추가했습니다. 또한, 긴급한 상황은 아니었기에 예정된 릴리즈에 포함해서 배포하기로 했습니다.</p></blockquote><h4 id="Tip-클라이언트-또는-로드밸런서에서-전달한-요청-헤더의-값을-Nginx에서-다른-헤더로-바꾸어서-전달하는-방법"><a href="#Tip-클라이언트-또는-로드밸런서에서-전달한-요청-헤더의-값을-Nginx에서-다른-헤더로-바꾸어서-전달하는-방법" class="headerlink" title="Tip. 클라이언트 또는 로드밸런서에서 전달한 요청 헤더의 값을 Nginx에서 다른 헤더로 바꾸어서 전달하는 방법"></a>Tip. 클라이언트 또는 로드밸런서에서 전달한 요청 헤더의 값을 Nginx에서 다른 헤더로 바꾸어서 전달하는 방법</h4><p>Nginx 설정에서 X-Amzn-Mtls-Clientcert 헤더의 값을 X-SSL-CERT 으로 전달하는 것은 아래와 같이 할 수 있다.</p><pre class="language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf">server &#123;    underscores_in_headers on;      location &#x2F; &#123;        proxy_set_header X-SSL-CERT $http_x_amzn_mtls_clientcert;    &#125;&#125;</code></pre><blockquote><p>클라이언트 또는 로드밸런서에서 전달한 커스텀 헤더를 Nginx 에서 다시 설정하여 포함시키는 방법을 찾고 있는 분에게 도움이 되길 바랍니다.</p></blockquote><h4 id="관련-링크"><a href="#관련-링크" class="headerlink" title="관련 링크"></a>관련 링크</h4><ul><li><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/mutual-authentication.html">Mutual authentication with TLS in Application Load Balancer</a></li><li><a href="https://aws.amazon.com/ko/blogs/korea/mutual-authentication-for-application-load-balancer-to-reliably-verify-certificate-based-client-identities/">Application Load Balancer 상호 인증 기능 – 인증서 기반 클라이언트 ID 인증 가능</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;OpenADR-요청-시-451-오류가-발생합니다-💥&quot;&gt;&lt;a href=&quot;#OpenADR-요청-시-451-오류가-발생합니다-💥&quot; class=&quot;headerlink&quot; title=&quot;OpenADR 요청 시 451 오류가 발생합니다 💥&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="ALB" scheme="https://kdevkr.github.io/tags/ALB/"/>
    
    <category term="Mutual TLS" scheme="https://kdevkr.github.io/tags/Mutual-TLS/"/>
    
    <category term="X-Amzn-Mtls-Clientcert" scheme="https://kdevkr.github.io/tags/X-Amzn-Mtls-Clientcert/"/>
    
  </entry>
  
  <entry>
    <title>스프링 동적 이메일 템플릿</title>
    <link href="https://kdevkr.github.io/spring-dynamic-email-template/"/>
    <id>https://kdevkr.github.io/spring-dynamic-email-template/</id>
    <published>2024-01-20T06:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>HR 솔루션인 그리팅처럼 <a href="https://blog.greetinghr.com/recruiter-email-template/">사용자가 직접 이메일 템플릿을 관리</a>하는 건 시스템이나 서비스마다 요구사항이 생길 수 있다. 그리팅 이메일의 경우 내부적인 템플릿은 서비스 자체에서 관리하고 템플릿 변수를 제공하여 이메일 내용만 입력하는 구성이지만 B2B 서비스(솔루션)의 경우 서비스 사업자가 아닌 해당 사업자 정보로 대체하고 싶은 고객들이 생긴다.</p><p>스프링 프레임워크 기반의 애플리케이션에서 <a href="https://docs.spring.io/spring-framework/reference/web/webmvc-view/mvc-thymeleaf.html">Thymeleaf</a>, FreeMarker, Mustache 와 같은 템플릿 엔진을 쉽게 사용할 수 있어서 이메일 템플릿을 만들고 컨텍스트 정보와 함께 HTML로 변환하여 이메일로 발송하는 건 <a href="https://www.thymeleaf.org/doc/articles/springmail.html">Sending email in Spring with Thymeleaf</a>와 같은 예제도 공유되어있어 구현하는건 간단하다. 사용자가 직접 템플릿을 관리하는 방식을 타임리프 템플릿으로 이야기해보자면 StringTemplateResolver 클래스를 통해 아래와 같이 템플릿 파일 경로가 아닌 HTML 문자열 자체로 변환할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SpringTemplateEngine</span> templateEngine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        templateEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateEngine<span class="token punctuation">.</span><span class="token function">setTemplateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringTemplateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateEngine<span class="token punctuation">.</span><span class="token function">setTemplateEngineMessageSource</span><span class="token punctuation">(</span>messageSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> template<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> variables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">processTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> variables<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> template<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> variables<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>locale <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> templateEngine<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="StringTemplateResolver"><a href="#StringTemplateResolver" class="headerlink" title="StringTemplateResolver"></a>StringTemplateResolver</h4><p>StringTemplateResolver는 StringTemplateResource를 통해 외부 파일이나 리소스에 액세스하는게 아니라 문자열을 템플릿 자체로 간주하며 기본적으로는 캐시할 수 없다고 설정된다. 아래의 테스트 코드는 클래스패스에 위치한 메일 템플릿 양식을 문자열로 변환하여 처리할 수 있음을 보여준다. 실제로는 데이터베이스에 저장된 템플릿을 사용하게 될 것이다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token class-name">Test_sendEmail_from_TextTemplate_withHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"templates/mail/2fa.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token class-name">FileCopyUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String html = """</span>        <span class="token comment">//     &lt;h1>Two-Factor Authentication&lt;/h1></span>        <span class="token comment">//     &lt;h2>Hi, [[$&#123;name&#125;]]&lt;/h2></span>        <span class="token comment">//     &lt;p>The two-step authentication code for the login request is as follows.&lt;/p></span>        <span class="token comment">//     &lt;p>Please enter it on the authentication screen within the time limit.&lt;/p></span>        <span class="token comment">//     &lt;p>Verification Code: &lt;span style="font-size:20px;">[[$&#123;code&#125;]]&lt;/span>&lt;/p></span>        <span class="token comment">//     """;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Mambo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> htmlContent <span class="token operator">=</span> mailService<span class="token punctuation">.</span><span class="token function">processTemplate</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> variables<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">forLanguageTag</span><span class="token punctuation">(</span><span class="token string">"ko_KR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Recipient</span> recipient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Recipient</span><span class="token punctuation">(</span><span class="token string">"Mambo"</span><span class="token punctuation">,</span> <span class="token string">"kdevkr@gmail.com"</span><span class="token punctuation">,</span> <span class="token class-name">Message<span class="token punctuation">.</span>RecipientType</span><span class="token punctuation">.</span><span class="token constant">TO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Email</span> email <span class="token operator">=</span> mailService<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"[Auth] Requested Two Factor Authentication"</span><span class="token punctuation">,</span> htmlContent<span class="token punctuation">,</span> recipient<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MimeMessage</span> mimeMessage <span class="token operator">=</span> mailService<span class="token punctuation">.</span><span class="token function">convertTo</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>위 코드에서는 주석을 통해 2fa.html 파일에 2차 인증을 위한 이메일 템플릿이 어떻게 작성되었는지를 보여줍니다.</p></blockquote><h4 id="텍스트-템플릿-모드"><a href="#텍스트-템플릿-모드" class="headerlink" title="텍스트 템플릿 모드"></a>텍스트 템플릿 모드</h4><p>위 예시에서는 일반적인 템플릿 표현식이 아니라 텍스트 모드의 템플릿 표현식을 사용했다. 프론트엔드 기술에 의해서 사용자가 이메일 템플릿을 쉽게 작성할 수 있게 지원하면 좋지만 그것이 준비되기 전에는 위와 같이 텍스트 모드로 작성하여 조금은 더 쉽게 표현할 수 있다. </p><ul><li><a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#expression-inlining">Expression inlining</a></li><li><a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#textual-template-modes">Textual template modes</a></li><li><a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#appendix-b-expression-utility-objects">Expression Utility Objects</a></li></ul><h4 id="동적-템플릿으로-발송된-이메일"><a href="#동적-템플릿으로-발송된-이메일" class="headerlink" title="동적 템플릿으로 발송된 이메일"></a>동적 템플릿으로 발송된 이메일</h4><p><img data-src="/images/posts/spring-dynamic-email-template/01.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HR 솔루션인 그리팅처럼 &lt;a href=&quot;https://blog.greetinghr.com/recruiter-email-template/&quot;&gt;사용자가 직접 이메일 템플릿을 관리&lt;/a&gt;하는 건 시스템이나 서비스마다 요구사항이 생길 수 있다. 그리팅 </summary>
      
    
    
    
    
    <category term="Email Template" scheme="https://kdevkr.github.io/tags/Email-Template/"/>
    
    <category term="Thymeleaf" scheme="https://kdevkr.github.io/tags/Thymeleaf/"/>
    
    <category term="SpringTemplateEngine" scheme="https://kdevkr.github.io/tags/SpringTemplateEngine/"/>
    
    <category term="StringTemplateResolver" scheme="https://kdevkr.github.io/tags/StringTemplateResolver/"/>
    
  </entry>
  
  <entry>
    <title>스프링 데이터소스</title>
    <link href="https://kdevkr.github.io/spring-datasource/"/>
    <id>https://kdevkr.github.io/spring-datasource/</id>
    <published>2024-01-18T22:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>소규모 시스템에서는 단일 데이터베이스에 의존하지만 조금씩 커지는 시스템에서는 데이터베이스 클러스터에 접근하거나 다수의 데이터베이스에 연결되는 것 같다. 본 글에서는 다중 데이터베이스 연결을 위한 데이터 소스를 어떻게 관리하는지를 다루어보고자 한다. 아래의 영상에서 스프링 개발자 Josh Long 이 데이터소스를 어떻게 다룰 수 있는지에 대해서 다양하게 설명하고 있다.</p><iframe width="520" height="310" src="https://www.youtube.com/embed/rt_cUtb8LnQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h4 id="DataSourceBuilder"><a href="#DataSourceBuilder" class="headerlink" title="DataSourceBuilder"></a>DataSourceBuilder</h4><p>스프링 부트에서는 애플리케이션 프로퍼티 파일에 <code>spring.datasource</code> 로 시작하는 속성으로 데이터베이스 연결에 대한 정보를 설정하고 자동 구성을 제공한다. 직접 데이터소스를 생성하거나 다중 데이터베이스에 연결하기 위해서 서로 다른 데이터베이스 연결 정보를 가지는 데이터소스를 사용하고자 하는 경우에 <code>DataSourceBuilder</code> 와 <code>DataSourceProperties</code> 를 사용해볼 수 있다.</p><blockquote><p>스프링 프레임워크에서 기본적으로 사용되는 커넥션 풀 라이브러리는 HikariCP 입니다.</p></blockquote><h4 id="AbstractRoutingDataSource"><a href="#AbstractRoutingDataSource" class="headerlink" title="AbstractRoutingDataSource"></a>AbstractRoutingDataSource</h4><p>위 영상에서는 멀티-테넌시 구성으로 서로 다른 리전을 구성한다면 스레드 로컬 변수에 리전 정보를 관리하고 리전에 따른 데이터베이스에 연결하는 예시를 보여주고 있다. 데이터베이스 클러스터로 고가용성의 HA를 구성하는 인프라의 경우에는 AbstractRoutingDataSource 를 활용하여 쓰기 전용 클러스터 엔드포인트와 읽기 전용 엔드포인트를 나누어서 처리할 수 있는 라우터 방식의 데이터소스를 생성할 수 있다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSourceProperties</span> dataSourceProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"writer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">writerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"reader"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">readerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">determineUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">determineUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">determinePassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span>dataSourceProperties<span class="token punctuation">.</span><span class="token function">determineDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSourceRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClusterDataSourceRouter</span> dataSourceRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterDataSourceRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceRouter<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ClusterType</span><span class="token punctuation">.</span><span class="token constant">WRITER</span><span class="token punctuation">,</span> <span class="token function">writerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span> <span class="token class-name">ClusterType</span><span class="token punctuation">.</span><span class="token constant">READER</span><span class="token punctuation">,</span> <span class="token function">readerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceRouter<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span><span class="token function">writerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSourceRouter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ClusterType</span> <span class="token punctuation">&#123;</span>        <span class="token constant">WRITER</span><span class="token punctuation">,</span> <span class="token constant">READER</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClusterDataSourceRouter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> readOnly <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">ClusterType</span><span class="token punctuation">.</span><span class="token constant">READER</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token class-name">ClusterType</span><span class="token punctuation">.</span><span class="token constant">WRITER</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>대부분 TransactionSynchronizationManager의 트랜잭션 읽기 속성에 따라 읽기 전용 엔드포인트에 연결되도록 예제를 공유하는 것 같네요.</p></blockquote><h4 id="LazyConnectionDataSourceProxy"><a href="#LazyConnectionDataSourceProxy" class="headerlink" title="LazyConnectionDataSourceProxy"></a>LazyConnectionDataSourceProxy</h4><p>스프링의 트랜잭션 처리는 @Transactional 에 진입하는 과정에서 커넥션 연결을 수행하므로 다중 데이터소스에 대한 구성에서는 LazyConnectionDataSourceProxy를 사용하여 커넥션 획득 시점을 늦추는 것이 일반적이다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSourceRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClusterDataSourceRouter</span> dataSourceRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterDataSourceRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSourceRouter<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ClusterType</span><span class="token punctuation">.</span><span class="token constant">WRITER</span><span class="token punctuation">,</span> <span class="token function">writerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">,</span> <span class="token class-name">ClusterType</span><span class="token punctuation">.</span><span class="token constant">READER</span><span class="token punctuation">,</span> <span class="token function">readerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSourceRouter<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span><span class="token function">writerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LazyConnectionDataSourceProxy</span><span class="token punctuation">(</span>dataSourceRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>반드시 커넥션 획득 시점을 늦추는 것이 좋은 방법은 아닐 것이기에 개발자가 시스템 환경에 대한 분석과 판단이 필요합니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;소규모 시스템에서는 단일 데이터베이스에 의존하지만 조금씩 커지는 시스템에서는 데이터베이스 클러스터에 접근하거나 다수의 데이터베이스에 연결되는 것 같다. 본 글에서는 다중 데이터베이스 연결을 위한 데이터 소스를 어떻게 관리하는지를 다루어보고자 한다</summary>
      
    
    
    
    
    <category term="DataSourceBuilder" scheme="https://kdevkr.github.io/tags/DataSourceBuilder/"/>
    
    <category term="DataSourceProperties" scheme="https://kdevkr.github.io/tags/DataSourceProperties/"/>
    
    <category term="AbstractRoutingDataSource" scheme="https://kdevkr.github.io/tags/AbstractRoutingDataSource/"/>
    
    <category term="TransactionSynchronizationManager" scheme="https://kdevkr.github.io/tags/TransactionSynchronizationManager/"/>
    
    <category term="LazyConnectionDataSourceProxy" scheme="https://kdevkr.github.io/tags/LazyConnectionDataSourceProxy/"/>
    
  </entry>
  
  <entry>
    <title>스프링 파일 다운로드</title>
    <link href="https://kdevkr.github.io/spring-file-download/"/>
    <id>https://kdevkr.github.io/spring-file-download/</id>
    <published>2024-01-13T13:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 프레임워크 기반의 웹 애플리케이션에서 파일 다운로드 예제를 찾아보면 대부분은 서블릿 스택의 HttpServletResponse의 OutputStream 에 파일의 내용을 쓰는 방식으로 설명하는 경우가 많다. 그러나, 스프링 프레임워크에서는 바이트 처리에 대한 추상화가 되어있기 때문에 더 쉽고 간결한 파일 다운로드 예제 코드를 작성할 수 있다. 이리저리 찾아보며 활용할 수 있는 클래스들을 통해 아래와 같이 코드를 작성해보았다.</p><pre class="language-java" data-language="java"><div class="caption"><span>FileController.java</span></div><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ClassPathResource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ContentDisposition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpHeaders</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/files/sample.csv"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"sample/file.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getContentAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NOTE: Use FileCopyUtils.copyToByteArray</span>        <span class="token class-name">ContentDisposition</span> contentDisposition <span class="token operator">=</span> <span class="token class-name">ContentDisposition</span><span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">"한글파일명.csv"</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_DISPOSITION</span><span class="token punctuation">,</span> contentDisposition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-markup" data-language="markup"><div class="caption"><span>src/main/resources/templates/index.html</span></div><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/files/sample.csv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>sample.csv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="Resource-와-ResponseEntity"><a href="#Resource-와-ResponseEntity" class="headerlink" title="Resource 와 ResponseEntity"></a>Resource 와 ResponseEntity</h4><p>ResponseEntity&lt;Resource&gt;도 가능하지만 더 명확한 표현을 위해서 <code>byte[]</code>를 명시하였다. ResponseEntity를 쓴 이유는 <code>Content-Disposition</code> 헤더를 통해 파일명을 지정하고 일반적인 바이너리 응답을 의미하도록 <code>application/octet-stream</code> 을 설정하기 위해서이다. HttpServletResponse를 핸들러 함수에 파라미터로 받아서 사용할 수도 있지만 굳이 필요하지 않음을 보여준다.</p><h4 id="FileCopyUtils-copyToByteArray"><a href="#FileCopyUtils-copyToByteArray" class="headerlink" title="FileCopyUtils.copyToByteArray"></a>FileCopyUtils.copyToByteArray</h4><p>스프링 프레임워크 6 부터는 오래전부터 제공하던 <code>FileCopyUtils.copyToByteArray</code> 를 사용하여 Resource를 바이트 배열로 바꾸는 함수를 제공한다. 만약, 스프링 프레임워크 5 이하의 버전이라면 Resource의 InputStream을 가져와서 FileCopyUtils.copyToByteArray를 직접 이용하면 된다.</p><h4 id="ContentDisposition"><a href="#ContentDisposition" class="headerlink" title="ContentDisposition"></a>ContentDisposition</h4><p>일부 예제에서는 Content-Disposition 헤더를 지정하기 위해서 문자열을 입력하는 것을 볼 수 있다. 잘못된 것은 아니지만 사람이 입력하는데 실수를 할 수 있기 때문에 스프링 프레임워크에 포함된 <code>ContentDisposition</code> 클래스를 이용해서 실수를 방지할 수 있다. 심지어 한글로 된 파일명을 지정하기 위해서는 <code>URLEncoder</code>를 사용해야하는데 ContentDisposition 클래스 내부적으로 RFC 6266 와 RFC 2047 에 따라 URL 인코딩을 수행하므로 이에 대한 과정도 생략할 수 있다.</p><hr><blockquote><p>어떤가요? 여러분이 작성한 코드보다 간결해졌나요? <a href="https://stackoverflow.com/questions/5673260/downloading-a-file-from-spring-controllers">Downloading a file from spring controllers</a> 에서 더 많은 예제 코드를 확인할 수 있습니다.</p></blockquote><hr><h4 id="대용량-파일-다운로드"><a href="#대용량-파일-다운로드" class="headerlink" title="대용량 파일 다운로드"></a>대용량 파일 다운로드</h4><p>일반적인 파일 다운로드는 위와 같이 바이트 배열을 응답하여 처리할 수 있지만 용량이 큰 파일을 다운로드해야하는 경우라면 애플리케이션 메모리에 부담이 있을 수 있다. 이 경우 StreamingResponseBody를 활용하여 아래와 같이 파일을 스트리밍할 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/files/sample.mp4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StreamingResponseBody</span><span class="token punctuation">></span></span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"sample/sample.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamingResponseBody</span> responseBody <span class="token operator">=</span> output <span class="token operator">-></span>                <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NOTE: 8192 bytes.</span>        <span class="token class-name">ContentDisposition</span> contentDisposition <span class="token operator">=</span> <span class="token class-name">ContentDisposition</span><span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">"동영상.mp4"</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_DISPOSITION</span><span class="token punctuation">,</span> contentDisposition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_OCTET_STREAM</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="동영상-스트리밍"><a href="#동영상-스트리밍" class="headerlink" title="동영상 스트리밍"></a>동영상 스트리밍</h4><p>간단한 동영상 스트리밍을 제공하고 싶은 경우 <code>ResourceRegion</code> 을 사용하여 동영상 플레이어에서 전체 파일을 다운로드 받지 않아도 원하는 위치부터 다운로드 받을 수 있도록 처리할 수 있다. 하지만, 대부분의 스트리밍 사이트의 경우 동영상 파일을 잘게 쪼개해두고 CDN으로 처리하는 것 같다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sample.mp4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">ResourceRegion</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">streamingVideo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MalformedURLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span><span class="token string">"https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_30mb.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceRegion</span><span class="token punctuation">></span></span> resourceRegions <span class="token operator">=</span> <span class="token class-name">HttpRange</span><span class="token punctuation">.</span><span class="token function">toResourceRegions</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">PARTIAL_CONTENT</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCEPT_RANGES</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token string">"video/mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>resourceRegions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/files/sample.stream"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">></span></span> <span class="token function">streamingVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MalformedURLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span><span class="token string">"https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_30mb.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>동영상 스트리밍에 대해서는 <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java#L192-L209">AbstractMessageConverterMethodProcessor</a>에 구현되어 있어서 InputStreamResource가 아니라면 HttpRange를 직접 사용하지 않아도 알아서 처리된다고 한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;스프링 프레임워크 기반의 웹 애플리케이션에서 파일 다운로드 예제를 찾아보면 대부분은 서블릿 스택의 HttpServletResponse의 OutputStream 에 파일의 내용을 쓰는 방식으로 설명하는 경우가 많다. 그러나, 스프링 프레임워크에서는</summary>
      
    
    
    
    
    <category term="File" scheme="https://kdevkr.github.io/tags/File/"/>
    
    <category term="Content-Disposition" scheme="https://kdevkr.github.io/tags/Content-Disposition/"/>
    
    <category term="application/octet-stream" scheme="https://kdevkr.github.io/tags/application-octet-stream/"/>
    
  </entry>
  
  <entry>
    <title>풀스택 개발자 관점에서 학습하기</title>
    <link href="https://kdevkr.github.io/fullstack/"/>
    <id>https://kdevkr.github.io/fullstack/</id>
    <published>2024-01-12T12:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 토스 채용 공고를 보니 <a href="https://toss.im/career/job-detail?job_id=5778130003&company=%ED%86%A0%EC%8A%A4%EB%B1%85%ED%81%AC">풀스택 개발자</a> 포지션도 포함되어있는 걸 보았다. 개발자 커뮤니티에서는 풀스택 개발자란 단어만으로 발작하는 분들이 있는데 경험이 많지 않은 개발자들은 프론트엔드 혹은 백엔드 개발자로 일하고 있어도 <strong>최소한 풀스택 개발자라는 관점으로 웹에 대한 지식을 학습해야</strong> 하지 않을까 생각한다. 신입 개발자를 채용하기 위해서 면접관으로 참여해볼 기회가 있었는데 대부분 나는 프론트엔드 개발에 관심이 있어서 백엔드 지식은 관심없다거나 백엔드 개발에 관심이 있어서 프론트엔드는 신경쓰지 않았다고 답변하는 분들이 많았던 것 같다.</p><p>많은 인터넷 글이나 유튜브 영상에서 프론트엔드 혹은 백엔드 개발자가 알아야할 지식에 대해서 나열해주니까 단순히 그것만으로 개발자로 일할 수 있다고 오해하는 사람들이 많아진 것 일지도 모르겠다. 그리고 이렇게 생각하는 사람들이 많아지면서 프론트엔드 개발자가 알아야할 백엔드 지식이라는 정보까지 보이기 시작하고 백엔드 개발자라 해도 최소한 HTML과 CSS 그리고 자바스크립트는 알아야한다고 말하기도 한다.</p><p><img data-src="https://file2.nocutnews.co.kr/newsroom/image/2023/03/06/202303061456521603_0.jpg"></p><p>단순히 개발자라는 관점에서가 아니라 <strong>비개발자 직무로 일하는 사람들도 개발자와 소통하기 위해서</strong> IT 지식에 대해서 알아가고 도메인에 대한 지식도 학습하는 건 다르지 않다. 그러니까, 어떠한 문제를 해결하기 위해서 특정 영역의 전문가로써 의견을 제대로 전달하고 이해하기 위해서는 다른 영역의 지식을 알아야만 가능하다고 생각한다.</p><p><strong>인터넷에서 유명한 기술 블로그나 이력서를 보다보면 대부분 이것 저것 다 할 줄 아는 사람이었다.</strong> 프론트엔드 그리고 백엔드 영역에서 알아야할 지식이 너무나도 많아졌다고 말하지만 스스로 가스라이팅하지 말고 <strong>풀스택 개발자란 관점으로 학습</strong> 하도록 하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오늘 토스 채용 공고를 보니 &lt;a href=&quot;https://toss.im/career/job-detail?job_id=5778130003&amp;company=%ED%86%A0%EC%8A%A4%EB%B1%85%ED%81%AC&quot;&gt;풀스택 개발자&lt;/a&gt; 포지</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>가독성 있는 개발자 이력서</title>
    <link href="https://kdevkr.github.io/resume-fonts/"/>
    <id>https://kdevkr.github.io/resume-fonts/</id>
    <published>2024-01-01T00:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.443Z</updated>
    
    <content type="html"><![CDATA[<iframe width="520" height="310" src="https://www.youtube.com/embed/ZRTJxA3UDWk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>좋은 이력서에 대해서 찾아보면 대부분의 HR 전문가들은 가독성이 있게 작성해야한다고 피드백을 하는 편인 것 같다. 개발자 이력서는 이렇게 작성해야한다고 잘 알려진 <a href="https://wonny-log.notion.site/Wonny-Public-c2f8051bfb574f349406a30d2bc71a45">데이터로 일하는 개발자</a> 에서도 가독성을 높이기 위해 여러가지를 조언해주고 있다. 위 유튜브 영상에서는 휴먼명조체가 신뢰감과 안정감을 주긴 하지만 <strong>디지털 타입의 문서에는 적합하지 않다</strong>고 이야기하며 고딕체를 권장하는 걸 볼 수 있는데 우리가 PDF 파일로 전달하는 이력서는 어디에 해당될까?</p><blockquote><p><a href="https://fonts.google.com/noto/specimen/Noto+Sans+KR/tester">Google Fonts Type tester</a>로 본고딕(Noto Sans KR) 결과와 구글 워드 문서에서 작성해본 결과가 다르지만 확실하게 워드 문서에서 보이는 결과는 명조체보다는 고딕체가 가독성이 있어보이게 작성되었습니다.</p></blockquote><p>기업마다 이력서를 출력해서 검토하는 곳이 이제는 없다고 생각할 순 없지만 개발자 지원자가 수도 없다는 소식으로 볼때는 이력서를 검토할 때 출력해서 볼 가능성은 적지 않을까 싶다. 그렇다면 위 영상에서 알려주는 것과 같이 고딕체를 써야 가독성이 있을 것 같다고 생각할 수 있겠다.</p><ul><li>노션 이력서 : Sans Serif</li><li>원티드 또는 랠릿 : Pretendard</li></ul><p>일반적으로 많이 작성한다고 볼 수 있는 노션 이력서는 Sans Serif 로 알고 있고 원티드나 랠릿 같은 서비스에서는 Pretendard 로 보여주는 것 같다. 그런데 아무리 신경써서 고민하고 작성해도 <strong>PDF로 변환한 결과는 생각보다 전혀 다른 모습을 보여</strong>준다. 구글 워드 문서로 이력서를 작성하려고 했을때는 명조체 보다는 고딕체가 더 깔끔하다고 보여지지만 PDF로 다운로드한 순간 명조체가 더 가독성이 있게 출력됨을 볼 수 있다.</p><ul><li>웹 기반 이력서 : 고딕체</li><li>이력서 PDF 파일 : 명조체</li></ul><p>백엔드 개발자라서 잘 몰랐지만 찾아보니 노션 이력서의 sans-serif는 고딕에 해당된다고 한다. 그리고 serif는 명조에 해당된다고 하니 노션 이력서를 사용하더라도 기본이 아닌 <strong>세리프로 변경한 후 PDF로 내보내는 게 필요</strong>해보인다. 그리고 노션 이력서를 PDF로 변환했을때 A4 크기보다는 A3 크기로 선택했을때 PDF 파일을 연 결과가 깔끔했다.</p><blockquote><p>면접관으로써 이력서를 검토하는 것도 어려운 일이지만 지원자로써 가독성 있는 이력서를 작성하는 건 쉽지 않을 일 같습니다. 폰트에 따라서 디스플레이와 문서 상에서 보이는 결과가 다르다는 것에 새삼 놀라게 되네요. 개발자도 문서화에 대해서는 중요하다고 인지하고는 있지만 문서를 전문적으로 작성하는 인력은 아니기 때문에 그다지 신경쓰지 않았던 것 같습니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe width=&quot;520&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/ZRTJxA3UDWk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-w</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Simple Java Mail 로 이메일 보내기</title>
    <link href="https://kdevkr.github.io/gmail-smtp-with-simplejavamail/"/>
    <id>https://kdevkr.github.io/gmail-smtp-with-simplejavamail/</id>
    <published>2023-12-30T14:00:00.000Z</published>
    <updated>2024-03-14T22:06:19.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/gmail-smtp/">Gmail SMTP</a> 을 작성하면서 구글 계정으로 이메일을 발송하는 것을 다룬 것도 1년이 넘게 지났다. 스프링 부트 기반의 프로젝트에서 spring-boot-starter-mail 모듈을 통해 JavaMailSender로 이메일을 보낼 수 있는 구현을 쉽게 찾아볼 수 있다. 우연히 알게된 <a href="https://www.simplejavamail.org/">Simple Java Mail</a> 라이브러리는 JavaMailSender 와 MimeMessageHelper와 같은 클래스에 익숙하지 않은 초보 개발자들에게 간단하게 메일 발송을 할 수 있도록 API를 제공해준다.</p><h4 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h4><p>이메일 발송에 대한 설정을 깊게 들어가면 어려울 수 있으나 초보 개발자에게 적합한 특징은 아래와 같다.</p><ul><li><a href="https://www.simplejavamail.org/features.html#section-builder-api">Fluent API</a></li><li><a href="https://www.simplejavamail.org/configuration.html#section-spring-support">Spring Support</a></li><li><a href="https://www.simplejavamail.org/features.html#section-reusable-mailer">Thread-Safe</a></li><li><a href="https://www.simplejavamail.org/features.html#section-email-validation">이메일 검증 지원</a></li></ul><h4 id="SSL-and-TLS-with-Google-mail"><a href="#SSL-and-TLS-with-Google-mail" class="headerlink" title="SSL and TLS with Google mail"></a>SSL and TLS with Google mail</h4><p>기존에 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a> 에서 처럼 Gmail SMTP 서버를 이용할 때 STARTTLS 방식을 사용했었던 것처럼 어떻게 설정해야하는지를 <a href="https://www.simplejavamail.org/features.html#section-gmail">SSL and TLS with Google mail</a>에서 설명해주고 있다. STARTTLS 방식은 <a href="https://www.simplejavamail.org/security.html#section-transport-strategy-tls">SMTP_TLS</a>를 사용해야함을 알 수 있다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">SimpleJavaMailSpringSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMailApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleMailApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><div class="caption"><span>application.yml</span></div><code class="language-yaml"><span class="token key atrule">simplejavamail.javaxmail.debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">simplejavamail.smtp.host</span><span class="token punctuation">:</span> smtp.gmail.com<span class="token key atrule">simplejavamail.smtp.port</span><span class="token punctuation">:</span> <span class="token number">587</span><span class="token key atrule">simplejavamail.transportstrategy</span><span class="token punctuation">:</span> SMTP_TLS<span class="token key atrule">simplejavamail.smtp.username</span><span class="token punctuation">:</span> kdevkr@gmail.com<span class="token key atrule">simplejavamail.smtp.password</span><span class="token punctuation">:</span> <span class="token string">'앱 비밀번호'</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">GmailSmtpTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">Mailer</span> mailer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> mailer<span class="token punctuation">.</span><span class="token function">testConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Email</span> email <span class="token operator">=</span> <span class="token class-name">EmailBuilder</span><span class="token punctuation">.</span><span class="token function">startingBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Mambo &lt;kdevkr@gmail.com>"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">"kdevkr@gmail.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSubject</span><span class="token punctuation">(</span><span class="token string">"Java Mail Test with simplejavamail"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withPlainText</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">buildEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> mailer<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>앱 비밀번호 발급은 <a href="/gmail-smtp/">Gmail SMTP</a> 글을 참고하세요.</p></blockquote><h4 id="Convert-Email-to-MimeMessage"><a href="#Convert-Email-to-MimeMessage" class="headerlink" title="Convert Email to MimeMessage"></a>Convert Email to MimeMessage</h4><p>EmailConverter, MailerHelper, JMail 클래스를 통해 유용한 기능을 제공하는데 EmailConverter를 이용하면 Email 을 MimeMessage로 변환하는 것을 제공해주기 때문에 JavaMailSender와의 통합도 유용해보인다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Email</span> email <span class="token operator">=</span> <span class="token class-name">EmailBuilder</span><span class="token punctuation">.</span><span class="token function">startingBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MimeMessage</span> mimeMessage <span class="token operator">=</span> <span class="token class-name">EmailConverter</span><span class="token punctuation">.</span><span class="token function">emailToMimeMessage</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>더 자세히 spring-boot-starter-mail 과 비교해보고 싶다면 <a href="https://www.simplejavamail.org/feature-matrix.html">Feature Comparison Matrix</a> 문서를 참고해보세요.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/gmail-smtp/&quot;&gt;Gmail SMTP&lt;/a&gt; 을 작성하면서 구글 계정으로 이메일을 발송하는 것을 다룬 것도 1년이 넘게 지났다. 스프링 부트 기반의 프로젝트에서 spring-boot-starter-mail 모듈을 통해 Ja</summary>
      
    
    
    
    
    <category term="Gmail SMTP" scheme="https://kdevkr.github.io/tags/Gmail-SMTP/"/>
    
    <category term="Simple Java Mail" scheme="https://kdevkr.github.io/tags/Simple-Java-Mail/"/>
    
  </entry>
  
</feed>
