<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mambo</title>
  
  <subtitle>Today I Learned 🔥</subtitle>
  <link href="https://kdevkr.github.io/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2022-09-13T14:55:18.143Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test Driven Development</title>
    <link href="https://kdevkr.github.io/test-driven-development/"/>
    <id>https://kdevkr.github.io/test-driven-development/</id>
    <published>2022-09-13T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p>현재 조직은 스프린트 단위의 개발과 배포와 함께 고객과는 인수테스트를 진행하고 개발팀에서는 TDD 개발 방법론의 도입을 결정했다. 이것은 조직의 결정이지 조직의 개발자 중 하나인 내가 결정한 사항은 아니다. 그렇다면 이 조직에서는 왜 TDD를 도입하려했을까를 개발팀의 일원으로써 생각해보고자 한다.</p><blockquote><p>우리는 유튜브와 주요 서비스 회사에서 공유하는 이상적인 방식으로 일하는 조직은 아니다.</p></blockquote><p>소프트웨어 공학 관점의 개발 프로세스는 기획 및 요구사항 명세서를 기반으로 요구사항을 분석하고 분석된 내용을 토대로 시스템을 설계하며 설계된 인터페이스에 따라 세부 기능을 개발하고 테스트하는 과정을 거친다. 이러한 과정을 거치면서 상당히 다양한 개발 산출물이 만들어지며 테스트 시나리오를 산출하고 유지보수를 진행한다.</p><p>그러나, IT 분야에서 모든 도메인의 회사가 이렇게 일하지 않는다. 그래도 이상적으로 일하는 문화를 만들고자 스타트업 또는 네카라쿠배와 같은 주요 서비스 기업에서는 더 나은 문화를 고민하고 접목해나가고 있다. 대외적으로는 이상적으로 일하는 것 같아보여도 내부적으로 포장된 부분도 꽤 많을 것이며 그러한 문화를 유지하고자 비효율적인 노력을 할지도 모른다. </p><p>스타트업이나 신생 회사가 아니고서야 일하고 있는 방식을 더 나은 방식으로 변경하기란 쉽지 않다. 기술적인 트렌드를 따라갈 수 있는 조직도 많지 않고 애플리케이션을 이상적으로 배포하는 방법도 정해지지 않는다. 조직 내 데브옵스 팀이 별도로 존재한다고 이상적인 회사라고 볼 수 없으며 클라우드 서비스를 사용하지 않는다고해서 좋지 않은 방식으로 일한다고 볼 수 없다.</p><blockquote><p>소프트웨어 개발에 있어서 정답이 정해져있는게 아니라고 하듯이 일하는 방식도 정해진 바가 없다.</p></blockquote><p>내가 속한 조직은 사실은 중소기업 소속에서 별도의 투자를 받아 물적분할로써 하나의 신생 회사로 독립한 곳이다. 어떻게 보면 스타트업 아닌 스타트업이라고 볼 수 있다. 아무튼 겉으로는 별도의 회사로 분리되었지만 실제로 일하는 방식은 변하지 않았는데 그동안 고객과의 일해온 방식의 문제인지 도메인 분야의 사업 구조의 문제인지는 모르겠으나 대부분의 요구사항은 두루뭉실하거나 명확하지 않고 심지어는 기획조차 존재하지 않는 경우가 꽤 있다. 그래서 사업팀에서는 요구사항을 우선적으로 검토하기가 쉽지 않고 개발팀에서 모든 요구사항의 분석과 일정에 대한 검토를 요구하게 되는 경우가 많다. 아마도 대부분의 회사에서도 고객과 사업팀에서 추가하거나 변경하기 쉬운 요구사항인지를 판단할 수 없고 최대한 빠르게 반영되기를 바라지 않을까 생각된다.</p><blockquote><p>최근 <a href="https://okky.kr/">OKKY</a>라는 커뮤니티에서도 내부적인 기능의 변경은 많지 않았지만 사용자 관점(UX)으로 볼때 이상하게 변경된(내부적으로 많은 고민이 있었겠으나) 부분과 불편한 부분이 빨리 고쳐지기를 바라는 사용자가 많다.</p></blockquote><p>도메인 분야 특성 상 해당 산업 분야에서 고객이 사용할 수 있는 시스템을 B2B 모델로써 일정 금액의 계약을 통해서 요구사항에 대한 기능을 추가하고 시스템을 개선해나가고 있다. 조직의 목표는 도메인 분야에서 사용될 플랫폼을 목표로 하고 있지만 현재 단계에서는 사업 구조 상 고객 환경으로 납품되는 솔루션 형태의 계약이 이루어질 수 밖에 없다고 보여진다.</p><p>개발자로써는 정확한 요구사항과 기준이 있다면 명확한 작업 방향을 정할 수 있고 기준과 방향이 명확하다면 요구되는 기능을 구현하는 것은 생각보다 어렵지 않다. 물론 시스템 설계 측면에서는 모든 고객의 환경에 적합한 시스템을 마련하기란 쉽지 않다. 고객과 협의된 것보다 더 나은 성능을 위해 서버 자원을 확보한다던가 불필요하게 여러가지 기술을 도입한 아키텍처를 도입하지 않는데 대부분의 회사와 고객들에게 비용적인 측면을 고려하지 않을 수 없기 때문이다.</p><blockquote><p>유연성과 확장성을 고려해서 설계해야 한다고 말하면서도 오버엔지니어링은 안된다고 말한다.</p></blockquote><p>애초에 이 조직이 일하는 방식의 문제점은 명확하지 않음에서 발생한다고 볼 수 있다. 명확하지 않은 요구사항으로 인해서 개발자가 검토하고 스스로 고려하여 작업된 상태로 인하여 고객이 대략적으로 생각했던 기능과 약간 다르다거나 제대로 되지 않은 테스트로 인하여 버그로 판단한다거나 기존에는 제대로 동작했던 부분들이 어떠한 요구사항으로 인해서 사이드 이펙트가 발생하곤 한다. 사실 개발자들은 명확하지 않은 기준으로 작업했고 제대로 테스트된 부분이 아니기에 시스템에 영향이 있을 수 밖에 없다는 입장이지만 시스템을 고객에게 제공하는 조직과 패치된 시스템을 사용하는 고객에게는 변경사항으로 발생하는 시스템 영향도로 인해 제품 품질에 대해서 신뢰를 잃게되는 입장이다.</p><blockquote><p>지난 달 발생한 <a href="https://www.youtube.com/watch?v=uJ1KqQ0I2u8">1,600만 명이 쓰는 알약 오류 사태</a>도 변경사항으로 인해 심각한 버그가 발생한 케이스이다.</p></blockquote><p>아무튼 이러한 조직의 개발팀에서 TDD를 도입하려는 이유는 무엇일까 생각해보기 위해서 TDD라는 개념과 방식에 대해서 이해하고자 여러 TDD 관련 글이나 영상을 검색해보았고 다음의 링크들을 참고해보면 좋겠다고 생각이 든다.</p><ul><li><a href="https://www.youtube.com/watch?v=mNPpfB8JSIU">[마틴 파울러] 리팩토링의 중요성 feat.테스트 코드를 짜는 이유(한글 자막)</a></li><li><a href="https://medium.com/@minhyeok4dev/1500%EA%B0%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%A9%B0-%EB%82%98%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%96%BB%EC%97%88%EB%82%98-62b9facd53d8">1500개 테스트를 작성하며 나는 무엇을 얻었나</a></li><li><a href="https://medium.com/@sryu99/product-manager-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC-%EB%B3%B8-tdd-3ae25512c5d7">Product Manager 관점에서 바라 본 TDD</a></li></ul><p>사실 개발자 스스로는 문서의 중요성과 테스트 코드의 중요성을 모르는 사람이 없다. 그럼에도 불구하고 테스트 코드를 제대로 만들어가며 일할 수 있는 환경은 그리 많지 않다. 현재 조직의 사업 구조상으로 보아도 정확한 테스트 코드를 작성할 정확한 기준이 없으며 모든 변경사항에 대한 테스트 코드를 작성하며 개발 일정을 맞추기란 쉽지 않을 것이다. 물론, 조직 차원에서 그러한 노력을 요구하지 않는 것도 문제라고 바라볼 수 있다.</p><p>TDD를 도입해야한다고 말하는 이유 중 하나는 요구사항의 분석에 대한 설계 오류를 잡아내고 검토된 요구사항이 올바르게 작업되었는지를 개발자 스스로 확인할 수 있다는 것에 있다. 요구사항이 명확하지 않더라도 최소한 개발자가 생각하는 실패의 기준을 기록할 수 있으며 완료된 작업에 대해서 어떤 기준으로 테스트 해야하는지 도출해낼 수 있다는 약간의 장점도 존재한다.</p><p>사실 개발자가 테스트 코드를 작성하기 힘든 부분 중 하나는 모든 것을 테스트 코드로 커버할 수 없다는 것에 있다. 이상적으로 말하는 좋은 테스트 코드는 외부 의존성이 없어도 검증할 수 있어야한다는 개념이 존재한다. 그러나, 실제로는 대부분의 시스템들이 단일 애플리케이션으로 동작하지 않으며 관계형 데이터베이스부터 엘라스틱서치, 레디스, 메시지 큐 솔루션, 외부 API 모듈등과 같이 여러가지 애플리케이션과 솔루션들이 상호 통신을 통해 시스템을 구성하기 때문에 외부 의존성이 없는 테스트 코드를 작성하기란 쉽지 않다. 예를 들어, 현재 개발중인 시스템의 대부분의 기능은 <a href="https://code.kx.com/q/">KDB+라는 상용 시계열 데이터베이스</a>에 의존되어 구현되는 경우가 많은데 고객마다 다른 시계열 데이터를 예상하여 테스트 환경을 준비하기가 까다로운 부분이 있다.</p><blockquote><p>주로 사용되는 기술에 대해서는 <a href="https://www.testcontainers.org/">Testcontainers</a>와 같은 테스트 환경을 구축하기 위한 방법도 있다.</p></blockquote><p>따라서, 개발팀에서 TDD를 도입한다고해서 모든 요건을 테스트 코드를 작성해야한다고 부담을 가져서는 안된다. 예를 들어, 시스템과 연동하기 위해서 협력 업체와 외부 인터페이스 문서를 토대로 테스트할 수 있도록 시스템에 반영되기도 하기 때문이다. 때로는 개발 환경에 임시로 반영하여 노출하기도 하지만 보안 상 호출 문제로 인하여 프로덕션 도메인으로 요청해야한다고 협의되기도 하기 때문이다.</p><p>그리고 TDD를 도입한다고해서 요구사항으로 인한 변경사항이 시스템에 영향이 어디까지 미치는지 검출할 수 있다거나 시스템 영향도를 없앨 수 있다는 관점을 가져서는 안된다. <a href="https://www.youtube.com/watch?v=NkiHu9zGYKU">아마존 웹 서비스의 개발 문화와 프로세스</a>를 보더라도 마치 체계적으로 애자일 문화를 수행하는 것처럼 보이지만 실제 아마존 웹 서비스를 이용하다보면 꽤나 많은 버그가 내재되어있음을 발견할 수 있다.</p><p>현재 조직의 개발팀에 이롭지 않은 것 같아 보이는 TDD를 도입하려는 이유는 개발자가 명확하지 않은 요구사항에 대해서 테스트 코드를 먼저 작성하기 위해서 여러번 요구사항을 분석할 수 있다는 부분과 추후 고객과의 인수테스트 협의를 위해서 테스트 케이스 도출에 습관화 되기 위한 하나의 수단으로 이용될 가능성이 크다. 결론적으로 개발자 입장에서 이상적인 개발 방식을 추구한다기보다 조직에서 만드는 제품 품질을 강화할 수 있는 방안을 마련한다고 보는게 적당할 듯 싶다. 사실은 제품 품질이 좋아지지 않는 이유의 가장 큰 원인은 명확하지 않은 요구사항으로부터 시작되는 것이기에 생각보다 어려운 시도일지도 모른다. 따라서, 앞으로 TDD라는 개발 방식이 조직에게 이로운 방식이 될지 원래대로 돌아가게 될지 모르겠지만 개발자 입장에서도 제품 품질을 높이려는 노력은 필요한 부분이라고 생각이 든다.</p><p>마지막으로 현재 조직에서 일하는 방식 중 개인적으로 고쳐야하지 않을 까 생각되는 부분을 나열해보면서 끝내도록 하면 좋을 것 같다.</p><ol><li>명확하지 않은 고객의 요구사항을 분석할 때 “그럴리 없다, 설마 그러겠어”는 가정을 포함한다.</li><li>고객이 두루뭉술한 요구사항을 토대로 검토하지만 이미 기한은 정해져있다.</li><li>자신이 작업하고 있는 프로젝트 외에는 그다지 크게 신경쓰지 않는다.</li><li>프로젝트 일정이 당겨지거나 밀리는 것으로 인해 프로젝트 계약 시 산정한 맨먼스가 지켜지지 않는다.</li></ol><p>글을 작성하다보니 아마도 많은 중소기업에 해당하는 암담한 현실이지 않을까 생각한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 조직은 스프린트 단위의 개발과 배포와 함께 고객과는 인수테스트를 진행하고 개발팀에서는 TDD 개발 방법론의 도입을 결정했다. 이것은 조직의 결정이지 조직의 개발자 중 하나인 내가 결정한 사항은 아니다. 그렇다면 이 조직에서는 왜 TDD를 도</summary>
      
    
    
    
    
    <category term="TDD" scheme="https://kdevkr.github.io/tags/TDD/"/>
    
    <category term="ATDD" scheme="https://kdevkr.github.io/tags/ATDD/"/>
    
  </entry>
  
  <entry>
    <title>MQTT Connection Lost</title>
    <link href="https://kdevkr.github.io/mqtt-connection-lost/"/>
    <id>https://kdevkr.github.io/mqtt-connection-lost/</id>
    <published>2022-09-09T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>CommsReceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CommsReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">750</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>EOFException</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataInputStream</span><span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token class-name">DataInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">267</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>wire<span class="token punctuation">.</span></span>MqttInputStream</span><span class="token punctuation">.</span><span class="token function">readMqttWireMessage</span><span class="token punctuation">(</span><span class="token class-name">MqttInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span>CommsReceiver</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CommsReceiver</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1</span> more</code></pre><p>위 스택트레이스는 Paho Java Client를 사용하여 Mosquitto 브로커에 연결하고 난 후 어떠한 사유에 의해 연결이 해지되었을 때 발생하는 오류입니다. 조직 내 동료 개발자가 Mosquitto에 연결하고 나서 5분이 지나는 시점에 연결이 해지되는 증상이 있다며 이 문제를 경험했는지 도움을 요청하였으나 이전에 <a href="/spring-boot-integration-mqtt/">스프링 부트 MQTT 클라이언트 메시지 채널 구성하기</a> 또는 <a href="/connecting-with-mqtt-using-aws-iot-device-sdk/">AWS IoT Device SDK Java로 MQTT 연결하기</a>에서처럼 Paho Java Client 라이브러리를 사용하면서 연결이 해지되는 것을 경험해보지는 못했었습니다.</p><h2 id="MQTT-over-Websocket"><a href="#MQTT-over-Websocket" class="headerlink" title="MQTT over Websocket"></a>MQTT over Websocket</h2><p>조직 내 동료 개발자의 도움 요청으로 인해 리눅스 서버에 설치된 Mosquitto 버전은 2.0.14 이며 Paho Java Client 라이브러리는 1.2.5를 사용하고 있는 것으로 알게 되었습니다. 그리고 Mosquitto 연결 시에는 Websocket 프로토콜을 사용하고 있었습니다. </p><table><thead><tr><th>JDK</th><th>Paho Java Client</th><th>Mosquitto</th><th>EOF</th></tr></thead><tbody><tr><td>Java 1.8.0_144</td><td>1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 1.8.0_345</td><td>1.1.0 ~ 1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.1.0 ~ 1.2.5</td><td>2.0.14</td><td>💥</td></tr></tbody></table><p>JDK와 라이브러리 버전을 변경해가면서 테스트 해본 결과 일반적인 TCP 방식으로 연결 시에는 Mosquitto 버전과 상관없이 정상적으로 연결을 유지함을 보였으나 웹소켓 연결에 대해서는 리눅스 서버에 설치된 Mosquitto 2.0.14 브로커에 대해 일정 시간이 지나 연결이 해지됨을 확인할 수 있었습니다.</p><h3 id="Mosquitto-Version"><a href="#Mosquitto-Version" class="headerlink" title="Mosquitto Version"></a>Mosquitto Version</h3><p>위 문제가 발생했던 리눅스 서버에 Mosquitto 브로커는 도커 이미지로 구동된 상태라고 하였습니다. 그래서 로컬 컴퓨터 환경에서도 도커 컨테이너를 실행하여 간단하게 여러개의 버전을 테스트할 수 있으므로 도커 이미지를 변경하면서 웹 소켓 연결이 일정 시간 이후에 해지되는 증상이 나타나는지 체크해보았습니다. 테스트 버전은 <a href="https://mosquitto.org/blog/categories/releases/">Mosquitto Posts about Releases</a>에 따라 시도해보았으며 2.0.9와 2.0.11가 릴리즈될 때 1.6.x 마이너 버전도 패치되었기에 포함했습니다.</p><table><thead><tr><th>JDK</th><th>Paho Java Client</th><th>Mosquitto</th><th>EOF</th></tr></thead><tbody><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.15</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.14</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.13</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.12</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.11</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.10</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>2.0.9</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.15</td><td>💥</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.14</td><td>OK</td></tr><tr><td>Temurin 11.0.16</td><td>1.2.5</td><td>1.6.9</td><td>OK</td></tr></tbody></table><blockquote><p>우분투 LTS 버전에 따른 Mosquitto 패키지 지원 버전은 다음의 링크에서 확인할 수 있습니다.<br><a href="https://packages.ubuntu.com/search?keywords=mosquitto">https://packages.ubuntu.com/search?keywords=mosquitto</a></p></blockquote><p>Mosquitto 버전별 테스트 결과 2021-06-08 자로 릴리즈된 2.0.11과 1.6.15 에서부터 웹소켓 연결이 해지되는 증상을 보였습니다. 동료 개발자에게는 Paho Java Client의 AutomaticReconnect 옵션과 MqttCallbackExtended 인터페이스로 연결 해지로 인해 재연결을 시도하고 나서 토픽을 다시 구독하는 방향으로 임시 조치해야할 것 같다고 전달한 상태이며 Mosquitto 브로커 버전을 다운그레이드 해야하는지에 대해서는 조직 내에서 검토하고 결정해야할 것 같습니다.</p><h2 id="테스트-환경"><a href="#테스트-환경" class="headerlink" title="테스트 환경"></a>테스트 환경</h2><p>처음에는 우분투 VM 이미지로 테스트하였으나 다양한 버전을 테스트해보기 위해서 도커 컨테이너 환경을 구성했습니다. </p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mosquitto</span><span class="token punctuation">:</span>    <span class="token comment"># image: eclipse-mosquitto:1.6.15 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:1.6.14 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.9 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.10 # OK</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.11 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.12 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.13 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.14 # EOF</span>    <span class="token comment"># image: eclipse-mosquitto:2.0.15 # EOF</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> eclipse<span class="token punctuation">-</span>mosquitto<span class="token punctuation">:</span>2.0.10    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mosquitto    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"1883:1883"</span>      <span class="token punctuation">-</span> <span class="token string">"9001:9001"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mosquitto.conf<span class="token punctuation">:</span>/mosquitto/config/mosquitto.conf      <span class="token punctuation">-</span> ./mosquitto.log<span class="token punctuation">:</span>/mosquitto/log/mosquitto.log      <span class="token punctuation">-</span> mosquitto<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/mosquitto/data      <span class="token punctuation">-</span> ./passwd<span class="token punctuation">:</span>/mosquitto/config/passwd<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  mosquitto<span class="token punctuation">-</span>data<span class="token punctuation">:</span></code></pre><h3 id="mosquitto-conf"><a href="#mosquitto-conf" class="headerlink" title="mosquitto.conf"></a>mosquitto.conf</h3><pre class="language-conf" data-language="conf"><code class="language-conf">persistence truepersistence_location &#x2F;mosquitto&#x2F;data&#x2F;log_dest file &#x2F;mosquitto&#x2F;log&#x2F;mosquitto.logport 1883listener 9001protocol websocketsallow_anonymous falsepassword_file &#x2F;mosquitto&#x2F;config&#x2F;passwdset_tcp_nodelay truesocket_domain ipv4log_type allwebsockets_log_level 8</code></pre><details>  <summary>테스트 로그</summary>  <h4 id="mosquitto-log"><a href="#mosquitto-log" class="headerlink" title="mosquitto.log"></a>mosquitto.log</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1662725110</span>: New client connected from <span class="token number">192.168</span>.0.2:3326 as paho1668189895026200 <span class="token punctuation">(</span>p2, c1, k60, u<span class="token string">'mambo'</span><span class="token punctuation">)</span>.<span class="token number">1662725110</span>: No will message specified.<span class="token number">1662725110</span>: Sending CONNACK to paho1668189895026200 <span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1662725110</span>: Received SUBSCRIBE from paho1668189895026200<span class="token number">1662725110</span>:     <span class="token variable">$SYS</span>/broker/version <span class="token punctuation">(</span>QoS <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1662725110</span>: paho1668189895026200 <span class="token number">0</span> <span class="token variable">$SYS</span>/broker/version<span class="token number">1662725110</span>: Sending SUBACK to paho1668189895026200<span class="token number">1662725110</span>: Sending PUBLISH to paho1668189895026200 <span class="token punctuation">(</span>d0, q0, r1, m0, <span class="token string">'$SYS/broker/version'</span>, <span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">24</span> bytes<span class="token punctuation">))</span><span class="token number">1662725110</span>: Received SUBSCRIBE from paho1668189895026200<span class="token number">1662725110</span>:     test/<span class="token comment"># (QoS 0)</span><span class="token number">1662725110</span>: paho1668189895026200 <span class="token number">0</span> test/<span class="token comment">#</span><span class="token number">1662725110</span>: Sending SUBACK to paho1668189895026200<span class="token number">1662725170</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725170</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725230</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725230</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725290</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725290</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725350</span>: Received PINGREQ from paho1668189895026200<span class="token number">1662725350</span>: Sending PINGRESP to paho1668189895026200<span class="token number">1662725410</span>: Client paho1668189895026200 closed its connection.</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1662727428</span>: lws_validity_cb: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: scheduling validity check<span class="token number">1662727428</span>: rops_handle_POLLOUT_ws: issuing <span class="token function">ping</span> on wsi <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: ws mqtt h2: <span class="token number">0</span><span class="token number">1662727428</span>: lws_issue_raw: ssl_capable_write <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> says <span class="token number">2</span><span class="token number">1662727428</span>: lws_issue_raw: ssl_capable_write <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> says <span class="token number">6</span><span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: caller: close_and_handled<span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: end LRS_FLUSHING_BEFORE_CLOSE<span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token function">shutdown</span> conn: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span> <span class="token punctuation">(</span>sk <span class="token number">12</span>, state 0x11e<span class="token punctuation">)</span><span class="token number">1662727428</span>: __lws_close_free_wsi: real just_kill_connection: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span> <span class="token punctuation">(</span>sockfd <span class="token number">12</span><span class="token punctuation">)</span><span class="token number">1662727428</span>: __lws_close_free_wsi: <span class="token punctuation">[</span>wsisrv<span class="token operator">|</span><span class="token number">0</span><span class="token operator">|</span>adopted<span class="token punctuation">]</span>: <span class="token assign-left variable">cce</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">1662727428</span>: Client paho1670208425870800 closed its connection.</code></pre><h4 id="Paho-Java-Client-log"><a href="#Paho-Java-Client-log" class="headerlink" title="Paho Java Client log"></a>Paho Java Client log</h4><pre class="language-bash" data-language="bash"><code class="language-bash">FINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:09 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver runFINE: null: network <span class="token builtin class-name">read</span> messageSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: Stopping due to IOExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: Stopping due to IOExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTINGSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTINGSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: notify workAvailable and <span class="token function">wait</span> <span class="token keyword">for</span> runSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: notify workAvailable and <span class="token function">wait</span> <span class="token keyword">for</span> runSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback runFINE: paho1622771147525800: notify spaceAvailableSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback runFINE: paho1622771147525800: notify spaceAvailableSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppingSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketReceiver stopFINE: null: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore quiesceFINE: paho1622771147525800: <span class="token assign-left variable">resp</span><span class="token operator">=</span>Client is currently disconnecting <span class="token punctuation">(</span><span class="token number">32102</span><span class="token punctuation">)</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore quiesceFINE: paho1622771147525800: <span class="token assign-left variable">resp</span><span class="token operator">=</span>Client is currently disconnecting <span class="token punctuation">(</span><span class="token number">32102</span><span class="token punctuation">)</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms handleOldTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms handleOldTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState resolveOldTokensFINE: paho1622771147525800: reason Connection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState resolveOldTokensFINE: paho1622771147525800: reason Connection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore getOutstandingTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore getOutstandingTokensFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState disconnectedFINE: paho1622771147525800: disconnectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState disconnectedFINE: paho1622771147525800: disconnectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState clearStateFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState clearStateFINE: paho1622771147525800: <span class="token operator">></span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore <span class="token function">clear</span>FINE: paho1622771147525800: <span class="token operator">></span> <span class="token number">0</span> tokensSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsTokenStore <span class="token function">clear</span>FINE: paho1622771147525800: <span class="token operator">></span> <span class="token number">0</span> tokensSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stopping senderSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stopping senderSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState notifyQueueLockFINE: paho1622771147525800: notifying queueLock holdersSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState notifyQueueLockFINE: paho1622771147525800: notifying queueLock holdersSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender stopFINE: paho1622771147525800: stoppedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: new work or <span class="token function">ping</span> arrived Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.TimerPingSender stopFINE: paho1622771147525800: stopSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: new work or <span class="token function">ping</span> arrived Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: no outstanding flows and not connectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientState getFINE: paho1622771147525800: no outstanding flows and not connectedSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.TimerPingSender stopFINE: paho1622771147525800: stopSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: get message returned null, stopping<span class="token punctuation">&#125;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: get message returned null, stopping<span class="token punctuation">&#125;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsSender runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTEDSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.ClientComms shutdownConnectionFINE: paho1622771147525800: <span class="token assign-left variable">state</span><span class="token operator">=</span>DISCONNECTEDSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback connectionLostFINE: paho1622771147525800: call connectionLostSep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsCallback connectionLostFINE: paho1622771147525800: call connectionLostConnection lost <span class="token punctuation">(</span><span class="token number">32109</span><span class="token punctuation">)</span> - java.io.EOFExceptionat org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run<span class="token punctuation">(</span>CommsReceiver.java:197<span class="token punctuation">)</span>at java.base/java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:829<span class="token punctuation">)</span>Caused by: java.io.EOFExceptionat java.base/java.io.DataInputStream.readByte<span class="token punctuation">(</span>DataInputStream.java:272<span class="token punctuation">)</span>at org.eclipse.paho.client.mqttv3.internal.wire.MqttInputStream.readMqttWireMessage<span class="token punctuation">(</span>MqttInputStream.java:92<span class="token punctuation">)</span>at org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run<span class="token punctuation">(</span>CommsReceiver.java:137<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">1</span> <span class="token function">more</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: <span class="token operator">&lt;</span>Sep 09, <span class="token number">2022</span> <span class="token number">8</span>:33:10 AM org.eclipse.paho.client.mqttv3.internal.CommsReceiver runFINE: paho1622771147525800: <span class="token operator">&lt;</span></code></pre></details><h2 id="이슈-링크"><a href="#이슈-링크" class="headerlink" title="이슈 링크"></a>이슈 링크</h2><ul><li><a href="https://github.com/eclipse/mosquitto/issues/2631">Websocket connection lost with paho java client #2631</a></li><li><a href="https://github.com/eclipse/paho.mqtt.java/issues/960">Websocket connection lost with mosquitto 1.6.15 and 2.0.11+ #960</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Connection&lt;/span&gt; lost &lt;span clas</summary>
      
    
    
    
    
    <category term="Mosquitto" scheme="https://kdevkr.github.io/tags/Mosquitto/"/>
    
    <category term="Paho Java Client" scheme="https://kdevkr.github.io/tags/Paho-Java-Client/"/>
    
  </entry>
  
  <entry>
    <title>Spring JDBC</title>
    <link href="https://kdevkr.github.io/spring-jdbc/"/>
    <id>https://kdevkr.github.io/spring-jdbc/</id>
    <published>2022-09-05T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Security OAuth2 학습을 위한 샘플 프로젝트를 만들면서 사용하게될 각 모듈에서 필요한 데이터베이스 스키마를 적용하기 위해서 Spring JDBC를 사용한 부분에 대해서 정리해보고자 합니다. 일반적으로 데이터 액세스에 대해서는 Mybatis 또는 JPA 이라는 기술을 도입하는 경우가 많을텐데 스프링 JDBC 만으로도 충분히 데이터베이스 액세스가 가능하며 Spring Session 이나 Spring Security 에서도 JDBC 기반으로 관련 기능을 제공하고 있습니다.</p><h2 id="Data-Access-with-JDBC"><a href="#Data-Access-with-JDBC" class="headerlink" title="Data Access with JDBC"></a>Data Access with JDBC</h2><p>Spring JDBC는 다양한 방식으로 데이터베이스에 대한 액세스 방법을 제공하며 스프링 세션이나 스프링 시큐리티와 함께 JDBC 기반으로 관련된 기능을 구현하기 위해서는 반드시 Spring JDBC가 포함되어야 합니다. 아마도 대부분의 애플리케이션에서는 관계형 데이터베이스에 대한 접근이 필수적이므로 다음과 같은 JDBC 모듈을 반드시 포함하고 있을 것 입니다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'org.springframework.boot:spring-boot-starter-jdbc'</span></code></pre><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>스프링 부트에서는 JdbcTemplateAutoConfiguration를 통해서 JdbcTemplate와 NamedParameterJdbcTemplate를 자동으로 빈으로 구성하는 것을 확인할 수 있는데요. JdbcTemplate 뿐만 아니라 NamedParameterJdbcTemplate를 함께 구성하는 이유는 Spring Data JDBC와 같은 모듈에서 내부적으로 사용하도록 되어있기 때문이라고 생각됩니다.</p><h3 id="JdbcUserDetailsManager"><a href="#JdbcUserDetailsManager" class="headerlink" title="JdbcUserDetailsManager"></a>JdbcUserDetailsManager</h3><p>스프링 시큐리티에서 JdbcUserDetailsManager는 JDBC 기반의 사용자 인증 구현을 위해서 JdbcDaoSupport를 확장하며 내부적으로 JdbcTemplate과 RowMapper를 사용하는 것으로 작성되어 있습니다. </p><h3 id="JdbcIndexedSessionRepository"><a href="#JdbcIndexedSessionRepository" class="headerlink" title="JdbcIndexedSessionRepository"></a>JdbcIndexedSessionRepository</h3><p>스프링 세션에서의 JdbcHttpSessionConfiguration는 JdbcTemplate를 통해서 JdbcIndexedSessionRepository를 빈으로 등록하게 됩니다. JdbcIndexedSessionRepository는 내부적으로 JdbcOperations를 사용하여 SQL를 수행하는데 세션에 대한 애트리뷰트를 저장할때 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#jdbc-advanced-jdbc">JDBC Batch Operations</a>를 활용하는 것으로 보입니다.</p><blockquote><p>JdbcTemplate는 JdbcOperatrions 구현체입니다.</p></blockquote><h2 id="Stored-Function-with-JDBC"><a href="#Stored-Function-with-JDBC" class="headerlink" title="Stored Function with JDBC"></a>Stored Function with JDBC</h2><p>현재 조직에서는 일반적으로 사용되는 Mybatis 또는 JPA를 도입하지 않고 스토어드 함수(프로시저와 비슷한)를 작성해놓고 스프링 JDBC를 통해서 호출하는 방식으로 구현하고 있습니다. 레거시 시스템을 경험하지 않았거나 Mybatis 또는 JPA라는 기술만을 접한 개발자들은 궁금할 수 있는 부분이기도 할 것 같습니다. 우선 아래와 같은 함수가 PostgreSQL 데이터베이스에 정의되어있다고 가정하겠습니다.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> users$find_by_username<span class="token punctuation">(</span>v_username <span class="token keyword">VARCHAR</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> REFCURSOR <span class="token keyword">AS</span>$$<span class="token keyword">DECLARE</span>    rtn_cursor REFCURSOR :<span class="token operator">=</span> <span class="token string">'rtn_cursor'</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    <span class="token keyword">OPEN</span> rtn_cursor <span class="token keyword">FOR</span>        <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> enabled <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">=</span> v_username<span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> rtn_cursor<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>$$ <span class="token keyword">LANGUAGE</span> plpgsql<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">select</span> users$find_by_username<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">FETCH</span> <span class="token keyword">ALL</span> <span class="token operator">IN</span> <span class="token string">"rtn_cursor"</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><h3 id="StoredProcedure"><a href="#StoredProcedure" class="headerlink" title="StoredProcedure"></a>StoredProcedure</h3><p>스프링 JDBC의 GenericStoredProcedure는 RDBMS에서 지원하는 스토어드 프로시저를 호출할 수 있도록 구현된 클래스입니다. 아래와 같이 스토어드 함수명을 지정하여 파라미터와 함께 전달하면 프로시저 호출 결과를 가져올 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using GenericStoredProcedure"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithStoredProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setResultsMapCaseInsensitive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">GenericStoredProcedure</span> storedProcedure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericStoredProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">declareParameter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlOutParameter</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>REF_CURSOR<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    storedProcedure<span class="token punctuation">.</span><span class="token function">declareParameter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> inParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> results <span class="token operator">=</span> storedProcedure<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>inParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> cursors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> cursor <span class="token operator">:</span> cursors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="SimpleJdbcXXXX"><a href="#SimpleJdbcXXXX" class="headerlink" title="SimpleJdbcXXXX"></a>SimpleJdbcXXXX</h3><p>SimpleJdbcInsert와 SimpleJdbcCall은 JdbcTemplate를 사용하여 몇가지 상황에 대해 효율적으로 처리할 수 있는 방법을 제공합니다. 예를 들어, 한번에 많은 생성 작업이 필요한 경우에 SimpleJdbcInsert를 사용할 수 있고 스토어드 프로시저(Stored Procedure) 또는 스토어드 함수(Stored Function)를 호출하고자 하는 경우에도 SimpleJdbcCall을 사용할 수 있습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using SimpleJdbcCall"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithSimpleJdbcCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    <span class="token class-name">MapSqlParameterSource</span> sqlParameterSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapSqlParameterSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlParameterSource<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJdbcCall</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withFunctionName</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withoutProcedureColumnMetaDataAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">declareParameters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"v_username"</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">returningResultSet</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlParameterSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"rtn_cursor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>GenericStoredProcedure와 비교해서 조금은 코드가 간결함을 확인할 수 있습니다.</p></blockquote><h3 id="JdbcTemplate-1"><a href="#JdbcTemplate-1" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>스프링 JDBC에서 제공하는 클래스가 아니더라도 스토어드 프로시저를 호출할 수 있습니다. JdbcTemplate에서 커넥션을 가져온 후 prepareCall을 사용해서 직접 호출한 결과를 RowMapper로 변환할 수 있습니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Call stored function using connection"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCallFunctionWithConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> functionName <span class="token operator">=</span> <span class="token string">"users$find_by_username"</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CallableStatement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&#123;call %s(?)&#125;"</span><span class="token punctuation">,</span> functionName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PgResultSet</span> pgResultSet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PgResultSet</span><span class="token punctuation">)</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">RowMapperResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowMapperResultSetExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColumnMapRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> extractor<span class="token punctuation">.</span><span class="token function">extractData</span><span class="token punctuation">(</span>pgResultSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>DataClassRowMapper 또는 BeanPropertyRowMapper를 사용해서 더 범용적인 코드를 작성할 수도 있습니다.</p></blockquote><p><a href="https://qr.ae/pvkBiH">저장 프로시저를 사용하는 것에 대한 장점</a>도 존재하기 때문에 애플리케이션에서 저장 프로시저를 호출할 수 있는 방법을 알고 있는 것도 중요합니다. Spring JDBC에 대해서 다루기 때문에 소개하지는 않았지만 JPA 기술 스펙에서도 NamedStoredProcedureQuery와 같이 프로시저를 호출할 수 있도록 지원하고 있습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#jdbc">Spring Docs - Data Access with JDBC</a></li><li><a href="https://www.baeldung.com/jdbc-batch-processing">Batch Processing in JDBC</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Security OAuth2 학습을 위한 샘플 프로젝트를 만들면서 사용하게될 각 모듈에서 필요한 데이터베이스 스키마를 적용하기 위해서 Spring JDBC를 사용한 부분에 대해서 정리해보고자 합니다. 일반적으로 데이터 액세스에 대해서</summary>
      
    
    
    
    
    <category term="JDBC" scheme="https://kdevkr.github.io/tags/JDBC/"/>
    
    <category term="RowMapper" scheme="https://kdevkr.github.io/tags/RowMapper/"/>
    
  </entry>
  
  <entry>
    <title>모드버스 TCP</title>
    <link href="https://kdevkr.github.io/modbus-tcp/"/>
    <id>https://kdevkr.github.io/modbus-tcp/</id>
    <published>2022-09-04T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p>대부분의 IoT 디바이스의 통신에는 MQTT 메시징 프로토콜을 사용하고 있지만 에너지 분야 산업에서 사용하는 필드버스들에서는 Modbus 라는 통신 프로토콜을 사용하여 장비 간 제어를 수행하는데 사용되고 있습니다. 에너지 분야에서 사용하기 위한 시스템인 만큼 각종 산업 장비들이 보유하고 있는 데이터를 시스템으로 수집하기 위해서는 모드버스 TCP 프로토콜을 통해 데이터를 가져와서 더 높은 레벨의 통신 프로토콜인 REST API 또는 MQTT를 사용해야 합니다.</p><h2 id="Modbus-TCP-x2F-IP"><a href="#Modbus-TCP-x2F-IP" class="headerlink" title="Modbus TCP&#x2F;IP"></a>Modbus TCP&#x2F;IP</h2><p>모드버스 프로토콜은 일반적으로 자동화 설비 산업에서 사용되므로 웹 개발자들이 경험할 수 있는 범용적인 통신 프로토콜은 아닙니다. 모드버스 TCP에서는 MBAP(MODBUS Application Protocol) 헤더와 Function Code 그리고 데이터 프레임을 하나로 전달하게 되며 일반적인 소켓 통신과 동일합니다. </p><p>모드버스 프로토콜은 마스터&#x2F;슬레이브 구조이므로 마스터는 슬레이브에서 정의한 메모리 맵 정보를 토대로 데이터를 읽거나 원하는 명령을 수행하도록 메모리의 데이터를 변경할 수 있습니다. 미리 정의된 몇가지의 기능 코드 중에서 03(0x03, Read Holding Registers)과 16(0x10, Wrtie Multiple Registers)를 주로 사용하는 편입니다. </p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'com.ghgande:j2mod:3.1.1'</span></code></pre><p><a href="https://github.com/steveohara/j2mod">steveohara&#x2F;j2mod</a>는 모드버스 TCP에 대해서 마스터와 슬레이브 구성을 모두 지원하는 자바 라이브러리이며 모드버스 <a href="https://github.com/steveohara/j2mod/tree/master/src/test/java/com/ghgande/j2mod/modbus">테스트 예제</a>를 제공하므로 모드버스 통신을 구현하는 것은 그다지 어렵지 않을 것입니다.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>다음은 간단하게 슬레이브에 모드버스 맵을 이미지로 정의하고 마스터에서 정의된 모드버스 맵에 대해서 읽어보는 테스트 예시입니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModbusTCP</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TCP_UNIT_ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Define slave memory map.</span>        <span class="token class-name">SimpleProcessImage</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleProcessImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObservableRegister</span> register <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObservableRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        register<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function">addRegister</span><span class="token punctuation">(</span>register<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Run slave.</span>        <span class="token class-name">ModbusSlave</span> tcpSlave <span class="token operator">=</span> <span class="token class-name">ModbusSlaveFactory</span><span class="token punctuation">.</span><span class="token function">createTCPSlave</span><span class="token punctuation">(</span><span class="token number">502</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tcpSlave<span class="token punctuation">.</span><span class="token function">addProcessImage</span><span class="token punctuation">(</span>TCP_UNIT_ID<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>        tcpSlave<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Run master and connect to slave</span>        <span class="token class-name">ModbusTCPMaster</span> modbusTCPMaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModbusTCPMaster</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">502</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modbusTCPMaster<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modbusTCPMaster<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Register</span><span class="token punctuation">[</span><span class="token punctuation">]</span> registers <span class="token operator">=</span> modbusTCPMaster<span class="token punctuation">.</span><span class="token function">readMultipleRegisters</span><span class="token punctuation">(</span>TCP_UNIT_ID<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"registers, &#123;&#125;"</span><span class="token punctuation">,</span> registers<span class="token punctuation">)</span><span class="token punctuation">;</span>            modbusTCPMaster<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Closes all slaves</span>        <span class="token class-name">ModbusSlaveFactory</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>현재 시스템에서는 AWS IoT 및 SQS 그리고 OpenAPI를 통하여 데이터를 수집할 수 있도록 제공하고 있습니다. 모드버스 통신 프로토콜을 통해 데이터를 수집할 수 있는 애플리케이션을 담당하고 있지는 않으나 간단하게 정리해보았습니다. </p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf">MODBUS Messaging on TCP&#x2F;IP Implementation Guide V1.0b</a></li><li><a href="https://www.youtube.com/watch?v=eb8iophBMLs">모드버스 프로토콜 11부 - 모드버스 TCP(더 넓은 세상으로)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;대부분의 IoT 디바이스의 통신에는 MQTT 메시징 프로토콜을 사용하고 있지만 에너지 분야 산업에서 사용하는 필드버스들에서는 Modbus 라는 통신 프로토콜을 사용하여 장비 간 제어를 수행하는데 사용되고 있습니다. 에너지 분야에서 사용하기 위한 </summary>
      
    
    
    
    
    <category term="Modbus" scheme="https://kdevkr.github.io/tags/Modbus/"/>
    
    <category term="TCP/IP" scheme="https://kdevkr.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>유닉스 타임스탬프와 시간 정밀도</title>
    <link href="https://kdevkr.github.io/unix-timestamp/"/>
    <id>https://kdevkr.github.io/unix-timestamp/</id>
    <published>2022-09-01T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.147Z</updated>
    
    <content type="html"><![CDATA[<p>각 나라에서 사용하는 표준 시간은 다르고 동일한 나라에서도 여러가지 시간 기준이 존재합니다. 그러나, 개발자들은 사람마다 다른 시간을 그대로 사용할 수 없으며 전세계적으로 사용되는 표준 시간으로 정의된 것을 따라야합니다. 세계협정시라고 부르는 UTC는 1970년 1월 1일을 기준으로 산정한 시간으로 보통 유닉스 시간 또는 유닉스 타임스탬프라고 합니다.</p><h3 id="유닉스-시간"><a href="#유닉스-시간" class="headerlink" title="유닉스 시간"></a>유닉스 시간</h3><p>기본적으로 타임스탬프에 대해서 초 단위로 세어지는 정수로 표현한 값을 유닉스 시간(Unix Epoch) 또는 유닉스 타임스탬프라고 합니다. PostgreSQL 에서는 타임스탬프 유형의 컬럼에 대해서 EPOCH 키워드를 통해서 초 단위로 환산된 유닉스 시간을 추출할 수 있도록 지원합니다.</p><ul><li><a href="https://www.epoch101.com/#epochConvertToReadable-Container">Convert Epoch&#x2F;Unix Timestamp</a></li><li><a href="https://it-tools.tech/date-converter">Date-time converter</a></li></ul><h3 id="타임스탬프-정밀도"><a href="#타임스탬프-정밀도" class="headerlink" title="타임스탬프 정밀도"></a>타임스탬프 정밀도</h3><p>유닉스 시간이 정의되고 시간이 흘러 현재는 타임스탬프가 초 단위가 아닌 밀리고 그리고 심지어는 나노초 까지의 단위로 타임스탬프 정밀도를 지원하게 됩니다. 사용하는 언어 또는 외부 솔루션에 따라서 정밀도 표현 지원이 다르며 심지어 시계열 데이터베이스인 KDB+ 에서의 <a href="https://code.kx.com/q4m3/2_Basic_Data_Types_Atoms/#25-temporal-data">시간 유형</a>은 1970년 1월 1일이 아닌 2000년 1월 1일을 기준의 나노초 정밀도를 가지는 타임스탬프를 지원합니다.</p><pre class="language-q" data-language="q"><code class="language-q"><span class="token datetime number">2000.01.01</span><span class="token verb operator">=</span><span class="token number">0</span><span class="token number">1b</span><span class="token punctuation">.</span>z<span class="token punctuation">.</span>p<span class="token datetime number">2022.09.01</span>D<span class="token datetime number">21:38:52.940</span><span class="token number">328000</span></code></pre><p>타임스탬프를 스칼라 실수로 변환해보면 나노초 단위로 세어진 정수값으로 표현되므로 다른 시스템과 연계하기 위해 1970년 1월 1일 부터의 밀리초 단위로 세어지는 정수값으로 환산할 수 있습니다. (1 나노초는 10^6 밀리초 입니다.)</p><pre class="language-q" data-language="q"><code class="language-q"><span class="token keyword">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token symbol">`long</span><span class="token verb operator">$</span><span class="token datetime number">2022.09.01</span>D<span class="token datetime number">21:38:52.940</span><span class="token number">328000</span><span class="token punctuation">)</span><span class="token verb operator">-</span><span class="token symbol">`long</span><span class="token verb operator">$</span><span class="token datetime number">1970.01.01</span>D<span class="token datetime number">00:00</span><span class="token punctuation">)</span><span class="token verb operator">%</span><span class="token number">1e6</span><span class="token number">1662068332940</span></code></pre><p>현재 조직에서는 초 단위의 유닉스 시간이 아닌 밀리초로 환산한 정수값을 토대로 타임스탬프에 대한 데이터를 시스템 간 전달하고 있습니다. 대부분의 시스템은 여러가지 언어로 작성된 애플리케이션과 외부 솔루션과의 연계를 수행하며 동작하게 되므로 각 시스템에서 지원하는 타임스탬프의 정밀도 표현 차이로 인해서 약간의 차이가 발생할 수 있음을 고려해야할 수 있습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;각 나라에서 사용하는 표준 시간은 다르고 동일한 나라에서도 여러가지 시간 기준이 존재합니다. 그러나, 개발자들은 사람마다 다른 시간을 그대로 사용할 수 없으며 전세계적으로 사용되는 표준 시간으로 정의된 것을 따라야합니다. 세계협정시라고 부르는 U</summary>
      
    
    
    
    
    <category term="Unix Timestamp" scheme="https://kdevkr.github.io/tags/Unix-Timestamp/"/>
    
    <category term="Unix Epoch" scheme="https://kdevkr.github.io/tags/Unix-Epoch/"/>
    
  </entry>
  
  <entry>
    <title>엘라스틱서치 인덱스</title>
    <link href="https://kdevkr.github.io/elasticsearch-indices/"/>
    <id>https://kdevkr.github.io/elasticsearch-indices/</id>
    <published>2022-08-21T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.139Z</updated>
    
    <content type="html"><![CDATA[<p>현재 조직의 주요 솔루션은 엘라스틱서치 1.6을 기반으로 동작하며 여러개의 노드로 구성되는 엘라스틱서치 클러스터로 운용하고 있습니다. 그러나, 제가 담당하여 개발중인 신규 시스템은 시계열 데이터를 저장하기 위한 시계열 데이터베이스를 사용중이므로 엘라스틱서치에 시계열 데이터와 같은 대규모 데이터 및 안전하게 운용되어야하는 가용성이 요구되지 않으므로 단일 노드 클러스터로 사용하고 있습니다.</p><p>싱글 노드 클러스터로 운용되는 엘라스틱서치에는 시스템에서 발생하는 특정 정보에 대한 로그 데이터를 개별 단일 인덱스에 저장하고 있으며 엘라스틱서치로부터 정해진 인덱스에 저장되는 도큐먼트를 조회하기 때문에 엘라스틱서치가 지원하는 여러가지 쿼리를 활용할 경험은 많지 않은 것은 아쉬운 부분이긴 합니다.</p><blockquote><p>시계열 데이터는 엘라스틱서치가 아닌 별도의 <a href="https://kx.com/developers/">시계열 데이터베이스</a>에 저장하고 통계 정보를 쿼리하고 있습니다.</p></blockquote><h2 id="인덱스-관련-트러블슈팅"><a href="#인덱스-관련-트러블슈팅" class="headerlink" title="인덱스 관련 트러블슈팅"></a>인덱스 관련 트러블슈팅</h2><p>대규모 노드로 구성된 엘라스틱서치 클러스터를 운용하지 않더라도 인덱스와 관련된 여러가지 문제들을 간간히 경험해보긴 했습니다. 오히려 엘라스틱서치가 고 가용성으로 운영되지 않아서 발생하는 문제로 봐야할 것 같습니다. </p><h3 id="동적-매핑-필드-제한"><a href="#동적-매핑-필드-제한" class="headerlink" title="동적 매핑 필드 제한"></a>동적 매핑 필드 제한</h3><p>조직의 기존 솔루션이 엘라스틱서치를 주요 데이터베이스로 활용했더라도 주 개발자들이 현재 개발중인 시스템에 참여한 것은 아니고 저는 조직의 신입일 때 참여했으므로 엘라스틱서치에 대해 대략적인 개념조차 모르던 시기였습니다. 시스템의 요구 사항과 설계가 명확하지 않았기에 엘라스틱서치에서 기본적으로 제공하는 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#mapping-dynamic">동적 필드 매핑</a>을 통해 개발자가 별도로 관리하지 않아도 도큐먼트에 대한 각 필드들을 자동으로 매핑하는 상태로 시스템에서 발생하는 일부 정보의 변화들을 로그로 저장하였습니다.</p><blockquote><p>limit of total fields 1000 has been exceeded</p></blockquote><p>위 문제는 동적 필드 매핑으로 만들어지는 인덱스에 여러가지 필드가 저장되어질때 확인할 수 있는 오류입니다. 엘라스틱서치에 저장되도록한 로그 중에서 다양하게 필드가 변경될 수 있는 메타데이터 오브젝트가 포함되었고 점점 다양한 키 값이 추가되면서 엘라스틱서치는 동적 매핑에 의해 메타데이터 키에 대한 필드 매핑을 추가하여 매핑 정보가 점차 늘어나서 제한량까지 넘어서게 되는 상황이 발생한 것 입니다.</p><p>이 문제에 대해서는 임시적으로 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#mapping-limit-settings">인덱스에 대해 필드 제한 수를 조정</a>하여 조치할 수 있으나 메타데이터 오브젝트가 다양하게 추가되면 다시 발생할 수 있으므로 근본적인 해결책은 아닙니다. 그래서 해당 현상이 발견되는 인덱스에 대해서는 동적 매핑에 의해 추가된 매핑 정보를 확인하여 계속해서 매핑 정보가 만들어질 수 있는 필드를 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/enabled.html">단순히 저장만하도록</a> 매핑 정보를 부여하고 재 인덱스를 수행해야만 했습니다.</p><h3 id="도큐먼트-삭제"><a href="#도큐먼트-삭제" class="headerlink" title="도큐먼트 삭제"></a>도큐먼트 삭제</h3><p>단일 노드의 엘라스틱서치 클러스터이므로 단일 인덱스에 너무 많은 도큐먼트가 저장되면 성능에 문제가 될 수 있습니다. 심지어는 엘라스틱서치 7부터 인덱스에 대한 프라이머리 샤드의 기본값이 1 이었던 부분으로 인하여 인덱스의 하나의 샤드가 너무 많은 도큐먼트를 저장하고 있는 구조가 되어버렸습니다.</p><p>특정 인덱스에 저장되는 도큐먼트가 너무 많아졌고 심지어는 오래된 도큐먼트가 불필요하게 남아있었기에 일정 기간이 지난 도큐먼트는 지우도록 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html">_delete_by_query</a>를 사용해서 스케줄에 의해 엘라스틱서치 클러스터에 지우도록 요청해두었습니다. 그러나, <a href="https://ridicorp.com/story/index-aliases/">Elasticsearch의 색인 별명 활용 팁</a>에 나와있는 것처럼 엘라스틱서치 클러스터에서는 도큐먼트를 실제로 삭제하는 것은 아닌 부분으로 인하여 오히려 엘라스틱서치 클러스터의 인덱스의 용량이 일시적으로 늘어나게 되는 문제를 가져가게 됩니다. </p><blockquote><p>디스크 볼륨을 증설할 수 있다고 해도 서버 용량에 민감할 수 밖에 없습니다.</p></blockquote><h3 id="일자별-인덱스-조회"><a href="#일자별-인덱스-조회" class="headerlink" title="일자별 인덱스 조회"></a>일자별 인덱스 조회</h3><p>도큐먼트 삭제가 용이하지 않은 단일 인덱스의 문제를 해소하기 위해서 특정 로그에 대해서는 일자별로 저장되도록 적용해야했습니다. 단일 인덱스로 저장하던걸 일자별로 저장하는 것은 인덱스 명에 저장되는 시점의 날짜 포맷(yyyyMMdd)을 추가하면 되기에 어려움은 없었습니다. 해당 작업에 대해 검토하던 중 인덱스에 대한 조회 기능에 일부 사이드 이펙트가 발생할 수 있음을 확인하였습니다.</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API</a>에 대해서는 인덱스 패턴에 대해서 조회할 수 있도록 지원합니다만, 특정 도큐먼트에 대한 아이디를 기준으로 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#docs-get-api-request">Get API</a>를 사용하기 위해서는 인덱스 명을 알아야만 합니다. 심지어는 여러개의 인덱스에 대해서 조회할 수 있는 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html">Mget API</a>도 조회하고자 하는 인덱스들의 이름을 나열해야했기에 인덱스 패턴에 대해 인덱스 목록을 조회하고 여러개의 인덱스에 걸쳐 병렬 조회할 수 있도록 아래와 같이 변경해야 했습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// NOTE: 인덱스 패턴에 의한 실제 인덱스 목록 조회</span><span class="token class-name">GetIndexRequest</span> getIndexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"oauth_log*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GetIndexResponse</span> getIndexResponse <span class="token operator">=</span> highLevelClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getIndexRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indices <span class="token operator">=</span> getIndexResponse<span class="token punctuation">.</span><span class="token function">getIndices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NOTE: 여러개의 인덱스에 걸쳐 병렬 조회</span><span class="token class-name">MultiGetRequest</span> multiGetRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiGetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> index <span class="token operator">:</span> indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    multiGetRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">"c70e49fa-d0f4-4278-a271-a46f688349f6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MultiGetResponse</span> multiGetResponse <span class="token operator">=</span> highLevelClient<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span>multiGetRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MultiGetItemResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responses <span class="token operator">=</span> multiGetResponse<span class="token punctuation">.</span><span class="token function">getResponses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultiGetItemResponse</span> response <span class="token operator">:</span> responses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> index <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; in &#123;&#125;, &#123;&#125;"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> index<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>일자별 인덱스에 있는 도큐먼트의 아이디가 충돌하지 않는다는 것을 보장할 때를 기준으로 합니다.</p></blockquote><p>최근 인덱스와 관련된 작업을 하고 있어서 여태까지 경험했던 문제에 대해서 작성해보았습니다. 인덱스 관리와 관련해서 사용중이던 엘라스틱서치 버전을 7.3.2에서 7.12.1로 변경하는 작업을 진행하고 있으며 이와 더불어 엘라스틱서치와 함께 키바나를 활용해서 더 효율적으로 인덱스를 관리할 수 있는 방안에 대해서 공부해보고 있습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;현재 조직의 주요 솔루션은 엘라스틱서치 1.6을 기반으로 동작하며 여러개의 노드로 구성되는 엘라스틱서치 클러스터로 운용하고 있습니다. 그러나, 제가 담당하여 개발중인 신규 시스템은 시계열 데이터를 저장하기 위한 시계열 데이터베이스를 사용중이므로 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>키바나에서 엘라스틱서치 클러스터로 연결할 수 없음</title>
    <link href="https://kdevkr.github.io/kibana-cannot-connect-elasticsearch/"/>
    <id>https://kdevkr.github.io/kibana-cannot-connect-elasticsearch/</id>
    <published>2022-08-18T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/kibana-cannot-connect-elasticsearch/01.png"></p><p>AWS EC2 인스턴스에 설치된 엘라스틱서치에 대해 키바나를 설치하고 실행하니 위와 같이 엘라스틱서치 클러스터에 연결할 수 없다는 화면이 노출되었습니다. 회사에서 이 문제에 대해 머리를 싸매면서 여러가지를 시도해보았으나 해결되지 않았고 집에와서 쉬는 김에 이와 관련된 정보를 검색해보면서 여러가지 확인 끝에 원인을 찾아내어 이 글을 작성합니다.</p><h2 id="키바나-응답-페이로드"><a href="#키바나-응답-페이로드" class="headerlink" title="키바나 응답 페이로드"></a>키바나 응답 페이로드</h2><blockquote><p>This Kibana installation has strict security requirements enabled that your current browser does not meet.</p></blockquote><p>먼저, 웹 페이지 화면에서는 엘라스틱서치 클러스터에 연결할 수 없다는 내용의 메시지였지만 실제로 키바나로부터 받은 응답 페이로드를 확인해보니 <a href="https://www.elastic.co/guide/en/kibana/current/Security-production-considerations.html#csp-strict-mode">Content Security Policy</a> 관련된 오류 내용이었습니다. 그리고 크롬 개발자 도구 콘솔에는 아래와 같은 오류 로그도 표시됨을 확인했습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">Refused to execute inline script because it violates the following Content Security Policy directive: <span class="token string">"script-src 'unsafe-eval' 'nonce-LQ+1u6/j7+lb3KNy'"</span><span class="token builtin class-name">.</span>Either the <span class="token string">'unsafe-inline'</span> keyword, a <span class="token builtin class-name">hash</span> <span class="token punctuation">(</span><span class="token string">'sha256-SHHSeLc0bp6xt4BoVVyUy+3IbVqp3ujLaR+s+kSP5UI='</span><span class="token punctuation">)</span>, or a nonce <span class="token punctuation">(</span><span class="token string">'nonce-...'</span><span class="token punctuation">)</span> is required to <span class="token builtin class-name">enable</span> inline execution.  </code></pre><h3 id="CSP-비활성화-시도"><a href="#CSP-비활성화-시도" class="headerlink" title="CSP 비활성화 시도"></a>CSP 비활성화 시도</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">csp.strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>엘라스틱서치 클러스터에 연결할 수 없는 사유인지 다른 문제인지를 판단할 수 없어서 CSP를 비활성화 해보았습니다. 그러나, CSP 비활성화 후에도 키바나에서는 동일하게 엘라스틱서치 클러스터에 연결할 수 없다고 표시되었기에 이로 인한 문제는 아님을 확인할 수 있었습니다.</p><h2 id="키바나-로그"><a href="#키바나-로그" class="headerlink" title="키바나 로그"></a>키바나 로그</h2><p>사실 키바나에서 엘라스틱서치 클러스터에 연결할 수 없다는 메시지를 보고나서는 엘라스틱서치와 키바나의 설정 파일의 문제가 아닐까 여러가지 살펴보았지만 다른 환경에서 사용중인 설정과 다를바가 없었기에 키바나 로그를 확인해야 했습니다.</p><h3 id="Chromium-with-headless-shell"><a href="#Chromium-with-headless-shell" class="headerlink" title="Chromium with headless_shell"></a>Chromium with headless_shell</h3><blockquote><p>Reporting plugin self-check generated a warning: Error: Could not close browser client handle</p></blockquote><p>가장 먼저 의심스러운 위 로그에 대해 검색해보니 <a href="https://github.com/elastic/kibana/issues/53829">kibana&#x2F;issues&#x2F;53829</a>에서 샌드박스 옵션을 설정한 것을 보고 시도해보았습니다.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">xpack.reporting.capture.browser.chromium.disableSandbox</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>위 조치와 함께 EC2에 노드와 크로미움 패키지를 직접 설치까지 해보았지만 위 문제가 해소되지 않았습니다.</p><h3 id="플러그인-로그"><a href="#플러그인-로그" class="headerlink" title="플러그인 로그"></a>플러그인 로그</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">[</span>plugin:xpack_main@7.3.2<span class="token punctuation">]</span> Status changed from yellow to red - <span class="token punctuation">[</span>data<span class="token punctuation">]</span> Elasticsearch cluster did not respond with license information.</code></pre><p>집에와서 키바나 로그를 좀 더 자세히 살펴보니 위와 같은 오류 로그가 발생하는 것을 확인하였습니다. 사실 회사에서는 플러그인 오류이므로 키바나에서 엘라스틱서치 클러스터에 연결할 수 없는 사유와는 상관없다고 판단했었습니다. 왜냐하면 엘라스틱서치에 키바나 관련 인덱스까지는 만들어지므로 엘라스틱서치 클러스터와 통신이 되는 상황이라고 생각할 수 밖에 없었을테니까요.</p><p>아무튼 위 로그에 대해서 검색해보니 <a href="https://github.com/elastic/kibana/issues/36079">kibana&#x2F;issues&#x2F;36079</a>에 라이센스 정보를 확인하는 댓글이 눈에 들어왔고 라이센스 정보를 확인해보았습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ec2-user ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> http://localhost:9200/_xpack/license?pretty<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><blockquote><p>사실 라이센스가 없다고 생각하지는 않았고 혹시나 트라이얼 라이센스인데 만료되어서 그런 것인가라고 생각되 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/license-settings.html">License Settings</a>에 나와있는대로 베이직 라이센스 유형을 지정하고 클러스터를 다시 실행하였지만 증상을 동일했습니다. </p></blockquote><p>그러나, 정말로 엘라스틱서치에는 라이센스 정보가 없었고 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/start-basic.html">Start basic API</a>를 통해 베이직 라이센스를 시작할 수 있다고 하여 아래와 같이 라이센스를 추가하였습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ec2-user ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> -X POST http://localhost:9200/_license/start_basic?pretty<span class="token punctuation">&#123;</span>  <span class="token string">"acknowledged"</span> <span class="token builtin class-name">:</span> true,  <span class="token string">"basic_was_started"</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>ec2-user ~<span class="token punctuation">]</span>$ <span class="token function">curl</span> http://localhost:9200/_xpack/license?pretty<span class="token punctuation">&#123;</span>  <span class="token string">"license"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"status"</span> <span class="token builtin class-name">:</span> <span class="token string">"active"</span>,    <span class="token string">"uid"</span> <span class="token builtin class-name">:</span> <span class="token string">"fb6a45f5-4f26-45fe-9889-2380b9ec8801"</span>,    <span class="token string">"type"</span> <span class="token builtin class-name">:</span> <span class="token string">"basic"</span>,    <span class="token string">"issue_date"</span> <span class="token builtin class-name">:</span> <span class="token string">"2022-08-18T14:51:26.602Z"</span>,    <span class="token string">"issue_date_in_millis"</span> <span class="token builtin class-name">:</span> <span class="token number">1660834286602</span>,    <span class="token string">"max_nodes"</span> <span class="token builtin class-name">:</span> <span class="token number">1000</span>,    <span class="token string">"issued_to"</span> <span class="token builtin class-name">:</span> <span class="token string">"cluster"</span>,    <span class="token string">"issuer"</span> <span class="token builtin class-name">:</span> <span class="token string">"elasticsearch"</span>,    <span class="token string">"start_date_in_millis"</span> <span class="token builtin class-name">:</span> -1  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img data-src="/images/posts/kibana-cannot-connect-elasticsearch/02.png"></p><p>엘라스틱서치 클러스터에 베이직 라이센스 정보가 있으므로 키바나에서는 더이상 플러그인 오류가 발생하지 않았으며 키바나 주소로 다시 접속하니 엘라스틱서치 클러스터에 연결할 수 없다는 메시지는 더이상 표시되지 않았습니다. 이로써 키바나에서 엘라스틱서치 클러스터로 연결한다는 의미는 X-Pack 플러그인에 대한 라이센스 정보를 확인한다는 점으로 이해할 수 있을 것 같습니다. 엘라스틱서치 클러스터가 만료된 트라이얼 라이센스를 가지고 있더라도 키바나 또는 Start basic API를 통해 베이직 라이센스로 전환할 수 있습니다. 따라서, 키바나를 실행하고나서 엘라스틱서치 클러스터에 연결할 수 없다는 의미의 메시지를 확인하다면 클러스터에 라이센스 정보가 있는지 확인해보시기 바랍니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/kibana-cannot-connect-elasticsearch/01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS EC2 인스턴스에 설치된 엘라스틱서치에 대해 키바나를 설치하고 실행하니 위와 같이 엘라스틱서치</summary>
      
    
    
    
    
    <category term="Basic License" scheme="https://kdevkr.github.io/tags/Basic-License/"/>
    
  </entry>
  
  <entry>
    <title>Tracing Handshake Websocket With Undertow</title>
    <link href="https://kdevkr.github.io/undertow-websocket-tracing/"/>
    <id>https://kdevkr.github.io/undertow-websocket-tracing/</id>
    <published>2022-08-12T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.147Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Handshake failed due to invalid Upgrade header: null</p></blockquote><p>본 글은 위와 같은 웹 소켓 연결 시에 애플리케이션 오류 로그가 발생한 건에 대한 관련 내용을 기록하기 위한 것 입니다. 이 오류 로그는 스프링 웹 소켓 모듈에서 DefaultHandshakeHandler를 통해 핸드쉐이크를 수행하는 과정에서 올바르지 않은 웹 소켓 연결에 대해 오류 로그로 기록하도록 되어있는데 Upgrade 헤더에 올바르지 않은 값이 전달되었다는 의미입니다.</p><blockquote><p>Connection: Upgrade<br>Upgrade: websocket</p></blockquote><p>일반적으로 웹 소켓 연결은 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol upgrade mechanism</a>으로 HTTP 통신에 대해 커넥션을 전환하는 과정을 거치게 되는데 서버에서는 웹소켓 엔드포인트에 해당하는 요청에 대해서는 Upgrade 헤더를 확인하고 websocket 이 전달되었는지를 확인합니다.</p><h2 id="웹소켓-프록시"><a href="#웹소켓-프록시" class="headerlink" title="웹소켓 프록시"></a>웹소켓 프록시</h2><p>시스템이 동작하는 인프라 환경은 AWS 클라우드 서비스로 구성되어 있습니다. 일반적으로 로드밸런싱을 위해서 사용하는 <a href="https://aws.amazon.com/ko/elasticloadbalancing/features/#Product_comparisons">Elastic Load Balancing 기능</a>에 따르면 ALB, NLB 모두 웹소켓을 지원한다고 되어있으므로 웹소켓 연결에 제한적인 환경은 아닙니다. 현재 조직에서 플랫폼으로써 제공하는 환경은 EC 키 기반의 인증서의 제약사항으로 NLB를 사용해서 TCP 프록시를 수행하고 SSL 오프로드는 Nginx에서 수행한 후 애플리케이션 서버로 트래픽이 전달되는 구조입니다.</p><p>다만, 위 문제가 발생했다고 안내된 특정 고객이 직접 구성하는 환경에서는 ELB 레벨에서 SSL 오프로드를 수행한 후의 트래픽만 Nginx로 전달되어 애플리케이션 서버로 프록시되므로 약간의 요청이 전달되는 방식이 다릅니다. 따라서, ELB 레벨에서 트래픽을 전달하는 과정에서 Upgrade 헤더가 유실될 가능성도 의심해볼 수 있습니다. </p><blockquote><p>각 환경의 Nginx에는 <a href="http://nginx.org/en/docs/http/websocket.html">Upgarde 헤더에 대한 프록시 구성</a>에 따라 Upgarde 헤더 값을 애플리케이션으로 전달되도록 $http_upgrade 변수가 설정되어 있습니다.</p></blockquote><h3 id="타임아웃"><a href="#타임아웃" class="headerlink" title="타임아웃"></a>타임아웃</h3><p>일반적으로 AWS 클라우드 환경에서 ELB를 사용할 때 웹소켓 연결 문제가 발생할 수 있습니다. 이는 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes">ELB 로드밸런서 속성</a>의 idle_timeout.timeout_seconds 기본값이 60초 이어서 발생하는 부분에 대해서는 타임아웃을 90초로 설정되어 웹 소켓 연결에 대한 부분은 정상적으로 유지하는 상태입니다.</p><blockquote><p>클라이언트의 초기 연결을 제외하고는 서버에서 1분마다 스케줄에 의해 어떠한 메시지를 전달하는데 서버가 전달하는 타이밍 상 60초 이내에 전달되는 트래픽이 없다고 판단되어 연결이 해지될 수 있습니다.</p></blockquote><h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><p>일반적인 웹 요청은 HTTP2로 연결될 수 있도록 지원하고 있는데 웹소켓에 대한 연결에 대해서는 HTTP 1.1의 업그레이드 매커니즘을 사용해야 합니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">curl --include \     --no-buffer \     --http1.1 \     --location \     --header &quot;Connection: Upgrade&quot; \     --header &quot;Upgrade: websocket&quot; \     --header &quot;Host: example.com&quot; \     --header &quot;Origin: https:&#x2F;&#x2F;example.com&quot; \     --header &quot;Sec-WebSocket-Key: SGVsbG8sIHdvcmxkIQ&#x3D;&#x3D;&quot; \     --header &quot;Sec-WebSocket-Version: 13&quot; \     https:&#x2F;&#x2F;example.com&#x2F;websocket&#x2F;server&#x2F;sessionid&#x2F;websocket</code></pre><p>그런데 위 cURL 명령어에서 –http1.1 옵션을 제외하면 Upgarde 헤더에 websocket에 전달되지 않는 상황이 발생함을 확인하였습니다. 결국 일반적인 브라우저를 통한 요청이 아니라 특정 클라이언트가 직접 웹소켓 연결을 시도할 가능성도 있다는 이야기 입니다.</p><blockquote><p><a href="https://github.com/websockets/wscat">wscat</a> 또는 <a href="https://learning.postman.com/docs/sending-requests/websocket/websocket/">postman</a> 으로도 웹 소켓 연결을 시도해보았지만 정상적으로 연결됨을 확인할 수 있었습니다.</p></blockquote><h2 id="스프링-웹-소켓"><a href="#스프링-웹-소켓" class="headerlink" title="스프링 웹 소켓"></a>스프링 웹 소켓</h2><p>시스템 입장에서는 올바르지 않은 웹소켓 연결이 요청되는 부분이므로 해당 오류 로그만으로는 어떻게 요청되었는가를 검토할 수 있는 방안이 없습니다. 스프링 웹 소켓 모듈에서 요청 정보를 기록할 수 있는 방안을 찾아보도록 합시다. </p><h3 id="RequestUpgradeStrategy"><a href="#RequestUpgradeStrategy" class="headerlink" title="RequestUpgradeStrategy"></a>RequestUpgradeStrategy</h3><p>RequestUpgradeStrategy는 HTTP 요청에 대해서 웹 소켓 연결로 업그레이드하기 위한 전략이며 언더토우를 사용하고 있다면 UndertowRequestUpgradeStrategy가 사용됩니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestUpgradeStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">UndertowRequestUpgradeStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">upgradeInternal</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> selectedProtocol<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Extension</span><span class="token punctuation">></span></span> selectedExtensions<span class="token punctuation">,</span> <span class="token class-name">Endpoint</span> endpoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HandshakeFailureException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: 핸드쉐이크 과정에서 검증된 요청에 대해서 업그레이드를 수행한다.</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">upgradeInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> selectedProtocol<span class="token punctuation">,</span> selectedExtensions<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>위 처럼 업그레이드를 수행하는 과정에서 요청과 응답에 대해 부가 처리를 수행할 수 있습니다만 DefaultHandshakeHandler 라는 클래스에서 upgradeInternal 함수가 호출되는 위치를 살펴보면 웹 소켓 연결 요청에 대해서 검증을 수행하고나서 마지막에 upgradeInternal 함수가 호출되므로 본 문제가 발생했을때는 요청 정보를 파악할 수 없습니다.</p><h3 id="DefaultHandshakeHandler"><a href="#DefaultHandshakeHandler" class="headerlink" title="DefaultHandshakeHandler"></a>DefaultHandshakeHandler</h3><p>DefaultHandshakeHandler는 스프링 웹 소켓 모듈에서 기본적으로 사용하는 웹 소켓 연결을 수행하는 핸들러로 HandshakeHandler로 등록된 빈이 없다면 내부적으로 DefaultHandshakeHandler를 생성하여 사용하도록 되어있습니다. 앞서 RequestUpgradeStrategy를 이용할 수 없는 이유를 확인하기 위해 핸드쉐이크를 수행하는 코드를 살펴보도록 하겠습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHandshakeHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HandshakeHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">doHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span><span class="token class-name">WebSocketHandler</span> wsHandler<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HandshakeFailureException</span> <span class="token punctuation">&#123;</span><span class="token class-name">WebSocketHttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketHttpHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Processing request "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" with headers="</span> <span class="token operator">+</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET <span class="token operator">!=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>METHOD_NOT_ALLOWED<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAllow</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Handshake failed due to unexpected HTTP method: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"WebSocket"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">getUpgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleInvalidUpgradeHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Upgrade"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"upgrade"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleInvalidConnectHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isWebSocketVersionSupported</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleWebSocketVersionNotSupported</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidOrigin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> wsKey <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getSecWebSocketKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>wsKey <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Missing \"Sec-WebSocket-Key\" header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HandshakeFailureException</span><span class="token punctuation">(</span><span class="token string">"Response update failed during upgrade to WebSocket: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> subProtocol <span class="token operator">=</span> <span class="token function">selectProtocol</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">getSecWebSocketProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wsHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketExtension</span><span class="token punctuation">></span></span> requested <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getSecWebSocketExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketExtension</span><span class="token punctuation">></span></span> supported <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestUpgradeStrategy<span class="token punctuation">.</span><span class="token function">getSupportedExtensions</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketExtension</span><span class="token punctuation">></span></span> extensions <span class="token operator">=</span> <span class="token function">filterRequestedExtensions</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> requested<span class="token punctuation">,</span> supported<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Principal</span> user <span class="token operator">=</span> <span class="token function">determineUser</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> wsHandler<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Upgrading to WebSocket, subProtocol="</span> <span class="token operator">+</span> subProtocol <span class="token operator">+</span> <span class="token string">", extensions="</span> <span class="token operator">+</span> extensions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestUpgradeStrategy<span class="token punctuation">.</span><span class="token function">upgrade</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> subProtocol<span class="token punctuation">,</span> extensions<span class="token punctuation">,</span> user<span class="token punctuation">,</span> wsHandler<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>AbstractHandshakeHandler 클래스에 대해 로그 레벨을 Trace로 설정하면 요청 정보를 로그로 기록할 수 있지만 모든 요청에 대해서 기록하므로 문제가 발생했을때만 요청 정보를 남길 수 없습니다.</p></blockquote><h4 id="AbstractHandshakeHandler-handleInvalidUpgradeHeader"><a href="#AbstractHandshakeHandler-handleInvalidUpgradeHeader" class="headerlink" title="AbstractHandshakeHandler.handleInvalidUpgradeHeader"></a>AbstractHandshakeHandler.handleInvalidUpgradeHeader</h4><p>앞서 doHandshake 함수를 살펴본 결과 Upgrade 헤더에 올바르지 않은 값이 전달되는 경우에는 handleInvalidUpgradeHeader 함수를 호출하는 것을 확인할 수 있습니다. 이제 우리는 handleInvalidUpgradeHeader 함수를 오버라이드 하여 요청 정보를 확인하고 오류 로그로 기록할 수 있는 위치를 알게 되었습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHandshakeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultHandshakeHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleInvalidUpgradeHeader</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// NOTE: Upgrade 헤더에 올바르지 않은 값이 전달되었을때 호출된다.</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Method: &#123;&#125;, URI: &#123;&#125;, Principal: &#123;&#125;, Headers: &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethodValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleInvalidUpgradeHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>애플리케이션 레벨에서는 Upgrade 헤더에 올바르지 않은 값이 전달되는 경우에 대해서 원인을 파악하기는 어렵습니다. 그럼에도 불구하고 본 문제가 다시 발생했을 때 어떤 정보로 요청되었는지에 대한 로그가 기록되었으므로 원인 파악을 위한 실마리를 찾을 수 있는 방안을 마련할 수 있게 됩니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">Protocol upgrade mechanism</a></li><li><a href="https://aws.amazon.com/ko/elasticloadbalancing/features/#Product_comparisons">Elastic Load Balancing 기능</a></li><li><a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Handshake failed due to invalid Upgrade header: null&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;본 글은 위와 같은 웹 소켓 연결 시에 애플리케이션 오류 로그가 발생한 건에 대한 관련 내</summary>
      
    
    
    
    
    <category term="Undertow" scheme="https://kdevkr.github.io/tags/Undertow/"/>
    
    <category term="WebSocket" scheme="https://kdevkr.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Trace OAuth Requests</title>
    <link href="https://kdevkr.github.io/trace-oauth-requests/"/>
    <id>https://kdevkr.github.io/trace-oauth-requests/</id>
    <published>2022-08-10T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Failed to find access token</p></blockquote><p>OAuth API 요청 시 JdbcTokenStore에서 액세스 토큰을 찾을 수 없을 때 기록되는 INFO 레벨의 로그 입니다. 액세스 토큰을 찾을 수 없다는 이야기는 올바르지 않은 요청인데도 불구하고 INFO 레벨로 되어있는 부분에 대해서는 의아하긴 합니다만 위 정보만으로는 어떤 토큰에 의해서 어떠한 OAuth API에 대해 요청되었는지를 확인할 수 없습니다.</p><p>일반적으로 인프라 레벨에서 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/load-balancer-access-logs.html">ELB</a> 또는 <a href="https://docs.nginx.com/nginx/admin-guide/monitoring/logging/#setting-up-the-access-log">Nginx</a>와 같은 프록시 단계에서 액세스 로그를 남기는데 대부분의 액세스 로그에서는 요청 헤더 정보를 상세하게 기록하지 않고 간결하게 남기도록 설정되므로 토큰 정보가 포함되는 Authorization 헤더를 확인할 수 없습니다.</p><h2 id="Bearer-Authentication"><a href="#Bearer-Authentication" class="headerlink" title="Bearer Authentication"></a>Bearer Authentication</h2><p>현재 시스템은 Spring Security OAuth 모듈을 통해 JDBC 기반의 Opaque 토큰으로 되어있는 Bearer 인증을 지원하는 OpenAPI를 제공하고 있습니다. 그러나, 일부 사용자들이 IoT 디바이스를 구현 시 OpenAPI를 사용할 때 잘못된 토큰을 사용하는 문제가 사업팀으로부터 리포트 되었는데 단순하게 잘못된 액세스 토큰이 전달되었다는 로그에 대해서 원인 파악을 요구하는데 불구하고 파악할 수 있는 정보가 남아있지 않았습니다.</p><p>사실 OpenAPI의 각 핸들러로 전달되는 부분에 대해서는 AOP가 적용되어 핸들러에 대한 파라미터 들과 클라이언트 아이디와 토큰 정보를 이미 엘라스틱서치에 API 로그로 저장하고 있었습니다. 다만 문제는 잘못된 토큰에 대한 요청은 스프링 시큐리티 필터 체인에 의해서 핸들러까지 진입하기 전에 오류 응답으로 처리되었기에 API 로그가 남지 않았다는 것이 파악되었습니다.</p><blockquote><p>어떠한 문제에 대해서 파악할 수 있는 정보는 남겨야하므로 인증된 사용자가 OpenAPI를 사용한 로그 외에 OAuth에 대한 모든 요청에 대해서는 별도로 남기도록 개선하고자 하였습니다.</p></blockquote><h3 id="OAuth2AuthenticationProcessingFilter"><a href="#OAuth2AuthenticationProcessingFilter" class="headerlink" title="OAuth2AuthenticationProcessingFilter"></a>OAuth2AuthenticationProcessingFilter</h3><pre class="language-java" data-language="java"><code class="language-java">eventPublisher<span class="token punctuation">.</span><span class="token function">publishAuthenticationFailure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span>failed<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">PreAuthenticatedAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">"access-token"</span><span class="token punctuation">,</span> <span class="token string">"N/A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Bearer 토큰에 대한 인증을 처리하는 OAuth2AuthenticationProcessingFilter에서 AuthenticationEventPublisher를 사용하여 인증 성공이나 오류에 대한 이벤트를 발생시키므로 DefaultAuthenticationEventPublisher를 빈으로 등록하고 이벤트 리스너를 구현하면 어떤 토큰을 사용하여 요청했는지는 기록할 수 있는데 이벤트 리스너로 전달되는 이벤트 정보에는 요청과 응답에 대한 정보가 존재하지 않으므로 원하는 만큼의 정보를 로그로 기록할 수 없습니다.</p><blockquote><p>원하는 기능은 대부분 인터넷에 검색하면 나오기에 이리저리 찾아보았습니다.</p></blockquote><h3 id="AbstractRequestLoggingFilter"><a href="#AbstractRequestLoggingFilter" class="headerlink" title="AbstractRequestLoggingFilter"></a>AbstractRequestLoggingFilter</h3><p>AbstractRequestLoggingFilter.getMessagePayload 함수를 보면 내부적으로 ContentCachingRequestWrapper를 사용하는 것을 확인할 수 있는데 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/ContentCachingResponseWrapper.html">ContentCachingResponseWrapper</a>에 대해서 살펴보니 요청에 대한 응답을 내려준 이후에도 응답 페이로드를 읽을 수 있도록 지원한다는 내용을 확인했습니다.</p><blockquote><p>잘못된 토큰에 대한 요청의 응답으로 액세스 토큰 정보를 전달하므로 응답 페이로드를 가져올 수 있다면 사용된 토큰을 로그로써 확인할 수 있다는 이야기입니다.</p></blockquote><h3 id="HttpTraceFilter"><a href="#HttpTraceFilter" class="headerlink" title="HttpTraceFilter"></a>HttpTraceFilter</h3><p>Spring Boot Actuator 모듈을 사용하여 어드민 페이지를 구현해놓았기에 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.tracing">HttpTraceEndpoint</a>를 통해서 일부 요청에 대한 트레이스 정보를 확인할 수 있는 점을 떠올려 HttpTraceFilter를 살펴보니 TraceableHttpServletRequest와 TraceableHttpServletResponse를 사용하여 요청과 응답에 대한 정보를 가져오는 것을 확인할 수 있었습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRequestValid</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TraceableHttpServletRequest</span> traceableRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpTrace</span> trace <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">receivedRequest</span><span class="token punctuation">(</span>traceableRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TraceableHttpServletResponse</span> traceableResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletResponse</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>status <span class="token operator">!=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">CustomStatusResponseWrapper</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">:</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">sendingResponse</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> traceableResponse<span class="token punctuation">,</span> request<span class="token operator">::</span><span class="token function">getUserPrincipal</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getSessionId</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>단, TraceableHttpServletRequest와 TraceableHttpServletResponse는 final 키워드가 설정된 클래스이므로 다른 패키지에서 활용할 수 없습니다.</p></blockquote><h3 id="OAuthFilter"><a href="#OAuthFilter" class="headerlink" title="OAuthFilter"></a>OAuthFilter</h3><p>앞서 살펴본 클래스들을 종합하여 OAuth 요청과 응답에 대한 정보를 이벤트로 발생시키는 필터를 구현합니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OAuthFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpExchangeTracer</span> tracer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultTokenServices</span> defaultTokenServices<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationEventPublisher</span> applicationEventPublisher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OAuthFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpTraceProperties</span> traceProperties<span class="token punctuation">,</span> <span class="token class-name">DefaultTokenServices</span> defaultTokenServices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpExchangeTracer</span><span class="token punctuation">(</span>traceProperties<span class="token punctuation">.</span><span class="token function">getInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultTokenServices <span class="token operator">=</span> defaultTokenServices<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isApiV1 <span class="token operator">=</span> pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"/oauth/v1/**"</span><span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isApiV1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TraceableHttpServletRequest</span> traceableRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ContentCachingResponseWrapper</span> cachingResponseWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentCachingResponseWrapper</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpTrace</span> trace <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">receivedRequest</span><span class="token punctuation">(</span>traceableRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cachingResponseWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TraceableHttpServletResponse</span> traceableResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceableHttpServletResponse</span><span class="token punctuation">(</span>                        <span class="token punctuation">(</span>status <span class="token operator">!=</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">CustomStatusResponseWrapper</span><span class="token punctuation">(</span>cachingResponseWrapper<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">:</span> cachingResponseWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tracer<span class="token punctuation">.</span><span class="token function">sendingResponse</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> traceableResponse<span class="token punctuation">,</span> request<span class="token operator">::</span><span class="token function">getUserPrincipal</span><span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">getSessionId</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> clientId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>applicationEventPublisher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> tokenValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">.</span>ACCESS_TOKEN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">OAuth2Authentication</span> authentication <span class="token operator">=</span> defaultTokenServices<span class="token punctuation">.</span><span class="token function">loadAuthentication</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                        clientId <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getOAuth2Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidTokenException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OAuthTraceEvent</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span> traceableResponse<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span> applicationEventPublisher<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventPublisher <span class="token operator">=</span> applicationEventPublisher<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TraceableHttpServletRequest</span> <span class="token keyword">implements</span> <span class="token class-name">TraceableRequest</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span>        <span class="token class-name">TraceableHttpServletRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">URI</span> <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> queryString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">StringBuffer</span> urlBuffer <span class="token operator">=</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>urlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> encoded <span class="token operator">=</span> <span class="token class-name">UriUtils</span><span class="token punctuation">.</span><span class="token function">encodeQuery</span><span class="token punctuation">(</span>queryString<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">StringBuffer</span> urlBuffer <span class="token operator">=</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>urlBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> <span class="token function">appendQueryString</span><span class="token punctuation">(</span><span class="token class-name">String</span> queryString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> headers<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TraceableHttpServletResponse</span> <span class="token keyword">implements</span> <span class="token class-name">TraceableResponse</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpServletResponse</span> delegate<span class="token punctuation">;</span>        <span class="token class-name">TraceableHttpServletResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> response<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">extractHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> headers<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token keyword">instanceof</span> <span class="token class-name">ContentCachingResponseWrapper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">ContentCachingResponseWrapper</span> wrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ContentCachingResponseWrapper</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>                <span class="token keyword">int</span> status <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">getContentAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">,</span> wrapper<span class="token punctuation">.</span><span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                wrapper<span class="token punctuation">.</span><span class="token function">copyBodyToResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> body<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CustomStatusResponseWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletResponseWrapper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">CustomStatusResponseWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>잘못된 토큰에 대한 응답 처리는 OAuth2AuthenticationProcessingFilter에서 OAuthException을 던지게 되면서 수행하므로 우리는 그전에 응답 페이로드를 캐시하여 가져올 수 있도록 ContentCachingResponseWrapper를 이후 필터로 전달했습니다. </p><h4 id="OAuthTraceEvent"><a href="#OAuthTraceEvent" class="headerlink" title="OAuthTraceEvent"></a>OAuthTraceEvent</h4><p>OAuthTraceEvent는 OAuth API에 대한 요청과 응답 정보에서 올바른 토큰으로 요청된 것은 클라이언트 아이디가 존재하므로 요청 헤더 중 Authorization에 포함된 토큰까지 로그로 저장할 필요는 없습니다. 토큰 자체를 제외하기 보다는 토큰의 일부를 마스킹 처리하는 방향으로 구현하였습니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OAuthTraceEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Request</span> request<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Response</span> response<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Principal</span> principal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpTrace<span class="token punctuation">.</span>Session</span> session<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> responseBody<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> clientId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeTaken<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> traceTimestamp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OAuthTraceEvent</span><span class="token punctuation">(</span><span class="token class-name">HttpTrace</span> trace<span class="token punctuation">,</span> <span class="token class-name">String</span> responseBody<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clientId <span class="token operator">=</span> clientId<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span> <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">protectAuthorization</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeTaken <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getTimeTaken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>principal <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>responseBody <span class="token operator">=</span> responseBody<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>traceTimestamp <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">protectAuthorization</span><span class="token punctuation">(</span><span class="token class-name">HttpTrace</span> trace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span> <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> authorization <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> authorization<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"(?&lt;=.&#123;19&#125;)."</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authorization<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>이제 우리는 OAuthTraceEvent를 처리하는 이벤트 리스너에서 애플리케이션 로그 또는 엘라스틱서치에 저장하도록 구현하면 됩니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.baeldung.com/spring-http-logging">Spring – Log Incoming Requests</a>  </li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.tracing">Production-ready Features - 8. HTTP Tracing</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Failed to find access token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth API 요청 시 JdbcTokenStore에서 액세스 토큰을 찾을 수 없을 때 기록되는 INFO 레벨의 로그 입니다. 액세스</summary>
      
    
    
    
    
    <category term="HttpTrace" scheme="https://kdevkr.github.io/tags/HttpTrace/"/>
    
    <category term="ContentCaching" scheme="https://kdevkr.github.io/tags/ContentCaching/"/>
    
  </entry>
  
  <entry>
    <title>언더토우 임시 디렉토리 삭제 방지</title>
    <link href="https://kdevkr.github.io/undertow-temp-dir/"/>
    <id>https://kdevkr.github.io/undertow-temp-dir/</id>
    <published>2022-08-03T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.147Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/spring-projects/spring-boot/issues/9616">Tomcat does not create temporary directory used to store file uploads when it does not exist</a><br><a href="https://adunhansa.tistory.com/209">스프링 부트 파일 업로드 에러 The temporary upload location []  is not valid</a></p></blockquote><p>일반적으로 자주 발생하는 상황은 아니지만 아래와 같이 파일 업로드 시 임시 디렉토리에 대한 삭제 문제로 멀티파트 요청에 대해 임시적으로 저장하는 과정에서 <code>NoSuchFileException</code>이 발생할 수 있습니다. 리눅스 시스템에서 임시 디렉토리 경로에 존재하는 파일이나 디렉토리를 일정 기간 사용하지 않았을 경우 삭제하도록 되어있는 부분으로 인하여 애플리케이션 서버로 파일 업로드가 주기적으로 요청되지 않는 한 멀티파트에 대한 임시 파일이 만들어지지 않으므로 위 현상이 나타나게 됩니다.</p><p>언더토우에서는 MultiPartParserDefinition$MultiPartUploadHandler의 beginPart라는 함수에서 멀티파트 폼 데이터에 대해 임시 파일을 만들고 읽어들이도록 되어있습니다. 스프링 부트 기반의 애플리케이션 서버에서 멀티파트에 대한 로케이션 속성을 지정하지 않으면 언더토우는 서블릿 배포 시 시스템의 임시 디렉토리 경로에 멀티파트 업로드를 위한 폴더를 생성합니다.</p><p><a href="https://github.com/kdevkr/spring-demo-undertow">Spring Demo Undertow</a> 리파지토리를 클론하여 애플리케이션을 실행하면 다음과 같이 현재 실행중인 애플리케이션 서버에서 바라보는 파일 업로드 경로가 로그로 출력됩니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Current</span> temp dir<span class="token operator">:</span> <span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Users</span>\<span class="token class-name">Mambo</span>\<span class="token class-name">AppData</span>\<span class="token class-name">Local</span>\<span class="token class-name">Temp</span>\undertow<span class="token punctuation">.</span><span class="token number">8080.5583604686546214060</span></code></pre><p>위 로그를 출력하는 MultipartCustomizer는 UndertowDeploymentInfoCustomizer 인터페이스를 구현한 클래스로 시스템 기본 임시 디렉토리를 사용하는 경우에 주기적인 스케줄로 파일 업로드 경로가 삭제되었는지를 확인하고 복구합니다. 멀티파트 요청에 대한 파일 업로드 경로를 별도로 지정하지 않은 리눅스 환경에서는 파일 업로드를 시도하는 경우에 따라 리눅스 시스템에서 파일 업로드를 위한 폴더를 삭제할 가능성을 내재하고 있으므로 애플리케이션을 재실행하지 않아도 자동적으로 처리하거나 삭제를 방지하는 것을 도와주는 트릭을 구현할 수 있습니다.</p><blockquote><p>멀티파트 요청이 정상적으로 수행하는 경우 만들어진 임시 파일이 자동적으로 삭제되므로 시스템 기본 임시 디렉토리를 사용하는 것보다는 별도의 파일 업로드 경로를 지정하고 주기적으로 삭제되지 않고 남아있는 파일들이 있는지 관리하는 것이 더 좋은 대안입니다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/9616&quot;&gt;Tomcat does not create temporary directory used to stor</summary>
      
    
    
    
    
    <category term="MultiPartParserDefinition" scheme="https://kdevkr.github.io/tags/MultiPartParserDefinition/"/>
    
    <category term="MultipartConfigElement" scheme="https://kdevkr.github.io/tags/MultipartConfigElement/"/>
    
    <category term="UndertowDeploymentInfoCustomizer" scheme="https://kdevkr.github.io/tags/UndertowDeploymentInfoCustomizer/"/>
    
  </entry>
  
  <entry>
    <title>JSON Web Token</title>
    <link href="https://kdevkr.github.io/jwt/"/>
    <id>https://kdevkr.github.io/jwt/</id>
    <published>2022-07-29T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p>최근 시스템에서 발송되는 특정 이메일에 포함되는 링크를 통해서 사용자가 관련된 페이지에 접근할 수 있도록 해달라는 요구사항이 있었습니다. 일반적으로 사용자가 이메일을 통해서 시스템에 접속하는 경우에는 자신의 계정과 비밀번호를 사용하여 시스템에 인증하기 전인 경우가 많습니다. 따라서, 이메일에 포함된 링크를 통해서 접근할 때 사용자 인증을 일시적으로 제공하는 방안을 도입해야합니다.</p><h2 id="Token-based-Authentication"><a href="#Token-based-Authentication" class="headerlink" title="Token-based Authentication"></a>Token-based Authentication</h2><p>토큰 기반 인증 매커니즘은 사용자 계정과 비밀번호를 입력하지 않아도 시스템을 이용할 수 있는 권한을 제공하기 위한 방식입니다. 여기서 토큰이라함은 시스템이 인식할 수 있는 문자열 데이터를 말합니다. 휴대폰 문자 인증이나 이메일로 발송되는 인증코드 또는 링크를 토큰이라 부를 수 있습니다.</p><p>현재 시스템은 Spring Security OAuth를 통해 클라이언트 크레덴셜 기반의 토큰으로 OpenAPI를 사용할 수 있도록 제공하고 있는데 JWT가 아닌 JdbcTokenStore를 사용하고 있기에 SecureRandomBytesKeyGenerator로 만들어지는 액세스 토큰을 사용하게 되어있습니다. 개발자 커뮤니티를 보면 세션 기반 인증 매커니즘이 아닌 토큰 기반으로 JWT를 발급하고 서버와 클라이언트가 통신할 때 JWT를 요청 헤더에 포함시켜 시스템에 대한 권한 및 인가를 수행할 수 있도록 구성하는 것 같습니다. </p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc7519">RFC7519</a>로 정의되어있는 JWT(JSON Web Token)은 사용자의 신원을 확인할 수 있는 정보를 Base64 인코딩으로 표현하면서 페이로드에 대한 전자서명을 통해서 인증 시스템에서 발급한 토큰을 신뢰할 수 있는지 검증하여 토큰에 포함된 정보를 토대로 권한 및 인가를 적용할 수 있습니다. JWT에 대해서는 아래의 링크를 통해서 간단하게 이해할 수 있습니다.</p><ul><li><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a></li><li><a href="https://auth0.com/learn/json-web-tokens/">Get Started with JSON Web Tokens</a></li></ul><h3 id="URI-Query-String"><a href="#URI-Query-String" class="headerlink" title="URI Query String"></a>URI Query String</h3><p><em>JSON Web Token (JWT) is a compact claims representation format intended for space constrained environments such as HTTP Authorization headers and URI query parameters.</em></p><p>이메일에 포함되는 링크는 GET 요청을 수행하는 URL(URI + Query String)이므로 일반적으로 HTTP 통신 시 Authorization 또는 X-Auth-Token 헤더에 토큰을 포함하여 전달할 수 없습니다. JWT는 그 자체로 Base64 URL Safe로 인코딩되므로 쿼리 파라미터에 포함하여 전달할 수 있습니다.</p><h4 id="Token-Parameter"><a href="#Token-Parameter" class="headerlink" title="Token Parameter"></a>Token Parameter</h4><p>이메일에 포함되는 링크에 토큰 정보가 어떻게 담겨지는지 두가지 예시를 살펴보겠습니다. 첫번째는 이메일과 인증을 위한 토큰이 Path Variable 형태로 URI에 포함되는 방식이며, 두번째는 URI에 대한 쿼리 스트링으로 토큰 파라미터가 포함됨을 보여줍니다.</p><ul><li><a href="http://daily-devblog.com/api/regist/certify/kdevkr@gmail.com/$TOKEN">http://daily-devblog.com/api/regist/certify/kdevkr@gmail.com/$TOKEN</a></li><li><a href="https://careers.kakao.com/applicant/checkEmail?token=$TOKEN&amp;jobOfferId=P-1">https://careers.kakao.com/applicant/checkEmail?token=$TOKEN&amp;jobOfferId=P-1</a></li></ul><p><img data-src="/images/posts/jwt/01.png"></p><p>두번째처럼 이메일에 포함된 링크를 나중에 클릭하더라도 시스템에서 인식할 수 있는 토큰인지 만료되었는지를 판단하여 시스템에 대한 인가를 판단하게 됩니다. 여기서 확인할 수 있듯이 이메일에는 시스템에서 발급한 토큰이 링크에 포함되어 유지되므로 보안 상 만료 시간을 최소화하는 것이 좋습니다.</p><h3 id="Implementation-Sample"><a href="#Implementation-Sample" class="headerlink" title="Implementation Sample"></a>Implementation Sample</h3><p>이메일 링크에 포함된 토큰 파라미터에 따라 토큰 기반 인증 매커니즘을 수행하고 사용자 인증을 수행할 수 있는 방안을 적용해보도록 하겠습니다. 간단한 샘플 형태로 만들고 일련의 프로세스를 이해할 수 있도록 공유하고자함이니 코드를 그대로 사용하기에는 문제점이 있을 수 있습니다.</p><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><p>우선 스프링 시큐리티 기반의 환경이라는 것을 기반으로 하며 JWT 발급과 검증을 위해서 사용할 <a href="https://github.com/jwtk/jjwt">Java JWT</a> 라이브러리와 JWT 발급 시 서명할 키 페어를 불러올 수 있도록 <a href="https://www.bouncycastle.org/">Bouncy Castle</a>를 의존성에 추가합니다.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'com.google.code.gson:gson:2.9.0'</span>    implementation <span class="token string">'io.jsonwebtoken:jjwt-api:0.11.5'</span>    runtimeOnly <span class="token string">'io.jsonwebtoken:jjwt-impl:0.11.5'</span>    runtimeOnly <span class="token string">'io.jsonwebtoken:jjwt-jackson:0.11.5'</span>    implementation <span class="token string">'org.bouncycastle:bcprov-jdk18on:1.71'</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Generate-EC-Key-Pair"><a href="#Generate-EC-Key-Pair" class="headerlink" title="Generate EC Key Pair"></a>Generate EC Key Pair</h4><p>본 샘플에서는 <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-3">Cryptographic Algorithms for Digital Signatures and MACs</a> 목록 중에서 ES256이라는 서명 알고리즘을 사용하는 JWT 토큰을 발급하기 위해 P-256 곡선을 사용하는 EC 키 페어를 생성합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">openssl ecparam -name prime256v1 -genkey -noout -out ec-private.pemopenssl ec -in ec-private.pem -pubout -out ec-public.pemopenssl pkcs8 -topk8 -inform pem -in ec-private.pem -outform pem -nocrypt -out ec-private.pkcs8</code></pre><h4 id="Generate-JWT"><a href="#Generate-JWT" class="headerlink" title="Generate JWT"></a>Generate JWT</h4><p>JWT 발급을 위한 EC 키 페어를 준비했으므로 클래스패스로부터 키 페어를 불러오고 토큰 발급을 위한 유틸 클래스를 작성합니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>pem<span class="token punctuation">.</span></span><span class="token class-name">PemReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ClassPathResource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StreamUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">DatatypeConverter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">StringReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Key</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Key</span><span class="token punctuation">></span></span> signingKeyStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Key</span><span class="token punctuation">></span></span> parseKeyStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parseKeyStore<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> parseKeyStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> content<span class="token punctuation">;</span>            <span class="token class-name">PemReader</span> pemReader<span class="token punctuation">;</span>            <span class="token class-name">X509EncodedKeySpec</span> spec<span class="token punctuation">;</span>            <span class="token class-name">KeyFactory</span> kf<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> HS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/hs256/secret.key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token class-name">DatatypeConverter</span><span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> signatureAlgorithm<span class="token punctuation">.</span><span class="token function">getJcaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/rs256/rsa-public.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> ES256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/es256/ec-public.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"EC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Elliptic Curve</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Only support HS256, RS256, ES256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        parseKeyStore<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>signingKeyStore<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key <span class="token operator">=</span> signingKeyStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> content<span class="token punctuation">;</span>            <span class="token class-name">PemReader</span> pemReader<span class="token punctuation">;</span>            <span class="token class-name">PKCS8EncodedKeySpec</span> spec<span class="token punctuation">;</span>            <span class="token class-name">KeyFactory</span> kf<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> HS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/hs256/secret.key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token class-name">DatatypeConverter</span><span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> signatureAlgorithm<span class="token punctuation">.</span><span class="token function">getJcaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> RS256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/rs256/rsa-private.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> ES256<span class="token operator">:</span>                    content <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"jwt/es256/ec-private.pkcs8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>pemReader<span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    kf <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"EC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Elliptic Curve</span>                    key <span class="token operator">=</span> kf<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Only support HS256, RS256, ES256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        signingKeyStore<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">TypeToken</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Type</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">Key</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZonedDateTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> REGEX <span class="token operator">=</span> <span class="token string">"^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Type</span> hashMapType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isJwt</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> token <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>REGEX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">isValid</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token function">alg</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> alg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">.</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">isSigned</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">alg</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chunks <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>chunks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> headerMap <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> hashMapType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> headerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token keyword">long</span> expires<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims<span class="token punctuation">,</span> <span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> issuedAt <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"UTC"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> expiration <span class="token operator">=</span> issuedAt <span class="token operator">+</span> expires<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Key</span> signingKey <span class="token operator">=</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">.</span><span class="token function">signingKey</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>signingKey <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JwtException</span><span class="token punctuation">(</span><span class="token string">"Not found signingKey for "</span> <span class="token operator">+</span> signatureAlgorithm<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"typ"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"JWT Sample Issuer"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>issuedAt<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expiration<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signingKey<span class="token punctuation">,</span> signatureAlgorithm<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedJwtException</span><span class="token punctuation">(</span><span class="token string">"Cannot generate jwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> <span class="token function">parseClaims</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">parseClaims</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token function">alg</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> <span class="token function">parseClaims</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">String</span> alg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Key</span> publicKey <span class="token operator">=</span> <span class="token class-name">KeyUtil</span><span class="token punctuation">.</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtParser</span> parser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Add-Token-Filter-in-SecurityFilterChain"><a href="#Add-Token-Filter-in-SecurityFilterChain" class="headerlink" title="Add Token Filter in SecurityFilterChain"></a>Add Token Filter in SecurityFilterChain</h4><p>시스템에서 발급된 토큰이 파라미터로 전달되었을 때 JWT를 검증하고 사용자 인증을 처리할 수 있는 필터를 작성하고 스프링 시큐리티 필터 체인에 등록합니다. </p><p><strong>TokenAuthenticationFilter.java</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">JwtUtil</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Claims</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jws</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationToken</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">AntPathMatcher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">OncePerRequestFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ADDITIONAL_URI_PATTERN <span class="token operator">=</span> <span class="token string">"/users/&#123;username&#125;"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TokenAuthenticationFilter</span><span class="token punctuation">(</span><span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">isJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> base64RequestURI <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> redirectLoginUrl <span class="token operator">=</span> <span class="token string">"/login?redirect="</span> <span class="token operator">+</span> base64RequestURI<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isValidToken<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                isValidToken <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isValidToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseClaims</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Claims</span> body <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> subject <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ADDITIONAL_URI_PATTERN<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isValidToken <span class="token operator">=</span> <span class="token function">isValidWithVariables</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isValidToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> token<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">SecurityContext</span> securityContext <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        securityContext<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">JwtException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                isValidToken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValidToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// NOTE: If token expired or invalid, redirect for login page.</span>                response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>redirectLoginUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValidWithVariables</span><span class="token punctuation">(</span><span class="token class-name">Claims</span> body<span class="token punctuation">,</span> <span class="token class-name">String</span> requestURI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> variables <span class="token operator">=</span> pathMatcher<span class="token punctuation">.</span><span class="token function">extractUriTemplateVariables</span><span class="token punctuation">(</span>ADDITIONAL_URI_PATTERN<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userId <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> variables<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>SecurityConfig.java</strong><br>간단한 샘플이므로 인메모리 사용자를 등록하는 스프링 시큐리티 환경을 구성합니다. </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">TokenAuthenticationFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSecurity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>provisioning<span class="token punctuation">.</span></span><span class="token class-name">InMemoryUserDetailsManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">SecurityFilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationFilter</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/in-memory.html</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserDetails</span> mambo <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"mambo"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"&#123;noop&#125;1234"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>mambo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// https://docs.spring.io/spring-security/reference/servlet/configuration/java.html#jc-httpsecurity</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">,</span> <span class="token class-name">TokenAuthenticationFilter</span> tokenAuthenticationFilter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/users/&#123;username&#125;/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>tokenAuthenticationFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Generate-JWT-Test"><a href="#Generate-JWT-Test" class="headerlink" title="Generate JWT Test"></a>Generate JWT Test</h4><p>테스트 코드를 통해서 토큰을 발급해보고 이메일에 포함될 링크처럼 토큰 파라미터에 토큰을 포함하여 브라우저 주소에 직접 입력해봅니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">JwtUtilTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> subject <span class="token operator">=</span> <span class="token string">"mambo"</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> expires <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"mambo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> claims<span class="token punctuation">,</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>ES256<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\nmambo.kr:8080/users/mambo?token=&#123;&#125;"</span><span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>토큰이 발급되고나서 3분 이내에는 로그인 처리가 됨을 확인할 수 있지만 만료된 이후라면 올바르게 서명된 토큰일지라도 로그인 페이지로 리디렉션됨을 확인할 수 있습니다.</p><blockquote><p>본 글에서는 JWS으로만 구성된 JWT 토큰을 발급하여 신뢰할 수 있는 발급자로부터 서명된 것임을 증명하는 것을 기반으로 사용자 인증을 수행했습니다. 다만, JWT는 암호화되지 않은 상태로 이메일과 같은 곳에 노출되어있으므로 짧은 만료 시간을 두어 제한 시간내에만 인증할 수 있도록 하였습니다.<br>좀 더 시간이 주어진다면 JWS와 함께 JWE로 클레임 페이로드가 암호화된 JWT 토큰을 발급해볼 수 있는 것도 알아봐야할 것 같습니다. 본 글에서 사용했던 jjwt 라이브러리에서는 JWE를 지원하지 않으므로 <a href="https://connect2id.com/products/nimbus-jose-jwt">Nimbus JOSE + JWT</a>로 대체해야 합니다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.spring.io/spring-security/reference/servlet/configuration/java.html">Spring Security Docs</a></li><li><a href="https://jwt.io/">JWT Debugger</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7519">RFC7519</a></li><li><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;최근 시스템에서 발송되는 특정 이메일에 포함되는 링크를 통해서 사용자가 관련된 페이지에 접근할 수 있도록 해달라는 요구사항이 있었습니다. 일반적으로 사용자가 이메일을 통해서 시스템에 접속하는 경우에는 자신의 계정과 비밀번호를 사용하여 시스템에 인</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PKI(Public Key Infrastructure)</title>
    <link href="https://kdevkr.github.io/pki/"/>
    <id>https://kdevkr.github.io/pki/</id>
    <published>2022-07-17T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>정보보안 전문가의 수준은 아닐지라도 웹 애플리케이션에서 사용되는 보안 기술에 대해서 어느정도 이해하고 있어야합니다. 이 글은 <a href="/ssl-certificate/">SSL 인증서</a>와 <a href="/mutual-tls/">Mutual TLS</a>에서 언급하거나 다루어본 X.509 인증서와 함께 공개키 기반 인증 구조라고 하는 PKI와 관련된 용어와 개념에 대해서 간단하게 알아봅니다.</p></blockquote><h2 id="X-509-Certificate"><a href="#X-509-Certificate" class="headerlink" title="X.509 Certificate"></a>X.509 Certificate</h2><p><em>A public key infrastructure (PKI) is a set of roles, policies, hardware, software and procedures needed to create, manage, distribute, use, store and revoke digital certificates and manage public-key encryption.</em></p><p>X.509는 <a href="https://datatracker.ietf.org/doc/html/rfc5280">RFC5280</a>로 정의되어있는 디지털 인증서(공개키 인증서)의 표준 형식입니다. 대부분의 웹 애플리케이션에 적용하는 HTTPS 프로토콜에서 TLS 핸드쉐이크를 위해서 사용되는 가장 일반적인 인증서 형식이기도 하듯이 전세계적으로 디지털 인증서라 함은 ITU-T X.509 표준 방식으로 작성된 X.509 인증서라고 할 수 있습니다. 국내에서 사용되던 <a href="https://ko.wikipedia.org/wiki/%EA%B3%B5%EB%8F%99%EC%9D%B8%EC%A6%9D%EC%84%9C">공동인증서(공인인증서)</a>도 공개키 기반 인증 기술을 활용해서 만든 디지털 인증서이지만 한국에서만 사용할 수 있는 인증서 형식이라는 점입니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl x509 -in local.dev+1.pem -text -nooutCertificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            e5:29:9a:ba:66:<span class="token punctuation">..</span>.        Signature Algorithm: sha256WithRSAEncryption        Issuer: O <span class="token operator">=</span> mkcert development CA, OU <span class="token operator">=</span> ubuntu@ubuntu, CN <span class="token operator">=</span> mkcert ubuntu@ubuntu        Validity            Not Before: Jul <span class="token number">12</span> <span class="token number">21</span>:55:43 <span class="token number">2022</span> GMT            Not After <span class="token builtin class-name">:</span> Oct <span class="token number">12</span> <span class="token number">21</span>:55:43 <span class="token number">2024</span> GMT        Subject: O <span class="token operator">=</span> mkcert development certificate, OU <span class="token operator">=</span> ubuntu@ubuntu        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>                Modulus:                    00:d8:c2:77:4f:4f:9d:1c:c2:70:b2:00:52:4f:e7:                    <span class="token punctuation">..</span>.                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>        X509v3 extensions:            X509v3 Key Usage: critical                Digital Signature, Key Encipherment            X509v3 Extended Key Usage:                TLS Web Server Authentication            X509v3 Authority Key Identifier:                keyid:3B:31:5D:2F:7C:D6:E6:E2:F5:9B:66:1D:E5:75:5C:11:C6:85:8C:6D            X509v3 Subject Alternative Name:                DNS:local.dev, DNS:localhost    Signature Algorithm: sha256WithRSAEncryption         <span class="token number">43</span>:e1:81:18:d5:04:ca:d4:73:68:85:4d:1d:d4:79:cb:02:0d:         <span class="token punctuation">..</span>.</code></pre><p>위 예시는 로컬 호스트에서 사용할 수 있는 사설 인증서를 만드는 오픈소스 도구인 <a href="https://github.com/FiloSottile/mkcert">mkcert</a>를 통해 만들어진 X.509 인증서에 대한 정보를 openssl 도구로 인증서에 포함된 정보를 확인해본 것입니다. 인증서에 포함될 수 있는 필드들은 RFC5280 문서에 설명되어있는데 발급자(Issuer), 서명 알고리즘(Signature Algorithm), 소유자(Subject), 소유자의 공개키(Subject Public Key Info) 그리고 신원을 확인할 수 있는 부가 정보(Extensions)입니다. </p><p>HTTPS 프로토콜 통신에서 TLS 핸드쉐이킹 과정 중 클라이언트는 서버에서 제공한 X.509 인증서 정보를 확인하여 부가 정보 중 SAN(X509v3 Subject Alternative Name)에 입력된 정보를 토대로 브라우저에서 도메인이나 IP 주소에 대한 신원을 추가적으로 검증합니다. 예를 들어, 위 예시에서는 localhost와 local.dev라는 호스트를 신뢰할 수 있다고 판단할 수 있습니다.</p><blockquote><p>X.509 인증서는 상위 기관에서 소유자의 공개키를 전자서명한 것으로 암호화가 목적이 아닌 공개키에 대한 소유자의 신원을 검증하고자 함에 있습니다.</p></blockquote><h3 id="PEM-Format"><a href="#PEM-Format" class="headerlink" title="PEM Format"></a>PEM Format</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl x509 -in local.dev+1.pem-----BEGIN CERTIFICATE-----MIIEDDCCAnSgAwIBAgIRAOUpmrpmzWKOajX3U1ze1McwDQYJKoZIhvcNAQELBQAwVzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMRYwFAYDVQQLDA11YnVudHVAdWJ1bnR1MR0wGwYDVQQDDBRta2NlcnQgdWJ1bnR1QHVidW50dTAeFw0yMjA3MTIyMTU1NDNaFw0yNDEwMTIyMTU1NDNaMEExJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9wbWVudCBjZXJ0aWZpY2F0ZTEWMBQGA1UECwwNdWJ1bnR1QHVidW50dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANjCd09PnRzCcLIAUk/nr27i2uvztXSF1vbwUby3dPWQcZuR3cLRvIeNv6oOMLnf9uGbI/pjlRcCoZwk+ETUZtVrsFsvNZGCir34QbXkNb96/M8HSM3ZC9soeijU8NqoWDjr4LGtU+FX8pOOHbsjJoiyIH7lg76EpOUrasnVmx6T8xoUlye2si0A+VbV/J6tlJXKix0qidliIiBIY2HWktN+HBIYbttuRwXOK22i7KPwT/jURgZlcAq5Lmfu9+pTs5ak2jXSaneWLkKF0/9RxMy2jGKfdTwYqU4ZjbZz1zXs+UeI7hgsPqprhnVBkDAejNrXNJ1O390IbwtgboJ/V6cCAwEAAaNpMGcwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFDsxXS981ubi9ZtmHeV1XBHGhYxtMB8GA1UdEQQYMBaCCWxvY2FsLmRldoIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBgQBD4YEY1QTK1HNohU0d1HnLAg3Pm9bUJxGWw2bOAO+0Dgdau3Fn+72JPz7ZYGX3Deny01TYDEoeno7VOY+gq2u0F4L1SBNWdXhdxxfj/4JK3r1FpmgmEpPOVyrO2KMWgPlNu4JV8jUc/OIOeKYe8S9VddM7VyRjZSCNKsI4kneeu/fZFXLMtWS8lcj/hubQdGYXuSaSZHihpTPvCR2XP6z+NbeDndqo4YemGIUS2eyp4MQCwlR910FUv3NNgk43iJw368ma8p/jigQeUx9reyYKijxd/rbwmg9k5Mks+CgK7pi0Bd8uJxD5i9KgitDBetjoPbw8xIazDUbhtPofs3y8HTGqR4kszm4JZMh0310Ff3hkqjXwT1oVEMrBUUUZrSBjuUEy7bujgu1JBV1f/j5lLzS5dMOM68x7my7YVSUG+hbjeB9w9eZWLx/YZ707ssvAfKVvWoyKrwwlZTQRs7mIHRcM9stz0/k/ZQZH0IBerjuPJ93BKH0wRYxU33i3htQ<span class="token operator">=</span>-----END CERTIFICATE-----</code></pre><p>위 결과는 X.509 인증서가 실제로 파일에 저장된 형태를 보여주고 있습니다. 이와 같이 구성되는 방식을 PEM(Privacy Enhanced Mail)이라고 하는데 X.509 인증서를 저장하는 가장 일반적인 형식입니다. 바이너리 데이터로 저장되는 DER(Distinguished Encoding Representation)로도 저장할 수 있으나 시스템 간 안전하게 전달될 수 있도록 <a href="/base64/">Base64</a>로 인코딩되어 아스키 코드형태로 되어있는 PEM 형식이 선호되는 것 같습니다.</p><h3 id="Certificate-Profiles"><a href="#Certificate-Profiles" class="headerlink" title="Certificate Profiles"></a>Certificate Profiles</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl s_client -showcerts -connect naver.com:443 <span class="token operator">&lt;</span>/dev/nullubuntu@ubuntu:~/x509$ openssl x509 -in naver.com.pem -text -nooutCertificate:    Data:        Version: <span class="token number">3</span> <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            07:f2:85:21:53:b1:50:67:e3:c6:77:aa:3a:83:be:dd        Signature Algorithm: sha256WithRSAEncryption        Issuer: C <span class="token operator">=</span> US, O <span class="token operator">=</span> DigiCert Inc, CN <span class="token operator">=</span> DigiCert TLS RSA SHA256 <span class="token number">2020</span> CA1        Validity            Not Before: May <span class="token number">23</span> 00:00:00 <span class="token number">2022</span> GMT            Not After <span class="token builtin class-name">:</span> Jun  <span class="token number">7</span> <span class="token number">23</span>:59:59 <span class="token number">2023</span> GMT        Subject: C <span class="token operator">=</span> KR, ST <span class="token operator">=</span> Gyeonggi-do, L <span class="token operator">=</span> Seongnam-si, O <span class="token operator">=</span> NAVER Corp., CN <span class="token operator">=</span> www.naver.net        Subject Public Key Info:            Public Key Algorithm: rsaEncryption                RSA Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>                Modulus:                    00<span class="token punctuation">..</span>.                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>        X509v3 extensions:            X509v3 Authority Key Identifier:                keyid:B7:6B:A2:EA:A8:AA:84:8C:79:EA:B4:DA:0F:98:B2:C5:95:76:B9:F4            X509v3 Subject Key Identifier:                F5:3C:13:14:C9:7B:15:36:50:8C:3E:89:40:EE:2C:E0:22:2F:9E:61            X509v3 Subject Alternative Name:                DNS:www.naver.net, DNS:www.naver.asia, DNS:www.naver.co, DNS:www.naver.kr, DNS:www.naver.co.kr, DNS:naver.com, DNS:naver.net, DNS:naver.asia, DNS:naver.co, DNS:naver.kr, DNS:naver.co.kr            X509v3 Key Usage: critical                Digital Signature, Key Encipherment            X509v3 Extended Key Usage:                TLS Web Server Authentication, TLS Web Client Authentication            X509v3 CRL Distribution Points:                Full Name:                  URI:http://crl3.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl                Full Name:                  URI:http://crl4.digicert.com/DigiCertTLSRSASHA2562020CA1-4.crl            X509v3 Certificate Policies:                Policy: <span class="token number">2.23</span>.140.1.2.2                  CPS: http://www.digicert.com/CPS            Authority Information Access:                OCSP - URI:http://ocsp.digicert.com                CA Issuers - URI:http://cacerts.digicert.com/DigiCertTLSRSASHA2562020CA1-1.crt            <span class="token punctuation">..</span>.    Signature Algorithm: sha256WithRSAEncryption         2e<span class="token punctuation">..</span>.</code></pre><p>네이버 사이트의 서버 인증서를 전달받은 후 X.509 인증서 정보를 조회해보면 네이버의 인증서를 발급한 기관은 DigiCert 이며 네이버 인증서에 포함되는 공개키를 sha256WithRSAEncryption 서명 알고리즘을 사용해서 전자 서명을 한 것을 확인할 수 있습니다.</p><ul><li>인증서 발급 기관(Issuer)</li><li>인증서 만료 기한(Validity) </li><li>공개키 소유자(Subject) </li><li>공개키(Subject Public Key Info)</li><li>서명 알고리즘(Signature Algorithm)</li><li>소유자 대체 이름(Subject Alternative Name)</li></ul><h2 id="PKCS"><a href="#PKCS" class="headerlink" title="PKCS"></a>PKCS</h2><p>PKCS(Public key Cryptography Standard)는 공개키 기반 인증 구조에서 안전하게 정보를 교환하기 위한 프로토콜입니다.</p><h3 id="PKCS-8"><a href="#PKCS-8" class="headerlink" title="PKCS#8"></a>PKCS#8</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc5208">RFC5208</a>로 정의된 PKCS#8은 공개키 기반 인증 구조에서 사용되는 개인키를 표현하고 저장하기 위한 표준으로 앞서 X.509 인증서와 같이 PEM 형식으로 저장합니다. 지난 <a href="/mutual-tls/">Mutual TLS</a>에서는 자바 애플리케이션에서 PEM 형식의 클라이언트 인증서와 개인키를 통해 키 스토어를 만드는 과정에서 PKCS8EncodedKeySpec 이란 것을 사용했다는 것을 알 수 있습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkey -in local.dev+1-key.pem-----BEGIN PRIVATE KEY-----MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDYwndPT50cwnCyAFJP569u4trr87V0hdb28FG8t3T1kHGbkd3C0byHjb+qDjC53/bhmyP6Y5UXAqGcJPhE1GbVa7BbLzWRgoq9+EG15DW/evzPB0jN2QvbKHoo1PDaqFg46+CxrVPhV/KTjh27IyaIsiB+5YO+hKTlK2rJ1Zsek/MaFJcntrItAPlW1fyerZSVyosdKonZYiIgSGNh1pLTfhwSGG7bbkcFzittouyj8E/41EYGZXAKuS5n7vfqU7OWpNo10mp3li5ChdP/UcTMtoxin3U8GKlOGY22c9c17PlHiO4YLD6qa4Z1QZAwHoza1zSdTt/dCG8LYG6Cf1enAgMBAAECggEAIehp2ZJOtY0FLBM4zR8lJmd+b6K0JAI72m1FnAvm0/NAkmGDG1LL9ziJXwTRQoJykGBAhI7HZ84VkeOGot3HKGOsNtdvvc95/LW1Mcr9TXLj0U8GaI0neaUfVvvYoZvsERt1DtZaZMnpPIPiyr9467FRvAgTT95YHTFphyFPHr0kVlAd4qAbyIzOSiGmoBg2Krjk5dXW9Cg7YIxKNUXlxMHNlP3c9zxKyy7Cd3qcp4tFzKxqiTXPEdOxw3b66P/2+RQWi6kCQfu2RINZLjzPBajjEYJ8/o8sVXDs1Bl6pPnpYzMLjHapX8V+NuuG8r9O8Y28siO0NT+tpVnyJHUE4QKBgQDdTb7KJySyUYk+xySCPv3lpBucfnJDy7veWNdiu4KIMVtqnenPJATVE9ovdWFNNrr+1cLJG/uvM3AOSTLHJRXHcFewm2ipxovgr6SKx65zevHbbVMcaDir3hdvh6h7qG/naURQlNz1xups68g89xvbBnFp/X4fTDto+QQUIR5hRQKBgQD6vlcYJUcG7rr6nOEacUtxvhE59qX5sWDCAvrfP/IUjitsqiH9YRTkuUfYQXGQMMfpXCViZ/UVQEsiI4LMY3wM4pquWplZVn9CeyrbgZn/QP2Bp1nExmL21HWGooBG6l2lxGM18lMIzY7vE5GMzGGkH8rRHqgkIAkuTIC5G/sl+wKBgQCGvXUyY87F+zrSzDEAVBYGIXrmN16exIaoA/Nvm7cH8PU13tuiUM3YZfPr/U2202HbEo88HxuIOos5R3vxIDU4bsAVOSnqZIZ50LcgAB/JE8v5y4BUxWfrzJb8Qt5kG9O2U7NSVLCLvAazNoN+Cv4cxrl6zOpjZ+isKyE+mEOE+QKBgQC5M1l09iOuFSp57OG+/CtzSaXDoFAbS05iPn055CtTz2Z3jnoogkpCXi+YpU3R6JXf4TWjp5E4LxLPllcHy/tWMRF68mQNvnukiQCwvNsX09Lqrsb5NmbmVSqxVNlWh8i/pXx53hBCkkGeiF+bFWKRLQJKz0/1zsu5LLxu/SHVfQKBgGuldPS/1zqt1eblPAeobBot1LMCxS8Bk6n1dMiWDM0+yANwh+tkA+MFyZTbdPjjf2e+RAXwUtsKLSvJha0EXLEZPSQL7WDIleYVJ5oAX4nfHS4eNZzvxnL7bblcWtekrBNnHinKS+Cqd+ATLixLnDpi0w+DTfQu93eKXg1NCYrg-----END PRIVATE KEY-----ubuntu@ubuntu:~/x509$ openssl pkey -in local.dev+1-key.pem -text -nooutRSA Private-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit, <span class="token number">2</span> primes<span class="token punctuation">)</span>modulus:    00<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.</code></pre><h3 id="PKCS-12"><a href="#PKCS-12" class="headerlink" title="PKCS#12"></a>PKCS#12</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc7292">RFC7292</a>로 정의된 PKCS#12는 인증서와 개인키 등 공개키 기반 인증 구조에서 사용되는 다양한 항목들을 하나로 통합하여 교환하기 위한 정보 교환의 표준입니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkcs12 -in local.dev+1.pkcs12Enter Import Password: mamboBag Attributes    localKeyID: <span class="token number">16</span> CC 2D CE 9F D0 <span class="token number">52</span> C9 <span class="token number">72</span> <span class="token number">97</span> <span class="token number">90</span> DC EC AB DF <span class="token number">28</span> 0B EA B6 AA<span class="token assign-left variable">subject</span><span class="token operator">=</span>O <span class="token operator">=</span> mkcert development certificate, OU <span class="token operator">=</span> ubuntu@ubuntu<span class="token assign-left variable">issuer</span><span class="token operator">=</span>O <span class="token operator">=</span> mkcert development CA, OU <span class="token operator">=</span> ubuntu@ubuntu, CN <span class="token operator">=</span> mkcert ubuntu@ubuntu-----BEGIN CERTIFICATE-----MIIEDDCCAnSgAwIBAgIRAOUpmrpmzWKOajX3U1ze1McwDQYJKoZIhvcNAQELBQAwVzEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMRYwFAYDVQQLDA11YnVudHVAdWJ1bnR1MR0wGwYDVQQDDBRta2NlcnQgdWJ1bnR1QHVidW50dTAeFw0yMjA3MTIyMTU1NDNaFw0yNDEwMTIyMTU1NDNaMEExJzAlBgNVBAoTHm1rY2VydCBkZXZlbG9wbWVudCBjZXJ0aWZpY2F0ZTEWMBQGA1UECwwNdWJ1bnR1QHVidW50dTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANjCd09PnRzCcLIAUk/nr27i2uvztXSF1vbwUby3dPWQcZuR3cLRvIeNv6oOMLnf9uGbI/pjlRcCoZwk+ETUZtVrsFsvNZGCir34QbXkNb96/M8HSM3ZC9soeijU8NqoWDjr4LGtU+FX8pOOHbsjJoiyIH7lg76EpOUrasnVmx6T8xoUlye2si0A+VbV/J6tlJXKix0qidliIiBIY2HWktN+HBIYbttuRwXOK22i7KPwT/jURgZlcAq5Lmfu9+pTs5ak2jXSaneWLkKF0/9RxMy2jGKfdTwYqU4ZjbZz1zXs+UeI7hgsPqprhnVBkDAejNrXNJ1O390IbwtgboJ/V6cCAwEAAaNpMGcwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFDsxXS981ubi9ZtmHeV1XBHGhYxtMB8GA1UdEQQYMBaCCWxvY2FsLmRldoIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBgQBD4YEY1QTK1HNohU0d1HnLAg3Pm9bUJxGWw2bOAO+0Dgdau3Fn+72JPz7ZYGX3Deny01TYDEoeno7VOY+gq2u0F4L1SBNWdXhdxxfj/4JK3r1FpmgmEpPOVyrO2KMWgPlNu4JV8jUc/OIOeKYe8S9VddM7VyRjZSCNKsI4kneeu/fZFXLMtWS8lcj/hubQdGYXuSaSZHihpTPvCR2XP6z+NbeDndqo4YemGIUS2eyp4MQCwlR910FUv3NNgk43iJw368ma8p/jigQeUx9reyYKijxd/rbwmg9k5Mks+CgK7pi0Bd8uJxD5i9KgitDBetjoPbw8xIazDUbhtPofs3y8HTGqR4kszm4JZMh0310Ff3hkqjXwT1oVEMrBUUUZrSBjuUEy7bujgu1JBV1f/j5lLzS5dMOM68x7my7YVSUG+hbjeB9w9eZWLx/YZ707ssvAfKVvWoyKrwwlZTQRs7mIHRcM9stz0/k/ZQZH0IBerjuPJ93BKH0wRYxU33i3htQ<span class="token operator">=</span>-----END CERTIFICATE-----Bag Attributes    localKeyID: <span class="token number">16</span> CC 2D CE 9F D0 <span class="token number">52</span> C9 <span class="token number">72</span> <span class="token number">97</span> <span class="token number">90</span> DC EC AB DF <span class="token number">28</span> 0B EA B6 AAKey Attributes: <span class="token operator">&lt;</span>No Attributes<span class="token operator">></span>Enter PEM pass phrase: mamboVerifying - Enter PEM pass phrase: mambo-----BEGIN ENCRYPTED PRIVATE KEY-----MIIFHDBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIUCWpIEy8DAECAggAMAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECAwP9e11T4W6BIIEyP1XL6GHaVmqcgu+jiWoeopRciYOLS0MWB8Yzb/8Rslyx1l1MAluW+QP30qCbVhhO6l7ulziGC0hRNNNittmdSrZKPbNtch8ZY0G/dWoMY9VfjJSdndbWwXv8zulRXMYiXeVME8MsmG5HPTZyc785dVpeCYaFt6muWw2ABnP97ShSLdIRAeY2G6HDLnEz3/hjbYfE2UFF68ik/wEEtK5f48XxM+PuyDKk4b3+qFfqVSRS6QbdCnrKVQfGqeiWQKOdt/FQZ82/xIqlu3kVuXPmEaN8W62MK1vCocjm/AXJ6l01gUqL00a6ntdTdsCXA6g0qpcwZDd6/1gVgsEK0Y1mbzfq1YS52zw+obHp6nIJpA7Fnllf6irT3mSyEIzorIZ4z4As6CA91EmM4DjFJ6FlLpmVIofe0JlzGxTZ1yueWLZjGf+3sEImikF6ndzh+dCV0ox73h6g8VsD79MHkaZfuBL0ZrxyGSOomRO9WhRrjUihlgILLtMHStWDDTp4F194SiD2T+xC25LuvpfQAmLYYL+otb9n2cv1thik/MjZCDk5duYcRDLUJ3G23MaHk6DC13JaDk925zFhbnFCt1PTzvWZ+HjE1GEFiDr88YJkyLdI7VKTsMC/bcfAE7SrpaqX0cLVjnmlIQK5ScNYvB+PxCJj95YZsVpZ8cw9V/NlkWT1kpSX//G8Wl4YKW0vM25aBCca2hFqbCDC3/6vqqx4z8D+r3K8KRVV/7y94JaMoHjrvd1fjUDOQfuilh3bgfCmhuFS8IV/HjBbkuPY/O8O8abcb16wTMReKqahpmFsdOwIC/2gqoTQbKp2xbtY+gcvcObsWQRMcMHmrHx2vMO4Tr4BKgNBxz4Gv5KAE/Pa2Gvqs0O5xsLNxF1kMUyT5CkrAuUayvysGHvY98p7ORHFKfA+tFOxgf7jBrs6/BpQmZHrbOU4v4WplpcbUe9e31l11n8BkQ/qhcOrtsxqcYub3PRXwpm68LhDacKTdtyVv/j6yYba/RbfSn8ZwZAiwS6oW69qa/JCtECiw0058pNxHujA/A4Ceb7G9uFPhNb2UfgwzmID5tzxOhQype0vi02Vc1sMZHAsmIIiIpJUmh37Td1VkxUg+3FspeOmw00z4WNkrf1SMpFabpySw4BXcJMDIOxYhQI/ij6mPglTjvJHF6eMw53l84MJIUHFkQDGTX2eLZBW91lDxVxmMkt74G7rD9j6pfm/Eo5gezjc9DcX3ot1T6Gv0rk0ilF3Vfuw5+f46ZtZBQqYlFalKgYVpelidv2y5kC7gEnfabH93l9GFHU4OKT1IESwPt4E0pJttVfTAwx3dBT/h8BgfN3bOqM1EdZF0/KIoc1NLl1H2o/EZ94Jig25N3jqJ7w0riNE3dE891Fu715nfEjfSxIpMKC78FR/J9qTXgu6sUwNgCs/DdVqruOjwFKupNgQcj7fwSJtnyQGY9fpZjAG+e5MiPxNFDjaoLu8M7k<span class="token number">5</span>+CGelITcwbq2U8InZIpZTOCLif3zuHg0hkf3GXCsAapfQnmovR/xjtJBWEZVw+Z2otgK9OruIMuEwxzxX2awqI5zDN2yBCnP62eEYoJ+HKM21i/hexMF4jIh9H+H99W<span class="token assign-left variable">oFgNCNUwDw6RXPEUEqnTzQ</span><span class="token operator">==</span>-----END ENCRYPTED PRIVATE KEY-----</code></pre><h4 id="Convert-PEM-to-PKCS-12"><a href="#Convert-PEM-to-PKCS-12" class="headerlink" title="Convert PEM to PKCS#12"></a>Convert PEM to PKCS#12</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ openssl pkcs12 -export -in local.dev+1.pem -inkey local.dev+1-key.pem -out local.dev+1.pkcs12Enter Export Password: mamboVerifying - Enter Export Password: mambo</code></pre><h4 id="Convert-PKCS-12-to-JKS"><a href="#Convert-PKCS-12-to-JKS" class="headerlink" title="Convert PKCS#12 to JKS"></a>Convert PKCS#12 to JKS</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ keytool -importkeystore -srckeystore local.dev+1.pkcs12 -srcstoretype PKCS12 -deststoretype JKS -destkeystore local.dev+1.jksImporting keystore local.dev+1.pkcs12 to local.dev+1.jks<span class="token punctuation">..</span>.Enter destination keystore password: mamboRe-enter new password: mamboEnter <span class="token builtin class-name">source</span> keystore password: mamboEntry <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token number">1</span> successfully imported.Import <span class="token builtin class-name">command</span> completed:  <span class="token number">1</span> entries successfully imported, <span class="token number">0</span> entries failed or cancelledWarning:The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 <span class="token function">which</span> is an industry standard <span class="token function">format</span> using <span class="token string">"keytool -importkeystore -srckeystore local.dev+1.jks -destkeystore local.dev+1.jks -deststoretype pkcs12"</span><span class="token builtin class-name">.</span></code></pre><p>Java KeyStore API에서는 PKCS#12를 기본 형식으로 사용하고 있습니다. 그래서 PKCS#12로 되어있는 파일을 그대로 KeyStore로 불러올 수 있으므로 굳이 JKS 형식의 파일로 변환할 필요는 없습니다. 오히려 마지막 경고 문구에서 알려주는 것처럼 JKS 형식으로 되어있는 키스토어 파일을 PKCS#12로 변환하는 방법을 아는게 좋습니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~/x509$ keytool -importkeystore -srckeystore local.dev+1.jks -destkeystore local.dev+1.jks -deststoretype pkcs12Enter <span class="token builtin class-name">source</span> keystore password: mamboEntry <span class="token keyword">for</span> <span class="token builtin class-name">alias</span> <span class="token number">1</span> successfully imported.Import <span class="token builtin class-name">command</span> completed:  <span class="token number">1</span> entries successfully imported, <span class="token number">0</span> entries failed or cancelledWarning:Migrated <span class="token string">"local.dev+1.jks"</span> to PKCS12. The JKS keystore is backed up as <span class="token string">"local.dev+1.jks.old"</span><span class="token builtin class-name">.</span></code></pre><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul><li><a href="https://www.youtube.com/watch?v=t0F7fe5Alwg">Public Key Infrastructure PKI Concepts</a></li><li><a href="https://stackoverflow.com/a/7886248">Using openssl to get the certificate from a server</a></li><li><a href="https://stackoverflow.com/a/15144560">Converting PKCS#12 certificate into PEM using OpenSSL</a></li><li><a href="https://d2.naver.com/helloworld/197937">JCA로 이해하는 암호화와 보안</a></li><li><a href="https://d2.naver.com/helloworld/227016">JCA로 이해하는 암호화와 보안 2</a></li><li><a href="https://gruuuuu.github.io/security/what-is-x509/">호다닥 공부해보는 x509와 친구들</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;정보보안 전문가의 수준은 아닐지라도 웹 애플리케이션에서 사용되는 보안 기술에 대해서 어느정도 이해하고 있어야합니다. 이 글은 &lt;a href=&quot;/ssl-certificate/&quot;&gt;SSL 인증서&lt;/a&gt;와 &lt;a href=&quot;/mut</summary>
      
    
    
    
    
    <category term="X.509" scheme="https://kdevkr.github.io/tags/X-509/"/>
    
    <category term="PKI" scheme="https://kdevkr.github.io/tags/PKI/"/>
    
    <category term="PKCS#8" scheme="https://kdevkr.github.io/tags/PKCS-8/"/>
    
    <category term="PKCS#12" scheme="https://kdevkr.github.io/tags/PKCS-12/"/>
    
  </entry>
  
  <entry>
    <title>Mutual TLS</title>
    <link href="https://kdevkr.github.io/mutual-tls/"/>
    <id>https://kdevkr.github.io/mutual-tls/</id>
    <published>2022-07-13T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>본 글은 에너지 분야에서 수요 반응(DR) 이벤트를 송수신하기 위해서 사용하는 <a href="https://www.openadr.org/">OpenADR 프로토콜</a>에서 VTN과 VEN이 서로 상호 인증(Mutual Authentication)을 수행하는 구조를 이해하기 위해 정리한 것입니다.</p></blockquote><h2 id="Mutual-Authentication"><a href="#Mutual-Authentication" class="headerlink" title="Mutual Authentication"></a>Mutual Authentication</h2><p><em>Client certificates must be used for HTTP client authentication. The entity initiating the request(the client) must have an X.509 certificate that is validated by the server during the TLS handshake. If no client certificate is supplied, or if the certificate is not valid (e.g., it is not signed by a trusted CA, or it is expired) the server must terminate the connection during the TLS handshake.</em></p><p>OpenADR 프로토콜에서 VTN 시스템과 VEN 디바이스 간 통신을 위해서는 HTTP 또는 XMPP를 이용해야합니다. HTTP 클라이언트 통신을 위해서는 VTN과 VEN은 서로를 신뢰할 수 있는 X.509 공개키 인증서를 제공해야합니다. 클라이언트 요청에 서버가 신뢰할 수 있는 기관으로부터 서명된 X.509 인증서가 포함되지 않으면 서버 시스템에서는 TLS 핸드쉐이크 과정에서 연결을 해지할 수 있습니다. </p><h3 id="X-509-Client-Certificate"><a href="#X-509-Client-Certificate" class="headerlink" title="X.509 Client Certificate"></a>X.509 Client Certificate</h3><p>OpenADR 프로토콜에서의 보안은 공개키 기반 인프라(PKI)의 X.509 인증서로 수행하며 더 높은 보안 레벨을 요구하는 시스템을 구성하고 싶다면 XML 페이로드에 대한 서명을 지원할 수 있습니다. 2048 비트 이상의 RSA 또는 256 비트 이상의 ECC 키 기반의 공개키 인증서를 사용할 수 있습니다. 일반적으로 VEN은 임베디드 디바이스이므로 RSA 보다는 ECC 키 기반의 인증서를 사용하는 것이 더 효율적일 수 있습니다. OpenADR 프로토콜에서 TLS 핸드쉐이크 과정에서 최소한 TLS 1.2 버전과 함께 그에 상응하는 암호화 스위트를 사용해야합니다.</p><ul><li>Transport Layer Security: TLS 1.2+</li><li>Cipher Suites: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256</li></ul><h4 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a>cURL</h4><p>리눅스 시스템에서 주로 사용되는 HTTP 클라이언트 통신 도구인 <a href="https://curl.se/">cURL</a>를 사용해서 EiRegisterParty 서비스 엔드포인트에 대해 요청하면 VTN 과의 상호 TLS 핸드쉐이크 과정을 정상적으로 수행할 수 있는지 검증할 수 있습니다. <a href="https://downey.io/notes/dev/curl-using-mutual-tls/">how to curl an endpoint protected by mutual tls (mtls)</a>에서는 cURL로 클라이언트 인증서를 포함하는 방법을 소개하고 있어 다음과 같이 명령어를 실행하면 됩니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">curl -v --tlsv1.2 --tls-max 1.3 --cert .&#x2F;cert.pem --key .&#x2F;privkey.pem https:&#x2F;&#x2F;Host&#x2F;OpenADR2&#x2F;Simple&#x2F;2.0b&#x2F;EiRegisterParty</code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>웹 애플리케이션 서버 뿐만 아니라 VEN 디바이스를 구현하는 가장 일반적인 방법은 자바 언어로 구현하는 것입니다. 자바 애플리케이션에서는 KeyStore라는 별도의 키 저장소 클래스를 제공하므로 HTTP 클라이언트 요청 시 X.509 클라이언트 인증서를 포함시키기 위해서는 PKI 및 PKCS 표준에 대한 일련의 클래스들을 알아야합니다. X.509 클라이언트 인증서는 PEM 형식으로 교환되므로 KeyStore로 변환하는 과정이 필요할 수 있습니다. 다음은 <a href="https://www.bouncycastle.org/java.html">BouncyCastle API</a> 자바 라이브러리를 통해서 X.509 인증서와 개인키를 불러와서 HTTP 클라이언트 요청을 시도하는 코드를 보여줍니다.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MutualTlsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MutualTlsTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"Test mutual authentication"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testMutualAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertDoesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"javax.net.debug"</span><span class="token punctuation">,</span> <span class="token string">"ssl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> certPemText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> privateKeyText <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> certPem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>certPemText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PemReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>privateKeyText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readPemObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyStore</span> clientKeyStore <span class="token operator">=</span> <span class="token class-name">KeyStore</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Certificate</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token class-name">CertificateFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateCertificates</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>certPem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Key</span> key <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientKeyStore<span class="token punctuation">.</span><span class="token function">setKeyEntry</span><span class="token punctuation">(</span><span class="token string">"client"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> password<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Certificate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyManagerFactory</span> keyManagerFactory <span class="token operator">=</span> <span class="token class-name">KeyManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SunX509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keyManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>clientKeyStore<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// NOTE: If server generate client certificate from self-signed root CA, you can use trustKeyStore.</span>            <span class="token class-name">KeyStore</span> trustKeyStore <span class="token operator">=</span> <span class="token class-name">KeyStore</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trustKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"ca.jks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TrustManagerFactory</span> trustManagerFactory <span class="token operator">=</span> <span class="token class-name">TrustManagerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">TrustManagerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trustManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>trustKeyStore<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SSLContext</span> sslcontext <span class="token operator">=</span> <span class="token class-name">SSLContexts</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadTrustMaterial</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustAllStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sslcontext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyManagerFactory<span class="token punctuation">.</span><span class="token function">getKeyManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trustManagerFactory<span class="token punctuation">.</span><span class="token function">getTrustManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tlsVersions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"TLSv1.2"</span><span class="token punctuation">,</span><span class="token string">"TLSv1.3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherSuites <span class="token operator">=</span> <span class="token class-name">SSLContext</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultSSLParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCipherSuites</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SSLConnectionSocketFactory</span> sslSocketFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLConnectionSocketFactory</span><span class="token punctuation">(</span>sslcontext<span class="token punctuation">,</span> tlsVersions<span class="token punctuation">,</span> cipherSuites<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NoopHostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CloseableHttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClientBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSSLSocketFactory</span><span class="token punctuation">(</span>sslSocketFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"https://Host/OpenADR2/Simple/2.0b/EiRegisterParty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/xml; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"payload.xml"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CloseableHttpResponse</span> httpResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><p>개인적으로 학습중인 Go 언어에서 HTTP 클라이언트 요청과 함께 X.509 클라이언트 인증서를 포함시키는 방법을 찾아보았습니다. <a href="https://venilnoronha.io/a-step-by-step-guide-to-mtls-in-go">A step by step guide to mTLS in Go</a>에 잘 설명되어있으므로 다음과 같이 간단하게 테스트해볼 수 있습니다.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"crypto/x509"</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cert<span class="token punctuation">,</span> err <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">,</span> <span class="token string">"privkey.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>caCert<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"ca.pem"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>caCertPool <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewCertPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>caCertPool<span class="token punctuation">.</span><span class="token function">AppendCertsFromPEM</span><span class="token punctuation">(</span>caCert<span class="token punctuation">)</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>Transport<span class="token punctuation">:</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">&#123;</span>TLSClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>ClientAuth<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>RequireAndVerifyClientCert<span class="token punctuation">,</span>ClientCAs<span class="token punctuation">:</span>    caCertPool<span class="token punctuation">,</span>Certificates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tls<span class="token punctuation">.</span>Certificate<span class="token punctuation">&#123;</span>cert<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>MinVersion<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>VersionTLS12<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>payloadXml<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"payload.xml"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> payloadXml<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>payload<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>payloadXml<span class="token punctuation">)</span>r<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">"https://Host/OpenADR2/Simple/2.0b/EiRegisterParty"</span><span class="token punctuation">,</span> <span class="token string">"application/xml"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="X-509-Client-Certificate-Proxy"><a href="#X-509-Client-Certificate-Proxy" class="headerlink" title="X.509 Client Certificate Proxy"></a>X.509 Client Certificate Proxy</h3><p>오늘날의 인프라 시스템은 애플리케이션 서버 정보를 감추고 클라이언트 요청에 대해 전처리 동작을 수행하고 넘겨주는 리버스 프록시를 구성하는 것이 일반적입니다. 리버스 프록시는 Nginx와 같은 웹 서버 또는 로드밸런서에서 지원하며 이러한 리버스 프록시를 수행하는 인프라 구성에서는 클라이언트 요청에 대한 TLS 핸드쉐이크 과정에서 전달된 클라이언트 인증서를 별도의 프록시 헤더에 포함시켜 넘겨주어야합니다.</p><h4 id="X-SSL-CERT"><a href="#X-SSL-CERT" class="headerlink" title="X-SSL-CERT"></a>X-SSL-CERT</h4><p>일반적으로 클라이언트 인증서에 대한 프록시 헤더의 표준은 없으므로 X-SSL-CERT와 같이 애플리케이션 서버에서 읽을 수 있는 헤더를 정하여 클라이언트 인증서를 포함시켜 전달하도록 구성하면 됩니다. 다음은 Nginx에서의 리버스 프록시 구성 시 X-SSL-CERT 헤더에 클라이언트 인증서를 포함시키는 예시입니다.</p><pre class="language-conf" data-language="conf"><code class="language-conf">server &#123;    ssl_verify_client optional_no_ca;    location &#x2F; &#123;        proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;    &#125;&#125;</code></pre><blockquote><p>일반적으로 mTLS를 수행할 때 전달되는 클라이언트 인증서도 신뢰할 수 있는 인증 기관에서 발급된 것인지를 판단합니다. 시스템 자체적으로 서명한 클라이언트 인증서는 신뢰할 수 없으므로 클라이언트 인증서의 검증은 애플리케이션 서버로 위임할 수 있습니다.</p></blockquote><h4 id="Webpack-Certificate-Proxy"><a href="#Webpack-Certificate-Proxy" class="headerlink" title="Webpack Certificate Proxy"></a>Webpack Certificate Proxy</h4><p>일반적으로 프론트엔드 개발을 위해서 사용하는 Webpack에서는 자체적으로 프록시 구성을 지원하는 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>를 제공합니다. 이는 리버스 프록시 구성과 동일하므로 모든 요청에 대해서 Webpack 프록시 서버를 경유하도록 한다면 다음과 같이 클라이언트 인증서를 포함할 수 있도록 설정해야합니다.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'spdy'</span><span class="token punctuation">,</span> <span class="token comment">// https</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'cert.pem'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'privkey.pem'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">requestCert</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token literal-property property">minVersion</span><span class="token operator">:</span> <span class="token string">'TLSv1.2'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">'/'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:5000'</span><span class="token punctuation">,</span>                <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">xfwd</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token function">onProxyReq</span><span class="token punctuation">(</span><span class="token parameter">proxyReq<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> cert <span class="token operator">=</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">getPeerCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cert <span class="token operator">&amp;&amp;</span> cert<span class="token punctuation">.</span>raw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> pem <span class="token operator">=</span> <span class="token string">'-----BEGIN CERTIFICATE-----'</span> <span class="token operator">+</span> cert<span class="token punctuation">.</span>raw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-----END CERTIFICATE-----'</span><span class="token punctuation">;</span>                        proxyReq<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'X-SSL-CERT'</span><span class="token punctuation">,</span> pem<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>requestCert 옵션을 켜야 onProxyReq 함수내에서 클라이언트 인증서를 가져와서 전달할 수 있습니다.</p></blockquote><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-authentication/">What protocols support mutual authentication?</a></li><li><a href="https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-tls/">What is mutual TLS (mTLS)?</a></li><li><a href="https://downey.io/notes/dev/curl-using-mutual-tls/">how to curl an endpoint protected by mutual tls (mtls)</a></li><li><a href="https://nginx.org/en/docs/http/ngx_http_ssl_module.html#var_ssl_client_escaped_cert">Nginx SSL Client Cert</a></li><li><a href="https://webpack.js.org/configuration/dev-server/#devserverserver">Webpack DevServer.server</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;본 글은 에너지 분야에서 수요 반응(DR) 이벤트를 송수신하기 위해서 사용하는 &lt;a href=&quot;https://www.openadr.org/&quot;&gt;OpenADR 프로토콜&lt;/a&gt;에서 VTN과 VEN이 서로 상호 인증(Mutual </summary>
      
    
    
    
    
    <category term="X.509" scheme="https://kdevkr.github.io/tags/X-509/"/>
    
    <category term="mTLS" scheme="https://kdevkr.github.io/tags/mTLS/"/>
    
    <category term="X-SSL-CERT" scheme="https://kdevkr.github.io/tags/X-SSL-CERT/"/>
    
  </entry>
  
  <entry>
    <title>SHA-256</title>
    <link href="https://kdevkr.github.io/sha-256/"/>
    <id>https://kdevkr.github.io/sha-256/</id>
    <published>2022-07-10T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p><a href="https://ko.wikipedia.org/wiki/SHA">SHA(Secure Hash Algorithm)</a>은 NIST에 의해서 관리되는 안전한 해시 표준 함수들의 모음이며 현재는 NIST FIPS 180-3 규격의 <a href="https://ko.wikipedia.org/wiki/SHA-2">SHA-2</a>를 권장해서 사용하고 있습니다. 해시 함수는 어떠한 문자열을 일정한 길이를 가진 임의의 문자열로 변환하는 것을 말합니다. 수 많은 연구에 의해 만들어진 여러가지 해시 함수 중에서 일반적으로 SHA-256을 사용하는 이유는 해시 함수를 사용하게 되는 목적에 있다고 볼 수 있습니다. 특정한 문자열에 대해서는 동일한 해시값(다이제스트)으로 변환되며 해시값을 기준으로는 동일한 패턴을 찾을 수 없어서 본래의 문자열을 유추할 수 없도록 하고자 하는 것에 있습니다.</p><p>SHA-256 해시 함수의 동작 과정은 <a href="https://sha256algorithm.com/">Sha256 Algorithm Explained</a>를 이용하면 눈으로 확인할 수 있으니 참고해보면 좋을 것 같습니다.</p><h3 id="메시지-다이제스트"><a href="#메시지-다이제스트" class="headerlink" title="메시지 다이제스트"></a>메시지 다이제스트</h3><p>해시 함수는 어떠한 입력에 대해서 일정한 길이의 비트로 이루어진 결과를 가져오기 위한 목적으로 사용됩니다. 메시지 다이제스트란 어떤 문자열 데이터를 일정한 길이의 다이제스트로 변환한 것을 말하며 단순하게 해시 함수로 처리된 해시값일 뿐입니다.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/sha256"</span><span class="token string">"encoding/hex"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>plain <span class="token operator">:=</span> <span class="token string">"HelloWorld"</span>hash <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span>hashed <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"plain:"</span><span class="token punctuation">,</span> plain<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hashed:"</span><span class="token punctuation">,</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hashed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">plain: HelloWorldhashed: 872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4</code></pre><h3 id="파일-체크섬"><a href="#파일-체크섬" class="headerlink" title="파일 체크섬"></a>파일 체크섬</h3><p>위 메시지 다이제스트를 바이너리 파일에 활용한 부분이 파일 체크섬입니다. <a href="https://ubuntu.com/tutorials/how-to-verify-ubuntu#5-verify-the-sha256-checksum">how-to-verify-ubuntu</a>에서 처럼 다운로드 받은 파일의 위변조 여부를 검증하기 위해서 MD5 또는 SHA-256로 해시된 다이제스트를 제공하며 이를 통해 올바른 바이너리 파일임을 검증하고 안전하다고 판단할 수 있습니다. 아래의 예시는 윈도우 터미널에서 <a href="https://docs.microsoft.com/ko-kr/windows-server/administration/windows-commands/certutil">CertUtil</a>을 사용하여 파일 체크섬을 확인한 것이며 <a href="https://gtkhash.org/">GtkHash</a>와 같은 도구로도 확인할 수 있습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\> certutil <span class="token operator">-</span>hashfile orig<span class="token punctuation">.</span>txt sha256SHA256의 orig<span class="token punctuation">.</span>txt 해시:872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4CertUtil: <span class="token operator">-</span>hashfile 명령이 성공적으로 완료되었습니다<span class="token punctuation">.</span></code></pre><h3 id="비밀번호-암호화"><a href="#비밀번호-암호화" class="headerlink" title="비밀번호 암호화"></a>비밀번호 암호화</h3><p>일반적으로 비밀번호를 암호화하여 저장할 때는 <a href="https://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a>에서 언급된 PBKDF2 또는 bcrypt를 사용하는 편인 것으로 알고 있습니다. bcrypt는 NIST 에서 권장하는 알고리즘에 속하지는 않았으나 OpenBSD나 스프링 프레임워크의 기본 패스워드 인코더로 지정된 비교적 안전한 알고리즘 중 하나입니다. 아무튼 시계열 데이터베이스 중 하나인 <a href="https://code.kx.com/q/basics/cmdline/#-u-usr-pwd-local">KDB+는 MD5 또는 SHA-1 알고리즘 방식으로 비밀번호를 지원</a>하기에 사용하는 시스템마다 지원하는 방식에 제한이 있을 수 있습니다.</p><h4 id="비밀번호-암호화-관련-읽으면-좋은-글"><a href="#비밀번호-암호화-관련-읽으면-좋은-글" class="headerlink" title="비밀번호 암호화 관련 읽으면 좋은 글"></a>비밀번호 암호화 관련 읽으면 좋은 글</h4><ul><li><a href="https://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a></li><li><a href="https://lovejaco.github.io/posts/cryptographic-hash-function/">해시 함수, 암호화 해시 함수, 그리고 SHA</a></li><li><a href="https://auth0.com/blog/hashing-in-action-understanding-bcrypt/">Hashing in Action: Understanding bcrypt</a></li></ul><h3 id="키-서명-지문"><a href="#키-서명-지문" class="headerlink" title="키 서명 지문"></a>키 서명 지문</h3><p><a href="/ssh">SSH 키 페어 발급 및 원격 호스트 연결하기</a>에서처럼 SSH 키에 대해 지문(Fingerprint)을 생성해놓고 호스트에 대한 공개키가 변경되었는지를 판단하는데 사용되기도 합니다. 이러한 키 서명 지문은 아래의 이미지와 같이 SSL 인증서 정보에도 서명 해시 알고리즘으로도 사용하는 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/sha-256/01.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SHA&quot;&gt;&lt;a href=&quot;#SHA&quot; class=&quot;headerlink&quot; title=&quot;SHA&quot;&gt;&lt;/a&gt;SHA&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/SHA&quot;&gt;SHA(Secure Hash Algori</summary>
      
    
    
    
    
    <category term="Hashing" scheme="https://kdevkr.github.io/tags/Hashing/"/>
    
    <category term="Message Disgest" scheme="https://kdevkr.github.io/tags/Message-Disgest/"/>
    
    <category term="Checksum" scheme="https://kdevkr.github.io/tags/Checksum/"/>
    
  </entry>
  
  <entry>
    <title>SSH 키 페어 발급 및 원격 호스트 연결하기</title>
    <link href="https://kdevkr.github.io/ssh/"/>
    <id>https://kdevkr.github.io/ssh/</id>
    <published>2022-07-03T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p>일반적으로 (원격 호스트인) 서버에 접속하기 위해서 사용자 계정과 비밀번호를 공유하기보다는 SSH 프로토콜을 사용하여 TCP 보안 채널을 연결하고 통신 내용에 대한 암호화를 통해 패킷을 보호하고 안전하게 서버에 접속해서 통신할 수 있도록 구성합니다. 오늘은 SSH 프로토콜을 통해 서버에 접속하는 과정에 대해서 정리해보면서 그저 서버 접속을 위한 PEM 파일을 받아서 접속할 뿐이었던 부분을 머리속에서 정리해보고자 합니다. 저와 함께 SSH 키 페어를 발급해보고 발급된 키 페어를 아마존 웹 서비스의 EC2 인스턴스 또는 깃허브 저장소에 등록한 후 원격 호스트에 연결하여 성공적으로 인증할 수 있는지를 확인해보시기 바랍니다.</p><h2 id="SSH-키-페어"><a href="#SSH-키-페어" class="headerlink" title="SSH 키 페어"></a>SSH 키 페어</h2><p>SSH 프로토콜을 사용하기 위해서는 SSH 키 페어라고 하는 공개키와 비밀키(퍼블릭 키와 프라이빗 키)로 구성된 키 페어를 만들고나서 서버에서는 공개키를 보유하도록 하고 서버에 접속 또는 인증하고자하는 클라이언트는 비밀키를 가지고 있음으로써 공개키 기반의 인증을 수행하여 보안 채널을 연결하게 됩니다. SSH 프로토콜을 사용해서 TCP 보안 채널을 연결하는 과정에 대해서는 본 글에서 다루고자하는 부분이 아니므로 자세히 설명된 다른 글들을 찾아보시기 바랍니다.</p><h3 id="SSH-키-페어-생성하기"><a href="#SSH-키-페어-생성하기" class="headerlink" title="SSH 키 페어 생성하기"></a>SSH 키 페어 생성하기</h3><p>아마존 웹 서비스를 이용하고 있는 개발자라면 웹 콘솔이나 AWS CLI의 create-key-pair 명령을 사용해서 RSA 또는 ED25519 기반의 키 페어를 생성할 수도 있습니다만, 일반적인 개발자라면 어떤 환경에 의존하지 않는 OpenSSH에 포함되는 ssh-keygen 도구를 사용해야 합니다. 자신이 사용하는 운영체제에 따라서 기본으로 포함된 OpenSSH를 사용하거나 설치하면 됩니다. 만약 윈도우 10을 사용하고 있다면 Git Bash를 설치하면 ssh-keygen이 포함되어있고 선택적 기능을 통해서 OpenSSH 클라이언트를 쉽게 설치할 수 있습니다.</p><p><img data-src="/images/posts/ssh/ssh-01.png" alt="윈도우 10의 선택적 기능을 통해서 설치한 OpenSSH 클라이언트"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># in Windows Terminal</span><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>VOpenSSH_for_Windows_7<span class="token punctuation">.</span>7p1<span class="token punctuation">,</span> LibreSSL 2<span class="token punctuation">.</span>6<span class="token punctuation">.</span>5<span class="token comment"># in Git Bash</span>$ ssh <span class="token operator">-</span>VOpenSSH_9<span class="token punctuation">.</span>0p1<span class="token punctuation">,</span> OpenSSL 1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>1p  21 Jun 2022</code></pre><p>아무튼 OpenSSH를 확인했다면 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent</a>와 같은 문서를 참고해서 ssh-keygen으로 SSH 키 페어를 생성해보도록 하겠습니다.</p><p>먼저, RSA 알고리즘 기반의 키 페어를 만들때는 기본적으로 2048 비트 이상으로 만들어지게 되며 이 글을 작성하는 시점에서는 아마존 웹 서비스나 깃허브 저장소 모두 4096 비트를 지원하고 권장하는 편입니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>b 4096 <span class="token operator">-</span>m PEM <span class="token operator">-</span>f win-mambo-rsa-4096<span class="token punctuation">.</span>pemGenerating public/private rsa key pair<span class="token punctuation">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved in win-mambo-rsa-4096<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>Your public key has been saved in win-mambo-rsa-4096<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is:SHA256:F3ECBEjeXszb6ccTJ2EWz9eaxvZoAg4f6F4rU0aDYJY mambo@DESKTOP-OJJ4TB3The key's randomart image is:<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token namespace">[RSA 4096]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>o<span class="token punctuation">.</span>o o    <span class="token punctuation">|</span><span class="token punctuation">|</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Eo   <span class="token operator">+</span> <span class="token operator">+</span>  <span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>    <span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> o o<span class="token punctuation">|</span><span class="token punctuation">|</span>     <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>o= o <span class="token operator">+</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token punctuation">.</span> S<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>o B  <span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span> <span class="token operator">*</span>o+ <span class="token operator">*</span> o <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span>o= = o <span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span>o<span class="token punctuation">.</span> o <span class="token operator">+</span>   <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span>o<span class="token punctuation">.</span>      <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token namespace">[SHA256]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><p>4096 비트를 가지는 RSA 키 페어를 만들게되면 키의 길이가 너무 길어지게 되므로 ED25519 알고리즘을 지원하는 원격 호스트라면 ED25519 기반의 키 페어를 생성하고 사용하는게 더 좋습니다. 지난 <a href="/ed25519/">ed25519</a> 글을 읽어보시면 RSA 보다 ED25519를 사용하게 되는 이유에 대해서 알아가실 수 있습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh-keygen <span class="token operator">-</span>t ed25519 <span class="token operator">-</span>m PEM <span class="token operator">-</span>f win-mambo-ed25519<span class="token punctuation">.</span>pemGenerating public/private ed25519 key pair<span class="token punctuation">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved in win-mambo-ed25519<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>Your public key has been saved in win-mambo-ed25519<span class="token punctuation">.</span>pem<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is:SHA256:oad/A11tVJQFxRIDA63pozCFj/FsTCDh51hALNdFBVU mambo@DESKTOP-OJJ4TB3The key's randomart image is:<span class="token operator">+</span><span class="token operator">--</span><span class="token namespace">[ED25519 256]</span><span class="token operator">--</span><span class="token operator">+</span><span class="token punctuation">|</span>   o+o o+<span class="token operator">++</span><span class="token operator">+</span>E<span class="token punctuation">.</span><span class="token operator">+</span>BB<span class="token punctuation">|</span><span class="token punctuation">|</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">.</span>o     <span class="token punctuation">.</span><span class="token punctuation">.</span>oo<span class="token punctuation">.</span><span class="token punctuation">|</span><span class="token punctuation">|</span>   o<span class="token punctuation">.</span><span class="token punctuation">.</span>oo<span class="token punctuation">.</span>  o o <span class="token punctuation">.</span> <span class="token punctuation">|</span><span class="token punctuation">|</span>     =o<span class="token punctuation">.</span>o<span class="token punctuation">.</span>o <span class="token punctuation">.</span> o  <span class="token punctuation">|</span><span class="token punctuation">|</span>    <span class="token punctuation">.</span> oXSo <span class="token punctuation">.</span> <span class="token punctuation">.</span>   <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token operator">+</span>oB <span class="token operator">+</span>      <span class="token punctuation">|</span><span class="token punctuation">|</span>      <span class="token punctuation">.</span><span class="token operator">+</span> o <span class="token punctuation">.</span>     <span class="token punctuation">|</span><span class="token punctuation">|</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span> o      <span class="token punctuation">|</span><span class="token punctuation">|</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>     <span class="token punctuation">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token namespace">[SHA256]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><h3 id="깃허브-공개키-등록하기"><a href="#깃허브-공개키-등록하기" class="headerlink" title="깃허브 공개키 등록하기"></a>깃허브 공개키 등록하기</h3><p>사용자 계정 설정 &gt; 액세스 &gt; <a href="https://github.com/settings/keys">SSH and GPG Keys</a> 메뉴로 진입하면 SSH 키를 등록할 수 있는 기능을 제공하고 있습니다. 앞서 만들었던 ED25519 키 페어를 등록하고 깃허브에 접속할 수 있는지 테스트 해보겠습니다.</p><p><img data-src="/images/posts/ssh/ssh-02.png"></p><p><img data-src="/images/posts/ssh/ssh-03.png"></p><p><img data-src="/images/posts/ssh/ssh-04.png"></p><p>자 이제 깃허브에 등록한 공개키에 대한 비밀키를 사용해서 SSH 접속을 시도해보면 어떻게 될까요?</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i win-mambo-ed25519<span class="token punctuation">.</span>pem <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>comThe authenticity of host <span class="token string">'github.com (15.164.81.167)'</span> cannot be established<span class="token punctuation">.</span>ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM<span class="token punctuation">.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? yesWarning: Permanently added <span class="token string">'github.com,15.164.81.167'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts<span class="token punctuation">.</span>Hi kdevkr! You've successfully authenticated<span class="token punctuation">,</span> but GitHub does not provide shell access<span class="token punctuation">.</span></code></pre><h3 id="EC2-공개키-등록하기"><a href="#EC2-공개키-등록하기" class="headerlink" title="EC2 공개키 등록하기"></a>EC2 공개키 등록하기</h3><p>아마존 웹 서비스에서 EC2 인스턴스를 실행할 때 키 페어를 만들지 않아도 이미 만들어진 SSH 키 페어를 가져와서 등록할 수 있도록 제공하고 있습니다.</p><p><img data-src="/images/posts/ssh/ssh-05.png"></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i win-mambo-ed25519<span class="token punctuation">.</span>pem ec2-user@15<span class="token punctuation">.</span>164<span class="token punctuation">.</span>219<span class="token punctuation">.</span>55The authenticity of host <span class="token string">'15.164.219.55 (15.164.219.55)'</span> cannot be established<span class="token punctuation">.</span>ECDSA key fingerprint is SHA256:64Ca/STwUWZkN+ggo5jx6BCvwyhNRcCY5/xjk0SkSjU<span class="token punctuation">.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? yesWarning: Permanently added <span class="token string">'15.164.219.55'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts<span class="token punctuation">.</span>       __<span class="token punctuation">|</span>  __<span class="token punctuation">|</span>_  <span class="token punctuation">)</span>       _<span class="token punctuation">|</span>  <span class="token punctuation">(</span>     <span class="token operator">/</span>   Amazon Linux 2 AMI      ___<span class="token punctuation">|</span>\___<span class="token punctuation">|</span>___<span class="token punctuation">|</span>https:<span class="token operator">/</span><span class="token operator">/</span>aws<span class="token punctuation">.</span>amazon<span class="token punctuation">.</span>com/amazon-linux-2/<span class="token namespace">[ec2-user@ip-10-0-2-243 ~]</span>$ <span class="token function">cat</span> ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/authorized_keysssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOy21gZ45To8FNf6hilxV51QqT9JCBjIpVKCRlup7m4D window-mambo</code></pre><p>퍼블릭 서브넷에 위치한 EC2 인스턴스에 SSH 접속이 가능함을 확인했습니다. </p><h2 id="AWS-ED25519-Invalid-Format"><a href="#AWS-ED25519-Invalid-Format" class="headerlink" title="AWS ED25519 Invalid Format"></a>AWS ED25519 Invalid Format</h2><p>지난 <a href="/ed25519">ED25519</a> 글을 잘 읽어보신 분들이라면 아마존 웹 서비스의 웹 콘솔이나 AWS CLI를 통해서 ED25519 키 페어를 발급하고 윈도우 환경에서 비밀키를 사용해서 인증을 시도하면 키 형식이 올바르지 않는 문제가 있다는 것을 확인할 수 있었을텐데요. 지난 글에서는 단순히 안되는 것 같다고 마무리 하였지만 이 문제에 대해서 왜 그런것인가에 대해서 궁금해져서 <a href="https://github.com/aws/aws-cli/discussions/7074">aws-cli&#x2F;discussions&#x2F;7074</a>로 관련 문제에 대해서 질문을 하였고 원인을 찾게 되었습니다.</p><p><img data-src="/images/posts/ssh/ssh-06.png"></p><p>윈도우 환경에서 AWS CLI를 통해 키 페어를 발급하고 비밀키를 파일로 만들면 위와 같이 UTF-16LE 인코딩 형식과 CRLF 개행 방식으로 되어있는 것을 확인할 수 있었습니다. OpenSSH의 ssh-keygen으로 만들어지는 키페어 파일을 UTF-8과 LF로 만들어집니다. Git Bash에 포함되어있는 dos2unix라는 도구를 통해서 UTF-16LE로 되어있는 인코딩 형식을 UTF-8로 변경해보고 시도해보았습니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ dos2unix aws-mambo.pemdos2unix: converting UTF-16LE file aws-mambo.pem to UTF-8 Unix format...</code></pre><p>윈도우 터미널을 통해서 UTF-16LE 및 CRLF로 되어있는 비밀키를 사용하면 올바르지 않았던 키 형식 문제가 해결되었고 다음과 같이 성공적으로 접속되었습니다.</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\Mambo\keypair> ssh <span class="token operator">-</span>i aws-mambo<span class="token punctuation">.</span>pem ec2-user@3<span class="token punctuation">.</span>34<span class="token punctuation">.</span>188<span class="token punctuation">.</span>47       __<span class="token punctuation">|</span>  __<span class="token punctuation">|</span>_  <span class="token punctuation">)</span>       _<span class="token punctuation">|</span>  <span class="token punctuation">(</span>     <span class="token operator">/</span>   Amazon Linux 2 AMI      ___<span class="token punctuation">|</span>\___<span class="token punctuation">|</span>___<span class="token punctuation">|</span>https:<span class="token operator">/</span><span class="token operator">/</span>aws<span class="token punctuation">.</span>amazon<span class="token punctuation">.</span>com/amazon-linux-2/<span class="token namespace">[ec2-user@ip-10-0-2-42 ~]</span>$</code></pre><p>이 상태에서 윈도우 터미널이 아닌 Git Bash에서도 시도를 하면 다음과 같이 다시 키 형식이 올바르지 않다는 문제가 발생하게 됩니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ ssh -i aws-mambo.pem ec2-user@3.34.188.47Load key &quot;aws-mambo.pem&quot;: invalid formatec2-user@3.34.188.47: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</code></pre><p>이때는 CRLF로 되어있던 개행 형식을 LF로 변경하면 성공적으로 접속됨을 확인할 수 있습니다.</p><pre class="language-sh" data-language="sh"><code class="language-sh">$ ssh -i aws-mambo.pem ec2-user@3.34.188.47       __|  __|_  )       _|  (     &#x2F;   Amazon Linux 2 AMI      ___|\___|___|https:&#x2F;&#x2F;aws.amazon.com&#x2F;amazon-linux-2&#x2F;[ec2-user@ip-10-0-2-42 ~]$</code></pre><p>이렇게 SSH 키 페어를 발급하고 원격 호스트에 연결하는 과정에 대해서 알아보았고 지난 글에서 경험했던 문제에 대해서 다시한번 살펴보며 원인을 찾아보는 경험도 해보았습니다. 감사합니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">Connect to your Linux instance using SSH</a>  </li><li><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">Connecting to GitHub with SSH</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;일반적으로 (원격 호스트인) 서버에 접속하기 위해서 사용자 계정과 비밀번호를 공유하기보다는 SSH 프로토콜을 사용하여 TCP 보안 채널을 연결하고 통신 내용에 대한 암호화를 통해 패킷을 보호하고 안전하게 서버에 접속해서 통신할 수 있도록 구성합니</summary>
      
    
    
    
    
    <category term="SSH" scheme="https://kdevkr.github.io/tags/SSH/"/>
    
    <category term="Key Pair" scheme="https://kdevkr.github.io/tags/Key-Pair/"/>
    
    <category term="RSA" scheme="https://kdevkr.github.io/tags/RSA/"/>
    
    <category term="ED25519" scheme="https://kdevkr.github.io/tags/ED25519/"/>
    
  </entry>
  
  <entry>
    <title>개발자가 알아야할 네트워크 지식</title>
    <link href="https://kdevkr.github.io/network/"/>
    <id>https://kdevkr.github.io/network/</id>
    <published>2022-05-27T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/posts/network/01.jpg" alt="노란건 돌돌이..."></p><p><a href="https://roadmap.sh/backend">roadmap.sh</a>를 참고하면 프론트엔드와 백엔드 개발자 모두 인터넷이라는 기초 지식을 필요로 하다고 말합니다. 그렇다면 위 장비들이 인터넷을 사용하기 위해서 어떠한 용도로 사용되는 장비라는 것을 아는 개발자가 얼마나 될까요? 이미 이것들을 알거나 다루지 않는 경험 많은 개발자들은 “개발자는 저것을 사용할 일이 없어요”라고 할테지요. 물론 저도 위 장비들을 경험한 것은 개발자로 일하고 있는 지금이 아니라 컴퓨터공학과라는 이유로 가설병 보직을 받고나서 사단 내 유선 전화를 고치거나 신규로 다이렉트 전화선을 추가해야하는 요건이 있을때 사용해본 경험이 있을 뿐입니다.</p><blockquote><p>심지어는 유선병이라는 이유로 늘어진 통신선을 정리하기 위해서 전봇대도 타야하는 상황도…</p></blockquote><p>아무튼 위와 같은 경험이 없었더라면 인터넷을 사용하기 위해서 사용하는 <em>RJ45 커넥터 규격</em>이란 것을 떠올리거나 UTP 케이블을 커넥터와 결합할 때 일반적으로 나열하는 <em>색상의 순서가 표준으로 정해져있다</em>는 것을 알지 못했을 겁니다. 왜냐하면 현재 개발자로 일할때에는 인터넷 선에 대한 부분을 직접 다루어본다거나 이미 구성된 서버 인프라 환경을 통해서 애플리케이션을 배포하고 운영하기 때문이죠.</p><p><img data-src="/images/posts/network/02.png" alt="대한민국 해저 케이블 위치"></p><p>인터넷으로 전세계가 연결될 수 있다는 것을 알아도 우리나라에서 다른 나라로 트래픽이 전달되기 위해서는 수 많은 <a href="https://www.submarinecablemap.com/country/south-korea">해저 광 케이블</a>이 설치되고 경유한다는 것까지는 모를 수 있습니다. 실제로 개발자 또는 엔지니어가 아닌 사업팀에게 사용자의 클릭으로 인해 어떠한 요청이 서버로 전달되고 다시 돌아오는데까지 설명하더라도 바다를 통해서 다른 나라로 건너가서 서버로 들어오게 된다라고 설명하지는 않습니다.</p><blockquote><p>개인적으로 궁금할 수는 있지만 굳이 모른다고해도 일하거나 이해하는데 지장이 없기 때문이죠.</p></blockquote><h4 id="해저-케이블-관련-정보"><a href="#해저-케이블-관련-정보" class="headerlink" title="해저 케이블 관련 정보"></a>해저 케이블 관련 정보</h4><ul><li><a href="https://www.yna.co.kr/view/AKR20210108069100051">해저케이블 있기에 가능한 지구촌 소통</a></li><li><a href="https://brunch.co.kr/@go2hanoi/14">베트남 해저 케이블은 왜 자주 끊길까?</a></li><li><a href="http://www.goodmorningvietnam.co.kr/mobile/article.html?no=49888">해저 케이블 루트 2개에 문제가 있는데 여전히 고칠 수 없다</a></li></ul><p>조직내에 서버 인프라 엔지니어가 있거나 인프라 팀이 존재한다면 애플리케이션으로 트래픽이 전달되도록 <a href="https://aws.amazon.com/ko/route53/what-is-dns/">DNS</a>와 <a href="https://docs.microsoft.com/ko-kr/azure/rtos/netx-duo/netx-duo-nat/chapter1">NAT</a>와 같은 설정들을 개발자가 담당하지는 않을겁니다. AWS와 같은 클라우드 서비스에서는 개발자가 직접 웹 콘솔을 통해서 클릭만으로도 서버 인프라 구성에 대한 설정을 쉽게 할 수 있도록 제공하긴 합니다. 그래서 클라우드 인프라 환경을 직접 다루는 저와 같은 개발자들은 요구사항에 따라서 인프라 구성을 검토하거나 설정을 변경해야하는 작업도 해야할 수 있기에 어느정도의 인프라 지식도 필요하게 되죠.</p><blockquote><p>알아야하는 인프라 지식은 현재 조직에서 어떤 것을 경험하느냐에 따라 달라집니다.</p></blockquote><p>일반적으로는 HTTP라는 통신 프로토콜을 사용하지만 사업 분야에 따라서 <a href="https://mqtt.org/">MQTT 통신 프로토콜</a>를 통해 데이터가 전달된다거나 <a href="https://ko.wikipedia.org/w/index.php?title=%EB%AA%A8%EB%93%9C%EB%B2%84%EC%8A%A4&tableofcontents=0">Modbus TCP</a>를 통해 산업 자동화 장비와의 통신으로 데이터를 수집하고 심지어는 차량에서는 <a href="https://ko.wikipedia.org/wiki/CAN_%EB%B2%84%EC%8A%A4">CAN 통신</a>을 사용하고 OBD 모듈을 통해서 데이터를 전달받기도 하죠. 통신 프로토콜 뿐만 아니라 이더넷으로 인터넷에 접속하지 않고 프라이빗 네트워크 환경으로 연결하며 무선 통신을 통해서 인터넷으로 접속하는 인프라 환경을 경험해보지 않았다면 아마도 네트워크 우선 순위가 있다는 지식을 알지 못하고 있을 수 있씁니다.</p><blockquote><p>셀룰러 모듈이 포함된 클라이언트 장비를 전달하고나서 유선 연결을 시도한 순간 인터넷 연결이 끊어져서 원격이 해제되었던 것을 실제로 경험하기도 했죠.</p></blockquote><p>대부분의 개발자가 웹 서버 또는 애플리케이션에 SSL 인증서를 설치해서 HTTPS 통신을 할 수 있도록 구성할 수 있지만 AWS 클라우드 환경을 사용하지 않거나 ELB 중 NLB를 통해서 ECC 기반의 SSL 인증서를 설정하여 TLS 오프로드 기능을 설정하려고 시도하지 않았다면 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificates">2048 이상의 RSA 키 또는 EC 키가 포함된 인증서를 지원하지 않음</a>에 대한 것을 알지 못할 수 있습니다. </p><p>결국은 개발자라는 직무에서 알아야할 네트워크 지식은 정해져있지 않으며 현재 내가 조직에서 어떠한 요구사항을 처리하는가 또는 어떤 것까지 담당하고 경험하는가에 따라 그 깊이와 범위가 달라질 수 있다는 점을 인지해야할 것 같습니다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img data-src=&quot;/images/posts/network/01.jpg&quot; alt=&quot;노란건 돌돌이...&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://roadmap.sh/backend&quot;&gt;roadmap.sh&lt;/a&gt;를 참고하면 프론트엔드와 백엔</summary>
      
    
    
    
    
    <category term="개발자" scheme="https://kdevkr.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
    <category term="네트워크" scheme="https://kdevkr.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
  </entry>
  
  <entry>
    <title>Gmail SMTP</title>
    <link href="https://kdevkr.github.io/gmail-smtp/"/>
    <id>https://kdevkr.github.io/gmail-smtp/</id>
    <published>2022-05-23T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.139Z</updated>
    
    <content type="html"><![CDATA[<p>오래전에 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a>라는 주제로 구글 SMTP 서버를 사용해서 스프링 부트 애플리케이션에서 이메일을 발송하는 것을 다루어 보았었는데요. 구글의 보안 정책의 변경에 따라서 <a href="https://support.google.com/accounts/answer/6010255">2022년 5월 30</a>일부터는 보안 수준이 낮은 앱의 액세스가 활성된 계정으로는 SMTP 서버를 이용할 수 없게 되었습니다. 그러면 구글 SMTP 서버를 더이상 사용할 수 없는 것일까요?</p><h2 id="Gmail-SMTP"><a href="#Gmail-SMTP" class="headerlink" title="Gmail SMTP"></a>Gmail SMTP</h2><p>보안 수준이 낮은 앱의 액세스를 활성화한 계정에서는 사용자 이름과 비밀번호를 사용해서 Gmail SMTP와 같은 서드 파티 앱에 인증할 수 있었지만 이제는 사용자의 계정을 더 안전하게 보호하기 위해서 사용자 이름과 비밀번호를 사용해서 서드 파티 앱과 기기에 로그인 요청하는 것을 지원하지 않습니다. 이제는 Gmail SMTP 서버를 이용하기 위해서는 보안 수준이 높은 Gmail 계정을 만들고나서 사용자 이름과 비밀번호가 아닌 다른 방식으로 인증을 요청해야만 합니다.</p><h3 id="2단계-인증-활성화"><a href="#2단계-인증-활성화" class="headerlink" title="2단계 인증 활성화"></a>2단계 인증 활성화</h3><p>보안 수준이 높은 Gmail 계정을 만들기 위해서는 먼저 2단계 인증을 활성화하여야 합니다. 구글 계정 관리 &gt; 보안 메뉴에 들어가면 아래와 같이 2단계 인증을 사용중인지를 확인할 수 있습니다.</p><p><img data-src="/images/posts/gmail-smtp/02.png"></p><p>위와 같이 2단계 인증을 활성화 하지 않았다면 2단계 인증을 클릭해서 안내에 따라서 다음과 같이 인증을 완료하고 2단계 인증을 활성화합니다.</p><p><img data-src="/images/posts/gmail-smtp/03.png" alt="구글 계정에 입력된 전화번호로 인증"></p><p><img data-src="/images/posts/gmail-smtp/04.png" alt="전화 또는 문자메시지로 받은 인증번호 입력 후 인증 완료"></p><p><img data-src="/images/posts/gmail-smtp/05.png" alt="2단계 인증 활성화 완료"></p><h3 id="앱-비밀번호-추가"><a href="#앱-비밀번호-추가" class="headerlink" title="앱 비밀번호 추가"></a>앱 비밀번호 추가</h3><p>2단계 인증이 활성화 되고나서 앱 비밀번호라는 부분이 추가되었습니다. 앱 비밀번호를 추가하면 Gmail SMTP와 같은 2단계 인증을 지원하지 않는 앱에서도 로그인할 수 있다고 알려주는데요. 앞서 말한 사용자 이름과 비밀번호 방식이 아닌 다른 방식으로 인증할 수 있다는 이야기입니다.</p><p><img data-src="/images/posts/gmail-smtp/06.png"></p><p><img data-src="/images/posts/gmail-smtp/07.png"></p><p>이제 발급된 16자리의 앱 비밀번호를 잘 복사해두고 Gmail SMTP 인증에 사용하면 됩니다.</p><h3 id="이메일-발송"><a href="#이메일-발송" class="headerlink" title="이메일 발송"></a>이메일 발송</h3><p><a href="https://github.com/kdevkr/spring-demo-freemarker/tree/main/src/main/resources/config">Gmail SMTP를 사용하기 위한 정보</a>는 달라지지 않으며 우리가 수정해야할 부분은 구글 이메일 계정에 대한 비밀번호 대신에 앞서 발급한 16자리의 앱 비밀번호를 사용하는 것입니다. </p><p><img data-src="/images/posts/gmail-smtp/08.png"></p><p>더이상 보안 수준 낮은 앱의 액세스 활성화 없이도 Gmail SMTP 서버를 이용해볼 수 있는 것을 확인했습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;오래전에 &lt;a href=&quot;/sending-mail-with-freemarker-template/&quot;&gt;프리마커 템플릿으로 이메일 발송하기&lt;/a&gt;라는 주제로 구글 SMTP 서버를 사용해서 스프링 부트 애플리케이션에서 이메일을 발송하는 것을 다루어 보았</summary>
      
    
    
    
    
    <category term="Gmail" scheme="https://kdevkr.github.io/tags/Gmail/"/>
    
    <category term="SMTP" scheme="https://kdevkr.github.io/tags/SMTP/"/>
    
  </entry>
  
  <entry>
    <title>EC2 Node Exporter</title>
    <link href="https://kdevkr.github.io/ec2-node-exporter/"/>
    <id>https://kdevkr.github.io/ec2-node-exporter/</id>
    <published>2022-05-21T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.139Z</updated>
    
    <content type="html"><![CDATA[<p>조직에서 아마존 웹 서비스를 클라우드 환경으로 사용하곤 있지만 인프라 엔지니어로 구성된 인프라팀이 별도로 존재하지 않다보니 클라우드 서비스를 제대로 활용하지 않고 필요하다고 생각될 때 어떻게 사용해야하는가를 찾아보고 고민하게 되는 것 같습니다. 서버 인스턴스 모니터링에 대해서도 기본적으로는 웹 콘솔에서 지표를 확인할 수 있도록 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/monitoring_ec2.html">Amazon EC2 모니터링</a>기능을 제공하고 있지만 5분 단위로 수집되는 지표를 1분 단위로 수집하기 위해서는 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-cloudwatch-new.html">인스턴스에 대한 세부 모니터링 활성화</a>를 해야하고 더 많은 인스턴스에 대한 지표를 확인하기 위해서는 EC2 인스턴스에 <a href="https://docs.aws.amazon.com/ko_kr/AmazonCloudWatch/latest/monitoring/installing-cloudwatch-agent-ssm.html">CloudWatch 에이전트 설치</a>해야하고 별도의 비용이 추가적으로 든다는 점으로 인하여 사용하지는 않고 있습니다.</p><p>회사 사내 서버에 개인적으로 프로메테우스 및 그라파나 서버를 실행해두었기 때문에 Node Exporter를 활용해서 EC2 인스턴스에 접속할 수 있는 권한이 있다면 지표를 수집할 수 있는 방안을 마련할 수 있다고 생각되었습니다. 고객으로 부터 웹 콘솔을 접근할 수 있는 권한을 부여받기도 하고 어떤 고객은 보안 상 이유로 인하여 인프라 구성과 관리는 직접 담당하고 정해진 스펙에 따라서 생성한 EC2 인스턴스 접속 권한만 부여하기 때문에 CloudWatch를 공통적으로 사용하도록 할 수 없습니다.</p><blockquote><p>회사 사내 서버에 임시적으로 구성한 프로메테우스 및 그라파나는 모니터링 방안이 검토되면 조직내에서 운영중인 클라우드 환경으로 이전할 생각입니다.</p></blockquote><p>아무튼 현재 조직에서 모니터링 방안을 제대로 검토할 수 있는 단계는 아니지만 고객의 인프라 환경에 시스템을 배포하고 운영하고 있으므로 최소한 원인을 찾아가기 위한 지표는 남겨두어야한다고 생각하기에 Node Exporter를 일괄적으로 설치하는 작업을 수행했고 이에 대한 정보를 남기고자 합니다.</p><h2 id="Node-Exporter"><a href="#Node-Exporter" class="headerlink" title="Node Exporter"></a>Node Exporter</h2><p><a href="https://github.com/prometheus/node_exporter">Node Exporter</a>는 프로메테우스 프로젝트에서 공식적으로 지원하는 시스템 매트릭을 수집하는 방법을 제공하는 Exporter 입니다. <a href="https://prometheus.io/docs/guides/node-exporter/#installing-and-running-the-node-exporter">Installing and running the Node Exporter</a>와 같이 Node Exporter를 설치하고 실행하는 방법에 대한 가이드 문서도 제공하고 있습니다.</p><p>EC2 인스턴스는 상태가 정상적이지 않음이 확인되면 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ec2-instance-recover.html">인스턴스 복구</a> 기능으로 아마존 웹 서비스에서 자동으로 인스턴스 상태를 복원할 수 있습니다. 그래서 언제든지 EC2 인스턴스가 재부팅되어 실행중인 프로세스가 종료될 수 있습니다. 서버 인스턴스가 재부팅되어도 자동으로 프로세스가 실행되도록 유지하기 위해서 Systemd와 같은 서비스를 등록하도록 구성하는 것이 좋습니다.</p><h3 id="EC2-인스턴스-아키텍처"><a href="#EC2-인스턴스-아키텍처" class="headerlink" title="EC2 인스턴스 아키텍처"></a>EC2 인스턴스 아키텍처</h3><p>아마존 웹 서비스에서는 일반적으로 사용되는 amd64 기반의 아키텍처 뿐만 아니라 <a href="https://aws.amazon.com/ko/ec2/graviton/">Arm 기반의 AWS Graviton 프로세서</a>로 제공되는 인스턴스를 제공하고 최근에는 Arm 기반의 인스턴스를 통해 더 저렴한 가격으로 서버 인스턴스를 실행하므로 EC2 인스턴스의 아키텍처를 확인하고 사용할 수 있는 올바르게 빌드된 파일을 다운로드 받아서 설치해야합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -rmpo<span class="token number">4.14</span>.256-197.484.amzn2.aarch64 aarch64 aarch64 GNU/Linux</code></pre><h3 id="릴리즈-파일-다운로드-및-설치"><a href="#릴리즈-파일-다운로드-및-설치" class="headerlink" title="릴리즈 파일 다운로드 및 설치"></a>릴리즈 파일 다운로드 및 설치</h3><p>EC2 인스턴스의 아키텍처 유형을 확인했다면 <a href="https://github.com/prometheus/node_exporter/releases">릴리즈 파일</a>에서 위 아키텍처에 맞는 arm64가 포함된 릴리즈 파일을 다운로드합니다. 대부분의 예제는 일반적으로 사용하는 x86_64 아키텍처를 기준으로 하기 때문에 amd64를 다운로드 합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-arm64.tar.gz<span class="token function">tar</span> zxvf node_exporter-1.3.1.linux-arm64.tar.gz<span class="token function">sudo</span> <span class="token function">cp</span> node_exporter-1.3.1.linux-arm64/node_exporter /usr/local/bin/<span class="token function">sudo</span> <span class="token function">useradd</span> -M -r -s /bin/false node_exporter<span class="token function">sudo</span> <span class="token function">chown</span> node_exporter:node_exporter /usr/local/bin/node_exporter</code></pre><h4 id="Node-Exporter-용-사용자-추가"><a href="#Node-Exporter-용-사용자-추가" class="headerlink" title="Node Exporter 용 사용자 추가"></a>Node Exporter 용 사용자 추가</h4><p>인프라 엔지니어가 아니기에 사용자를 직접 추가해본적이 없어서 사용자를 추가하는 명령어에 대해서 알아보아야했습니다. 많은 예제들에서 사용자 추가 시 적용하는 옵션이 제각각이라서 더 혼란이 있었습니다. </p><ul><li><a href="https://linux.die.net/man/8/useradd">useradd(8) - Linux man page</a></li><li><a href="https://faq.hostway.co.kr/Linux_ETC/1624">&#x2F;bin&#x2F;false, &#x2F;sbin&#x2F;nologin 의 차이점</a></li><li><a href="https://linuxhint.com/add-user-linux/">How do I add a user in Linux without a home directory?</a></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo useradd --no-create-home --system --shell /bin/false node_exporter</span><span class="token function">sudo</span> <span class="token function">useradd</span> -M -r -s /bin/false node_exporter</code></pre><blockquote><p>시스템 계정을 생성하되 로그인이 불가능하도록 하면 되는 것 같습니다.</p></blockquote><h3 id="Systemd-서비스-등록"><a href="#Systemd-서비스-등록" class="headerlink" title="Systemd 서비스 등록"></a>Systemd 서비스 등록</h3><p>설치한 바이너리를 실행하기 위해서 Systemd 서비스를 등록하고 Systemctl 명령어를 통해 프로세스를 실행하고 서버가 부팅될 때 자동으로 시작되도록 활성화합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/systemd/system/node_exporter.service <span class="token operator">&lt;&lt;</span><span class="token string">"EOF"[Unit]Description=Node ExporterAfter=network.target[Service]User=node_exporterGroup=node_exporterExecStart=/usr/local/bin/node_exporter[Install]WantedBy=multi-user.targetEOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl start node_exporter<span class="token function">sudo</span> systemctl status node_exporter<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> node_exporter</code></pre><h3 id="매트릭-확인"><a href="#매트릭-확인" class="headerlink" title="매트릭 확인"></a>매트릭 확인</h3><p>Node Exporter 서비스가 정상적으로 실행됬다면 curl 명령어를 통해서 지표를 가져올 수 있는지 확인하고 종료합니다.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -s localhost:9100/metrics</code></pre><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.vmware.com/en/VMware-vRealize-Operations-Management-Pack-for-Kubernetes/1.6/kubernetes-solution/GUID-A1B68BE5-EF38-48E1-AA80-FD71E6F19989.html">Node Exporter Setup on Linux Nodes</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04">How To Install Prometheus on Ubuntu 16.04</a></li><li><a href="https://devdojo.com/ruanbekker/getting-started-with-prometheus-and-node-exporter">Getting Started with Prometheus and Node Exporter</a></li><li><a href="https://devopscube.com/monitor-linux-servers-prometheus-node-exporter/">How To Monitor Linux Servers Using Prometheus Node Exporter</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;조직에서 아마존 웹 서비스를 클라우드 환경으로 사용하곤 있지만 인프라 엔지니어로 구성된 인프라팀이 별도로 존재하지 않다보니 클라우드 서비스를 제대로 활용하지 않고 필요하다고 생각될 때 어떻게 사용해야하는가를 찾아보고 고민하게 되는 것 같습니다. </summary>
      
    
    
    
    
    <category term="EC2" scheme="https://kdevkr.github.io/tags/EC2/"/>
    
    <category term="node-exporter" scheme="https://kdevkr.github.io/tags/node-exporter/"/>
    
  </entry>
  
  <entry>
    <title>탄력적 볼륨을 지원하지 않음</title>
    <link href="https://kdevkr.github.io/not-support-ebs-modify-volume/"/>
    <id>https://kdevkr.github.io/not-support-ebs-modify-volume/</id>
    <published>2022-05-19T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.143Z</updated>
    
    <content type="html"><![CDATA[<p>지난번에 공유한 <a href="https://kdevkr.github.io/reason-for-replacing-ec2-instance-type/">EC2 인스턴스 유형을 교체하는 이유</a>를 통해 최신 인스턴스 유형을 사용하면 비슷한 성능이지만 더 적은 비용으로 사용할 수 있다는 것을 소개했습니다. 이에 따라 조직에서 사용중인 시계열 데이터베이스용 인스턴스를 <a href="https://aws.amazon.com/ko/blogs/korea/new-amazon-ec2-r5b-instances-providing-3x-higher-ebs-performance/">Amazon EC2 R5b</a>로 변경하여 최신 인스턴스 유형으로 인한 비용 절감과 더 높은 EBS 성능을 제공받을 수 있었습니다.</p><p>그러나, 어떠한 사유로 인하여 더 높은 볼륨 처리 성능을 위해서 기존에 연결하였던 gp3 볼륨 대신에 io2 볼륨으로 대체하였고 확실이 프로비저닝된 볼륨의 처리 성능이 좋다는 것을 확인할 수 있었습니다. 다만, 이때는 알지 못했던 큰 제약사항이 최근에 발견되었으며 이에 대한 내용을 공유하고자 합니다.</p><h2 id="탄력적-볼륨"><a href="#탄력적-볼륨" class="headerlink" title="탄력적 볼륨"></a>탄력적 볼륨</h2><p><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-modify-volume.html">Amazon EBS 탄력적 볼륨</a>은 인스턴스가 사용중인 볼륨을 분리하지 않더라도 볼륨의 유형을 변경하거나 크기나 IOPS와 같은 성능을 조정할 수 있는 유용한 기능입니다. 일반적으로 사용되는 대부분의 인스턴스에서 탄력적 볼륨으로 인스턴스를 중지한다던가 볼륨을 분리하지 않아도 쉽게 볼륨의 크기 또는 성능을 확장할 수 있습니다. <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/modify-volume-requirements.html">모든 현재 세대 인스턴스에서 탄력적 볼륨을 지원한다</a>는 내용만 확인하고서는 최신 인스턴스 유형이라면 당연히 볼륨 수정이 가능할 것이라고 생각하게 되었습니다.</p><h3 id="Amazon-EC2-R5b"><a href="#Amazon-EC2-R5b" class="headerlink" title="Amazon EC2 R5b"></a>Amazon EC2 R5b</h3><p>Amazon EC2 R5b는 니트로 시스템 기반의 인스턴스로 연결되는 EBS 볼륨은 NVMe 스토리지 입니다. 인스턴스 유형을 변경했을 당시에 사용했던 볼륨은 gp3로 탄력적 볼륨으로 적재되는 데이터의 양이 많아지면서 디스크 용량이 부족해질때 인스턴스를 중지하지 않고서도 볼륨을 쉽게 확장할 수 있었습니다.</p><h3 id="io2-Block-Express-볼륨"><a href="#io2-Block-Express-볼륨" class="headerlink" title="io2 Block Express 볼륨"></a>io2 Block Express 볼륨</h3><blockquote><p>R5b, X2idn 및 X2iedn 인스턴스에 연결된 io2 볼륨의 크기 또는 프로비저닝된 IOPS는 수정할 수 없습니다.</p></blockquote><p>위 문장은 오늘의 핵심 내용입니다. Amazon EC2 R5b와 같은 일부 차세대 인스턴스 유형에서는 io2 볼륨을 사용하는 것에 주의해야합니다. R5b 인스턴스는 io2 볼륨을 사용하는 경우 더 좋은 성능을 충족하기 위해서 io2 Block Express라는 차세대 볼륨으로 연결되어 제공되기 때문입니다. <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-volume-types.html#io2-bx-considerations">io2 Block Express 볼륨은 탄력적 볼륨 작업을 지원하지 않음</a></p><p>Amazon EC2 R5b와 같은 일부 차세대 인스턴스 유형에서는 io2 볼륨을 사용하는 것에 주의해야합니다. 니트로 시스템 기반의 인스턴스에서 더 좋은 성능을 충족하기 위해서 io2 Block Express라는 차세대 볼륨으로 연결되기 때문입니다. 현재 시점에서는 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/ebs-volume-types.html#io2-bx-considerations">io2 Block Express 볼륨은 탄력적 볼륨 작업을 지원하지 않음</a>을 알아야합니다.</p><blockquote><p>다른 서비스와 기능과 마찬가지로 언젠가는 io2 Block Express 볼륨도 탄력적 볼륨이 가능하도록 변경될 수 있습니다.</p></blockquote><p>사용하고 있는 시계열 데이터베이스는 기본적으로는 메모리 엔진을 사용하지만 모든 데이터를 메모리에 유지할 수 없으므로 과거 데이터는 파일로 보관해두고 불러와서 사용하는 구조이기에 메모리와 디스크 성능이 모두 중요하다고 판단해서 더 좋은 성능의 io2 볼륨으로 교체한 것인데 탄력적 볼륨의 미지원에 대한 부분을 검토하지 않음으로 인하여 오히려 큰 제약이 발생하였습니다.</p><p>시스템에 등록되는 시계열 데이터를 계속 저장하고 유지하고 있어야하므로 디스크 볼륨의 크기를 확장할 수 없다는 점은 너무 비효율적이므로 io2 볼륨에서는 gp3 볼륨으로 전환이 가능하여 gp3 유형의 볼륨에 IOPS와 처리량을 높이는 정도로 사용하고자 변경했습니다.</p><p>감사합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;지난번에 공유한 &lt;a href=&quot;https://kdevkr.github.io/reason-for-replacing-ec2-instance-type/&quot;&gt;EC2 인스턴스 유형을 교체하는 이유&lt;/a&gt;를 통해 최신 인스턴스 유형을 사용하면 비슷한 성능이</summary>
      
    
    
    
    
    <category term="AWS" scheme="https://kdevkr.github.io/tags/AWS/"/>
    
    <category term="EBS" scheme="https://kdevkr.github.io/tags/EBS/"/>
    
    <category term="R5b" scheme="https://kdevkr.github.io/tags/R5b/"/>
    
    <category term="io2 Block Express" scheme="https://kdevkr.github.io/tags/io2-Block-Express/"/>
    
  </entry>
  
  <entry>
    <title>신뢰할 수 있는 이메일 발송 도메인</title>
    <link href="https://kdevkr.github.io/email-spf-dkim-dmarc/"/>
    <id>https://kdevkr.github.io/email-spf-dkim-dmarc/</id>
    <published>2022-05-18T00:00:00.000Z</published>
    <updated>2022-09-13T14:55:18.139Z</updated>
    
    <content type="html"><![CDATA[<p>시스템을 개발하는 단계에서는 메일 발송 기능을 위해서 회사 내 서버 인프라 엔지니어분께 사내 메일 서버를 대신 이용할 수 있도록 요청하고 메일 서버를 이용할 수 있는 SMTP 서버와 사용자 인증 정보를 전달받아서 테스트하곤 했습니다. 그러나, 실제로 시스템을 운용하는 시점에 들어서자 회사 사내 메일 서버로 전달되는 전송 건들이 많아져서 회사 인프라 담당 엔지니어분으로부터 <a href="https://aws.amazon.com/ko/ses/">Amazon SES</a>로 메일 서버를 전환해달라는 요청을 받고 화사 사내 메일 서버 대신에 클라우드 환경에서 제공하는 SMTP 서버를 사용하도록 작업을 하였습니다. </p><h2 id="Amazon-SES"><a href="#Amazon-SES" class="headerlink" title="Amazon SES"></a>Amazon SES</h2><p>저는 서버 인프라 엔지니어는 아니기 때문에 인프라 영역에서 사용되는 모든 지식을 알지는 못하는데요. 개발자로써 이메일 발송 기능을 구현하는 방법에 대해서 찾아보면 <a href="/sending-mail-with-freemarker-template/">프리마커 템플릿으로 이메일 발송하기</a>와 같이 SMTP 프로토콜을 사용하면 된다는 것을 알 수 있습니다. </p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-01.png"></p><p>Amazon SES는 SMTP 엔드포인트와 STARTTLS&#x2F;TLS 옵션에 따라 사용해야하는 포트와 SMTP 인증을 위한 크레덴셜을 발급하고 인증만 하면 사용할 수 있습니다. 간단한 클릭만으로도 SMTP 크레덴셜을 발급할 수 있기 때문에 개발자라면 누구나 쉽게 사용자 인증 정보를 가져와서 메일 서버를 이용할 수 있습니다. Amazon SES는 인증된 이메일 주소로 메일을 발송할 수 있거나 도메인을 인증하여 이메일 발송에 대한 신원을 검증할 수 있도록 제공하고 있는데요. 그래서 아래와 같이 이메일 수신이 가능한 발신 이메일이 존재한다면 간단하게 발신 주소를 등록할 수 있습니다.</p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-02.png"></p><h3 id="이메일에-대한-발신-주소를-신뢰할-수-없음"><a href="#이메일에-대한-발신-주소를-신뢰할-수-없음" class="headerlink" title="이메일에 대한 발신 주소를 신뢰할 수 없음"></a>이메일에 대한 발신 주소를 신뢰할 수 없음</h3><p>간단하게 SMTP 메일 서버를 전환할 수 있기 때문에 어려운 작업은 아니라고 생각했었는데 잠시 후 예상하지 못했던 문제가 파악되었어요. Amazon SES의 SMTP 서버를 사용하도록 전환하고나서 시스템에서 발송하는 이메일을 수신자가 받았을때 스팸 메일함으로 전달되는 것이었습니다. 그래서 원인을 찾아보니 <a href="https://aws.amazon.com/ko/premiumsupport/knowledge-center/ses-email-flagged-as-spam/">Amazon SES를 사용하여 전송하는 이메일이 스팸으로 표시되는 이유는 무엇입니까?</a>와 같은 가이드를 찾았습니다. SMTP 서버에 의해 전달되는 이메일을 신뢰할 수 있는지 검증하는 것은 Amazon SES가 보장할 수 없다는 부분과 다음의 요인이 있다는 것을 안내하고 있었습니다.</p><blockquote><p><a href="https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim.html">DomainKeys Identified Mail(DKIM)</a> 또는 <a href="https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-spf.html">Sender Policy Framework(SPF)</a>와 같은 이메일 인증 부족</p></blockquote><h3 id="발신-도메인-검증"><a href="#발신-도메인-검증" class="headerlink" title="발신 도메인 검증"></a>발신 도메인 검증</h3><p><a href="https://docs.aws.amazon.com/ses/latest/dg/configure-identities.html">Configuring identities in Amazon SES</a> 문서를 살펴보면 SMTP 프로토콜은 자체적으로 인증 기능이 없다는 것과 이러한 부분으로 인해 스패머가 발신 주소를 위장할 수 있다는 점을 알게 되었습니다. 그래서 SPF 또는 DKIM와 같은 인증 매커니즘을 사용하게 된다고 소개하고 있습니다. 이제껏 듣도보도 못한 새로운 용어가 나타나게 된거죠. <a href="https://blog.cloudflare.com/ko-kr/tackling-email-spoofing-ko-kr/">이메일 스푸핑과 피싱에 대처하기</a>에서 DNS의 도메인 레코드를 사용해서 스푸핑을 방지하기 위한 매커니즘을 구성한다는 점을 이해할 수 있었습니다. </p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-03.png"></p><p>수신된 이메일이 올바른 곳으로부터 발송된 것인지를 검증하기 위해서는 도메인 기반으로 신원을 검증하고 SPF, DKIM, DMARC와 같은 DNS 레코드를 도메인에 설정해야했습니다. 다행히도 Route53으로 도메인을 사용중이기에 Amazon SES에서 자동으로 DNS 레코드를 설정할 수 있었습니다. <a href="https://docs.aws.amazon.com/ko_kr/ses/latest/dg/send-email-authentication-dmarc.html">Amazon SES를 사용하여 DMARC 준수</a>에 따라 도메인 레코드에 DMARC 정책이 설정되었는지를 확인하고 Amazon SES가 도메인을 검증하기를 기다렸습니다.</p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-04.png"></p><h3 id="이메일-보안-DNS-레코드-질의"><a href="#이메일-보안-DNS-레코드-질의" class="headerlink" title="이메일 보안 DNS 레코드 질의"></a>이메일 보안 DNS 레코드 질의</h3><p>DKIM으로 도메인 검증을 하였음을 확인하였고 추가적으로 dig와 같은 DNS 질의 명령어 도구를 통해서 DNS 레코드가 반영되었는지 확인할 수 있었습니다. </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># SPF 레코드 확인</span><span class="token function">dig</span> TXT example.com +short<span class="token string">"v=spf1 include:_spf.google.com ip4:xxx.xxx.xxx.xxx a:mail.example.com ~all"</span><span class="token comment"># DKIM 레코드 확인</span><span class="token function">dig</span> TXT google._domainkey.example.com +short<span class="token string">"v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoamWoQQ5zEdcFQnGaWN055oT3sEnCgN5bcAze5R6uvI1P"</span> <span class="token string">"X4d+CGbNDSVJqOmQPyrJdK2fOVG3hvjMkoilYcgWrGKDat2Nh29ftN5tTx5SVK/kl+5aPKRd9q6q9c9EWL7aRS2hqoGRyzW0Nb0ilKZc/"</span> <span class="token string">"odDbh3bgNhN6AJqIZwlE9BJgkYT5aT6TGJM/Vi4GJcYDEKm6yDexTJKzfZ8o8TCRDufCYDF8F+dKKyLvyaKrngfgIjRi5PiGVGbyNrIL7iMp1CkJ7ErpkYCJw5DeTQkXi8Gxt+Km61sIP2F8IZyd/"</span> <span class="token string">"WrEXJmk2pHzRfiJJqIiY4r3s4loR/sJ4hQPS6HEq7JQIDAQAB"</span><span class="token comment"># DMARC 레코드 확인</span><span class="token function">dig</span> TXT _dmarc.example.com +short<span class="token string">"v=DMARC1; p=quarantine; rua=mailto:postmaster@example.com; ruf=mailto:postmaster@example.com"</span></code></pre><h3 id="발신-도메인-신뢰-확인"><a href="#발신-도메인-신뢰-확인" class="headerlink" title="발신 도메인 신뢰 확인"></a>발신 도메인 신뢰 확인</h3><p>도메인 기반의 인증 매커니즘이 적용되고나서는 수신된 이메일이 스팸으로 분류되지 않게 되었고 원본 메일 정보를 확인하면 SPF, DKIM, DMARC에 대한 검증이 통과된 것을 확인할 수 있습니다.</p><p><img data-src="/images/posts/email-spf-dkim-dmarc/ses-05.png"></p><blockquote><p>원본 메일을 확인하는 것은 서버 인프라 엔지니어분이 알려주셨어요! 😁</p></blockquote><p>SMTP 서버를 Amazon SES로 전환하는 경험을 통해서 이메일이 정상적인 곳으로부터 발신되었다는 것을 검증하기 위해서 도메인 레코드를 사용하는 매커니즘을 이용한다는 지식을 알게되었습니다. 수신된 이메일을 검증하는 과정을 더 자세하게 알고 싶다면 <a href="https://www.learndmarc.com/">이메일의 SPF&#x2F;DKIM&#x2F;DMARC가 어떻게 동작하는지 인터랙티브하게 보기</a>를 이용해보시기 바랍니다. </p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://aws.amazon.com/ko/premiumsupport/knowledge-center/ses-email-flagged-as-spam/">Amazon SES를 사용하여 전송하는 이메일이 스팸으로 표시되는 이유는 무엇입니까?</a></li><li><a href="https://blog.cloudflare.com/ko-kr/tackling-email-spoofing-ko-kr/">이메일 스푸핑과 피싱에 대처하기</a></li><li><a href="https://www.learndmarc.com/">이메일의 SPF&#x2F;DKIM&#x2F;DMARC가 어떻게 동작하는지 인터랙티브하게 보기</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;시스템을 개발하는 단계에서는 메일 발송 기능을 위해서 회사 내 서버 인프라 엔지니어분께 사내 메일 서버를 대신 이용할 수 있도록 요청하고 메일 서버를 이용할 수 있는 SMTP 서버와 사용자 인증 정보를 전달받아서 테스트하곤 했습니다. 그러나, 실</summary>
      
    
    
    
    
    <category term="SPF" scheme="https://kdevkr.github.io/tags/SPF/"/>
    
    <category term="DKIM" scheme="https://kdevkr.github.io/tags/DKIM/"/>
    
    <category term="DMARC" scheme="https://kdevkr.github.io/tags/DMARC/"/>
    
  </entry>
  
</feed>
