<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>잠만보의 개발 블로그</title>
  
  <subtitle>잠만보가 알려주는 개발 이야기</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kdevkr.github.io/"/>
  <updated>2020-07-16T12:37:57.052Z</updated>
  <id>https://kdevkr.github.io/</id>
  
  <author>
    <name>Mambo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker - 도커 엔진 설치하기</title>
    <link href="https://kdevkr.github.io/dev-ops/docker/install-docker-engine/"/>
    <id>https://kdevkr.github.io/dev-ops/docker/install-docker-engine/</id>
    <published>2020-07-16T12:37:57.052Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>도커 컨테이너 환경을 경험해보기 위해서는 컨테이너 구동을 위한 도커 엔진을 설치해야합니다. MacOS 또는 윈도우 환경에서는 Docker Desktop을 설치하면 자동으로 도커 엔진이 설치됩니다. 다만, 우분투와 같은 리눅스 서버는 도커 데스크탑을 제공하지 않으므로 직접 바이너리 패키지를 받아 설치해야합니다.</p><h2 id="도커-엔진-설치하기">도커 엔진 설치하기</h2><p>우분투 리눅스에서 도커 엔진을 설치하기 위해서는 다음의 64비트 버전이 필요합니다.</p><ul><li>Ubuntu Focal 20.04</li><li>Ubuntu Bionic 18.04</li><li>Ubuntu Xenial 16.04</li></ul><p>Docker Engine is supported on x86_64 (or amd64), armhf, and arm64 architectures.</p><h3 id="리파지토리-설정">리파지토리 설정</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure><h3 id="도커-엔진-패키지-설치">도커 엔진 패키지 설치</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="도커-컴포즈-설치하기">도커 컴포즈 설치하기</h2><p>리눅스에서 도커 컴포즈를 이용하기 위해서는 별도로 설치해야합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.26.2, build eefe0d31</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;도커 컨테이너 환경을 경험해보기 위해서는 컨테이너 구동을 위한 도커 엔진을 설치해야합니다. MacOS 또는 윈도우 환경에서는 Docker Desktop을 설치하면 자동으로 도커 엔진이 설치됩니다. 다만,
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker - 스토리지 사용하기</title>
    <link href="https://kdevkr.github.io/dev-ops/docker/use-storage/"/>
    <id>https://kdevkr.github.io/dev-ops/docker/use-storage/</id>
    <published>2020-07-14T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>기본적으로 도커 컨테이너에서 발생하는 데이터는 컨테이너 공간에 저장되어 컨테이너가 삭제되는 순간 데이터가 같이 삭제되는 구조를 가지고 있습니다. 이에 도커는 볼륨이라는 매커니즘을 제공하여 컨테이너가 삭제되어도 데이터를 유지할 수 있도록 영속성을 제공합니다.</p><h2 id="스토리지">스토리지</h2><p>도커에서 데이터를 유지하기 위해 제공하는 스토리지 유형에는 볼륨과 마운트가 있습니다. 일반적으로 호스트 영역과 연결하는 것이 바인드 마운트이며 볼륨은 도커가 관리하는 영역에 데이터를 유지하는 공간을 만들어내는 것입니다.</p><p><img data-src="https://docs.docker.com/storage/images/types-of-mounts.png" alt=""></p><p><code>볼륨 영역</code>(리눅스에서 /var/lib/docker/volumes/)은 도커에서 관리하기 때문에 도커 프로세스가 아닌 경우 데이터를 수정할 수 없게 됩니다. 따라서, 도커에서 데이터를 유지하는 가장 좋은 방법은 볼륨을 사용하는 것일 수 있습니다.</p><p><code>바인드 마운트</code>는 호스트 디렉토리를 사용하기 때문에 언제든지 영역에 접근하고 데이터를 수정할 수 있습니다. 단, 호스트 프로세스에서 해당 영역을 사용하거나 접근할 수 있기 때문에 이를 인지하고 사용해야 합니다.</p><p><code>tmpfs 마운트</code>는 호스트 메모리 영역에 데이터를 저장합니다. 예를 들어, 쿠버네티스 스크릿의 경우 비밀번호, OAuth 토큰, SSH 키와 같은 민감한 정보들은 호스트 메모리에 저장합니다.</p><h3 id="바인드-마운트-연습하기">바인드 마운트 연습하기</h3><p>도커 이미지로 구성한 <a href="https://github.com/kdevkr/docker-kdb" target="_blank" rel="noopener">Docker KDB+</a>는 KDB+를 우분투 컨테이너에서 구동하도록 되어있습니다. KDB+가 실행될 때 호출되는 <code>q.q</code>라는 q 스크립트 파일이 있습니다. 기본으로 이미지에 포함되어 있는 q.q 스크립트 대신에 실행할 스크립트를 바인드 마운트를 통해 연결할 수 있습니다.</p><p><code>Hello Mambo!</code>라는 메시지를 KDB+ 실행할 때 출력하기 위하여 q.q 파일을 만들어 다음과 같이 스크립트를 작성합니다. 이 파일은 <code>/home/mambo/kdb</code> 경로에 있다고 가정합니다.</p><figure class="highlight q"><figcaption><span>q.q</span></figcaption><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.out.println:&#123;<span class="number">-1</span> <span class="built_in">raze</span>[<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P],<span class="string">" "</span>,x;&#125;;</span><br><span class="line">.<span class="built_in">system</span>.out.println <span class="string">"Hello Mambo!"</span>;</span><br></pre></td></tr></table></figure><p>그런 다음 도커 컨테이너를 실행할 때 <code>-v</code> 옵션으로 앞서 작성한 q.q 파일을 이미지에 존재하는 파일로 대체하도록 지정합니다.</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name kdb -v /home/mambo/kdb/q.q:/root/q/q.q -e ON_STARTUP=/root/q/q.q -p 5000:5000 kdb</span></span><br></pre></td></tr></table></figure><p>그러면 해당 스크립트 파일이 대체되어 다음과 같이 컨테이너 로그로 출력되는 것을 확인할 수 있습니다.</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ docker logs kdb</span><br><span class="line">0</span><br><span class="line">Welcome to kdb+ 32bit edition</span><br><span class="line">For support please see http://groups.google.com/d/forum/personal-kdbplus</span><br><span class="line">Tutorials can be found at http://code.kx.com</span><br><span class="line">To <span class="built_in">exit</span>, <span class="built_in">type</span> \\</span><br><span class="line">To remove this startup msg, edit q.q</span><br><span class="line">2020.07.15 12:14:13 Hello Mambo!</span><br></pre></td></tr></table></figure><h3 id="볼륨-마운트-연습하기">볼륨 마운트 연습하기</h3><p>도커 컨테이너에 볼륨을 마운트하는 것을 해보겠습니다. 먼저 <code>docker inspect</code> 명령으로 컨테이너에서 사용중인 볼륨이 있는지를 확인합니다.</p><p>컨테이너에 대한 마운트 부분을 추출하기 위하여 <a href="https://stackoverflow.com/questions/30133664/how-do-you-list-volumes-in-docker-containers" target="_blank" rel="noopener">How do you list volumes in docker containers?</a>에서 알려주는대로 명령어를 실행합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker inspect -f <span class="string">'&#123;&#123; .Mounts &#125;&#125;'</span> kdb</span><br><span class="line">[&#123;<span class="built_in">bind</span>  /home/mambo/kdb/q.q /root/q/q.q   <span class="literal">true</span> rprivate&#125;]</span><br></pre></td></tr></table></figure><p>현재 KDB 컨테이너는 바인드 마운트에 대한 정보는 있으나 볼륨에 대한 정보는 존재하지 않음을 확인할 수 있습니다. 결국 KDB+ 데이터는 컨테이너 영역에 존재하므로 데이터를 유지하기 위하여 볼륨을 사용해야 합니다.</p><p>우선 KDB 컨테이너에서 사용할 볼륨을 생성합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker create volume --name kdb-volume</span><br><span class="line">$ docker volume ls</span><br><span class="line">DRIVER      VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>       kdb-volume</span><br></pre></td></tr></table></figure><p>기존 KDB 컨테이너를 삭제한 후 앞서 생성하였던 KDB 볼륨을 마운트합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker stop kdb</span><br><span class="line">$ docker rm kdb</span><br><span class="line"></span><br><span class="line">$ docker run -d --name kdb -v kdb-volume:/root/q -v /home/mambo/kdb/q.q:/root/q/q.q -e ON_STARTUP=/root/q/q.q -p 5000:5000 kdb</span><br></pre></td></tr></table></figure><p>다시 컨테이너에 대한 마운트 부분을 확인하면 다음과 같이 볼륨을 사용하고 있는 것을 알 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker inspect -f <span class="string">'&#123;&#123; .Mounts &#125;&#125;'</span> kdb                                                                                       </span><br><span class="line">[&#123;volume kdb-volume /var/lib/docker/volumes/kdb-volume/_data /root/q <span class="built_in">local</span> z <span class="literal">true</span> &#125; &#123;<span class="built_in">bind</span>  /home/mambo/kdb/q.q /root/q/q.q   <span class="literal">true</span> rprivate&#125;]</span><br></pre></td></tr></table></figure><h2 id="참고">참고</h2><ul><li><a href="https://docs.docker.com/storage/" target="_blank" rel="noopener">Manage data in Docker</a></li><li><a href="https://stackoverflow.com/questions/30133664/how-do-you-list-volumes-in-docker-containers" target="_blank" rel="noopener">How do you list volumes in docker containers?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;기본적으로 도커 컨테이너에서 발생하는 데이터는 컨테이너 공간에 저장되어 컨테이너가 삭제되는 순간 데이터가 같이 삭제되는 구조를 가지고 있습니다. 이에 도커는 볼륨이라는 매커니즘을 제공하여 컨테이너가 삭제
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://kdevkr.github.io/tags/Docker/"/>
    
      <category term="Volume" scheme="https://kdevkr.github.io/tags/Volume/"/>
    
  </entry>
  
  <entry>
    <title>KDB - System Common Logging</title>
    <link href="https://kdevkr.github.io/database/kdb/system-common-logging/"/>
    <id>https://kdevkr.github.io/database/kdb/system-common-logging/</id>
    <published>2020-07-08T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>KDB+/q 스크립트에서 로그 메시지를 출력하는 방법과 함께 <code>Log4j</code>와 같이 로그 레벨 기반의 로깅 시스템을 적용하기 위한 방법에 대해서 알아봅니다.</p><h2 id="System-Common-Logging">System Common Logging</h2><h3 id="Write-in-Console">Write in Console</h3><p>KDB+에서 콘솔에 값을 출력하기 위한 방법은 여러가지가 있습니다.</p><ul><li><a href="https://code.kx.com/q/ref/display/" target="_blank" rel="noopener">!Display</a></li><li><a href="https://code.kx.com/q/ref/show/" target="_blank" rel="noopener">show</a></li><li>-1 또는 -2</li></ul><p>기본 <code>q.q</code> 파일의 내용에서처럼 <code>-1</code>과 <code>-2</code>를 이용하여 문자열을 출력할 수 있습니다.</p><figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">"Welcome to kdb+ 32bit edition\nFor support please see http://groups.google.com/d/forum/personal-kdbplus\nTutorials can be found at http://code.kx.com\nTo exit, type \\\\\nTo remove this startup msg, edit q.q"</span>;</span><br></pre></td></tr></table></figure><p>단, <code>!Display</code> 와 <code>show</code>는 따옴표가 그대로 출력되므로 감안하고 사용하시기 바랍니다.</p><h3 id="System-out-println">System.out.println</h3><p>자바에서 가장 기본적인 로그 출력 함수는 <code>System.out.println</code>입니다. 그렇다면 q 스크립트에서 사용할 기본 메시지 출력 함수를 만들어봅시다.</p><figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.out.println:&#123;<span class="number">-1</span> <span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P,<span class="string">" "</span>,x;&#125;</span><br><span class="line">/ join strings using <span class="built_in">raze</span></span><br><span class="line">.<span class="built_in">system</span>.out.println:&#123;<span class="number">-1</span> <span class="built_in">raze</span>[(<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P;<span class="string">" "</span>;x)];&#125;</span><br></pre></td></tr></table></figure><p>로컬 타임스탬프에서 날짜와 시간을 추출하여 하나의 문자열로 만든 후 파라미터로 받은 문자열 x를 결합하여 콘솔로 출력합니다.</p><h3 id="Logging-with-LogLevel">Logging with LogLevel</h3><p>기본 메시지 출력 함수를 정의해보았으나 이를 사용하기에는 뭔가 좀 불편한 부분이 있습니다. <code>Log4j</code>와 같은 라이브러리는 로그 레벨에 따라 로그를 출력할지 말지를 결정합니다. 우리도 기본 메시지 출력 함수를 로그 레벨에 따라 출력되도록 확장해봅시다.</p><p>먼저, <code>.system</code> 네임스페이스에 데이터베이스에 대한 로그 레벨 변수를 만들겠습니다.<br>로그 레벨은 다음과 같이 error, info, warn, debug, trace로 구성합니다.</p><figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line">\d .<span class="built_in">system</span></span><br><span class="line">logLevel: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">/ 로그 출력 형식</span><br><span class="line"><span class="number">-1</span> <span class="built_in">raze</span>[<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P],<span class="string">" "</span>,<span class="string">"INFO"</span>,<span class="string">" - "</span>,<span class="string">"Hello World"</span>]</span><br></pre></td></tr></table></figure><p>로그 출력함수는 <code>날짜 시간 로그레벨 - 메시지</code> 형식으로 출력합니다. 이제 로그레벨별로 로그 함수를 정의합니다.</p><figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.log:&#123;if[x &lt;= .<span class="built_in">system</span>.logLevel;<span class="number">-1</span> <span class="built_in">raze</span>[<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P],<span class="string">" "</span>,y,<span class="string">" - "</span>,z]&#125;</span><br><span class="line"></span><br><span class="line">.log.error: .<span class="built_in">system</span>.log[<span class="number">0</span>;<span class="string">"[ERROR]"</span>]</span><br><span class="line">.log.info: .<span class="built_in">system</span>.log[<span class="number">1</span>;<span class="string">"[INFO]"</span>]</span><br><span class="line">.log.warn: .<span class="built_in">system</span>.log[<span class="number">2</span>;<span class="string">"[WARN]"</span>]</span><br><span class="line">.log.debug: .<span class="built_in">system</span>.log[<span class="number">3</span>;<span class="string">"[DEBUG]"</span>]</span><br><span class="line">.log.trace: .<span class="built_in">system</span>.log[<span class="number">4</span>;<span class="string">"[TRACE]"</span>]</span><br></pre></td></tr></table></figure><p>그러면 이제 시스템 로그 레벨을 디버그로 설정하고 디버그 단위로 출력하면 시스템 로그로 남기게 됩니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.logLevel:<span class="number">3</span></span><br><span class="line">.log.debug <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">/ <span class="number">2020.07</span><span class="number">.08</span> <span class="number">09</span>:<span class="number">10</span>:<span class="number">54</span> [DEBUG] - Hello World</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;KDB+/q 스크립트에서 로그 메시지를 출력하는 방법과 함께 &lt;code&gt;Log4j&lt;/code&gt;와 같이 로그 레벨 기반의 로깅 시스템을 적용하기 위한 방법에 대해서 알아봅니다.&lt;/p&gt;
&lt;h2 id=&quot;Sys
      
    
    </summary>
    
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL - Monitoring</title>
    <link href="https://kdevkr.github.io/database/postgresql/monitoring/"/>
    <id>https://kdevkr.github.io/database/postgresql/monitoring/</id>
    <published>2020-07-08T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>저는 PostgreSQL를 주 관계형 데이터베이스로 사용하고 있습니다. 최근 프로메테우스와 그라파나를 연계하여 모니터링 대시보드를 구성하는 것을 연습해보고 있습니다. <code>PostgresSQL</code>를 위한 <a href="https://github.com/wrouesnel/postgres_exporter" target="_blank" rel="noopener">Prometheus Exporter</a>를 제공하고 있으므로 이를 활용해보도록 하겠습니다.</p><p>본 글은 프로메테우스와 그라파나가 설치되어있다는 가정하에 진행됩니다. 만약, 프로메테우스 또는 그라파나가 구성되어있지 않다면 다음 링크들을 참고하여 설치하시기 바랍니다.</p><ul><li><a href="https://prometheus.io/docs/prometheus/latest/installation/#using-docker" target="_blank" rel="noopener">Prometheus Installation Using Docker</a></li><li><a href="https://grafana.com/docs/grafana/latest/installation/docker/" target="_blank" rel="noopener">Run Grafana Docker image</a></li></ul><h2 id="PostgreSQL-Server-Exporter">PostgreSQL Server Exporter</h2><p><a href="https://github.com/wrouesnel/postgres_exporter" target="_blank" rel="noopener">wrouesnel/postgres_exporter</a>는 포스트그레 서버 매트릭을 위한 Prometheus Exporter 입니다. 도커를 이용하면 쉽게 PostgreSQL Exporter를 실행할 수 있습니다.</p><h3 id="도커-이미지-설치">도커 이미지 설치</h3><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name=postgres_exporter --net=host -e DATA_SOURCE_NAME=<span class="string">"postgresql://postgres:password@localhost:5432/postgres?sslmode=disable"</span> wrouesnel/postgres_exporter</span></span><br></pre></td></tr></table></figure><p>이제 <a href="http://localhost:9187/metrics" target="_blank" rel="noopener">http://localhost:9187/metrics</a> 에서 PostgreSQL 서버 매트릭을 확인할 수 있습니다.</p><p><img data-src="/database/postgresql/images/prometheus-exporter-metrics.png" alt=""></p><h3 id="프로메테우스-타겟-적용">프로메테우스 타겟 적용</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">localhost:9187</span></span><br></pre></td></tr></table></figure><p><img data-src="/database/postgresql/images/prometheus-targets.png" alt=""></p><h3 id="그라파나-대시보드-추가">그라파나 대시보드 추가</h3><p>Grafana Labs에서 <code>wrouesnel/postgres_exporter</code>으로 수집된 매트릭을 기반으로 구성한 대시보드를 찾아 추가합니다.</p><p>저는 <a href="https://grafana.com/grafana/dashboards/9628" target="_blank" rel="noopener">PostgreSQL Database by Lucas Estienne</a> 대시보드를 추가하겠습니다.</p><p><img data-src="/database/postgresql/images/grafana-dashboard.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;저는 PostgreSQL를 주 관계형 데이터베이스로 사용하고 있습니다. 최근 프로메테우스와 그라파나를 연계하여 모니터링 대시보드를 구성하는 것을 연습해보고 있습니다. &lt;code&gt;PostgresSQL&lt;/c
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="Postgres" scheme="https://kdevkr.github.io/tags/Postgres/"/>
    
  </entry>
  
  <entry>
    <title>KDB - Prometheus Exporter</title>
    <link href="https://kdevkr.github.io/database/kdb/prometheus-exporter/"/>
    <id>https://kdevkr.github.io/database/kdb/prometheus-exporter/</id>
    <published>2020-07-03T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>2020년 5월에 <a href="https://github.com/KxSystems/prometheus-kdb-exporter" target="_blank" rel="noopener">KxSystems/prometheus-kdb-exporter</a> 프로젝트가 추가되어 프로메테우스로 KDB+ 에 대한 모니터링을 할 수 있게 되었습니다.</p><p>이번 글에서는 Prometheus Exporter를 KDB+에 적용하고 모니터링하는 것에 대하여 설명하겠습니다.</p><h2 id="🛠-Prometheus-Exporter-for-KDB">🛠 Prometheus Exporter for KDB+</h2><p>프로젝트 예제에서는 KDB+를 구동하면서 Exporter를 실행하는 것을 설명합니다. 하지만, 저는 KDB+ 구동과 상관없이 Prometheus Exporter를 원할때 추가할 수 있도록 스크립트를 불러오도록 하겠습니다.</p><h3 id="Dynamic-Load-exporter-q">Dynamic Load exporter.q</h3><p>프로젝트에서 제공하는 <code>exporter.q</code>와 <code>extract.q</code>를 불러올 수 있도록 파일을 복사합니다.</p><p>저는 KDB+ 구동 시 실행되는 <code>q.q</code> 파일 하위에 <code>prometheus-exporter</code>라는 폴더를 만들었습니다.</p><p><img data-src="/database/kdb/images/prometheus-exporter-dir.png" alt=""></p><p>q 에서는 <code>\</code> 또는 <code>system</code> 을 통해 시스템 명령어를 수행할 수 있습니다.</p><p>예를 들어, q에서 바라보는 현재 디렉토리가 <code>q/data</code>라고 한다면 다음과 같이 디렉토리를 이동하고 파일을 불러올 수 있게 됩니다.</p><figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">system</span> <span class="string">"cd ../prometheus-exporter"</span></span><br><span class="line"><span class="built_in">system</span> <span class="string">"l exporter.q"</span></span><br><span class="line"><span class="built_in">system</span> <span class="string">"cd ../data"</span></span><br></pre></td></tr></table></figure><h3 id="KDB-Prometheus-Metrics">KDB+ Prometheus Metrics</h3><p>exporter.q가 정상적으로 불러와졌다면 브라우저로 <code>/metrics</code> 경로로 접속하여 Prometheus Metrics를 확인할 수 있습니다.</p><p><img data-src="/database/kdb/images/kdb-prometheus-metrics.png" alt=""></p><p>이제 프로메테우스가 이 주소를 통해 매트릭을 수집할 수 있도록 설정하면 됩니다.</p><figure class="highlight"><figcaption><span>prometheus.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets: []</span><br><span class="line">    scheme: http</span><br><span class="line">    timeout: 10s</span><br><span class="line">    api_version: v1</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: prometheus</span><br><span class="line">  honor_timestamps: true</span><br><span class="line">  scrape_interval: 1m</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  metrics_path: /metrics</span><br><span class="line">  scheme: http</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - localhost:9090</span><br><span class="line"></span><br><span class="line">- job_name: kdb</span><br><span class="line">  honor_timestamps: true</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - localhost:5000</span><br></pre></td></tr></table></figure><h2 id="🖥-Grafana-Dashboard">🖥 Grafana Dashboard</h2><p>다음의 링크를 통해 그라파나 대시보드를 구성할 수 있는 json 정보를 확인할 수 있습니다.</p><p><a href="https://github.com/KxSystems/prometheus-kdb-exporter/blob/oligarch/examples/DockerCompose/grafana-config/dashboards/kdb-dashboard.json" target="_blank" rel="noopener">https://github.com/KxSystems/prometheus-kdb-exporter/blob/oligarch/examples/DockerCompose/grafana-config/dashboards/kdb-dashboard.json</a></p><p>그라파나 대시보드 Import 기능을 통해 KDB+ 대시보드를 구성합니다.</p><p><img data-src="/database/kdb/images/import-grafana-dashboard-for-kdb.png" alt=""></p><p>이제 그라파나가 프로메테우스로 수집된 KDB+ 정보를 시각화 할 수 있습니다.</p><p><img data-src="/database/kdb/images/grafana-kdb-dashbaord.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;2020년 5월에 &lt;a href=&quot;https://github.com/KxSystems/prometheus-kdb-exporter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;KxSystems
      
    
    </summary>
    
    
    
      <category term="Prometheus" scheme="https://kdevkr.github.io/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://kdevkr.github.io/tags/Grafana/"/>
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL - Install</title>
    <link href="https://kdevkr.github.io/database/postgresql/install/"/>
    <id>https://kdevkr.github.io/database/postgresql/install/</id>
    <published>2020-07-02T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>PostgreSQL에 입문하기 위한 가장 첫단계는 PostgreSQL을 설치하는 것입니다.</p><p><a href="https://www.postgresql.org/download/" target="_blank" rel="noopener">공식 홈페이지</a>에서 여러가지 운영체제 환경에 대한 바이너리 패키지를 제공합니다.</p><h2 id="설치">설치</h2><p>실제 애플리케이션 프로덕션 환경이 아니라면 직접 <code>바이너리 패키지</code>를 다운받아 설치하는 것보다는 <code>도커 컨테이너</code>로 구동하는 것이 좋습니다.</p><h3 id="도커-이미지-다운로드">도커 이미지 다운로드</h3><p>도커 <code>pull</code> 명령어를 통해 PostgreSQL 이미지를 다운로드하고 컨테이너를 실행합니다.</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ sudo docker pull postgres:9.6.18-alpine</span><br><span class="line">$ sudo docker run --name postgres -d -e POSTGRES_PASSWORD=password -p 5432:5432 postgres:9.6.18-alpine</span><br></pre></td></tr></table></figure><p>PostgreSQL 도커 컨테이너가 실행되었다면 다음과 같이 쉘로 접속합니다.</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it postgres /bin/bash</span><br></pre></td></tr></table></figure><p><code>root</code> 사용자에서 <code>postgres</code> 사용자로 전환하여 데이터베이스에 접근합니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/passwd | grep postgre</span><br><span class="line">postgres:...:/var/lib/postgresql:/bin/sh</span><br><span class="line"></span><br><span class="line">$ su postgres</span><br><span class="line">$ psql</span><br></pre></td></tr></table></figure><h3 id="CREATE-DATABASE-AND-USER">CREATE DATABASE AND USER</h3><p>데이터베이스를 생성하고 데이터베이스에 접근할 수 있는 사용자를 만들어봅니다.</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test_db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> mambo <span class="keyword">WITH</span> <span class="keyword">ENCRYPTED</span> <span class="keyword">PASSWORD</span> <span class="string">'mambo'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> <span class="keyword">DATABASE</span> test_db <span class="keyword">TO</span> mambo;</span><br></pre></td></tr></table></figure><h3 id="PostgreSQL-Interactive-Terminal">PostgreSQL Interactive Terminal</h3><p>이제 psql을 이용하여 <code>mambo</code> 사용자로 <code>test_db</code> 데이터베이스에 접속할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ psql test_db -U mambo</span><br></pre></td></tr></table></figure><h2 id="참고">참고</h2><ul><li><a href="https://www.postgresql.org/docs/current/sql-createuser.html" target="_blank" rel="noopener">PostgreSQL - CREATE USER</a></li><li><a href="https://www.postgresql.org/docs/current/sql-createdatabase.html" target="_blank" rel="noopener">PostgreSQL - CREATE DATABASE</a></li><li><a href="https://www.postgresql.org/docs/current/sql-grant.html" target="_blank" rel="noopener">PostgreSQL - GRANT</a></li><li><a href="https://www.postgresql.org/docs/current/app-psql.html" target="_blank" rel="noopener">PostgreSQL - psql</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;PostgreSQL에 입문하기 위한 가장 첫단계는 PostgreSQL을 설치하는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org/download/&quot; target=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>프로메테우스와 그라파나를 활용한 메트릭 모니터링</title>
    <link href="https://kdevkr.github.io/dev-ops/monitoring-metrics-with-prometheus-and-grafana/"/>
    <id>https://kdevkr.github.io/dev-ops/monitoring-metrics-with-prometheus-and-grafana/</id>
    <published>2020-03-25T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<p>오픈 소스 모니터링 시스템인 프로메테우스(Prometheus)와 오픈 소스 분석 시스템인 그라파나(Grafana)를 활용하면 메트릭에 대한 모니터링 대시보드를 구성할 수 있습니다.</p><h2 id="프로메테우스">프로메테우스</h2><p><img data-src="https://prometheus.io/assets/architecture.png" alt=""></p><p><a href="https://prometheus.io/" target="_blank" rel="noopener">프로메테우스(Prometheus)</a>는 메트릭을 수집(Scraping)하여 시계열(Timeseries) 데이터베이스에 저장하는 모니터링 솔루션입니다.</p><p>위 아키텍처 그림에서 Exporter는 프로메테우스가 수집할 수 있는 메트릭을 제공하는 에이전트입니다. 프로메테우스 조직에서 제공하는 공식 Exporter 뿐만 아니라 PostgreSQL 또는 <a href="https://micrometer.io/docs/registry/prometheus" target="_blank" rel="noopener">Micrometer</a>와 같은 <a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">서드 파티 Exporter</a>가 있습니다. 주로 사용되는 대부분의 시스템에 대한 Exporter가 있으니 찾아서 프로메테우스에 Exporter로 적용하면 됩니다.</p><h3 id="설치-및-구성">설치 및 구성</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name=prometheus -d -p 9090:9090 -v <span class="variable">$pwd</span>/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure><p>도커 이미지의 기본 구성 파일은 다음과 같습니다.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure><h2 id="그라파나">그라파나</h2><p><a href="https://grafana.com/grafana/" target="_blank" rel="noopener">그라파나(Grafana)</a>는 여러가지 데이터베이스에 저장된 메트릭을 시각화하여 보여주는 대시보드 솔루션입니다.</p><p><a href="https://play.grafana.org/d/000000012/grafana-play-home?orgId=1" target="_blank" rel="noopener">라이브 데모</a></p><p>그라파나는 대표적인 Graphite, InfluxDB, Prometheus, Elasticsearch, AWS CloudWatch 이외에도 30개가 넘는 <a href="https://grafana.com/grafana/plugins?direction=asc&amp;orderBy=weight&amp;type=datasource" target="_blank" rel="noopener">데이터 소스</a>를 지원합니다.</p><h3 id="설치-및-구성-2">설치 및 구성</h3><p>본 글에서는 간단하게 <a href="https://grafana.com/grafana/download?platform=docker" target="_blank" rel="noopener">도커 이미지</a>를 통해 그라파나 컨테이너를 실행합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name=grafana -p 3000:3000 grafana/grafana</span><br></pre></td></tr></table></figure><p>설치가 완료되었으면 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 으로 접속하여 관리자 계정으로 로그인 후 초기 비밀번호를 변경합니다.</p><blockquote><p>관리자 계정명과 초기 비밀번호는 <code>admin</code>입니다.</p></blockquote><h2 id="프로메테우스와-그라파나">프로메테우스와 그라파나</h2><p>프로메테우스에 저장된 메트릭을 그라파나를 활용하여 시각화할 수 있습니다.</p><h3 id="프로메테우스-데이터-소스-추가">프로메테우스 데이터 소스 추가</h3><p>그라파나 시스템에 접속하여 프로메테우스를 데이터 소스로 추가합니다.</p><p><img data-src="/dev-ops/images/grafana-datasource-prometheus-configuration.PNG#full" alt=""></p><p>그라파나가 기본으로 제공하는 프로메테우스 대시보드를 선택하여 시각화된 프로메테우스 메트릭을 확인합니다.</p><p><img data-src="/dev-ops/images/grafana-datasource-prometheus-dashboard.PNG#full" alt=""></p><h3 id="Spring-Boot-Actuator-메트릭-모니터링">Spring Boot Actuator 메트릭 모니터링</h3><p>스프링 부트 액추에이터를 사용중인 경우 프로메테우스의 <a href="https://micrometer.io/docs/registry/prometheus" target="_blank" rel="noopener">Micromiter Exporter</a>를 쉽게 적용할 수 있습니다.</p><h4 id="Micrometer-Registry-Prometheus">Micrometer Registry Prometheus</h4><p>프로메테우스가 메트릭을 수집할 수 있도록 HTTP 엔드포인트를 구성합니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">implementation <span class="string">'io.micrometer:micrometer-registry-prometheus'</span></span><br></pre></td></tr></table></figure><p>두 의존성을 가지는 프로젝트를 생성한 뒤 기본 매니지먼트 서버를 비활성화하고 별도의 HTTP 엔드포인트를 구현합니다.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p><code>micrometer-registry-prometheus</code>가 의존성으로 존재하면 자동으로 <code>PrometheusScrapeEndpoint</code> 빈이 컨텍스트에 등록됩니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/actuator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActuatorEndpoint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PrometheusScrapeEndpoint prometheusScrapeEndpoint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActuatorEndpoint</span><span class="params">(PrometheusScrapeEndpoint prometheusScrapeEndpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prometheusScrapeEndpoint = prometheusScrapeEndpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/prometheus"</span>, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;, produces = MediaType.TEXT_PLAIN_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">metrics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(prometheusScrapeEndpoint.scrape());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a> 로 접속하면 다음과 같이 프로메테우스가 수집할 수 있는 메트릭이 출력됩니다.</p><p><img data-src="/spring/images/spring-boot-actuator-prometheus-metrics.PNG#full" alt=""></p><h4 id="Prometheus-Scrap-Configuration">Prometheus Scrap Configuration</h4><p>프로메테우스가 엑추에이터가 제공하는 메트릭을 수집하도록 설정합니다.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">jvm</span></span><br><span class="line">  <span class="attr">honor_timestamps:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$&#123;your-host-ip&#125;:8080</span></span><br></pre></td></tr></table></figure><p>프로메테우스를 재실행하면 수집 목록에 추가된 것을 확인할 수 있습니다.</p><p><img data-src="/dev-ops/images/prometheus-scraping-targets.PNG#full" alt=""></p><h4 id="JVM-Actuator-Dashboard">JVM Actuator Dashboard</h4><p>그라파나 대시보드 중 <a href="https://grafana.com/grafana/dashboards/4701" target="_blank" rel="noopener">JVM (Micrometer)</a> 또는 <a href="https://grafana.com/grafana/dashboards/9568" target="_blank" rel="noopener">JVM (Actuator)</a>를 대시보드로 추가합니다.</p><p><img data-src="/dev-ops/images/grafana-dashboard-import.PNG#full" alt=""></p><p>추가된 대시보드에 따라 메트릭을 시각화하여 모니터링 할 수 있습니다.</p><p><img data-src="/dev-ops/images/grafana-dashboard-stats.PNG#full" alt=""></p><p>스프링 부트 액추에이터 메트릭을 프로메테우스가 수집하며 그라파나를 통해 메트릭을 시각화할 수 있는 것을 확인했습니다.</p><p>앞으로 쿠버네티스에 대한 모니터링과 알림 매니저(AlertManager)를 구성하여 슬랙 또는 이메일 등으로 알림을 받아볼 수 있습니다.</p><h2 id="참고">참고</h2><ul><li><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a></li><li><a href="https://grafana.com/grafana/" target="_blank" rel="noopener">Grafana</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오픈 소스 모니터링 시스템인 프로메테우스(Prometheus)와 오픈 소스 분석 시스템인 그라파나(Grafana)를 활용하면 메트릭에 대한 모니터링 대시보드를 구성할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;프로메테우스&quot;&gt;프로메테우스&lt;/h2&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="Prometheus" scheme="https://kdevkr.github.io/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://kdevkr.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트 애플리케이션과 VueJS 통합하기</title>
    <link href="https://kdevkr.github.io/vuejs/spring-boot-application-with-vuejs/"/>
    <id>https://kdevkr.github.io/vuejs/spring-boot-application-with-vuejs/</id>
    <published>2020-03-08T13:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-애플리케이션과-VueJS-통합하기">스프링 부트 애플리케이션과 VueJS 통합하기</h2><p>본 프로젝트는 스프링 부트 애플리케이션과 Webpack과 같은 번들러와 함께 개발할 경우에 어떻게 수시로 번들링되는 파일을 스프링 부트 애플리케이션에서 배포할 수 있는지를 알아보는 예제입니다.</p><h3 id="스프링-애플리케이션의-배포">스프링 애플리케이션의 배포</h3><p>먼저, 스프링 애플리케이션이 어떻게 정적 파일을 배포하는지를 이해해야 합니다. 스프링 애플리케이션은 톰캣과 같은 WAS와 함께 동작합니다. 클래스패스에 있는 정적 파일을 빌드 과정에서 포함되어 톰캣이 정적 파일로 배포할 수 있습니다.</p><blockquote><p>현재 프로젝트 경로에 존재하는 파일이 톰캣이 배포할 수 있는 파일과 다를 수 있다는 말입니다. 이해하셨나요?</p></blockquote><h4 id="Update-clasess-and-resources">Update clasess and resources</h4><p>첫번째 방법은 스프링 부트 애플리케이션에 포함된 내장 톰캣이 배포하는 정적 파일을 갱신하는 것입니다.</p><p><img data-src="/spring/images/configuration-update-classes-and-resources.PNG" alt=""></p><p>Webpack에서 만드는 번들링 파일을 현재 프로젝트의 클래스패스에 생성되게 하면 됩니다. 그러면 현재 클래스패스의 리소스가 변경되었다고 감지하여 애플리케이션을 업데이트하게 됩니다.</p><p>그런데 단점이 있습니다. 클래스패스의 리소스가 변경되는 것을 감지하고 다시 리소스를 업데이트하기 까지의 시간이 걸립니다.</p><h3 id="Webpack-프록시-서버">Webpack 프록시 서버</h3><p>톰캣이 배포하는 리소스를 변경하는 것은 하나의 방법이지만 수시로 번들링되는 것을 빠른 시간안에 적용하여 확인하는 것에는 어려움이 있습니다. 그래서 다른 방법으로 이 번들링되는 파일들을 대신 처리하여 주는 프록시 서버를 만드는 것입니다.</p><p>프록시 서버를 구성하는 방법은 두가지가 있습니다.</p><ul><li>webpack + express + <a href="https://github.com/webpack/webpack-dev-middleware" target="_blank" rel="noopener">webpack-dev-middleware</a></li><li><a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a></li></ul><p>하나는 Express 노드 서버를 구성하고 <code>webpack-dev-middleware</code>를 적용하는 것입니다.</p><p>두번째는 webpack 그룹이 제공하는 <code>webpack-dev-server</code>를 이용하는 것입니다.</p><blockquote><p>어느 방법이든지 상관 없습니다. 행위는 똑같으니까요</p></blockquote><h4 id="webpack-dev-server">webpack-dev-server</h4><p>저는 기존에 사용하던 express 서버가 없으므로 간단하게 webpack-dev-server를 활용합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure><p>webpack-dev-server 모듈을 설치하고 Webpack의 devServer 설정을 구성합니다.</p><blockquote><p>webpack-dev-server가 webpack.config.js의 devServer 설정에 따라 실행됩니다.</p></blockquote><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'src/main/resources/dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        contentBase: path.resolve(__dirname, <span class="string">'src/main/resources/dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        host:  <span class="string">'localhost'</span>,</span><br><span class="line">        port: <span class="number">8081</span>,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'**'</span>: <span class="string">'http://localhost:8080/'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본 번들링 파일이 생성되는 위치는 <code>src/main/resources/dist</code>로 빌드시에도 번들링된 파일을 배포할 수 있도록 하였으며 <code>webpack-dev-server</code>는 <code>src/main/resources/dist</code>에 있는 정적 파일들을 <code>/dist/</code>를 기준으로 배포하게 합니다.</p><p>그리고 모든 경로에 대하여 애플리케이션 실행 주소를 바라보게 <code>proxy</code> 설정을 합니다.</p><p><strong>package.json</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"webpack"</span>: <span class="string">"webpack --config webpack.config.js"</span>,</span><br><span class="line">        <span class="attr">"dev"</span>: <span class="string">"webpack -d --config webpack.config.js --watch"</span>,</span><br><span class="line">        <span class="attr">"dev:server"</span>: <span class="string">"webpack-dev-server"</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack-dev-server를 구동할 수 있도록 NPM 스크립트를 만들고 실행합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev:server</span><br><span class="line"></span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">i ｢wds｣: Project is running at http://localhost:8081/</span><br><span class="line">i ｢wds｣: webpack output is served from /dist/</span><br><span class="line">i ｢wds｣: Content not from webpack is served from C:\Users\K\git\spring-demo-vuejs\src\main\resources\dist</span><br></pre></td></tr></table></figure><h4 id="프록시-서버를-통해-개발하기">프록시 서버를 통해 개발하기</h4><p>프록시 서버도 구동되었으니 브라우저에서 <code>8081</code> 포트로 접근하여 개발하면 됩니다.</p><p>네트워크 탭으로 확인해보면 프록시 서버가 <code>/dist/</code> 경로를 기준으로 번들링된 파일을 제공하는 것을 확인할 수 있습니다.</p><p><img data-src="/vuejs/images/webpack-dev-server-network.PNG" alt=""></p><h3 id="초기-데이터-적재">초기 데이터 적재</h3><p>많은 분들이 궁금해하시는 부분일 것 같습니다. 애석하게도 번들링되는 파일에 애플리케이션의 데이터를 적재하는 것은 불가능 합니다. 그래서 번들링되는 스크립트에서 데이터를 불러올 수 있도록 몇가지 방법을 고려해봐야합니다.</p><h4 id="Object-defineProperty-그리고-freeze">Object.defineProperty 그리고 freeze</h4><p>첫번째 방법은 스프링 애플리케이션이 제공하는 <code>.html</code> 파일에 스크립트 블록을 만들어 변경되지 않는 오브젝트를 만드는 것입니다.</p><ul><li>Object.defineProperty : 오브젝트의 새로운 속성을 정의합니다.</li><li>Object.freeze : 오브젝트를 변경되지 않도록 동결시킵니다.</li></ul><p>다음은 위 정적 함수들을 사용하여 변경되지 않는 데이터 속성을 만드는 예제입니다.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'state'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        enumerable: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        configurable: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        writable: <span class="literal">false</span>,</span></span><br><span class="line">        value: &#123;</span><br><span class="line"><span class="actionscript">            id: <span class="string">"$&#123;state.id&#125;"</span>,</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">"$&#123;state.name&#125;"</span>,</span></span><br><span class="line"><span class="actionscript">            origin: <span class="string">"$&#123;state.origin&#125;"</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// ,$&#123;_csrf.parameterName&#125;: "$&#123;_csrf.token&#125;"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.freeze(<span class="built_in">window</span>.state);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>state</code>는 애플리케이션이 제공하는 모델 속성입니다.</p><blockquote><p>본 예제에서는 프리마커 템플릿 엔진을 사용하고 있습니다.</p></blockquote><h4 id="초기-데이터-API-호출">초기 데이터 API 호출</h4><p>두번째는 스크립트 파일 로드시 초기 데이터를 받아오는 API를 호출하는 방법입니다.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getState()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            state: <span class="built_in">window</span>.state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getState() &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">state</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> response = <span class="keyword">await</span> $http.get(<span class="string">'/api/state'</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            state().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.state = res.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="끝마치며">끝마치며</h2><p>제가 설명하는 방법이 올바른 것은 아닙니다. 다만, 이런 방법이 있다는 것을 알고 도입을 고려하시기 바랍니다. 또한, 어떠한 경우든 사용자의 개인정보와 같은 보호가 필요한 데이터는 초기 데이터로 적재하지 않도록 하시기 바랍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-애플리케이션과-VueJS-통합하기&quot;&gt;스프링 부트 애플리케이션과 VueJS 통합하기&lt;/h2&gt;
&lt;p&gt;본 프로젝트는 스프링 부트 애플리케이션과 Webpack과 같은 번들러와 함께 개발할 경우에 어떻게 수시로 번들링되는 파일을 스프
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="Vue.js" scheme="https://kdevkr.github.io/tags/Vue-js/"/>
    
      <category term="Spring Boot" scheme="https://kdevkr.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 자바 클라이언트</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/java-client/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/java-client/</id>
    <published>2020-03-08T09:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><strong>KDB 튜토리얼 - 자바 클라이언트</strong></li></ol><h2 id="들어가며">들어가며</h2><p>우리는 KDB+에 직접 접근하여 변수 할당, 테이블 생성, 함수 생성, 데이터 저장등을 해왔습니다. 자바 애플리케이션에서 일반적인 데이터베이스로 접근할 때 데이터소스를 이용하는 것처럼 다양한 애플리케이션에서 사용할 수 있는 클라이언트 API를 제공합니다.</p><p>이번 시간에는 자바 애플리케이션에서 KDB+에 접근하여 함수를 호출하거나 응답을 받을 수 있는 <a href="https://github.com/KxSystems/javakdb" target="_blank" rel="noopener">javakdb</a> 클라이언트를 사용해보고자 합니다.</p><h2 id="c-java">c.java</h2><p><code>c.java</code>는 TCP/IP로 kdb+와 Java 간의 통신을 위한 드라이버입니다.</p><p>이 드라이버는 다음과 같은 기능을 제공합니다.</p><ul><li>kdb+ 쿼리</li><li>kdb+ 퍼블리셔 구독</li><li>kdb+ 컨슈머로 퍼블리싱</li></ul><p>그 중에서 우리는 kdb+ 쿼리 기능을 사용할 것입니다.</p><h3 id="Connection">Connection</h3><p><code>c</code> 생성자는 새로운 커넥션 인스턴스를 만듭니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c c = <span class="keyword">new</span> c(<span class="string">"localhost"</span>,<span class="number">5600</span>,<span class="string">"kdev:kdev"</span>);</span><br></pre></td></tr></table></figure><h3 id="메시지-보내기">메시지 보내기</h3><p><code>c.k</code> 또는 <code>c.ks</code> 함수를 통해 <code>c</code> 클라이언트가 KDB+로 메시지를 보내고 응답을 받을 수 있습니다.</p><ul><li>c.k() : 동기 메시지</li><li>c.ks() : 비동기 메시지</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.ks(<span class="string">"-1\"Hello World\""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in log</span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h3 id="메시지-응답-가져오기">메시지 응답 가져오기</h3><p><code>.Q.w[]</code> 메시지를 보내어 현재 메모리 사용량 통계 정보를 응답받아 표시해보겠습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object k = c.k(<span class="string">".Q.w[]"</span>);</span><br><span class="line"><span class="keyword">if</span>(k <span class="keyword">instanceof</span> kx.c.Dict) &#123;</span><br><span class="line">    kx.c.Dict dict = (kx.c.Dict) k;</span><br><span class="line"></span><br><span class="line">    String[] keys = (String[]) dict.x;</span><br><span class="line">    <span class="keyword">long</span>[] values = (<span class="keyword">long</span>[]) dict.y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">        String key = keys[i];</span><br><span class="line">        <span class="keyword">long</span> value = values[i];</span><br><span class="line">        System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// system console</span></span><br><span class="line">used:<span class="number">775792</span></span><br><span class="line">heap:<span class="number">67108864</span></span><br><span class="line">peak:<span class="number">67108864</span></span><br><span class="line">wmax:<span class="number">0</span></span><br><span class="line">mmap:<span class="number">0</span></span><br><span class="line">mphy:<span class="number">2085904384</span></span><br><span class="line">syms:<span class="number">799</span></span><br><span class="line">symw:<span class="number">29324</span></span><br></pre></td></tr></table></figure><p><code>.Q.w[]</code> 결과는 사전이므로 <code>kx.c.Dict</code> 오브젝트로 키와 값을 구분하여 가져올 수 있습니다.</p><h4 id="JSON-응답">JSON 응답</h4><p>메시지 응답이 문자열인 경우 char[] 오브젝트를 결과로 받습니다. char[]를 String으로 변환하면 JSON String으로 가져올 수 있습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object k = c.k(<span class="string">".j.j select from patient where sex = `female, state = `deceased"</span>);</span><br><span class="line">String r = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) k);</span><br><span class="line">System.out.println(r);</span><br></pre></td></tr></table></figure><p><em>System Console</em></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">"id"</span>:<span class="number">38</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1963</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-18"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-02-23"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">205</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1965</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Gyeongsangbuk-do"</span>,<span class="attr">"group"</span>:<span class="string">"Cheongdo Daenam Hospital"</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-22"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-02-21"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">925</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1951</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Gyeongsangbuk-do"</span>,<span class="attr">"group"</span>:<span class="string">"Shincheonji Church"</span>,<span class="attr">"infection_reason"</span>:<span class="string">"contact with patient"</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-25"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-02-24"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2614</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1943</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-29"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-03-01"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2769</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1934</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-29"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-03-02"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">4046</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1962</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-03-01"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-03-01"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="Table-응답">Table 응답</h4><p>메시지 응답이 테이블일 경우에는 <code>kx.c.Flip</code> 오브젝트로 컬럼과 값을 구분하여 가져올 수 있습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object k = c.k(<span class="string">"select from time"</span>);</span><br><span class="line">kx.c.Flip r = (kx.c.Flip) k;</span><br><span class="line">String[] x = r.x;</span><br><span class="line">Object[] y = r.y;</span><br></pre></td></tr></table></figure><blockquote><p>왠만하면 JSON 으로 변환해서 응답받고 이를 자바 빈 오브젝트로 변환하는게 좋을 것 같습니다.</p></blockquote><p>이제 우리는 자바 애플리케이션에서도 메시지를 호출하여 함수를 실행할수도 있고 응답을 받을 수도 있습니다.</p><p>이상으로 KDB 튜토리얼을 마칩니다.</p><h2 id="참고">참고</h2><ul><li><a href="https://code.kx.com/v2/interfaces/java-client-for-q/" target="_blank" rel="noopener">Using Java with kdb+</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 함수</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/function/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/function/</id>
    <published>2020-03-07T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><strong>KDB 튜토리얼 - 함수</strong></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>이번 시간에는 일반적인 데이터베이스의 Function을 만드는 것 처럼 KDB+에 함수를 만들고 호출하는 것을 알아봅니다.</p><h2 id="함수">함수</h2><p>함수 또한 변수와 테이블처럼 컨택스트에 할당할 수 있습니다.</p><h3 id="함수-정의하기">함수 정의하기</h3><p>함수 정의는 중괄호와 매개변수로 이루어진 표현식입니다.</p><p>{[p1;…;pn] e1; …; em}</p><p>다음은 라디안 함수를 정의한 것입니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">PI: acos <span class="number">-1</span></span><br><span class="line">radian:&#123;x * PI % <span class="number">180.0</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>매개변수 <code>[]</code>는 생략할 수 있습니다.</p></blockquote><h4 id="함수로-데이터-추가하기">함수로 데이터 추가하기</h4><p>함수 안에서 테이블에 데이터를 추가하려면 <code>table,:data</code>를 이용해야합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.fn.insert.patient:&#123;patient,:x <span class="number">1</span>b&#125;</span><br></pre></td></tr></table></figure><h3 id="함수-사용하기">함수 사용하기</h3><p>함수를 사용할때 매개변수는 대괄호에 표현합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">radian[<span class="number">37.547889</span>]</span><br><span class="line"><span class="number">0.6553343</span></span><br><span class="line"></span><br><span class="line">radian <span class="number">37.547889</span></span><br></pre></td></tr></table></figure><blockquote><p>매개변수가 하나일 경우 대괄호를 생략할 수 있어요</p></blockquote><h2 id="참고">참고</h2><ul><li><a href="https://code.kx.com/q4m3/6_Functions/" target="_blank" rel="noopener">Q Mortals - Functions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 파일 다루기</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/file/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/file/</id>
    <published>2020-03-06T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><strong>KDB 튜토리얼 - 파일 다루기</strong></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>KDB+에서 파일을 다루는 방법에 대해서 알아봅니다. 메모리(RDB)에 존재하는 데이터를 디스크(HDB)에 저장하거나 반대로 디스크에 존재하는 데이터를 메모리에 불러올 수 있습니다.</p><p>자 그럼 파일을 다루는 법을 배우러 가보실까요?</p><h2 id="파일-다루기">파일 다루기</h2><p>아래는 파일 관련 키워드입니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> console     <span class="built_in">read0</span>  <span class="number">0</span>: File Text      read/write chars¹</span><br><span class="line"><span class="number">1</span> stdout      <span class="built_in">read1</span>  <span class="number">1</span>: File Binary    read/write bytes¹</span><br><span class="line"><span class="number">2</span> stderr             <span class="number">2</span>: Dynamic Load   <span class="built_in">load</span> shared object</span><br><span class="line">                     ?  Enum Extend</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span> <span class="built_in">set</span>       read/write <span class="built_in">or</span> memory-map a data file¹</span><br><span class="line"></span><br><span class="line"><span class="built_in">hopen</span> <span class="built_in">hclose</span>  open/close a file¹</span><br><span class="line"></span><br><span class="line"><span class="built_in">hcount</span>        file size</span><br><span class="line"><span class="built_in">hdel</span>          <span class="keyword">delete</span> a file <span class="built_in">or</span> folder</span><br><span class="line"><span class="built_in">hsym</span>          symbol/s to file symbol/s¹</span><br><span class="line"></span><br><span class="line"><span class="built_in">save</span>   <span class="built_in">load</span>   a table</span><br><span class="line"><span class="built_in">rsave</span>  <span class="built_in">rload</span>  a splayed table</span><br><span class="line">dsave         <span class="built_in">tables</span></span><br></pre></td></tr></table></figure><p>우리는 이 키워드들을 활용해서 파일을 다루게 됩니다.</p><h3 id="텍스트-저장-및-읽기">텍스트 저장 및 읽기</h3><p><code>0:</code>는 텍스트를 파일에 저장하고 <code>read0</code>은 파일에 저장된 텍스트를 불러올 수 있습니다.</p><p>먼저, <code>0:</code>으로 텍스트를 파일에 저장합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ file_symbol <span class="number">0</span>: strings</span><br><span class="line">`:data/hello.txt <span class="number">0</span>: <span class="built_in">enlist</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure><p>그리고 다시 <code>read0</code>으로 파일에 저장된 텍스트를 읽을 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read0</span> `:data/hello.txt</span><br><span class="line"><span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read0</span> `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line"><span class="string">"id,sex,birth_year,country,region,group,infection_reason,infection_order,infected_by,contact_number,confirmed_date,released_date,deceased_date,state"</span></span><br><span class="line"><span class="string">"1,female,1984,China,filtered at airport,,visit to Wuhan,1,,45,2020-01-20,2020-02-06,,released"</span></span><br><span class="line"><span class="string">"2,male,1964,Korea,filtered at airport,,visit to Wuhan,1,,75,2020-01-24,2020-02-05,,released"</span></span><br><span class="line"><span class="string">"3,male,1966,Korea,capital area,,visit to Wuhan,1,,16,2020-01-26,2020-02-12,,released"</span></span><br></pre></td></tr></table></figure><h4 id="CSV로-저장하고-불러오기">CSV로 저장하고 불러오기</h4><p>KDB+는 쉽게 테이블을 CSV 형식의 텍스트로 만들수 있습니다. 그리고 <code>0:</code>을 통해 CSV 파일로 저장할 수 있게 됩니다.</p><p>먼저, 테이블을 CSV 형식의 텍스트로 만듭니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">csv</span> <span class="number">0</span>: patient</span><br><span class="line"></span><br><span class="line"><span class="string">"id,sex,birth_year,country,region,group,infection_reason,infection_order,infected_by,contact_number,confirmed_date,released_date,deceased_date,state"</span></span><br><span class="line"><span class="string">"1,female,1984,China,filtered at airport,,visit to Wuhan,1,,45,2020-01-20,2020-02-06,,released"</span></span><br><span class="line"><span class="string">"2,male,1964,Korea,filtered at airport,,visit to Wuhan,1,,75,2020-01-24,2020-02-05,,released"</span></span><br><span class="line"><span class="string">"3,male,1966,Korea,capital area,,visit to Wuhan,1,,16,2020-01-26,2020-02-12,,released"</span></span><br></pre></td></tr></table></figure><p>그리고 CSV 형식의 텍스트를 <code>0:</code>으로 파일로 저장합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`:data/patient.<span class="built_in">csv</span> <span class="number">0</span>: <span class="built_in">csv</span> <span class="number">0</span>: patient</span><br></pre></td></tr></table></figure><p>다시 CSV 파일에 저장된 데이터를 기반으로 테이블로 구성할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ (types;delimiter) <span class="number">0</span>: file_symbol</span><br><span class="line">patient: `id <span class="built_in">xkey</span> (<span class="string">"isissssiiiddds"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line">route: (<span class="string">"idsssff"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/route.<span class="built_in">csv</span></span><br><span class="line">time: (<span class="string">"diiiiiiiiii"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/time.<span class="built_in">csv</span></span><br></pre></td></tr></table></figure><h4 id="특정-포맷으로-불러오기">특정 포맷으로 불러오기</h4><p>파일에 저장된 텍스트에 대하여 특정 포맷 형식으로 변환하여 불러올 수 있습니다.</p><p>다음은 처음 8자리는 date 형식이고 나머지 9자리는 time 형식으로 구분한 것입니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ (types; widths) <span class="number">0</span>: file_descriptor <span class="built_in">or</span> list_of_strings</span><br><span class="line"><span class="built_in">flip</span> <span class="type">`date</span><span class="type">`time</span>!(<span class="string">"DT"</span>;<span class="number">8</span> <span class="number">9</span>) <span class="number">0</span>: (<span class="string">"20200201000000000"</span>;<span class="string">"20200301235959000"</span>)</span><br><span class="line"></span><br><span class="line">date       time        </span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">2020.02</span><span class="number">.01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.000</span></span><br><span class="line"><span class="number">2020.03</span><span class="number">.01</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59.000</span></span><br></pre></td></tr></table></figure><h3 id="데이터-설정-및-가져오기">데이터 설정 및 가져오기</h3><p>키워드 <code>get</code> 그리고 <code>set</code>은 텍스트 파일이 아닌 바이너리 파일로 저장하고 불러올 수 있습니다.</p><p>따라서, KDB+가 읽을 수 있는 데이터 파일이 아닌 경우 오류가 발생합니다.</p><p>다음은 간단한 텍스트를 데이터 파일로 저장하고 불러오는 예제입니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`:data/hello <span class="built_in">set</span> <span class="string">"Hello World"</span></span><br><span class="line"><span class="built_in">get</span> `:data/hello</span><br><span class="line"></span><br><span class="line">/ 데이터 파일이 아닌 경우</span><br><span class="line"><span class="built_in">get</span> `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line">error: `data/dataset/patient.<span class="built_in">csv</span></span><br></pre></td></tr></table></figure><blockquote><p>CSV 파일은 불러오지 못했죠?</p></blockquote><h3 id="테이블-저장-및-불러오기">테이블 저장 및 불러오기</h3><p>키워드 <code>save</code>와 <code>load</code>를 이용하여 테이블 데이터를 저장하고 불러올 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">save</span> x</span><br><span class="line"><span class="built_in">save</span> `patient</span><br><span class="line">`:patient</span><br><span class="line"></span><br><span class="line">/ 현재 컨텍스트의 patient를 삭제합니다.</span><br><span class="line"><span class="keyword">delete</span> patient <span class="keyword">from</span> `.</span><br><span class="line"></span><br><span class="line">/ 현재 컨텍스트에 patient 테이블이 없습니다.</span><br><span class="line">patient</span><br><span class="line">error: `patient</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">load</span> x</span><br><span class="line"><span class="built_in">load</span> `patient</span><br><span class="line">`patient</span><br><span class="line"></span><br><span class="line">/ 다시 불러온 patient 테이블을 확인합니다.</span><br><span class="line">patient</span><br><span class="line"></span><br><span class="line">id| sex    birth_year country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> | female <span class="number">1984</span>       China   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">2</span> | male   <span class="number">1964</span>       Korea   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"><span class="number">3</span> | male   <span class="number">1966</span>       Korea   capital area                                 visit to Wuhan                    <span class="number">1</span>                           <span class="number">16</span>             <span class="number">2020.01</span><span class="number">.26</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br><span class="line"><span class="number">4</span> | male   <span class="number">1964</span>       Korea   capital area                                 visit to Wuhan                    <span class="number">1</span>                           <span class="number">95</span>             <span class="number">2020.01</span><span class="number">.27</span>     <span class="number">2020.02</span><span class="number">.09</span>                  released</span><br></pre></td></tr></table></figure><h4 id="특정-파일-포맷으로-저장">특정 파일 포맷으로 저장</h4><p>KDB+는 바이너리 뿐만 아니라 <code>csv</code>, <code>txt</code>, <code>xls</code>, <code>xml</code>형식으로 저장할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">(none)   binary</span><br><span class="line"> <span class="built_in">csv</span>     comma-separated values</span><br><span class="line"> txt     plain text</span><br><span class="line"> xls     Excel spreadsheet</span><br><span class="line"> xml     Extensible Markup Language (XML)</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">save</span> x.extension</span><br><span class="line"><span class="built_in">save</span> `:data/patient.<span class="built_in">csv</span></span><br><span class="line"><span class="built_in">save</span> `:data/patient.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">save</span> `:data/patient.xls</span><br><span class="line"><span class="built_in">read0</span> `:data/patient.xls</span><br></pre></td></tr></table></figure><h3 id="재생-테이블-저장-및-불러오기">재생 테이블 저장 및 불러오기</h3><p>키워드 <code>rsave</code>와 <code>rload</code>로 키가 없는 일반 테이블에 대하여 컬럼별로 저장되는 재생 테이블로 저장하고 불러올 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">rsave</span> x</span><br><span class="line"><span class="built_in">rsave</span> `:data/time</span><br><span class="line"></span><br><span class="line">/ 키 테이블을 저장하려는 경우</span><br><span class="line"><span class="built_in">rsave</span> `:data/patient</span><br><span class="line">error: `type</span><br><span class="line"></span><br><span class="line">/ reload x</span><br><span class="line"><span class="built_in">rload</span> `:data/time</span><br><span class="line">date       acc_test acc_negative acc_confirmed acc_released acc_deceased new_test new_negative new_confirmed new_released new_deceased</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">2020.01</span><span class="number">.20</span> <span class="number">1</span>        <span class="number">0</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>            <span class="number">1</span>        <span class="number">0</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>           </span><br><span class="line"><span class="number">2020.01</span><span class="number">.21</span> <span class="number">1</span>        <span class="number">0</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>            <span class="number">0</span>        <span class="number">0</span>            <span class="number">0</span>             <span class="number">0</span>            <span class="number">0</span>           </span><br><span class="line"><span class="number">2020.01</span><span class="number">.22</span> <span class="number">4</span>        <span class="number">3</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>            <span class="number">3</span>        <span class="number">3</span>            <span class="number">0</span>             <span class="number">0</span>            <span class="number">0</span></span><br></pre></td></tr></table></figure><p>재생 테이블로 저장하는 경우 테이블 이름이 폴더 이름이 되며 각 컬럼이 파일로 구분되어 저장됨을 확인할 수 있습니다.</p><p><img data-src="/images/2020/kdb-rsave.PNG" alt=""></p><h3 id="기타-명령어">기타 명령어</h3><h4 id="파일-사이즈-확인하기">파일 사이즈 확인하기</h4><p>키워드 <code>hcount</code>는 파일의 바이트 단위 크기를 가져옵니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hcount</span> `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line"><span class="number">254898</span></span><br></pre></td></tr></table></figure><h4 id="파일-삭제하기">파일 삭제하기</h4><p>키워드 <code>hdel</code>로 파일을 삭제할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">hdel</span> file_symbol</span><br><span class="line"><span class="built_in">hdel</span> `:data/time.<span class="built_in">csv</span></span><br><span class="line">`:data/time.<span class="built_in">csv</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hdel</span> `:data/dataset</span><br><span class="line">error: `data/dataset. OS reports: Directory <span class="built_in">not</span> empty</span><br></pre></td></tr></table></figure><blockquote><p><code>hdel</code>은 폴더가 비어있어야 삭제할 수 있습니다.</p></blockquote><h3 id="Q-네임스페이스">.Q 네임스페이스</h3><p>다음에 알아볼 네임스페이스 중 <code>.Q</code>에는 테이블을 저장하고 불러오는 프로세스를 처리할 수 있는 함수를 포함하고 있습니다.</p><ul><li><code>.Q.dpft</code> : 테이블 저장</li><li><code>.Q.v</code> : 테이블 불러오기</li></ul><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">save</span> table</span><br><span class="line">/ .Q.dpft[filpath;partition;fields;table]</span><br><span class="line">.Q.dpft[`:data;`;`id;`route]</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">load</span> splayed table</span><br><span class="line">.Q.v `:data/time</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">load</span> splayed table to dict</span><br><span class="line">.Q.v `:data/time</span><br><span class="line"></span><br><span class="line">date         | <span class="number">2020.01</span><span class="number">.20</span> <span class="number">2020.01</span><span class="number">.21</span> <span class="number">2020.01</span><span class="number">.22</span> <span class="number">2020.01</span><span class="number">.23</span> <span class="number">2020.01</span><span class="number">.24</span> <span class="number">2020.01</span><span class="number">.25</span> <span class="number">2020.01</span><span class="number">.26</span> <span class="number">2020.01</span><span class="number">.27</span> <span class="number">2020.01</span><span class="number">.28</span> <span class="number">2020.01</span><span class="number">.29</span> <span class="number">2020.01</span><span class="number">.30</span> <span class="number">2020.01</span><span class="number">.31</span> <span class="number">2020.02</span><span class="number">.01</span> <span class="number">2020.02</span><span class="number">.02</span> <span class="number">2020.02</span><span class="number">.03</span> <span class="number">2020.02</span><span class="number">.04</span> <span class="number">2020.02</span><span class="number">.05</span> <span class="number">2020.02</span><span class="number">.06</span> <span class="number">2020.02</span><span class="number">.07</span> <span class="number">2020.02</span><span class="number">.08</span> <span class="number">2020.02</span><span class="number">.09</span> <span class="number">2020.02</span><span class="number">.10</span> <span class="number">2020.02</span><span class="number">.11</span> <span class="number">2020.02</span><span class="number">.12</span> <span class="number">2020.02</span><span class="number">.13</span> <span class="number">2020.02</span><span class="number">.14</span> <span class="number">2020.02</span><span class="number">.15</span> <span class="number">2020.02</span><span class="number">.16</span> <span class="number">2020.02</span><span class="number">.17</span> <span class="number">2020.02</span><span class="number">.18</span> <span class="number">2020.02</span><span class="number">.19</span> <span class="number">2020.02</span><span class="number">.20</span> <span class="number">2020.02</span><span class="number">.21</span> <span class="number">2020.02</span><span class="number">.22</span> <span class="number">2020.02</span><span class="number">.23</span> <span class="number">2020.02</span><span class="number">.24</span> <span class="number">2020.02</span><span class="number">.25</span> <span class="number">2020.02</span><span class="number">.26</span> <span class="number">2020.02</span><span class="number">.27</span> <span class="number">2020.02</span><span class="number">.28</span> <span class="number">2020.02</span><span class="number">.29</span> <span class="number">2020.03</span><span class="number">.01</span> <span class="number">2020.03</span><span class="number">.02</span> <span class="number">2020.03</span><span class="number">.03</span> <span class="number">2020.03</span><span class="number">.04</span></span><br><span class="line">acc_test     | <span class="number">1</span>          <span class="number">1</span>          <span class="number">4</span>          <span class="number">22</span>         <span class="number">27</span>         <span class="number">27</span>         <span class="number">51</span>         <span class="number">61</span>         <span class="number">116</span>        <span class="number">187</span>        <span class="number">246</span>        <span class="number">312</span>        <span class="number">371</span>        <span class="number">429</span>        <span class="number">490</span>        <span class="number">607</span>        <span class="number">714</span>        <span class="number">885</span>        <span class="number">1352</span>       <span class="number">2097</span>       <span class="number">2598</span>       <span class="number">3110</span>       <span class="number">4325</span>       <span class="number">5624</span>       <span class="number">6511</span>       <span class="number">7242</span>       <span class="number">7734</span>       <span class="number">8161</span>       <span class="number">8718</span>       <span class="number">9772</span>       <span class="number">11173</span>      <span class="number">13202</span>      <span class="number">16400</span>      <span class="number">21586</span>      <span class="number">26179</span>      <span class="number">32756</span>      <span class="number">40304</span>      <span class="number">53553</span>      <span class="number">66652</span>      <span class="number">81167</span>      <span class="number">94055</span>      <span class="number">109591</span>     <span class="number">125851</span>     <span class="number">136707</span>     <span class="number">146541</span>    </span><br><span class="line">acc_negative | <span class="number">0</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">21</span>         <span class="number">25</span>         <span class="number">25</span>         <span class="number">47</span>         <span class="number">56</span>         <span class="number">97</span>         <span class="number">155</span>        <span class="number">199</span>        <span class="number">245</span>        <span class="number">289</span>        <span class="number">327</span>        <span class="number">414</span>        <span class="number">462</span>        <span class="number">522</span>        <span class="number">693</span>        <span class="number">1001</span>       <span class="number">1134</span>       <span class="number">1683</span>       <span class="number">2552</span>       <span class="number">3535</span>       <span class="number">4811</span>       <span class="number">5921</span>       <span class="number">6679</span>       <span class="number">7148</span>       <span class="number">7647</span>       <span class="number">7980</span>       <span class="number">8923</span>       <span class="number">9973</span>       <span class="number">11238</span>      <span class="number">13016</span>      <span class="number">15116</span>      <span class="number">17520</span>      <span class="number">20292</span>      <span class="number">25447</span>      <span class="number">31576</span>      <span class="number">39318</span>      <span class="number">48593</span>      <span class="number">55723</span>      <span class="number">71580</span>      <span class="number">85484</span>      <span class="number">102965</span>     <span class="number">118965</span>    </span><br><span class="line">acc_confirmed| <span class="number">1</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">3</span>          <span class="number">4</span>          <span class="number">4</span>          <span class="number">4</span>          <span class="number">6</span>          <span class="number">11</span>         <span class="number">12</span>         <span class="number">15</span>         <span class="number">15</span>         <span class="number">16</span>         <span class="number">18</span>         <span class="number">23</span>         <span class="number">24</span>         <span class="number">24</span>         <span class="number">27</span>         <span class="number">27</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">29</span>         <span class="number">30</span>         <span class="number">31</span>         <span class="number">51</span>         <span class="number">104</span>        <span class="number">204</span>        <span class="number">433</span>        <span class="number">602</span>        <span class="number">833</span>        <span class="number">977</span>        <span class="number">1261</span>       <span class="number">1766</span>       <span class="number">2337</span>       <span class="number">3150</span>       <span class="number">4212</span>       <span class="number">4812</span>       <span class="number">5328</span>       <span class="number">5766</span>      </span><br><span class="line">acc_released | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">3</span>          <span class="number">4</span>          <span class="number">4</span>          <span class="number">7</span>          <span class="number">7</span>          <span class="number">7</span>          <span class="number">9</span>          <span class="number">9</span>          <span class="number">10</span>         <span class="number">12</span>         <span class="number">16</span>         <span class="number">16</span>         <span class="number">17</span>         <span class="number">18</span>         <span class="number">18</span>         <span class="number">24</span>         <span class="number">24</span>         <span class="number">24</span>         <span class="number">27</span>         <span class="number">27</span>         <span class="number">28</span>         <span class="number">31</span>         <span class="number">34</span>         <span class="number">41</span>         <span class="number">88</span>        </span><br><span class="line">acc_deceased | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">6</span>          <span class="number">8</span>          <span class="number">12</span>         <span class="number">12</span>         <span class="number">13</span>         <span class="number">16</span>         <span class="number">17</span>         <span class="number">22</span>         <span class="number">28</span>         <span class="number">32</span>         <span class="number">35</span>        </span><br><span class="line">new_test     | <span class="number">1</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">18</span>         <span class="number">5</span>          <span class="number">0</span>          <span class="number">24</span>         <span class="number">10</span>         <span class="number">55</span>         <span class="number">71</span>         <span class="number">59</span>         <span class="number">66</span>         <span class="number">59</span>         <span class="number">58</span>         <span class="number">61</span>         <span class="number">117</span>        <span class="number">107</span>        <span class="number">171</span>        <span class="number">467</span>        <span class="number">745</span>        <span class="number">501</span>        <span class="number">512</span>        <span class="number">1215</span>       <span class="number">1299</span>       <span class="number">887</span>        <span class="number">731</span>        <span class="number">492</span>        <span class="number">427</span>        <span class="number">557</span>        <span class="number">1054</span>       <span class="number">1401</span>       <span class="number">2029</span>       <span class="number">3198</span>       <span class="number">5186</span>       <span class="number">4593</span>       <span class="number">6577</span>       <span class="number">7548</span>       <span class="number">13249</span>      <span class="number">13099</span>      <span class="number">14515</span>      <span class="number">12888</span>      <span class="number">15536</span>      <span class="number">16260</span>      <span class="number">10856</span>      <span class="number">9834</span>      </span><br><span class="line">new_negative | <span class="number">0</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">18</span>         <span class="number">4</span>          <span class="number">0</span>          <span class="number">22</span>         <span class="number">9</span>          <span class="number">41</span>         <span class="number">58</span>         <span class="number">44</span>         <span class="number">46</span>         <span class="number">44</span>         <span class="number">38</span>         <span class="number">87</span>         <span class="number">48</span>         <span class="number">60</span>         <span class="number">171</span>        <span class="number">308</span>        <span class="number">133</span>        <span class="number">549</span>        <span class="number">869</span>        <span class="number">983</span>        <span class="number">1276</span>       <span class="number">1110</span>       <span class="number">758</span>        <span class="number">469</span>        <span class="number">499</span>        <span class="number">333</span>        <span class="number">943</span>        <span class="number">1050</span>       <span class="number">1265</span>       <span class="number">1778</span>       <span class="number">2100</span>       <span class="number">2404</span>       <span class="number">2772</span>       <span class="number">5155</span>       <span class="number">6129</span>       <span class="number">7742</span>       <span class="number">9275</span>       <span class="number">7130</span>       <span class="number">15857</span>      <span class="number">13904</span>      <span class="number">17481</span>      <span class="number">16000</span>     </span><br><span class="line">new_confirmed| <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">2</span>          <span class="number">5</span>          <span class="number">1</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">5</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">20</span>         <span class="number">53</span>         <span class="number">100</span>        <span class="number">229</span>        <span class="number">169</span>        <span class="number">231</span>        <span class="number">144</span>        <span class="number">284</span>        <span class="number">505</span>        <span class="number">571</span>        <span class="number">813</span>        <span class="number">1062</span>       <span class="number">600</span>        <span class="number">516</span>        <span class="number">438</span>       </span><br><span class="line">new_released | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">2</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">4</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">6</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">3</span>          <span class="number">3</span>          <span class="number">7</span>          <span class="number">47</span>        </span><br><span class="line">new_deceased | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span></span><br></pre></td></tr></table></figure><p>이번에는 파일을 저장하고 불러오며 파일을 다루는 방법에 대해서 알아보았습니다. 이제 다른 시스템(자바 애플리케이션 등)에서 필요한 데이터를 추출하여 파일로 저장하여 사용할 수 있게 되었습니다.</p><h2 id="참고">참고</h2><ul><li><a href="https://code.kx.com/q/basics/files/" target="_blank" rel="noopener">Reference - File system</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 네임스페이스</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/namespace/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/namespace/</id>
    <published>2020-03-06T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><strong>KDB 튜토리얼 - 네임스페이스</strong></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>KDB+를 다루면서 변수 또는 테이블, 함수를 현재 컨텍스트에 할당하였습니다. 그런데 말입니다. 만약, 여러 스크립트에서 똑같은 변수 이름을 사용한다면 어떻게 될까요? A.q라는 스크립트가 먼저 수행되고 B.q가 스크립트가 나중에 수행되는데 충돌된 이름이 있다면 A.q 스크립트에서 할당한 변수는 덮어쓰여지고 맙니다.</p><p>KDB+에는 이러한 변수 이름이 충돌되는 문제를 해결하기 위하여 네임스페이스라는 특별한 공간을 제공합니다.</p><blockquote><p>자바에서 패키지라고 볼 수 있겟네요</p></blockquote><h2 id="네임스페이스">네임스페이스</h2><p>네임스페이스는 <code>.</code>를 사용하여 구분하며 q에서는 컨텍스트라고 부릅니다. 예를 들어, <code>.jaxb.x</code>라는 변수는 사실 <code>.jaxb</code> 컨텍스트에 존재하는 <code>x</code> 입니다.</p><h3 id="컨텍스트">컨텍스트</h3><p>q의 네임스페이스는 사전으로 구현되어있습니다. 각 컨텍스트는 키가 네임스페이스의 심볼릭 이름의 사전입니다.</p><p>다음과 같이 <code>.variables</code> 컨텍스트에 변수를 할당하였다고 할때 <code>.variables</code>를 확인해봅시다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.variables.DATE_UNIT:`YEAR`MONTH`DAY</span><br><span class="line">.variables.TIME_UNIT:`HOUR`MINUTE_30`MINUTE_15`MINUTE_5`MINUTE</span><br><span class="line">.variables.DATETIME_UNIT:.variables.DATE_UNIT,.variables.TIME_UNIT</span><br><span class="line"></span><br><span class="line">.variables</span><br><span class="line"></span><br><span class="line">                      | ::</span><br><span class="line">DATE_UNIT             | `YEAR`MONTH`DAY</span><br><span class="line">TIME_UNIT             | `HOUR`MINUTE_30`MINUTE_15`MINUTE_5`MINUTE</span><br><span class="line">DATETIME_UNIT         | `YEAR`MONTH`DAY`HOUR`MINUTE_30`MINUTE_15`MINUTE_5`MINUTE</span><br></pre></td></tr></table></figure><blockquote><p>물론 컨텍스트 안에 컨텍스트로 구분할 수 있습니다.<br>대신에 어떠한 값이 할당되어있으면 안됩니다.</p></blockquote><h3 id="컨텍스트-내-할당된-이름-목록">컨텍스트 내 할당된 이름 목록</h3><p>컨텍스트에 대하여 <code>key</code> 키워드를 사용하면 할당된 모든 이름을 나열할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">key</span> context</span><br><span class="line"><span class="built_in">key</span> `.</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> `.</span><br><span class="line"><span class="built_in">get</span> `.</span><br><span class="line"></span><br><span class="line">/ 중첩된 컨텍스트</span><br><span class="line"><span class="built_in">key</span> `.util</span><br><span class="line">`convert`validate</span><br></pre></td></tr></table></figure><h3 id="컨텍스트-내-할당된-이름-삭제">컨텍스트 내 할당된 이름 삭제</h3><p>컨텍스트는 사전이기 때문에 할당된 이름을 제거할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get</span> `.</span><br><span class="line"></span><br><span class="line">v          | +`name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">k          | +(,`eid)!,<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span></span><br><span class="line">kv         | (+(,`eid)!,<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>)!+`name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> v, k <span class="keyword">from</span> `.</span><br><span class="line">kv         | (+(,`eid)!,<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>)!+`name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br></pre></td></tr></table></figure><blockquote><p>삭제하는 행위임을 명심하십시오.</p></blockquote><h3 id="컨텍스트-저장-및-불러오기">컨텍스트 저장 및 불러오기</h3><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ file_path <span class="built_in">set</span> <span class="built_in">get</span> context</span><br><span class="line">`:data/variables <span class="built_in">set</span> <span class="built_in">get</span> `.</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span> `:data/variables</span><br><span class="line"></span><br><span class="line">time   | +<span class="type">`date</span>`acc_test`acc_negative`acc_confirmed`acc_released`acc_deceased`new_test`new_negative`new_confirmed`new_released`new_deceased!(<span class="number">2020.01</span><span class="number">.20</span> <span class="number">2020.01</span><span class="number">.21</span> <span class="number">2020.01</span><span class="number">.22</span> <span class="number">2020.01</span><span class="number">.23</span> <span class="number">2020.01</span><span class="number">.24</span> <span class="number">2.</span>.</span><br><span class="line">patient| (+(,`id)!,<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span> <span class="number">49</span> <span class="number">50</span> <span class="number">51</span> <span class="number">52</span> <span class="number">53</span> <span class="number">54</span> <span class="number">55</span> <span class="number">56</span> <span class="number">57</span> <span class="number">58</span> <span class="number">59</span> <span class="number">60</span> <span class="number">61</span> <span class="number">62</span> <span class="number">6.</span>.</span><br><span class="line">route  | +`id<span class="type">`date</span>`province`city`visit`latitude`longitude!(<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">10</span> <span class="number">11</span> <span class="number">11</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12.</span>.</span><br></pre></td></tr></table></figure><p>반대로 파일에 저장된 컨텍스트 정보를 가져와 다시 덮어쓸수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`.varibales <span class="built_in">set</span> <span class="built_in">get</span> `:data/varibales</span><br></pre></td></tr></table></figure><h2 id="KDB-네임스페이스">KDB+ 네임스페이스</h2><p>KDB+가 기본으로 제공하는 네임스페이스는 다음과 같습니다.</p><h3 id="j">.j</h3><p>이 네임스페이스에는 사전을 JSON으로 변환하는 함수를 포함하고 있습니다.</p><h4 id="Serialize">Serialize</h4><p>테이블을 JSON으로 직렬화할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ .j.j x</span><br><span class="line">.j.j <span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> birth_year &gt;= <span class="number">1992</span></span><br><span class="line"></span><br><span class="line"><span class="string">"[&#123;\"id\":9,\"sex\":\"female\",\"birth_year\":1992,\"country\":\"Korea\",\"region\":\"capital area\",\"group\":\"\",\"infection_reason\":\"contact with patient\",\"infection_order\":2,\"infected_by..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`:data/patient.json 0: enlist .j.j select from patient where birth_year &gt;= 1992</span></span><br></pre></td></tr></table></figure><h4 id="Deserialize">Deserialize</h4><p>JSON으로 직렬화하여 저장한 것을 다시 역직렬화할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ json_string: <span class="built_in">read0</span> `:data/patient.json</span><br><span class="line">/ json_flat: <span class="built_in">raze</span> json_string</span><br><span class="line"></span><br><span class="line">.j.k <span class="built_in">raze</span> <span class="built_in">read0</span> `:data/patient.json</span><br></pre></td></tr></table></figure><h3 id="h">.h</h3><p>.h 네임스페이스는 문자열을 HTML로 마크업하거나 데이터를 다양한 형식으로 변환, HTTP 응답 내용을 만드는 함수를 포함합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ .h.hu x</span><br><span class="line">.h.hu <span class="string">"http://www.naver.com"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"http%3a%2f%2fwww.naver.com"</span></span><br><span class="line"></span><br><span class="line">/ .h.hy</span><br><span class="line">`:data/response.txt <span class="number">0</span>: <span class="built_in">enlist</span> .h.hy[`json] .j.j .<span class="built_in">system</span>.info</span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: <span class="number">180</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"operating_system"</span>:<span class="string">"l32"</span>,<span class="string">"core"</span>:<span class="number">2</span>,<span class="string">"proccess_id"</span>:<span class="number">7</span>,<span class="string">"quiet_mode"</span>:true,<span class="string">"version"</span>:<span class="number">3.6</span>,<span class="string">"init_script"</span>:<span class="string">"/root/_startup.q"</span>,<span class="string">"host"</span>:<span class="string">"172.17.0.1"</span>,<span class="string">"timestamp"</span>:<span class="string">"2020-03-07T03:25:45.029869000"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="기본-웹-서버">기본 웹 서버</h4><p>KDB+는 기본적으로 웹 서버를 제공합니다. 브라우저로 <a href="http://localhost:5600/%EB%A1%9C" target="_blank" rel="noopener">http://localhost:5600/로</a> 접속해보면 사용자 인증 후 간단하게 현재 컨텍스트 정보를 확인할 수 있는 페이지를 응답합니다.</p><p><img data-src="/images/2020/kdb-web.PNG" alt=""></p><h3 id="Q">.Q</h3><p>.Q 네임스페이스는 유용한 유틸리티 함수가 포함되어있습니다.</p><p>다음은 메모리 사용량 통계를 보고 가비지 콜렉션을 수행하는 예제입니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ memory stats</span><br><span class="line">.Q.w[]</span><br><span class="line"></span><br><span class="line">used| <span class="number">1315280</span></span><br><span class="line">heap| <span class="number">67108864</span></span><br><span class="line">peak| <span class="number">67108864</span></span><br><span class="line">wmax| <span class="number">0</span></span><br><span class="line">mmap| <span class="number">0</span></span><br><span class="line">mphy| <span class="number">2085904384</span></span><br><span class="line">syms| <span class="number">1328</span></span><br><span class="line">symw| <span class="number">47056</span></span><br><span class="line"></span><br><span class="line">/ garbage collect</span><br><span class="line">.Q.gc[]</span><br></pre></td></tr></table></figure><h3 id="z">.z</h3><p>.z 네임스페이스에는 시스템 정보 또는 통신 콜백 함수가 포함되어있습니다.</p><p>몇가지만 사용해보겠습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.host: .Q.host .z.a</span><br><span class="line">.<span class="built_in">system</span>.info: `operating_system`core`proccess_id`quiet_mode`version`init_script`host<span class="type">`timestamp</span>!(.z.o;.z.c;.z.i;.z.q;.z.K;.z.f;.<span class="built_in">system</span>.host;.z.p)</span><br><span class="line"></span><br><span class="line">operating_system| `l32</span><br><span class="line">core            | <span class="number">2</span>i</span><br><span class="line">proccess_id     | <span class="number">7</span>i</span><br><span class="line">quiet_mode      | <span class="number">1</span>b</span><br><span class="line">version         | <span class="number">3.6</span></span><br><span class="line">init_script     | `/root/_startup.q</span><br><span class="line">host            | `<span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">timestamp       | <span class="number">2020.03</span><span class="number">.07</span>D03:<span class="number">25</span>:<span class="number">45.029869000</span></span><br></pre></td></tr></table></figure><h2 id="참고">참고</h2><ul><li><a href="https://code.kx.com/q4m3/12_Workspace_Organization/" target="_blank" rel="noopener">Q Motals - Workspace Organization</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - Q-SQL</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/q-sql/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/q-sql/</id>
    <published>2020-03-05T15:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><strong>KDB 튜토리얼 - Q-SQL</strong></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>이번 글에서는 일반적인 데이터베이스에서 사용하는 SQL 구문을 사용할 수 있도록 KDB+가 지원하는 q-sql에 대해서 알아봅니다.</p><p>알아보기 전에 필요한 데이터를 준비하기 위하여 국내에 COVID-19 확산으로 인해 발생한 정보를 CSV로 구성한 <a href="https://github.com/jihoo-kim/Coronavirus-Dataset" target="_blank" rel="noopener">Coronavirus-Dataset</a>를 불러오도록 하겠습니다.</p><h3 id="데이터-불러오기">데이터 불러오기</h3><p>CSV 파일에 저장된 데이터를 테이블로 불러오는 것은 파일을 다루는 챕터에서 알아볼 내용이지만 우선 데이터를 불러오도록 하겠습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">patient: `id` <span class="built_in">xkey</span> (<span class="string">"isissssiiiddds"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line">route: `id <span class="built_in">xkey</span> (<span class="string">"idsssff"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/route.<span class="built_in">csv</span></span><br><span class="line">time: (<span class="string">"diiiiiiiiii"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/time.<span class="built_in">csv</span></span><br></pre></td></tr></table></figure><p>네 데이터를 불러오는 것은 끝났습니다.</p><p>간단하게 설명하자면 <code>xkey</code>로 테이블에 대한 키를 지정하였고 isissssiiiddds와 같이 데이터의 형식을 지정하였으며 CSV로 구성되었기에 ,를 구분자로 사용했습니다.</p><p>이제 Q-SQL을 배우러 가보실까요?</p><h2 id="Q-SQL">Q-SQL</h2><p>Q-SQL 표현식은 종속절, <code>by</code>, <code>from</code> 그리고 <code>where</code>과 같은 고유 문법 규칙이 있습니다.</p><p>컬럼에 대한 구분은 콤마(,)입니다.</p><h3 id="SELECT">SELECT</h3><p>SELECT는 테이블의 컬럼을 선택할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="keyword">select</span> [<span class="built_in">cols</span>] [<span class="keyword">by</span> groups] <span class="keyword">from</span> t [<span class="built_in">where</span> filters]</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient</span><br></pre></td></tr></table></figure><blockquote><p>KDB+는 모든 컬럼을 선택할 때 와일드카드를 사용하지 않습니다.</p></blockquote><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sex, infection_order, infection_reason, confirmed_date, released_date, deceased_date <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">sex    infection_order infection_reason                  confirmed_date released_date deceased_date</span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line">female <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.26</span>     <span class="number">2020.02</span><span class="number">.12</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.27</span>     <span class="number">2020.02</span><span class="number">.09</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.03</span><span class="number">.02</span>                 </span><br><span class="line">male   <span class="number">2</span>               contact with patient              <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.19</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.15</span>                 </span><br><span class="line">female <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.12</span></span><br></pre></td></tr></table></figure><h3 id="WHERE">WHERE</h3><p>WHERE는 여러가지 조건절을 표현할 수 있습니다.</p><h4 id="">=</h4><p><code>=</code>는 가장 일반적인 비교입니다.</p><p>코로나 바이러스로 인해 사망한 여성을 구분하고자 하면 다음과 같습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> sex = `female, state = `deceased</span><br><span class="line"></span><br><span class="line">id  | sex    birth_year country region           <span class="built_in">group</span>                    infection_reason     infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">----| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">38</span>  | female <span class="number">1963</span>       Korea   Daegu                                                                                                     <span class="number">2020.02</span><span class="number">.18</span>                   <span class="number">2020.02</span><span class="number">.23</span>    deceased</span><br><span class="line"><span class="number">205</span> | female <span class="number">1965</span>       Korea   Gyeongsangbuk-<span class="keyword">do</span> Cheongdo Daenam Hospital                                                                 <span class="number">2020.02</span><span class="number">.22</span>                   <span class="number">2020.02</span><span class="number">.21</span>    deceased</span><br><span class="line"><span class="number">925</span> | female <span class="number">1951</span>       Korea   Gyeongsangbuk-<span class="keyword">do</span> Shincheonji Church       contact with patient                                            <span class="number">2020.02</span><span class="number">.25</span>                   <span class="number">2020.02</span><span class="number">.24</span>    deceased</span><br><span class="line"><span class="number">2614</span>| female <span class="number">1943</span>       Korea   Daegu                                                                                                     <span class="number">2020.02</span><span class="number">.29</span>                   <span class="number">2020.03</span><span class="number">.01</span>    deceased</span><br><span class="line"><span class="number">2769</span>| female <span class="number">1934</span>       Korea   Daegu                                                                                                     <span class="number">2020.02</span><span class="number">.29</span>                   <span class="number">2020.03</span><span class="number">.02</span>    deceased</span><br><span class="line"><span class="number">4046</span>| female <span class="number">1962</span>       Korea   Daegu                                                                                                     <span class="number">2020.03</span><span class="number">.01</span>                   <span class="number">2020.03</span><span class="number">.01</span>    deceased</span><br></pre></td></tr></table></figure><h4 id="in">in</h4><p><code>in</code> 키워드는 컬럼의 데이터가 조건을 포함하는 것을 표현합니다.</p><p>국내 확진자 중 중국 국적인 사람을 찾고 싶다면 다음과 같이 사용합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> country in `China</span><br><span class="line"></span><br><span class="line">id | sex    birth_year country region              <span class="built_in">group</span>                         infection_reason              infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">---| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span>  | female <span class="number">1984</span>       China   filtered at airport                               visit to Wuhan                <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">12</span> | male   <span class="number">1971</span>       China   capital area                                      contact with patient in Japan <span class="number">2</span>                           <span class="number">422</span>            <span class="number">2020.02</span><span class="number">.01</span>     <span class="number">2020.02</span><span class="number">.18</span>                  released</span><br><span class="line"><span class="number">14</span> | female <span class="number">1980</span>       China   capital area                                      contact with patient          <span class="number">3</span>               <span class="number">12</span>          <span class="number">3</span>              <span class="number">2020.02</span><span class="number">.02</span>     <span class="number">2020.02</span><span class="number">.18</span>                  released</span><br><span class="line"><span class="number">23</span> | female <span class="number">1962</span>       China   capital area                                      visit to Wuhan                <span class="number">1</span>                           <span class="number">23</span>             <span class="number">2020.02</span><span class="number">.06</span>     <span class="number">2020.02</span><span class="number">.29</span>                  released</span><br><span class="line"><span class="number">27</span> | female <span class="number">1982</span>       China   capital area                                      visit to China                <span class="number">1</span>                           <span class="number">40</span>             <span class="number">2020.02</span><span class="number">.09</span>                                 isolated</span><br><span class="line"><span class="number">28</span> | female <span class="number">1989</span>       China   capital area                                      contact with patient          <span class="number">2</span>               <span class="number">3</span>           <span class="number">1</span>              <span class="number">2020.02</span><span class="number">.10</span>     <span class="number">2020.02</span><span class="number">.17</span>                  released</span><br><span class="line"><span class="number">755</span>| male   <span class="number">1954</span>       China   capital area        Eunpyeong St. Mary's Hospital                                                                          <span class="number">2020.02</span><span class="number">.24</span>                                 isolated</span><br><span class="line"><span class="number">924</span>| female <span class="number">1945</span>       China   capital area                                      visit to China                                                           <span class="number">2020.02</span><span class="number">.25</span>                                 isolated</span><br></pre></td></tr></table></figure><blockquote><p>country는 심볼 데이터 유형입니다.</p></blockquote><h4 id="like">like</h4><p><code>like</code> 키워드는 패턴 매칭을 제공합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ x like y</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> infection_reason like <span class="string">"*Wuhan*"</span></span><br><span class="line"></span><br><span class="line">id| sex    birth_year country region              <span class="built_in">group</span> infection_reason   infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> | female <span class="number">1984</span>       China   filtered at airport       visit to Wuhan     <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">2</span> | male   <span class="number">1964</span>       Korea   filtered at airport       visit to Wuhan     <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"><span class="number">3</span> | male   <span class="number">1966</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">16</span>             <span class="number">2020.01</span><span class="number">.26</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br><span class="line"><span class="number">4</span> | male   <span class="number">1964</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">95</span>             <span class="number">2020.01</span><span class="number">.27</span>     <span class="number">2020.02</span><span class="number">.09</span>                  released</span><br><span class="line"><span class="number">5</span> | male   <span class="number">1987</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">31</span>             <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.03</span><span class="number">.02</span>                  released</span><br><span class="line"><span class="number">7</span> | male   <span class="number">1991</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">9</span>              <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.15</span>                  released</span><br><span class="line"><span class="number">8</span> | female <span class="number">1957</span>       Korea   Jeollabuk-<span class="keyword">do</span>              visit to Wuhan     <span class="number">1</span>                           <span class="number">113</span>            <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br><span class="line"><span class="number">13</span>| male   <span class="number">1992</span>       Korea   filtered at airport       residence in Wuhan <span class="number">1</span>                           <span class="number">0</span>              <span class="number">2020.02</span><span class="number">.02</span>     <span class="number">2020.02</span><span class="number">.24</span>                  released</span><br><span class="line"><span class="number">23</span>| female <span class="number">1962</span>       China   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">23</span>             <span class="number">2020.02</span><span class="number">.06</span>     <span class="number">2020.02</span><span class="number">.29</span>                  released</span><br><span class="line"><span class="number">24</span>| male   <span class="number">1992</span>       Korea   filtered at airport       residence in Wuhan <span class="number">1</span>                           <span class="number">0</span>              <span class="number">2020.02</span><span class="number">.06</span>     <span class="number">2020.02</span><span class="number">.27</span>                  released</span><br></pre></td></tr></table></figure><h4 id="within">within</h4><p><code>within</code>은 범위에 포함되는 것을 표현합니다.</p><p>예를 들어, 2020년 1월 확진자 중에 2차 이후 감염자를 찾으려면 다음과 같습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> confirmed_date within (<span class="number">2020.01</span><span class="number">.01</span>;<span class="number">2020.01</span><span class="number">.31</span>), infection_order &gt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">id| sex    birth_year country region       <span class="built_in">group</span> infection_reason     infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| ----------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">6</span> | male   <span class="number">1964</span>       Korea   capital area       contact with patient <span class="number">2</span>               <span class="number">3</span>           <span class="number">17</span>             <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.19</span>                  released</span><br><span class="line"><span class="number">9</span> | female <span class="number">1992</span>       Korea   capital area       contact with patient <span class="number">2</span>               <span class="number">5</span>           <span class="number">2</span>              <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.24</span>                  released</span><br><span class="line"><span class="number">10</span>| female <span class="number">1966</span>       Korea   capital area       contact with patient <span class="number">3</span>               <span class="number">6</span>           <span class="number">43</span>             <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.19</span>                  released</span><br><span class="line"><span class="number">11</span>| male   <span class="number">1995</span>       Korea   capital area       contact with patient <span class="number">3</span>               <span class="number">6</span>           <span class="number">0</span>              <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.10</span>                  released</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY">ORDER BY</h3><p>SELECT 결과를 정렬하기 위해서는 <code>xasc</code> 또는 <code>xdesc</code> 키워드를 사용합니다.</p><p>예를 들어, 접촉자 수(contact_number)가 많은 수로 정렬하면 다음과 같습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`contact_number <span class="built_in">xdesc</span> <span class="keyword">select</span> <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">id  | sex    birth_year country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">----| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">31</span>  | female <span class="number">1959</span>       Korea   Daegu               Shincheonji Church                                                                     <span class="number">1160</span>           <span class="number">2020.02</span><span class="number">.18</span>                                 isolated</span><br><span class="line"><span class="number">16</span>  | female <span class="number">1977</span>       Korea   Gwangju                                      visit to Thailand                 <span class="number">1</span>                           <span class="number">450</span>            <span class="number">2020.02</span><span class="number">.04</span>     <span class="number">2020.02</span><span class="number">.19</span>                  released</span><br><span class="line"><span class="number">12</span>  | male   <span class="number">1971</span>       China   capital area                                 contact with patient in Japan     <span class="number">2</span>                           <span class="number">422</span>            <span class="number">2020.02</span><span class="number">.01</span>     <span class="number">2020.02</span><span class="number">.18</span>                  released</span><br><span class="line"><span class="number">17</span>  | male   <span class="number">1982</span>       Korea   capital area                                 contact with patient in Singapore <span class="number">2</span>                           <span class="number">290</span>            <span class="number">2020.02</span><span class="number">.05</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br></pre></td></tr></table></figure><h3 id="DELETE">DELETE</h3><p>DELETE 키워드는 데이터 또는 항목을 제거합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> patient <span class="built_in">where</span> released_date &lt; <span class="number">2020.03</span><span class="number">.01</span></span><br><span class="line"></span><br><span class="line">id| sex  birth_year country region       <span class="built_in">group</span> infection_reason     infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| --------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">5</span> | male <span class="number">1987</span>       Korea   capital area       visit to Wuhan       <span class="number">1</span>                           <span class="number">31</span>             <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.03</span><span class="number">.02</span>                  released</span><br><span class="line"><span class="number">83</span>| male <span class="number">1944</span>       Korea   capital area       contact with patient <span class="number">3</span>               <span class="number">6</span>                          <span class="number">2020.02</span><span class="number">.20</span>     <span class="number">2020.03</span><span class="number">.01</span>                  released</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> birth_year <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">id| sex    country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> | female China   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">2</span> | male   Korea   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> id <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">sex    birth_year country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">female <span class="number">1984</span>       China   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line">male   <span class="number">1964</span>       Korea   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">id| sex birth_year country region <span class="built_in">group</span> infection_reason infection_order infected_by contact_number confirmed_date released_date deceased_date state</span><br><span class="line">--| ------------------------------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><blockquote><p>patient 테이블에 결과를 할당해야 반영됩니다.</p></blockquote><p>다음 시간에는 그룹핑과 집계에 대해 알아볼 것입니다.</p><h2 id="참고">참고</h2><ul><li><a href="https://code.kx.com/q/basics/qsql/" target="_blank" rel="noopener">Reference - Q-SQL</a></li><li><a href="https://code.kx.com/q4m3/9_Queries_q-sql/#90-overview" target="_blank" rel="noopener">Q Mortals - Queries</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 변수 할당 및 테이블 생성</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/assign-variables-and-tables/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/assign-variables-and-tables/</id>
    <published>2020-03-05T12:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><strong>KDB 튜토리얼 - 변수 할당 및 테이블 생성</strong></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>KDB+는 일반적인 데이터베이스와는 약간 다릅니다. 그것은 <a href="https://code.kx.com/q/basics/datatypes/" target="_blank" rel="noopener">데이터 유형</a>에서도 확인할 수 있습니다.</p><table><thead><tr><th>N</th><th>Name</th><th>Literal</th><th>Java</th></tr></thead><tbody><tr><td>0</td><td>list</td><td></td><td></td></tr><tr><td>1</td><td>boolean</td><td>0b</td><td>Boolean</td></tr><tr><td>2</td><td>guid</td><td></td><td>UUID</td></tr><tr><td>4</td><td>byte</td><td>0x00</td><td>Byte</td></tr><tr><td>5</td><td>short</td><td>0h</td><td>Short</td></tr><tr><td>6</td><td>int</td><td>0i</td><td>Integer</td></tr><tr><td>7</td><td>long</td><td>0j</td><td>Long</td></tr><tr><td>8</td><td>real</td><td>0e</td><td>Float</td></tr><tr><td>9</td><td>float</td><td>0f</td><td>Double</td></tr><tr><td>10</td><td>char</td><td>&quot; &quot;</td><td>Character</td></tr><tr><td>11</td><td>symbol</td><td>`</td><td>String</td></tr><tr><td>12</td><td>timestamp</td><td>dateDtimespan</td><td>Timestamp</td></tr><tr><td>13</td><td>month</td><td>2000.01m</td><td></td></tr><tr><td>14</td><td>date</td><td>2000.01.01</td><td>Date</td></tr><tr><td>15</td><td>datetime</td><td>dateTtime</td><td>Timestamp</td></tr><tr><td>16</td><td>timespan</td><td>00:00:00.000000000</td><td>Timespan</td></tr><tr><td>17</td><td>minute</td><td>00:00</td><td></td></tr><tr><td>18</td><td>second</td><td>00:00:00</td><td></td></tr><tr><td>19</td><td>time</td><td>00:00:00.000</td><td>Time</td></tr><tr><td>98</td><td>table</td><td></td><td></td></tr><tr><td>99</td><td>dictionary</td><td></td><td></td></tr><tr><td>100</td><td>lambda</td><td></td><td></td></tr><tr><td>101</td><td>unary primitive</td><td></td><td></td></tr></tbody></table><h3 id="심볼">심볼</h3><p>심볼은 백틱으로 시작하는 문자열이며 스트링과는 다릅니다.</p><blockquote><p>스트링은 데이터 유형이 아닙니다.</p></blockquote><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="type">`symbol</span> ~ <span class="string">"symbol"</span></span><br><span class="line"><span class="number">0</span>b</span><br></pre></td></tr></table></figure><p>그리고 빈 심볼은 백틱으로만 표현됩니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">null</span> `</span><br><span class="line"><span class="number">1</span>b</span><br></pre></td></tr></table></figure><h2 id="변수-및-테이블">변수 및 테이블</h2><h3 id="변수-할당">변수 할당</h3><p>현재 컨텍스트의 변수에 데이터를 할당하는 것은 <code>:</code>를 이용합니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">str:<span class="string">"string"</span></span><br><span class="line">sym:<span class="type">`symbol</span></span><br><span class="line">tab:([] x:<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; y:<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="테이블-생성">테이블 생성</h3><p>사실 앞서 변수에 데이터를 할당하는 예제에서 테이블을 할당했었습니다. 바로 tab이라는 변수입니다.</p><p><strong>테이블 정의 문법</strong><br>테이블을 생성하는 구문은 다음과 같습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">([] *c1*:*L1*; ...; *cn*:*Ln*)</span><br><span class="line"></span><br><span class="line">t:([] name:`Dent`Beeblebrox`Prefect; iq:<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">flip</span> `name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line">name       iq</span><br><span class="line">--------------</span><br><span class="line">Dent       <span class="number">98</span></span><br><span class="line">Beeblebrox <span class="number">42</span></span><br><span class="line">Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure><p>위 구문에서 [] 안에는 테이블의 키를 표현하여 키 테이블로 구성할 수 있습니다.</p><blockquote><p>일반 테이블과 키 테이블은 다릅니다!</p></blockquote><h4 id="빈-테이블-스키마">빈 테이블 스키마</h4><p>위 예제에서는 테이블을 생성하는 동시에 데이터를 추가했음을 확인할 수 있습니다. 그러면 데이터가 없는 빈 테이블은 어떻게 만들 수 있을까요?</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t:([] name:(); iq:())</span><br><span class="line"></span><br><span class="line">name iq</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><p>그리고 테이블 컬럼에 데이터 유형을 지정하는 것이 좋습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t:([] name:<span class="type">`symbol</span>$(); iq:`int$())</span><br></pre></td></tr></table></figure><h4 id="레코드-출력">레코드 출력</h4><p>테이블의 레코드를 확인하는 방법은 여러가지가 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> t</span><br><span class="line"></span><br><span class="line">name       iq</span><br><span class="line">--------------</span><br><span class="line">Dent       <span class="number">98</span></span><br><span class="line">Beeblebrox <span class="number">42</span></span><br><span class="line">Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure><blockquote><p>혹시 이상한 부분 눈치채셨나요?</p></blockquote><p>일반적인 SQL의 SELECT 구문은 다음과 같습니다.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><p>그런데 KDB+에서 사용하는 SQL 구문에서 와일드카드(*)는 표현하지 않습니다.</p><h3 id="키-테이블">키 테이블</h3><p>앞서 일반적인 테이블과 키 테이블은 다르다고 했습니다. 뭐가 다른걸까요?</p><p>키 테이블의 데이터 유형을 확인해보면 테이블이 아니라 사전입니다.</p><p>간단한 예제를 살펴보도록 하겠습니다. 다음과 같이 사전으로 키 테이블을 구성할 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">v:<span class="built_in">flip</span> `name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">k:<span class="built_in">flip</span> (<span class="built_in">enlist</span> `eid)!<span class="built_in">enlist</span> <span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span></span><br><span class="line">kv: k!v</span><br><span class="line"></span><br><span class="line">eid | name       iq</span><br><span class="line">----| --------------</span><br><span class="line"><span class="number">1001</span>| Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span>| Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span>| Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure><h4 id="키-테이블-정의-문법">키 테이블 정의 문법</h4><p>테이블 정의 문법에 []안에 키를 넣어 키 테이블을 만들수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">kv:([eid:`int$()] <span class="type">`symbol</span>$name:(); iq:`int$())</span><br><span class="line"></span><br><span class="line">eid| name iq</span><br><span class="line">---| -------</span><br></pre></td></tr></table></figure><p>또한, <code>xkey</code>를 활용해서 일반 테이블 컬럼중에서 기본 키를 지정하여 키 테이블을 만들 수 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t:([] eid:<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>; name:`Dent`Beeblebrox`Prefect; iq:<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">kv: `eid <span class="built_in">xkey</span> t</span><br><span class="line"></span><br><span class="line">eid | name       iq</span><br><span class="line">----| --------------</span><br><span class="line"><span class="number">1001</span>| Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span>| Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span>| Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure><p>그러면 반대로 키 테이블을 일반 테이블로 변환하려면 어떻게 할까요? 바로 <code>xkey</code>를 역으로 이용하면 됩니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">kv:([eid:<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>] name:`Dent`Beeblebrox`Prefect; iq:<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">() <span class="built_in">xkey</span> kv</span><br><span class="line"></span><br><span class="line">eid  name       iq</span><br><span class="line">-------------------</span><br><span class="line"><span class="number">1001</span> Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span> Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span> Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure><p>그리고 이를 다시 쉽게 하는 방법도 있습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>!t</span><br><span class="line"></span><br><span class="line">eid | name       iq</span><br><span class="line">----| --------------</span><br><span class="line"><span class="number">1001</span>| Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span>| Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span>| Prefect    <span class="number">126</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span>!kv</span><br><span class="line"></span><br><span class="line">eid  name       iq</span><br><span class="line">-------------------</span><br><span class="line"><span class="number">1001</span> Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span> Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span> Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure><p>우리는 변수를 할당하는 방법과 테이블을 구성하는 방법도 알게되었습니다.</p><p>다음 시간에는 q-sql 이라는 q 언어에서 사용할 수 있는 SQL 구문에 대해서 알아보면서 테이블에 레코드를 저장하고 수정, 삭제하는 것을 살펴보겠습니다.</p><h2 id="참고">참고</h2><ul><li><a href="">Kdb+ and q documentation</a></li><li><a href="https://code.kx.com/q4m3/8_Tables/" target="_blank" rel="noopener">Q for Mortals - Tables</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KDB 튜토리얼 - 변수 할당 및 테이블 생성&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;..
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 그룹핑과 집계</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/grouping-and-aggregation/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/grouping-and-aggregation/</id>
    <published>2020-03-04T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><strong>KDB 튜토리얼 - 그룹핑과 집계</strong></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>이전 시간에 Q-SQL의 SELECT와 WHERE, ORDER BY에 대해서 다루었습니다. 이번에는 그룹핑과 집계를 알아봅니다.</p><h2 id="그룹핑과-집계">그룹핑과 집계</h2><p>SQL과 달리 KDB+의 그룹핑과 집계는 독립적으로 동작합니다.</p><h3 id="Group-By">Group By</h3><p><code>by</code> 키워드로 그룹핑할 수 있습니다.</p><p>예를 들어, 일자별 검사 현황(time)를 월별 신규 검사 현황으로 그룹핑한다면 다음과 같습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span> new_test, <span class="built_in">sum</span> new_negative, <span class="built_in">sum</span> new_confirmed, <span class="built_in">sum</span> new_released, <span class="built_in">sum</span> new_deceased <span class="keyword">by</span> date.month <span class="keyword">from</span> time</span><br><span class="line"></span><br><span class="line">month  | new_test new_negative new_confirmed new_released new_deceased</span><br><span class="line">-------| -------------------------------------------------------------</span><br><span class="line"><span class="number">2020.01</span>| <span class="number">312</span>      <span class="number">245</span>          <span class="number">11</span>            <span class="number">0</span>            <span class="number">0</span>           </span><br><span class="line"><span class="number">2020.02</span>| <span class="number">93743</span>    <span class="number">55478</span>        <span class="number">3139</span>          <span class="number">28</span>           <span class="number">17</span>          </span><br><span class="line"><span class="number">2020.03</span>| <span class="number">52486</span>    <span class="number">63242</span>        <span class="number">2616</span>          <span class="number">60</span>           <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="Aggregation">Aggregation</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;../install-and-connection&quot;&gt;KDB 튜토리얼 - 설치 및 접속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>KDB 튜토리얼 - 설치 및 접속</title>
    <link href="https://kdevkr.github.io/database/kdb/kdb-tutorial/install-and-connection/"/>
    <id>https://kdevkr.github.io/database/kdb/kdb-tutorial/install-and-connection/</id>
    <published>2020-03-04T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>KDB 튜토리얼 - 설치 및 접속</strong></li><li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li><li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li><li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li><li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li><li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li><li><a href="../function">KDB 튜토리얼 - 함수</a></li><li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li></ol><h2 id="들어가며">들어가며</h2><p>KDB+는 KxSystems에서 만든 시계열 데이터베이스입니다.</p><ul><li>고성능의 시계열 컬럼 데이터베이스</li><li>인-메모리 엔진</li><li>실시간 스트리밍 프로세서</li><li>표현 쿼리 및 프로그래밍 언어 <code>q</code></li></ul><blockquote><p>KDB+를 다루기 위해서 q라는 프로그래밍 언어에 대해서 배워야합니다.</p></blockquote><h3 id="HDB-그리고-RDB">HDB 그리고 RDB</h3><p>KDB+는 현재날짜의 이전 데이터는 HDB(Historical Database)으로 디스크에 저장하고 현재 데이터는 RDB(Reatime Database)으로 메모리에 저장합니다.</p><p><img data-src="https://code.kx.com/q/img/wstree.png" alt=""></p><blockquote><p>Kx 공식 레퍼런스에 따르면 RDB 머신이 최소 할당할 수 있는 메모리의 크기를 하루에 저장되는 데이터의 크기의 4배 이상으로 할당하는 것을 추천합니다.</p></blockquote><h2 id="설치-및-접속">설치 및 접속</h2><p>Kx에서 <a href="https://kx.com/connect-with-us/download/" target="_blank" rel="noopener">직접 다운로드</a> 링크를 받거나 도커 이미지를 통해 설치할 수 있습니다. 저는 간단하게 도커를 이용하여 KDB+를 설치하고 실행해보도록 하겠습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kdb+ 이미지 다운로드</span></span><br><span class="line">docker pull kysely/kdbq</span><br><span class="line"></span><br><span class="line"><span class="comment"># kdb+ 컨테이너 실행</span></span><br><span class="line">docker run --name kdb -p 5000:5000 -v <span class="string">"c:\q/data"</span>:/root/data -e AUTH=<span class="string">"kdev:kdev"</span> -d kysely/kdbq</span><br></pre></td></tr></table></figure><p><strong>Dockerfile</strong><br>위 이미지는 다음과 같이 구성되어 있습니다.</p><blockquote><p><a href="https://github.com/kysely/kdbq-server/blob/oligarch/Dockerfile" target="_blank" rel="noopener">https://github.com/kysely/kdbq-server/blob/oligarch/Dockerfile</a></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile license: MIT, see LICENSE file</span></span><br><span class="line"><span class="comment"># kdb+ 32-bit Personal Edition license: see https://kx.com/download/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> debian:<span class="number">8.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"maintainer"</span>=<span class="string">"Radek Kysely &lt;radek@kysely.org&gt;"</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"kdb+ license"</span>=<span class="string">"No Fee, Non-Commercial Use &lt;https://kx.com/download/&gt;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PORT=<span class="number">5000</span></span><br><span class="line"><span class="keyword">ENV</span> ON_STARTUP=<span class="string">"-1\"Fresh startup\";"</span></span><br><span class="line"><span class="keyword">ENV</span> AUTH=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">    unzip=6.0* \</span></span><br><span class="line"><span class="bash">    lib32z1=1:1.2.8* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> https://kx.com/347_d0szre-fr8917_llrsT4Yle-5839sdX/3.6/linuxx86.zip \</span></span><br><span class="line"><span class="bash">    /root/kdbq.zip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip /root/kdbq.zip -x q/q.q q/README.txt -d /root/ &amp;&amp; rm /root/kdbq.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $PORT</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> docker-entrypoint.sh <span class="string">"<span class="variable">$PORT</span>"</span> <span class="string">"<span class="variable">$ON_STARTUP</span>"</span> <span class="string">"<span class="variable">$AUTH</span>"</span></span></span><br></pre></td></tr></table></figure><h3 id="접속하기">접속하기</h3><p>KDB+로 접속하는 방법은 여러가지가 있습니다.</p><ul><li><a href="https://code.kx.com/developer/" target="_blank" rel="noopener">Kx Developer</a></li><li><a href="https://github.com/CharlesSkelton/studio" target="_blank" rel="noopener">Studio for kdb+</a></li><li><a href="http://www.timestored.com/qstudio/" target="_blank" rel="noopener">qStudio</a></li><li><a href="https://gitlab.com/shupakabras/kdb-intellij-plugin" target="_blank" rel="noopener">KDB+ Studio plugin for IntelliJ IDEA</a></li><li><a href="https://atom.io/packages/connect-kdb-q" target="_blank" rel="noopener">connect-kdb-q for Atom</a></li><li><a href="https://packagecontrol.io/packages/q%20KDB" target="_blank" rel="noopener">Sublime-q</a> ✅</li></ul><p>이 중에서 저는 서브라임 텍스트 에디터의 <code>Sublime-q</code> 패키지가 가장 사용하기 편리한 것 같습니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#host:port:user:password</span></span><br><span class="line"><span class="comment">#localhost:port</span></span><br><span class="line">localhost:5600:kdev:kdev</span><br></pre></td></tr></table></figure><blockquote><p>컨테이너 실행 시 -e AUTH=&quot;:&quot; 로 옵션을 지정하는 경우 사용자 및 비밀번호를 사용하지 않고 접속할 수 있습니다.</p></blockquote><p>정상적으로 접속된 경우 서브라임 텍스트 하단에 다음과 같이 OK 로그가 출력됩니다.</p><p><img data-src="/images/2020/kdb-connection-sublime-q.png" alt=""></p><p>짝짝짝! 접속까지 성공하였습니다.</p><h3 id="명령어-실행">명령어 실행</h3><p>간단한 몇가지 명령어를 실행해보도록 하겠습니다.</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ 포트 확인</span><br><span class="line">\p</span><br><span class="line"></span><br><span class="line">/ 현재 사용자</span><br><span class="line">.z.u</span><br><span class="line"></span><br><span class="line">/ OS</span><br><span class="line">.z.o</span><br><span class="line"></span><br><span class="line">/ 현재 시간</span><br><span class="line">.z.</span><br><span class="line"></span><br><span class="line">/ 프로세스 아이디</span><br><span class="line">.z.i</span><br><span class="line"></span><br><span class="line">/ 코어 수</span><br><span class="line">.z.c</span><br><span class="line"></span><br><span class="line">/ 가비지 컬렉션 호출</span><br><span class="line">.Q.gc[]</span><br><span class="line"></span><br><span class="line">/ 메모리 사용량 통계</span><br><span class="line">.Q.w[]</span><br><span class="line"></span><br><span class="line">/ 파일 또는 데이터 로드</span><br><span class="line">.Q.l</span><br><span class="line"></span><br><span class="line">/ 누락 HDB 테이블 저장</span><br><span class="line">.Q.chk</span><br><span class="line"></span><br><span class="line">/ 테이블 저장</span><br><span class="line">.Q.dpft</span><br></pre></td></tr></table></figure><p>다음에는 변수 할당 및 테이블 생성에 대해서 다루겠습니다.</p><h2 id="참고">참고</h2><ul><li><a href="https://code.kx.com/" target="_blank" rel="noopener">Kdb+ and q documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;strong&gt;KDB 튜토리얼 - 설치 및 접속&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../assign-variables-and-tables&quot;&gt;KDB 튜토리얼 - 변수 할당 및 테이블 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="KDB" scheme="https://kdevkr.github.io/tags/KDB/"/>
    
      <category term="Q" scheme="https://kdevkr.github.io/tags/Q/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트에서 블롭 데이터 다운받기</title>
    <link href="https://kdevkr.github.io/javascript/download-blobs-in-javascript/"/>
    <id>https://kdevkr.github.io/javascript/download-blobs-in-javascript/</id>
    <published>2020-02-10T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><h3 id="일반">일반</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">link.href = $url;</span><br><span class="line">link.click();</span><br></pre></td></tr></table></figure><h3 id="Blob">Blob</h3><p>프로젝트에서 지원하는 브라우저가 Blob 객체를 지원하나요? 그렇다면 Blob 객체를 통해 파일을 다운로드할 수 있습니다.</p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Blob</a></p></blockquote><p><em><strong>(Optional) Polyfill for IE 9</strong></em><br>Blob 객체는 IE 10부터 지원하므로 IE 9에서 사용하기 위해서는 폴리필을 적용해야합니다.</p><p><a href="https://github.com/bjornstar/blob-polyfill" target="_blank" rel="noopener">Blob Polyfill</a></p><h4 id="Using-window-URL">Using window.URL</h4><ul><li>ContentDisposition</li><li>window.URL.createObjectURL</li><li>window.URL.revokeObjectURL</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContentDisposition <span class="keyword">from</span> <span class="string">'content-disposition'</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">'file-saver'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$download = <span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    $axios(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        params: params,</span><br><span class="line">        responseType: <span class="string">'blob'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> contentDisposition = ContentDisposition.parse(res.headers[<span class="string">'content-disposition'</span>])</span><br><span class="line">        <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">const</span> blobUrl = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([res.data]));</span><br><span class="line">        link.href = blobUrl</span><br><span class="line">        link.setAttribute(<span class="string">'download'</span>, contentDisposition.parameters.filename);</span><br><span class="line">        link.target = <span class="string">'_blank'</span></span><br><span class="line">        link.click();</span><br><span class="line">        link.remove()</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(blobUrl);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Using-FileSaver-js">Using FileSaver.js</h4><ul><li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.saveAs</a></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContentDisposition <span class="keyword">from</span> <span class="string">'content-disposition'</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">'file-saver'</span></span><br><span class="line"></span><br><span class="line">$axios(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    params: params,</span><br><span class="line">    responseType: <span class="string">'blob'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contentDisposition = ContentDisposition.parse(res.headers[<span class="string">'content-disposition'</span>])</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data])</span><br><span class="line">    </span><br><span class="line">    saveAs(blob, contentDisposition.parameters.filename)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="참고">참고</h2><ul><li><a href="https://gist.github.com/javilobo8/097c30a233786be52070986d8cdb1743" target="_blank" rel="noopener">Download files with AJAX (axios)</a></li><li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.js</a></li><li><a href="https://github.com/bjornstar/blob-polyfill" target="_blank" rel="noopener">Blob Polyfill</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;h3 id=&quot;일반&quot;&gt;일반&lt;/h3&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ke
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="JavaScript" scheme="https://kdevkr.github.io/tags/JavaScript/"/>
    
      <category term="Blob" scheme="https://kdevkr.github.io/tags/Blob/"/>
    
      <category term="FileSaver" scheme="https://kdevkr.github.io/tags/FileSaver/"/>
    
  </entry>
  
  <entry>
    <title>자바 애플리케이션에 HotSwap 적용하기</title>
    <link href="https://kdevkr.github.io/java/application-run-and-debug-with-hotswap-agent/"/>
    <id>https://kdevkr.github.io/java/application-run-and-debug-with-hotswap-agent/</id>
    <published>2020-02-09T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/2020/hot-swap.png" alt=""></p><h2 id="들어가며">들어가며</h2><p>자바 애플리케이션 개발 시 클래스에 대한 변경을 바로 적용시키기 위해서는 핫-스왑이라는 기술이 적용되어야합니다. 유료로 전환된지 오래된 <a href="https://www.jrebel.com/products/jrebel" target="_blank" rel="noopener">JRebel</a>이 대표적인 도구입니다.</p><p>이와 비슷한 기능을 하는 오픈 소스로 <a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="noopener">HotSwapAgent</a> 프로젝트가 있습니다. HotSwapAgent를 자바 애플리케이션 구동시 적용하는 방법을 알아보겠습니다.</p><h2 id="Java-8-Application-with-HotSwap">Java 8 Application with HotSwap</h2><p>핫-스왑 기술을 적용하기 위해서는 DCEVM으로 빌드된 JDK와 HotSwapAgent를 사용해야합니다.</p><h3 id="Dynamic-Code-Evolution-VM-DCEVM">Dynamic Code Evolution VM(DCEVM)</h3><p>DCEVM은 OpenJDK 7/8에 대한 클래스 재정의 기능을 향상시키는 프로젝트입니다.</p><h4 id="Trava-DCEVM-8">Trava DCEVM 8</h4><p><a href="https://github.com/TravaOpenJDK/trava-jdk-8-dcevm" target="_blank" rel="noopener">TravaOpenJDK</a>에서 AdoptOpenJDK를 기반으로 DCEVM 빌드된 JDK를 제공합니다.</p><p>다만, 윈도우즈를 위한 빌드는 실패한 상태이며 리눅스와 맥 OS는 제공합니다.</p><h4 id="DCEVM-Installer">DCEVM Installer</h4><p><a href="https://github.com/ojdkbuild/ojdkbuild" target="_blank" rel="noopener">OpenJDK</a> 8를 다운받은 상태에서 <a href="https://github.com/dcevm/dcevm/releases" target="_blank" rel="noopener">DCEVM 인스톨러</a>를 이용하면 DCEVM 으로 패치할 수 있도록 지원합니다.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo java -jar DCEVM-8u181-installer-build2.jar</span><br></pre></td></tr></table></figure><p><img data-src="/spring/images/dcevm-8u181-installer-build2.png" alt=""></p><h3 id="HotSwapAgent">HotSwapAgent</h3><p><a href="https://github.com/HotswapProjects/HotswapAgent/releases/tag/RELEASE-1.4.0" target="_blank" rel="noopener">HotSwapAgent</a>를 다운받습니다.</p><h3 id="Run-and-Debug">Run and Debug</h3><p>이제 애플리케이션 실행 시 DCEVM으로 패치된 JDK를 지정하고 HotSwapAgent를 VM 옵션에 추가하면 됩니다.</p><p><strong>VM Options</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-javaagent:C:\java\hotswap-agent-1.4.0.jar</span><br></pre></td></tr></table></figure><p><strong>Console</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:6327'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">HOTSWAP AGENT: 23:20:30.859 INFO (org.hotswap.agent.HotswapAgent) - Loading Hotswap agent &#123;1.4.0&#125; - unlimited runtime class redefinition.</span><br><span class="line">HOTSWAP AGENT: 23:20:31.278 INFO (org.hotswap.agent.config.PluginRegistry) - Discovered plugins: [JdkPlugin, Hotswapper, WatchResources, ClassInitPlugin, AnonymousClassPatch, Hibernate, Hibernate3JPA, Hibernate3, Spring, Jersey1, Jersey2, Jetty, Tomcat, ZK, Logback, Log4j2, MyFaces, Mojarra, Omnifaces, ELResolver, WildFlyELResolver, OsgiEquinox, Owb, Proxy, WebObjects, Weld, JBossModules, ResteasyRegistry, Deltaspike, GlassFish, Vaadin, Wicket, CxfJAXRS, FreeMarker, Undertow, MyBatis]</span><br></pre></td></tr></table></figure><h2 id="Java-11-Application-with-HotSwap">Java 11 Application with HotSwap</h2><p>JDK 11는 <a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm/releases" target="_blank" rel="noopener">TravaOpenJDK</a>에서 DCEVM으로 빌드된 바이너리를 받으면 됩니다.</p><h3 id="Run-and-Debug-2">Run and Debug</h3><p>이 바이너리에는 DCEVM과 HotSwapAgent가 포함되어있으니 자바 애플리케이션 구동 시 JDK를 선택하고 실행하면 됩니다.</p><p><strong>Console</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:7066'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">HOTSWAP AGENT: 23:37:13.680 INFO (org.hotswap.agent.HotswapAgent) - Loading Hotswap agent &#123;1.4.0&#125; - unlimited runtime class redefinition.</span><br><span class="line">HOTSWAP AGENT: 23:37:13.882 INFO (org.hotswap.agent.config.PluginRegistry) - Discovered plugins: [JdkPlugin, Hotswapper, WatchResources, ClassInitPlugin, AnonymousClassPatch, Hibernate, Hibernate3JPA, Hibernate3, Spring, Jersey1, Jersey2, Jetty, Tomcat, ZK, Logback, Log4j2, MyFaces, Mojarra, Omnifaces, ELResolver, WildFlyELResolver, OsgiEquinox, Owb, Proxy, WebObjects, Weld, JBossModules, ResteasyRegistry, Deltaspike, GlassFish, Vaadin, Wicket, CxfJAXRS, FreeMarker, Undertow, MyBatis]</span><br><span class="line">Starting HotswapAgent <span class="string">'C:\java\java11-openjdk-dcevm-windows\dcevm-11.0.5+5\lib\hotswap\hotswap-agent.jar'</span></span><br></pre></td></tr></table></figure><h2 id="참고">참고</h2><ul><li><a href="https://github.com/dcevm/dcevm" target="_blank" rel="noopener">DCEVM</a></li><li><a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm" target="_blank" rel="noopener">Trava JDK 11 DCEVM</a></li><li><a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="noopener">HotswapAgent</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img data-src=&quot;/images/2020/hot-swap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;자바 애플리케이션 개발 시 클래스에 대한 변경을 바로 적용시키기 위해서는 핫-스왑이라는 기술이 적용되
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="Java" scheme="https://kdevkr.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="https://kdevkr.github.io/tags/Spring/"/>
    
      <category term="HotSwapAgent" scheme="https://kdevkr.github.io/tags/HotSwapAgent/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate와 WebClient로 Open API를 사용하는 방법 비교하기</title>
    <link href="https://kdevkr.github.io/spring/compare-how-to-use-open-api-using-rest-template-and-web-client/"/>
    <id>https://kdevkr.github.io/spring/compare-how-to-use-open-api-using-rest-template-and-web-client/</id>
    <published>2020-01-31T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>공공데이터포털에서 제공하는 <a href="https://www.data.go.kr/dataset/3043723/openapi.do" target="_blank" rel="noopener">한국전력거래소 계통운영 정보</a>와 같은 Open API를 RestTemplate(블로킹 클라이언트)와 WebClient(리액티브 논-블로킹 클아이언트)를 활용하여 호출하고 응답받는 방법을 비교해보겠습니다.</p><h2 id="HTTP-Request-Client">HTTP Request Client</h2><div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">RestTemplate</a></li><li class="tab"><a href="#unique-name-2">WebClient</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><h3 id="RestTemplate">RestTemplate</h3><p><code>RestTemplate</code>는 <a href="https://hc.apache.org/" target="_blank" rel="noopener">Apache HttpComponents</a> 또는 <a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a>와 같은 라이브러리를 사용하여 HTTP 요청을 수행하는 클라이언트입니다.</p><blockquote><p>The RestTemplate will be deprecated in a future version and will not have major new features added going forward.</p></blockquote><p>위 설명에 따르면 RestTemplate에 대한 기능 지원은 없을 예정이며 언제가 될지는 모르겠으나 없어질 수 있다고 합니다. 새로 추가된 WebClient로 통합하려고 하는 듯 합니다.</p><h4 id="Example">Example</h4><p>그러면 기존에 사용하던 RestTemplate로 Open API를 호출하는 예제를 살펴보겠습니다.</p><blockquote><p>본 예제는 인코딩된 서비스 키를 사용하므로 쿼리 파라미터에 대한 인코딩 설정을 하지 않았습니다.</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TEST_000_http_request_using_rest_template</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplateBuilder().build();</span><br><span class="line"></span><br><span class="line">        DefaultUriBuilderFactory uriBuilderFactory = <span class="keyword">new</span> DefaultUriBuilderFactory(<span class="string">"https://openapi.kpx.or.kr"</span>);</span><br><span class="line">        uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.NONE);</span><br><span class="line"></span><br><span class="line">        UriBuilder uriBuilder = uriBuilderFactory.builder();</span><br><span class="line">        uriBuilder</span><br><span class="line">            .path(<span class="string">"/openapi/sukub5mToday/getSukub5mToday"</span>)</span><br><span class="line">            .queryParam(<span class="string">"ServiceKey"</span>, <span class="string">"[encodedServiceKey]"</span>);</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.exchange(uriBuilder.build(), HttpMethod.GET, <span class="keyword">null</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String response = responseEntity.getBody();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="unique-name-2"><h3 id="WebClient">WebClient</h3><p><code>WebClient</code>는 리액티브 스택을 지원할 수 있도록 <a href="https://github.com/reactor/reactor-netty" target="_blank" rel="noopener">Reactor Netty</a>를 사용하여 논-블로킹으로 HTTP 요청을 수행하는 리액티브 클라이언트입니다.</p><h4 id="Example">Example</h4><p>이제 RestTemplate와 비교하여 똑같은 동작을 해보겠습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TEST_001_http_request_using_web_client</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DefaultUriBuilderFactory uriBuilderFactory = <span class="keyword">new</span> DefaultUriBuilderFactory(<span class="string">"https://openapi.kpx.or.kr"</span>);</span><br><span class="line">        uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.NONE);</span><br><span class="line"></span><br><span class="line">        WebClient webClient = WebClient.builder().uriBuilderFactory(uriBuilderFactory).build();</span><br><span class="line">        WebClient.ResponseSpec responseSpec = webClient.get().uri(uriBuilder -&gt; uriBuilder</span><br><span class="line">                .path(<span class="string">"/openapi/sukub5mToday/getSukub5mToday"</span>)</span><br><span class="line">                .queryParam(<span class="string">"ServiceKey"</span>, <span class="string">"[encodedServiceKey]"</span>)</span><br><span class="line">                .build()</span><br><span class="line">        ).retrieve();</span><br><span class="line"></span><br><span class="line">        String response = responseSpec.bodyToMono(String<span class="class">.<span class="keyword">class</span>).<span class="title">block</span>()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Mono.block()을 통해 비동기가 아닌 RestTemplate와 같은 동기로 수행할 수 있습니다.</p></blockquote></div></div></div><h2 id="참고">참고</h2><ul><li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">RestTemplate</a></li><li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html" target="_blank" rel="noopener">WebClient</a></li><li><a href="https://junebuug.github.io/2019-02-11/resttemplate-vs-webclient" target="_blank" rel="noopener">RestTemplate 말고 WebClient</a></li><li><a href="https://www.baeldung.com/spring-webclient-resttemplate" target="_blank" rel="noopener">Spring WebClient vs. RestTemplate</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;공공데이터포털에서 제공하는 &lt;a href=&quot;https://www.data.go.kr/dataset/3043723/openapi.do&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;한국전력거래소
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="RestTemplate" scheme="https://kdevkr.github.io/tags/RestTemplate/"/>
    
      <category term="WebClient" scheme="https://kdevkr.github.io/tags/WebClient/"/>
    
      <category term="Open API" scheme="https://kdevkr.github.io/tags/Open-API/"/>
    
  </entry>
  
  <entry>
    <title>YamlPropertiesFactoryBean으로 YAML 프로퍼티 만들기</title>
    <link href="https://kdevkr.github.io/spring/create-properties-from-yaml-resources-using-yaml-properties-factory-bean/"/>
    <id>https://kdevkr.github.io/spring/create-properties-from-yaml-resources-using-yaml-properties-factory-bean/</id>
    <published>2020-01-25T00:00:00.000Z</published>
    <updated>2020-07-16T12:37:57.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가며">들어가며</h2><p>스프링은 Properties 뿐만 아니라 Yaml 형식으로 애플리케이션 프로퍼티 설정을 할 수 있습니다. 그렇다면 스프링은 어떻게 Yaml 파일을 불러와 프로퍼티로 만드는 것일까요?</p><h2 id="YamlPropertiesFactoryBean">YamlPropertiesFactoryBean</h2><p>YamlPropertiesFactoryBean은 YamlProcessor를 확장한 클래스로 YamlProcessor의 <code>콜백 패턴</code>을 통해 처리된 Properties를 모아서 하나의 Properties로 만들어주는 팩토리 메소드를 제공합니다.</p><h3 id="Dependencies">Dependencies</h3><p><code>spring-beans</code> 모듈에는 <code>SnakeYaml</code> 라이브러리를 활용해서 <code>Yaml</code>을 처리할 수 있는 클래스를 보유하고 있습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">"org.yaml:snakeyaml:1.25"</span>)</span><br><span class="line">implementation(<span class="string">"org.springframework:spring-beans:5.2.3.RELEASE"</span>)</span><br></pre></td></tr></table></figure><h3 id="Example">Example</h3><p>YAML 파일을 리소스로 불러오기만 하면 쉽게 프로퍼티로 변환할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">YamlPropertiesFactoryBean yamlPropertiesFactoryBean = <span class="keyword">new</span> YamlPropertiesFactoryBean();</span><br><span class="line">yamlPropertiesFactoryBean.setResources(<span class="keyword">new</span> ClassPathResource(<span class="string">"application-test.yml"</span>));</span><br><span class="line">Properties properties = yamlPropertiesFactoryBean.getObject();</span><br></pre></td></tr></table></figure><h2 id="YamlPropertySourceLoader">YamlPropertySourceLoader</h2><p><a href="https://github.com/spring-projects/spring-boot/blob/oligarch/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java" target="_blank" rel="noopener">YamlPropertySourceLoader</a>는 스프링 부트에서 제공하는 로더 클래스로써 <code>.yml</code> 또는 <code>.yaml</code>로 끝나는 파일을 PropertySource로 넣어주는 역할을 합니다.</p><h3 id="Dependencies-2">Dependencies</h3><p>YamlPropertySourceLoader는 org.springframework.boot.env 패키지에 포함되어있습니다.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">"org.springframework.boot:spring-boot:2.2.4.RELEASE"</span>)</span><br></pre></td></tr></table></figure><h3 id="Example-2">Example</h3><p>YamlPropertySourceLoader를 통해 리소스로부터 PropertySource 리스트를 받은 뒤 각 PropertySource의 Object를 받아 Properties로 병합할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">YamlPropertySourceLoader yamlPropertySourceLoader = <span class="keyword">new</span> YamlPropertySourceLoader();</span><br><span class="line">List&lt;PropertySource&lt;?&gt;&gt; propertySources = yamlPropertySourceLoader.load(<span class="string">"application-test"</span>, <span class="keyword">new</span> ClassPathResource(<span class="string">"application-test.yml"</span>));</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">for</span>(PropertySource propertySource : propertySources) &#123;</span><br><span class="line">    Object source = propertySource.getSource();</span><br><span class="line">    properties.putAll((Map) source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;스프링은 Properties 뿐만 아니라 Yaml 형식으로 애플리케이션 프로퍼티 설정을 할 수 있습니다. 그렇다면 스프링은 어떻게 Yaml 파일을 불러와 프로퍼티로 만드는 것일까요?&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="개발 이야기" scheme="https://kdevkr.github.io/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
    
      <category term="Spring" scheme="https://kdevkr.github.io/tags/Spring/"/>
    
      <category term="Yaml" scheme="https://kdevkr.github.io/tags/Yaml/"/>
    
      <category term="Properties" scheme="https://kdevkr.github.io/tags/Properties/"/>
    
  </entry>
  
</feed>
