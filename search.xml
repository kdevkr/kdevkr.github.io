<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>프로메테우스와 그라파나를 활용한 메트릭 모니터링</title>
    <url>/dev-ops/monitoring-metrics-with-prometheus-and-grafana/</url>
    <content><![CDATA[<p>오픈 소스 모니터링 시스템인 프로메테우스(Prometheus)와 오픈 소스 분석 시스템인 그라파나(Grafana)를 활용하면 메트릭에 대한 모니터링 대시보드를 구성할 수 있습니다.</p>
<h2 id="프로메테우스">프로메테우스</h2>
<p><img data-src="https://prometheus.io/assets/architecture.png" alt=""></p>
<p><a href="https://prometheus.io/" target="_blank" rel="noopener">프로메테우스(Prometheus)</a>는 메트릭을 수집(Scraping)하여 시계열(Timeseries) 데이터베이스에 저장하는 모니터링 솔루션입니다.</p>
<p>위 아키텍처 그림에서 Exporter는 프로메테우스가 수집할 수 있는 메트릭을 제공하는 에이전트입니다. 프로메테우스 조직에서 제공하는 공식 Exporter 뿐만 아니라 PostgreSQL 또는 <a href="https://micrometer.io/docs/registry/prometheus" target="_blank" rel="noopener">Micrometer</a>와 같은 <a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">서드 파티 Exporter</a>가 있습니다. 주로 사용되는 대부분의 시스템에 대한 Exporter가 있으니 찾아서 프로메테우스에 Exporter로 적용하면 됩니다.</p>
<h3 id="설치-및-구성">설치 및 구성</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name=prometheus -d -p 9090:9090 -v <span class="variable">$pwd</span>/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus</span><br></pre></td></tr></table></figure>
<p>도커 이미지의 기본 구성 파일은 다음과 같습니다.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure>
<h2 id="그라파나">그라파나</h2>
<p><a href="https://grafana.com/grafana/" target="_blank" rel="noopener">그라파나(Grafana)</a>는 여러가지 데이터베이스에 저장된 메트릭을 시각화하여 보여주는 대시보드 솔루션입니다.</p>
<p><a href="https://play.grafana.org/d/000000012/grafana-play-home?orgId=1" target="_blank" rel="noopener">라이브 데모</a></p>
<p>그라파나는 대표적인 Graphite, InfluxDB, Prometheus, Elasticsearch, AWS CloudWatch 이외에도 30개가 넘는 <a href="https://grafana.com/grafana/plugins?direction=asc&amp;orderBy=weight&amp;type=datasource" target="_blank" rel="noopener">데이터 소스</a>를 지원합니다.</p>
<h3 id="설치-및-구성-2">설치 및 구성</h3>
<p>본 글에서는 간단하게 <a href="https://grafana.com/grafana/download?platform=docker" target="_blank" rel="noopener">도커 이미지</a>를 통해 그라파나 컨테이너를 실행합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name=grafana -p 3000:3000 grafana/grafana</span><br></pre></td></tr></table></figure>
<p>설치가 완료되었으면 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 으로 접속하여 관리자 계정으로 로그인 후 초기 비밀번호를 변경합니다.</p>
<blockquote>
<p>관리자 계정명과 초기 비밀번호는 <code>admin</code>입니다.</p>
</blockquote>
<h2 id="프로메테우스와-그라파나">프로메테우스와 그라파나</h2>
<p>프로메테우스에 저장된 메트릭을 그라파나를 활용하여 시각화할 수 있습니다.</p>
<h3 id="프로메테우스-데이터-소스-추가">프로메테우스 데이터 소스 추가</h3>
<p>그라파나 시스템에 접속하여 프로메테우스를 데이터 소스로 추가합니다.</p>
<p><img data-src="/dev-ops/images/grafana-datasource-prometheus-configuration.PNG#full" alt=""></p>
<p>그라파나가 기본으로 제공하는 프로메테우스 대시보드를 선택하여 시각화된 프로메테우스 메트릭을 확인합니다.</p>
<p><img data-src="/dev-ops/images/grafana-datasource-prometheus-dashboard.PNG#full" alt=""></p>
<h3 id="Spring-Boot-Actuator-메트릭-모니터링">Spring Boot Actuator 메트릭 모니터링</h3>
<p>스프링 부트 액추에이터를 사용중인 경우 프로메테우스의 <a href="https://micrometer.io/docs/registry/prometheus" target="_blank" rel="noopener">Micromiter Exporter</a>를 쉽게 적용할 수 있습니다.</p>
<h4 id="Micrometer-Registry-Prometheus">Micrometer Registry Prometheus</h4>
<p>프로메테우스가 메트릭을 수집할 수 있도록 HTTP 엔드포인트를 구성합니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">implementation <span class="string">'io.micrometer:micrometer-registry-prometheus'</span></span><br></pre></td></tr></table></figure>
<p>두 의존성을 가지는 프로젝트를 생성한 뒤 기본 매니지먼트 서버를 비활성화하고 별도의 HTTP 엔드포인트를 구현합니다.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<p><code>micrometer-registry-prometheus</code>가 의존성으로 존재하면 자동으로 <code>PrometheusScrapeEndpoint</code> 빈이 컨텍스트에 등록됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/actuator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActuatorEndpoint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PrometheusScrapeEndpoint prometheusScrapeEndpoint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActuatorEndpoint</span><span class="params">(PrometheusScrapeEndpoint prometheusScrapeEndpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prometheusScrapeEndpoint = prometheusScrapeEndpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/prometheus"</span>, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;, produces = MediaType.TEXT_PLAIN_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">metrics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(prometheusScrapeEndpoint.scrape());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a> 로 접속하면 다음과 같이 프로메테우스가 수집할 수 있는 메트릭이 출력됩니다.</p>
<p><img data-src="/spring/images/spring-boot-actuator-prometheus-metrics.PNG#full" alt=""></p>
<h4 id="Prometheus-Scrap-Configuration">Prometheus Scrap Configuration</h4>
<p>프로메테우스가 엑추에이터가 제공하는 메트릭을 수집하도록 설정합니다.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">jvm</span></span><br><span class="line">  <span class="attr">honor_timestamps:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$&#123;your-host-ip&#125;:8080</span></span><br></pre></td></tr></table></figure>
<p>프로메테우스를 재실행하면 수집 목록에 추가된 것을 확인할 수 있습니다.</p>
<p><img data-src="/dev-ops/images/prometheus-scraping-targets.PNG#full" alt=""></p>
<h4 id="JVM-Actuator-Dashboard">JVM Actuator Dashboard</h4>
<p>그라파나 대시보드 중 <a href="https://grafana.com/grafana/dashboards/4701" target="_blank" rel="noopener">JVM (Micrometer)</a> 또는 <a href="https://grafana.com/grafana/dashboards/9568" target="_blank" rel="noopener">JVM (Actuator)</a>를 대시보드로 추가합니다.</p>
<p><img data-src="/dev-ops/images/grafana-dashboard-import.PNG#full" alt=""></p>
<p>추가된 대시보드에 따라 메트릭을 시각화하여 모니터링 할 수 있습니다.</p>
<p><img data-src="/dev-ops/images/grafana-dashboard-stats.PNG#full" alt=""></p>
<p>스프링 부트 액추에이터 메트릭을 프로메테우스가 수집하며 그라파나를 통해 메트릭을 시각화할 수 있는 것을 확인했습니다.</p>
<p>앞으로 쿠버네티스에 대한 모니터링과 알림 매니저(AlertManager)를 구성하여 슬랙 또는 이메일 등으로 알림을 받아볼 수 있습니다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a></li>
<li><a href="https://grafana.com/grafana/" target="_blank" rel="noopener">Grafana</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>JAXBContext 인스턴스를 매번 만들지 말아야하는 이유</title>
    <url>/java/do-not-create-instance-for-jaxbcontext/</url>
    <content><![CDATA[<h2 id="XML-Marshaller">XML Marshaller</h2>
<p>자바 오브젝트를 XML로 구성(Marshal)하거나 XML으로 구성된 데이터를 자바 오브젝트화(Unmarshal)하는 것을 도와주는 클래스를 마샬러라고 합니다.</p>
<p>자바에서 사용할 수 있는 마샬러를 검색하면 <a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/Marshaller.html" target="_blank" rel="noopener">JAXB</a>, <a href="https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-framework.html" target="_blank" rel="noopener">Castor</a>, <a href="http://jibx.sourceforge.net/" target="_blank" rel="noopener">JiBX</a>, <a href="https://x-stream.github.io/" target="_blank" rel="noopener">XStream</a>등이 있습니다.</p>
<h3 id="JAXB">JAXB</h3>
<p>여러 마샬러들 중에서 가장 많이 사용되고 예제가 많은 것이 JAXB(Java Architecture for XML Binding)인데 다른 마샬러와 달리 자바 패키지에 포함되어 있으면서도 사용하기가 편리합니다.</p>
<h4 id="XML-unmarshalling-benchmark">XML unmarshalling benchmark</h4>
<blockquote>
<p>XML unmarshalling benchmark in Java: JAXB vs STax vs Woodstox<br>
<a href="https://dzone.com/articles/xml-unmarshalling-benchmark" target="_blank" rel="noopener">https://dzone.com/articles/xml-unmarshalling-benchmark</a></p>
</blockquote>
<p>위 글의 결론을 보면 속도면에서는 JAXB가 월등하며 메모리 사용량에서는 STax가 우세하다고 설명합니다.</p>
<h3 id="JAXBContext">JAXBContext</h3>
<p>이 글의 주된 내용은 JAXBContext의 인스턴스에 대한 것입니다.</p>
<p>진행중인 전력관련 프로젝트에서 OpenADR 프로토콜을 이용하여 통신함에 따라 XML Marshaller를 사용해야 했습니다. 허나 XML 데이터의 크기가 커짐에 따라 서버의 마샬링 및 언마샬링 속도가 느려짐을 확인되었고 먼저 JAXB 성능에 의심을 하였으나 벤치마크 글을 확인한 후 방향을 틀어 현재 코드에서 문제가 있는곳을 찾아야 했습니다.</p>
<p>그래서 JAXB의 퍼포먼스에 대해서 검색하였고 스택오버플로우에서 다음과 같은 질문을 찾았습니다.</p>
<blockquote>
<p>How do I improve performance of application that uses the JAXBContext.newInstance operation?<br>
<a href="https://stackoverflow.com/questions/6043956/how-do-i-improve-performance-of-application-that-uses-the-jaxbcontext-newinstanc" target="_blank" rel="noopener">https://stackoverflow.com/questions/6043956/how-do-i-improve-performance-of-application-that-uses-the-jaxbcontext-newinstanc</a></p>
</blockquote>
<p>답변에 내용은 JAXBContext의 인스턴스를 만드는 것에 대한 오버헤드를 피하라는 것이었고 프로젝트 내 JAXBContext를 사용하는 코드들을 찾았습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Marshaller <span class="title">getMarshaller</span><span class="params">(Object payload)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JAXBManager().createMarshaller();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JAXBManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_JAXB_CONTEXT_PATH = <span class="string">""</span>;</span><br><span class="line">    JAXBContext jaxbContext;</span><br><span class="line">    OADR2NamespacePrefixMapper nsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JAXBManager</span><span class="params">()</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JAXBManager</span><span class="params">(String jaxbContextPath)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jaxbContext = JAXBContext.newInstance(jaxbContextPath);</span><br><span class="line">        <span class="keyword">this</span>.nsMapper = <span class="keyword">this</span>.createPrefixMapper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JAXBContext <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jaxbContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> OADR2NamespacePrefixMapper <span class="title">createPrefixMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OADR2NamespacePrefixMapper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Marshaller <span class="title">createMarshaller</span><span class="params">()</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        Marshaller marshaller = <span class="keyword">this</span>.jaxbContext.createMarshaller();</span><br><span class="line">        <span class="keyword">this</span>.nsMapper.addTo(marshaller);</span><br><span class="line">        marshaller.setProperty(<span class="string">"jaxb.fragment"</span>, Boolean.TRUE);</span><br><span class="line">        <span class="keyword">return</span> marshaller;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>모든 오브젝트를 XML String으로 마샬링을 할 때 새로운 JAXBManager 인스턴스를 만듬에 따라 JAXBContext 인스턴스 또한 매번 만들어지는 코드였습니다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">oadrPayload</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://openadr.org/oadr-2.0b/2012/07"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:ei</span>=<span class="string">"http://docs.oasis-open.org/ns/energyinterop/201110"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:gml</span>=<span class="string">"http://www.opengis.net/gml/3.2"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:dsig11</span>=<span class="string">"http://www.w3.org/2009/xmldsig11#"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:scale</span>=<span class="string">"http://docs.oasis-open.org/ns/emix/2011/06/siscale"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:strm</span>=<span class="string">"urn:ietf:params:xml:ns:icalendar-2.0:stream"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:ds</span>=<span class="string">"http://www.w3.org/2000/09/xmldsig#"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:clm5ISO42173A</span>=<span class="string">"urn:un:unece:uncefact:codelist:standard:5:ISO42173A:2010-04-07"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:ical</span>=<span class="string">"urn:ietf:params:xml:ns:icalendar-2.0"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:pyld</span>=<span class="string">"http://docs.oasis-open.org/ns/energyinterop/201110/payloads"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:emix</span>=<span class="string">"http://docs.oasis-open.org/ns/emix/2011/06"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:power</span>=<span class="string">"http://docs.oasis-open.org/ns/emix/2011/06/power"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:gb</span>=<span class="string">"http://naesb.org/espi"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:atom</span>=<span class="string">"http://www.w3.org/2005/Atom"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">oadrSignedObject</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">oadrUpdateReport</span> <span class="attr">ei:schemaVersion</span>=<span class="string">"2.0b"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pyld:requestID</span>&gt;</span>5db7fe19762ac9e75e1fd897<span class="tag">&lt;/<span class="name">pyld:requestID</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">oadrReport</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ical:dtstart</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ical:date-time</span>&gt;</span>2019-10-29T08:53:30Z<span class="tag">&lt;/<span class="name">ical:date-time</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">ical:dtstart</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">strm:intervals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ei:interval</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">ical:dtstart</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ical:date-time</span>&gt;</span>2019-10-29T08:53:30Z<span class="tag">&lt;/<span class="name">ical:date-time</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">ical:dtstart</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">ical:duration</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ical:duration</span>&gt;</span>PT0M<span class="tag">&lt;/<span class="name">ical:duration</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">ical:duration</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">ical:uid</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ical:text</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ical:text</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">ical:uid</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>COMM_ERROR_YN<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>CYCLE_ACTIVE_ENERGY<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>500.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>CYCLE_REVERSE_ACTIVE_ENERGY<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>ACTIVE_POWER<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>223.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>TOTAL_ACTIVE_ENERGY<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>24700.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>REVERSE_ACTIVE_POWER<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>TOTAL_REVERSE_ACTIVE_ENERGY<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>VOLTAGE_R<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>3745.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>VOLTAGE_S<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>3732.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>VOLTAGE_T<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>117.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>CURRENT_R<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>66.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>CURRENT_S<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>89.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>CURRENT_T<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>93.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>FREQUENCY<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>600.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>REACTIVE_POWER<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:rID</span>&gt;</span>POWER_FACTOR<span class="tag">&lt;/<span class="name">ei:rID</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:confidence</span>&gt;</span>100<span class="tag">&lt;/<span class="name">ei:confidence</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:accuracy</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:accuracy</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">ei:value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">ei:value</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ei:payloadFloat</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">oadrDataQuality</span>&gt;</span>Quality Good - Non Specific<span class="tag">&lt;/<span class="name">oadrDataQuality</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">oadrReportPayload</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ei:interval</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">strm:intervals</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ei:eiReportID</span>&gt;</span>eiRep_5db7fe19762ac9e75e1fd898<span class="tag">&lt;/<span class="name">ei:eiReportID</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ei:reportRequestID</span>&gt;</span>5db673e9762ae7a133ef7841<span class="tag">&lt;/<span class="name">ei:reportRequestID</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ei:reportSpecifierID</span>&gt;</span><span class="tag">&lt;/<span class="name">ei:reportSpecifierID</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ei:reportName</span>&gt;</span>TELEMETRY_USAGE<span class="tag">&lt;/<span class="name">ei:reportName</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ei:createdDateTime</span>&gt;</span>2019-10-29T08:53:45Z<span class="tag">&lt;/<span class="name">ei:createdDateTime</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">oadrReport</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ei:venID</span>&gt;</span><span class="tag">&lt;/<span class="name">ei:venID</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">oadrUpdateReport</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">oadrSignedObject</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">oadrPayload</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>위 OpenADR 페이로드에 대해서 처리되는 시간이 새로운 인스턴스를 만들 경우에는 약 8초 ~ 20초가 걸렸으며 인스턴스를 한번만 만들어 사용한 경우 약 0.3 ~ 1초로 줄었습니다.</p>
<p>이는 JAXBContext가 인스턴스화 하는 과정에서 클래스를 로드할때 메모리 및 GC 부하가 많은 것 같아보입니다.</p>
<h2 id="결론">결론</h2>
<p>클래스 그룹별로 JAXBContext 인스턴스를 애플리케이션이 로드될 때 생성하여 사용하도록 합시다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://www.baeldung.com/java-xml" target="_blank" rel="noopener">A Guide to XML in Java</a></li>
<li><a href="https://stackoverflow.com/questions/7400422/jaxb-creating-context-and-marshallers-cost" target="_blank" rel="noopener">JAXB creating context and marshallers cost</a></li>
<li><a href="https://knight76.tistory.com/entry/JAXB-%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">JAXB-잘-사용하기</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
        <category>이슈</category>
      </categories>
      <tags>
        <tag>Marshaller</tag>
        <tag>JAXBContext</tag>
      </tags>
  </entry>
  <entry>
    <title>자바스크립트에서 블롭 데이터 다운받기</title>
    <url>/javascript/download-blobs-in-javascript/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<h3 id="일반">일반</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">link.href = $url;</span><br><span class="line">link.click();</span><br></pre></td></tr></table></figure>
<h3 id="Blob">Blob</h3>
<p>프로젝트에서 지원하는 브라우저가 Blob 객체를 지원하나요? 그렇다면 Blob 객체를 통해 파일을 다운로드할 수 있습니다.</p>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Blob</a></p>
</blockquote>
<p><em><strong>(Optional) Polyfill for IE 9</strong></em><br>
Blob 객체는 IE 10부터 지원하므로 IE 9에서 사용하기 위해서는 폴리필을 적용해야합니다.</p>
<p><a href="https://github.com/bjornstar/blob-polyfill" target="_blank" rel="noopener">Blob Polyfill</a></p>
<h4 id="Using-window-URL">Using window.URL</h4>
<ul>
<li>ContentDisposition</li>
<li>window.URL.createObjectURL</li>
<li>window.URL.revokeObjectURL</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContentDisposition <span class="keyword">from</span> <span class="string">'content-disposition'</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">'file-saver'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$download = <span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    $axios(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        params: params,</span><br><span class="line">        responseType: <span class="string">'blob'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> contentDisposition = ContentDisposition.parse(res.headers[<span class="string">'content-disposition'</span>])</span><br><span class="line">        <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">const</span> blobUrl = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([res.data]));</span><br><span class="line">        link.href = blobUrl</span><br><span class="line">        link.setAttribute(<span class="string">'download'</span>, contentDisposition.parameters.filename);</span><br><span class="line">        link.target = <span class="string">'_blank'</span></span><br><span class="line">        link.click();</span><br><span class="line">        link.remove()</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(blobUrl);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Using-FileSaver-js">Using FileSaver.js</h4>
<ul>
<li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.saveAs</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContentDisposition <span class="keyword">from</span> <span class="string">'content-disposition'</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">'file-saver'</span></span><br><span class="line"></span><br><span class="line">$axios(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    params: params,</span><br><span class="line">    responseType: <span class="string">'blob'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contentDisposition = ContentDisposition.parse(res.headers[<span class="string">'content-disposition'</span>])</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data])</span><br><span class="line">    </span><br><span class="line">    saveAs(blob, contentDisposition.parameters.filename)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://gist.github.com/javilobo8/097c30a233786be52070986d8cdb1743" target="_blank" rel="noopener">Download files with AJAX (axios)</a></li>
<li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver.js</a></li>
<li><a href="https://github.com/bjornstar/blob-polyfill" target="_blank" rel="noopener">Blob Polyfill</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Blob</tag>
        <tag>FileSaver</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 애플리케이션에 HotSwap 적용하기</title>
    <url>/java/application-run-and-debug-with-hotswap-agent/</url>
    <content><![CDATA[<p><img data-src="/images/2020/hot-swap.png" alt=""></p>
<h2 id="들어가며">들어가며</h2>
<p>자바 애플리케이션 개발 시 클래스에 대한 변경을 바로 적용시키기 위해서는 핫-스왑이라는 기술이 적용되어야합니다. 유료로 전환된지 오래된 <a href="https://www.jrebel.com/products/jrebel" target="_blank" rel="noopener">JRebel</a>이 대표적인 도구입니다.</p>
<p>이와 비슷한 기능을 하는 오픈 소스로 <a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="noopener">HotSwapAgent</a> 프로젝트가 있습니다. HotSwapAgent를 자바 애플리케이션 구동시 적용하는 방법을 알아보겠습니다.</p>
<h2 id="Java-8-Application-with-HotSwap">Java 8 Application with HotSwap</h2>
<p>핫-스왑 기술을 적용하기 위해서는 DCEVM으로 빌드된 JDK와 HotSwapAgent를 사용해야합니다.</p>
<h3 id="Dynamic-Code-Evolution-VM-DCEVM">Dynamic Code Evolution VM(DCEVM)</h3>
<p>DCEVM은 OpenJDK 7/8에 대한 클래스 재정의 기능을 향상시키는 프로젝트입니다.</p>
<h4 id="Trava-DCEVM-8">Trava DCEVM 8</h4>
<p><a href="https://github.com/TravaOpenJDK/trava-jdk-8-dcevm" target="_blank" rel="noopener">TravaOpenJDK</a>에서 AdoptOpenJDK를 기반으로 DCEVM 빌드된 JDK를 제공합니다.</p>
<p>다만, 윈도우즈를 위한 빌드는 실패한 상태이며 리눅스와 맥 OS는 제공합니다.</p>
<h4 id="DCEVM-Installer">DCEVM Installer</h4>
<p><a href="https://github.com/ojdkbuild/ojdkbuild" target="_blank" rel="noopener">OpenJDK</a> 8를 다운받은 상태에서 <a href="https://github.com/dcevm/dcevm/releases" target="_blank" rel="noopener">DCEVM 인스톨러</a>를 이용하면 DCEVM 으로 패치할 수 있도록 지원합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo java -jar DCEVM-8u181-installer-build2.jar</span><br></pre></td></tr></table></figure>
<p><img data-src="/spring/images/dcevm-8u181-installer-build2.png" alt=""></p>
<h3 id="HotSwapAgent">HotSwapAgent</h3>
<p><a href="https://github.com/HotswapProjects/HotswapAgent/releases/tag/RELEASE-1.4.0" target="_blank" rel="noopener">HotSwapAgent</a>를 다운받습니다.</p>
<h3 id="Run-and-Debug">Run and Debug</h3>
<p>이제 애플리케이션 실행 시 DCEVM으로 패치된 JDK를 지정하고 HotSwapAgent를 VM 옵션에 추가하면 됩니다.</p>
<p><strong>VM Options</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-javaagent:C:\java\hotswap-agent-1.4.0.jar</span><br></pre></td></tr></table></figure>
<p><strong>Console</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:6327'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">HOTSWAP AGENT: 23:20:30.859 INFO (org.hotswap.agent.HotswapAgent) - Loading Hotswap agent &#123;1.4.0&#125; - unlimited runtime class redefinition.</span><br><span class="line">HOTSWAP AGENT: 23:20:31.278 INFO (org.hotswap.agent.config.PluginRegistry) - Discovered plugins: [JdkPlugin, Hotswapper, WatchResources, ClassInitPlugin, AnonymousClassPatch, Hibernate, Hibernate3JPA, Hibernate3, Spring, Jersey1, Jersey2, Jetty, Tomcat, ZK, Logback, Log4j2, MyFaces, Mojarra, Omnifaces, ELResolver, WildFlyELResolver, OsgiEquinox, Owb, Proxy, WebObjects, Weld, JBossModules, ResteasyRegistry, Deltaspike, GlassFish, Vaadin, Wicket, CxfJAXRS, FreeMarker, Undertow, MyBatis]</span><br></pre></td></tr></table></figure>
<h2 id="Java-11-Application-with-HotSwap">Java 11 Application with HotSwap</h2>
<p>JDK 11는 <a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm/releases" target="_blank" rel="noopener">TravaOpenJDK</a>에서 DCEVM으로 빌드된 바이너리를 받으면 됩니다.</p>
<h3 id="Run-and-Debug-2">Run and Debug</h3>
<p>이 바이너리에는 DCEVM과 HotSwapAgent가 포함되어있으니 자바 애플리케이션 구동 시 JDK를 선택하고 실행하면 됩니다.</p>
<p><strong>Console</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:7066'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">HOTSWAP AGENT: 23:37:13.680 INFO (org.hotswap.agent.HotswapAgent) - Loading Hotswap agent &#123;1.4.0&#125; - unlimited runtime class redefinition.</span><br><span class="line">HOTSWAP AGENT: 23:37:13.882 INFO (org.hotswap.agent.config.PluginRegistry) - Discovered plugins: [JdkPlugin, Hotswapper, WatchResources, ClassInitPlugin, AnonymousClassPatch, Hibernate, Hibernate3JPA, Hibernate3, Spring, Jersey1, Jersey2, Jetty, Tomcat, ZK, Logback, Log4j2, MyFaces, Mojarra, Omnifaces, ELResolver, WildFlyELResolver, OsgiEquinox, Owb, Proxy, WebObjects, Weld, JBossModules, ResteasyRegistry, Deltaspike, GlassFish, Vaadin, Wicket, CxfJAXRS, FreeMarker, Undertow, MyBatis]</span><br><span class="line">Starting HotswapAgent <span class="string">'C:\java\java11-openjdk-dcevm-windows\dcevm-11.0.5+5\lib\hotswap\hotswap-agent.jar'</span></span><br></pre></td></tr></table></figure>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://github.com/dcevm/dcevm" target="_blank" rel="noopener">DCEVM</a></li>
<li><a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm" target="_blank" rel="noopener">Trava JDK 11 DCEVM</a></li>
<li><a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="noopener">HotswapAgent</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>HotSwapAgent</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache POI 효율적으로 사용하기</title>
    <url>/java/efficient-use-of-apache-poi/</url>
    <content><![CDATA[<p><img data-src="https://poi.apache.org/images/group-logo.png#center" alt=""></p>
<p>엑셀 파일 출력을 위해 Apahce POI를 활용하면서 생긴 이슈와 처리방안을 정리하려 합니다.</p>
<h2 id="액셀-생성-방식">액셀 생성 방식</h2>
<p>POI 라이브러리를 활용해 만들 수 있는 엑셀 유형은 다음과 같다.</p>
<ul>
<li>HSSF : 엑셀 97 - 2004 (.xls)</li>
<li>XSSF : 엑셀 2007 ~ (.xlsx)</li>
<li>SXSSF : XSSF의 성능 보완 버전</li>
</ul>
<p>일반적으로 XSSF 파일 형식은 XML 방식으로 저장되기 때문에 워크북 생성시 메모리 사용량이 HSSF보다 두배 이상이 될 수 있다.</p>
<p>따라서, 보편적으로는 HSSF를 사용하는 것이 좋을 것 같다.</p>
<h2 id="엑셀-폰트-및-스타일">엑셀 폰트 및 스타일</h2>
<p>POI를 사용해서 엑셀을 생성하는 예제를 검색하면 대부분 다음과 같이 설명한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">example</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    </span><br><span class="line">    workbook.createFont()</span><br><span class="line">    workbook.createCellStyle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>해당 함수들을 사용해야하는 것은 맞다. 하지만, 여기서 중요한 사실이 있다.</p>
<p>해당 함수들을 호출할 때마다 워크북에 새로운 폰트 정보와 셀 스타일 정보가 저장된다.</p>
<p>대부분의 경우에는 문제가 되지 않을 수 있지만 만약에 각 셀마다 폰트와 스타일이 제각각이거나 셀 스타일을 지정할 때마다 같은 스타일을 매번 생성한다면 어떻게 될까?</p>
<p>내가 겪었던 문제는 다음과 같다.</p>
<ol>
<li>엑셀 파일 실행시 글꼴 수가 많다는 경고창이 뜬다. (폰트 관련)</li>
<li>엑셀 출력시 특정 셀부터 스타일 지정이 안된다. (스타일 관련)</li>
</ol>
<h3 id="워크북-생성시-폰트와-스타일을-저장하여-사용하자">워크북 생성시 폰트와 스타일을 저장하여 사용하자</h3>
<p>위에서 언급한 문제를 해결할 수 있는 방법은 다음과 같다.</p>
<ol>
<li>워크북에서 사용하는 폰트 및 스타일을 미리 생성해놓는 방법</li>
<li>워크북에서 사용하는 폰트 및 스타일을 저장하여 사용하는 방법</li>
</ol>
<p>1번의 경우에는 미리 생성된 스타일만 사용하도록 제한되기 때문에 2번의 경우가 더 효율적이라고 생각한다.</p>
<h4 id="구현-예시">구현 예시</h4>
<p>워크북을 생성할 수 있는 유틸 클래스를 만들고 내부적으로 폰트와 스타일을 Map에 담아 저장하도록 구현했다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Workbook</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> HSSFWorkbook workbook = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> HSSFSheet sheet = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> HSSFCell firstCell = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Map&lt;Integer, HSSFFont&gt; fontMap = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 폰트</span></span><br><span class="line">	<span class="keyword">private</span> FontStyle defaultFontStyle = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Map&lt;Integer, HSSFCellStyle&gt; styleMap = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 스타일</span></span><br></pre></td></tr></table></figure>
<h2 id="열-너비-및-행-높이">열 너비 및 행 높이</h2>
<p>열 너비와 행 높이 조절에 대한 문제를 알아보자.</p>
<h3 id="열-너비-자동-조절">열 너비 자동 조절</h3>
<p>POI 라이브러리는 열 너비에 대한 자동 조정을 위해 <a href="http://poi.apache.org/components/spreadsheet/quick-guide.html#Autofit" target="_blank" rel="noopener">autoSizeColumn()</a>을 제공하는데 이 함수는 내부적으로 모든 행에 대한 해당 열의 레코드를 비교하여 열 너비를 맞게 조절한다.</p>
<p>만약에 이 함수를 써서 열 너비를 자동 조절해야한다면 무분별한 호출이 아닌 워크북을 파일로 출력하기 이전에 수행하는 것이 좋다.</p>
<p>또, autoSizeColumn를 사용하지 않고 특정 열에 대한 데이터 길이에 따라 ColumnWidth의 최대값을 저장하여 처리하는 방안도 있다.</p>
<h3 id="행-높이-자동-조절">행 높이 자동 조절</h3>
<p>행 높이는 HSSFRow.setHeight로 조절할 수 있다. 만약에 행 높이를 자동으로 조절하고 싶다면 setHeight 함수의 파라미터 값에 -1을 주면 엑셀 프로그램에서 자동으로 계산한다.</p>
<p>단, 해당 행에 병합된 셀이 존재한다면 엑셀 프로그램에서 자동으로 계산하는 행 높이가 올바르지 않는 문제가 있다.</p>
<p>따라서, 데이터 크기에 따라 행 높이를 자동 조절하는 함수를 따로 만들어 사용하는 것도 나쁘지 않다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://poi.apache.org/components/spreadsheet/" target="_blank" rel="noopener">POI-HSSF and POI-XSSF/SXSSF</a></li>
<li><a href="https://showbang.github.io/typistShow/2017/01/25/%EC%83%9D%EC%84%B1/" target="_blank" rel="noopener">POI를 이용하여 엑셀파일 생성하기</a></li>
<li><a href="https://blog.naver.com/titan79th/140037818261" target="_blank" rel="noopener">POI 열너비 행높이</a></li>
<li><a href="https://www.waltercedric.com/index.php?option=com_content&amp;view=article&amp;id=2096:&amp;catid=102&amp;Itemid=332" target="_blank" rel="noopener">Apache POI Speed Optimizations</a></li>
<li><a href="https://goni9071.tistory.com/entry/apache-poi-%EC%97%91%EC%85%80-%EB%B3%91%ED%95%A9%EB%90%9C-%EC%85%80-%EC%9E%90%EB%8F%99-%EB%86%92%EC%9D%B4-%EC%A1%B0%EC%A0%88%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">apache poi 엑셀 병합된 셀 자동 높이 조절하기</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
  </entry>
  <entry>
    <title>비밀번호 암호화 하기</title>
    <url>/spring/encrypt-password-with-spring-security/</url>
    <content><![CDATA[<p><img data-src="https://javatutorial.net/wp-content/uploads/2017/12/spring-featured-image.png#center" alt=""></p>
<p>자바에서 비밀번호 암호화를 구현하기 위해서는 <a href="http://github.kindler.io/java-encrypt" target="_blank" rel="noopener">개인정보보호법과 JAVA를 이용한 암호화 구현(SHA256, AES256)</a> 또는 <a href="https://www.stubbornjava.com/posts/hashing-passwords-in-java-with-bcrypt" target="_blank" rel="noopener">Hashing Passwords in Java with BCrypt</a>와 같이 바이트 연산을 하는 코드를 작성해야 한다.</p>
<h2 id="스프링-시큐리티">스프링 시큐리티</h2>
<p>스프링 프레임워크의 시큐리티 모듈은 보안 관련된 기능을 제공해준다.</p>
<p>시큐리티 모듈이 제공하는 <code>org.springframework.security.crypto.password.PasswordEncoder </code>인터페이스를 통해 쉽게 비밀번호를 암호화하는 방법을 알아보자.</p>
<blockquote>
<p>스프링 시큐리티 설정을 사용하지 않기 때문에 관련 정보를 몰라도 상관 없다.</p>
</blockquote>
<p>스프링 프레임워크는 PlainText, SHA, SHA256, MD4, MD5, SCrypt, BCrypt와 같은 다양한 암호화 방식을 제공한다.</p>
<ul>
<li>org.springframework.security.crypto.password.StandardPasswordEncoder</li>
<li>org.springframework.security.crypto.password.Pbkdf2PasswordEncoder</li>
<li>org.springframework.security.crypto.password.NoOpPasswordEncoder</li>
<li>org.springframework.security.crypto.scrypt.SCryptPasswordEncoder</li>
<li>org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</li>
<li>org.springframework.security.authentication.encoding.Md4PasswordEncoder</li>
<li>org.springframework.security.authentication.encoding.Md5PasswordEncoder</li>
<li>org.springframework.security.authentication.encoding.PlaintextPasswordEncoder</li>
<li>org.springframework.security.authentication.encoding.ShaPasswordEncoder</li>
<li>org.springframework.security.authentication.encoding.LdapShaPasswordEncoder</li>
</ul>
<p>스프링 시큐리티의 PasswordEncoder 인터페이스는 복호화 함수를 제공하지 않는다.</p>
<p>비밀번호라는게 외부에 공개되어야 하는 정보가 아닐 뿐더러 개발자 뿐만 아니라 관리자도 알게 해서는 안된다.</p>
<blockquote>
<p>네이버 개발자 블로그의 <a href="https://d2.naver.com/helloworld/318732" target="_blank" rel="noopener">안전한 패스워드 저장</a>을 살펴보자.</p>
</blockquote>
<h3 id="Bcrypt-비밀번호-암호화">Bcrypt 비밀번호 암호화</h3>
<p>많은 암호화 방식 중에서 스프링 프레임워크 개발자들이 선호하는 BCryptPasswordEncoder 구현체를 사용하자.</p>
<h4 id="PasswordEncoder-빈-등록">PasswordEncoder 빈 등록</h4>
<p>BCryptPasswordEncoder 구현체를 PasswordEncoder 빈으로 등록하자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="암호화">암호화</h4>
<p>비밀번호를 암호화하는 것은 쉽다.</p>
<p>암호화되지 않은 비밀번호만 넘겨주면 알아서 내부적으로 해시를 만들어 암호화된 비밀번호를 반환한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br></pre></td></tr></table></figure>
<p>우리는 회원가입 또는 비밀번호 수정 시에 PasswordEncoder의 위 함수를 통해 암호화된 비밀번호를 저장해주면 된다.</p>
<h4 id="암호화된-비밀번호-비교">암호화된 비밀번호 비교</h4>
<p>스프링 시큐리티의 PasswordEncoder가 추구하는 것은 단방향 암호화이다.</p>
<p>그러므로 다시 암호화된 비밀번호를 복호화해서 비교하는 것이 아닌 암호화되지 않은 비밀번호를 다른 해시로 암호화해서 같은 값을 가지는지 비교한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br></pre></td></tr></table></figure>
<p>우리는 로그인 시에 위 함수를 통해 비밀번호와 암호화된 비밀번호를 비교해서 처리하면 된다.</p>
<blockquote>
<p>스프링 시큐리티 5는 다양한 암호화 방식을 전환할 수 있도록 DelegatingPasswordEncoder도 제공한다.</p>
</blockquote>
<h2 id="참고">참고</h2>
<ul>
<li><a href="http://github.kindler.io/java-encrypt" target="_blank" rel="noopener">개인정보보호법과 JAVA를 이용한 암호화 구현(SHA256, AES256)</a></li>
<li><a href="https://www.stubbornjava.com/posts/hashing-passwords-in-java-with-bcrypt" target="_blank" rel="noopener">Hashing Passwords in Java with BCrypt</a></li>
<li><a href="http://www.devkuma.com/books/pages/1124" target="_blank" rel="noopener">BCryptPasswordEncoder : 암호 해시</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
  </entry>
  <entry>
    <title>XML로 다국어 메시지 관리하기</title>
    <url>/spring/managing-i18n-messages-with-xml/</url>
    <content><![CDATA[<p><img data-src="https://javatutorial.net/wp-content/uploads/2017/12/spring-featured-image.png#center" alt=""></p>
<h2 id="개요">개요</h2>
<p>스프링이나 스프링 부트에서 다국어 메시지를 적용하기 위해서 Properties를 기본으로 사용했다.<br>
그러나, <code>messages-en.properties</code>와 <code>messages-ko.properties</code>와 같이 언어별로 프로퍼티 파일을 구분하고 키별로 메시지를 관리해야한다.</p>
<p>위와 같이 프로퍼티 파일로 메시지를 관리하다보면 해당 언어에서 특정 메시지 키를 사용하는지 파악하는게 어렵다. 만약, 잠만보처럼 회사 내 프로젝트를 진행하면서 메시지 키에 대한 정의 문서가 없는 경우 개발자가 메시지 키를 관리해야하므로 매번 검색해서 있는지 파악해야만 한다.</p>
<h2 id="기존-방식의-대안을-알아보자">기존 방식의 대안을 알아보자</h2>
<h4 id="YAML">YAML</h4>
<p>YML 파일을 사용해서 다국어를 설정하는 방법은 <a href="https://jmlim.github.io/spring/2018/11/28/spring-boot-Internationalization/" target="_blank" rel="noopener">이 블로그</a>를 통해 확인할 수 있다. 하지만, Properties와 표기 방식만 다를 뿐 언어별로 파일을 관리하는 것은 똑같다.</p>
<h4 id="XML">XML</h4>
<p>그래서 잠만보가 다니는 회사에서는 프로젝트의 다국어 메시지를 프로퍼티 파일이 아닌 XML 파일로 관리하도록 했다.</p>
<p>다음은 XML 구성의 간단한 예시이다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">messages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"menu.console"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ko_KR</span>&gt;</span>&lt;![CDATA[콘솔]]&gt;<span class="tag">&lt;/<span class="name">ko_KR</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">en_US</span>&gt;</span>&lt;![CDATA[Console]]&gt;<span class="tag">&lt;/<span class="name">en_US</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">messages</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="커스텀-리소스-번들을-만들자">커스텀 리소스 번들을 만들자</h2>
<p>일반적으로 <code>ResourceBundle</code>의 <code>getBundle</code>함수로 XML파일을 읽어 리소스 번들 인스턴스로 만들 수 있다.</p>
<h4 id="Resource-Bundle">Resource Bundle</h4>
<p><code>ResourceBundle</code>로 메시지 소스를 만드는 구조는 <a href="https://firstboos.tistory.com/entry/XML-%EA%B8%B0%EB%B0%98%EC%9D%98-Resource-Bundle-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">XML 기반의 Resource Bundle, PropertyPlaceHolder 사용하기</a>에서 확인할 수 있다.</p>
<p>다음과 같이 기존의 <code>프로퍼티 구조</code>를 그대로 사용해야 한다.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"menu.console"</span>&gt;</span>&lt;![CDATA[콘솔]]&gt;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="Don’t-use-Properties-loadFromXML">Don’t use Properties.loadFromXML()</h5>
<p><code>XmlResourceBundle</code>에서 <code>Properties.loadFromXML()</code>으로 XML을 프로퍼티 기준으로 읽어드리면 안된다.</p>
<p>위에서 만든 XML 구성에 따라 XML파일을 읽어들여서 메시지 정보를 만들자</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlResourceBundle</span> <span class="keyword">extends</span> <span class="title">ResourceBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, String&gt;&gt; messages;</span><br><span class="line">    <span class="keyword">private</span> Locale i18n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XmlResourceBundle</span><span class="params">(InputStream is, Locale i18n)</span> <span class="keyword">throws</span> IOException, ParserConfigurationException, SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i18n = i18n;</span><br><span class="line">        messages = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">        Document doc = builder.parse(is);</span><br><span class="line">        doc.getDocumentElement().normalize();</span><br><span class="line"></span><br><span class="line">        NodeList entries = doc.getElementsByTagName(<span class="string">"entry"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; entries.getLength(); i++) &#123;</span><br><span class="line">            Element entry = (Element) entries.item(i);</span><br><span class="line">            String key = entry.getAttribute(<span class="string">"key"</span>);</span><br><span class="line">            NodeList childNodes = entry.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childNodes.getLength(); j++) &#123;</span><br><span class="line">                Node n = childNodes.item(j);</span><br><span class="line">                <span class="keyword">if</span> (n.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                    String locale = n.getNodeName();</span><br><span class="line">                    String message = n.getTextContent();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!messages.containsKey(locale)) &#123;</span><br><span class="line">                        messages.put(locale, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    messages.get(locale).put(key, message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        IOUtils.closeQuietly(is);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">handleGetObject</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messages.get(i18n).get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; handleKeys = messages.keySet();</span><br><span class="line">        <span class="keyword">return</span> Collections.enumeration(handleKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i18n = locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  Map&lt;String, Map&lt;String, String&gt;&gt; getMessages() &#123;</span><br><span class="line">        <span class="keyword">return</span> messages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  Map&lt;String, String&gt; <span class="title">getMessages</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messages.get(locale.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>기존의 <code>.handleGetObject()</code>는 키 파라미터만 받으므로 메시지를 가져올때 언어를 지정할 수 없기에 <code>생성자에서 스트림과 언어를 받을 수 있게</code> 하였다.<br>
그리고 읽어드린 메시지 맵 인스턴스를 다시 받아 사용할 수 있도록 Getter 함수를 추가했다.</p>
<h4 id="XmlResourceBundleLoader">XmlResourceBundleLoader</h4>
<p><code>XmlResourceBundleLoader</code>는 <a href="http://www.java2s.com/Tutorial/Java/0220__I18N/XMLresourcebundle.htm" target="_blank" rel="noopener">이 포스트</a>에서 작성한 코드를 그대로 사용했다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlResourceBundleLoader</span> <span class="keyword">extends</span> <span class="title">ResourceBundle</span>.<span class="title">Control</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; formats = Collections.singletonList(<span class="string">"xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getFormats</span><span class="params">(String baseName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span><span class="params">(String baseName, Locale locale, String format, ClassLoader loader, <span class="keyword">boolean</span> reload)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">        ResourceBundle resourceBundle = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String bundleName = toBundleName(baseName, locale);</span><br><span class="line">        String resourceName = toResourceName(bundleName, format);</span><br><span class="line"></span><br><span class="line">        URL url = loader.getResource(resourceName);</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        URLConnection connection = url.openConnection();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (reload) &#123;</span><br><span class="line">            connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        InputStream stream = connection.getInputStream();</span><br><span class="line">        <span class="keyword">if</span> (stream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>(BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(stream)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(locale == Locale.ROOT) &#123;</span><br><span class="line">                locale = Locale.getDefault();</span><br><span class="line">            &#125;</span><br><span class="line">            resourceBundle = <span class="keyword">new</span> XmlResourceBundle(bis, locale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resourceBundle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Usage">Usage</h4>
<p>위에서 만든 <code>XmlResourceBundle</code>과 <code>XmlResourceBundleLoader</code>를 이용해서 다음과 같이 메시지를 가져올 수 있게 된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"messages"</span>, <span class="keyword">new</span> Locale(<span class="string">"en"</span>, <span class="string">"US"</span>), <span class="keyword">new</span> XmlResourceBundleLoader());</span><br><span class="line">    String message = bundle.getString(<span class="string">"menu.console"</span>);</span><br><span class="line">    LOG.info(<span class="string">"message: &#123;&#125;"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="리소스-번들을-메시지-소스에서-사용하기">리소스 번들을 메시지 소스에서 사용하기</h2>
<p>그러면 스프링 메시지 소스에서 이 리소스 번들을 사용하려면 어떻게 해야하는지 알아보겠다. 일단 메시지가 필요할 때마다 리소스 번들을 만드는 것은 효율적이지 못하다. 리소스 번들은 한번만 만들어 메시지 소스에 적용하자.</p>
<h4 id="AbstractMessageSource">AbstractMessageSource</h4>
<p>사용자 정의 메시지 소스를 만들려면 <code>AbstractMessageSource</code>를 확장하면 된다. CustomMessageSource가 생성될 때 리소스 번들을 로드시키자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomMessageSource</span> <span class="keyword">extends</span> <span class="title">AbstractMessageSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger LOG = LoggerFactory.getLogger(CustomMessageSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, String&gt;&gt; messages = Maps.newHashMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, MessageFormat&gt;&gt; formats = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CustomMessageSource instance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomMessageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            load();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, IOException, InstantiationException </span>&#123;</span><br><span class="line">        ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">"messages"</span>, Locale.ROOT, <span class="keyword">new</span> XmlResourceBundleLoader());</span><br><span class="line"></span><br><span class="line">        XmlResourceBundle xmlResourceBundle = (XmlResourceBundle) resourceBundle;</span><br><span class="line">        <span class="keyword">this</span>.messages = xmlResourceBundle.getMessages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메시지 소스에서 지원하는 언어 목록</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getLocales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(messages.keySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MessageFormat <span class="title">resolveCode</span><span class="params">(String code, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (formats) &#123;</span><br><span class="line">            <span class="comment">// 언어 포맷이 없을 경우 메시지 포맷을 새로 생성</span></span><br><span class="line">            <span class="keyword">if</span> (!formats.containsKey(locale.toString())) &#123;</span><br><span class="line">                formats.put(locale.toString(), <span class="keyword">new</span> HashMap&lt;String, MessageFormat&gt;());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, MessageFormat&gt; map = formats.get(locale.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 언어 포맷에 메시지 코드가 없으면 메시지 정보를 통해 포맷을 저장</span></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(code)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!messages.containsKey(locale.toString())) &#123;</span><br><span class="line">                    locale = Locale.getDefault();</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, String&gt; msgs = messages.get(locale.toString());</span><br><span class="line">                map.put(code, <span class="keyword">new</span> MessageFormat(msgs.containsKey(code) ? msgs.get(code) : code, locale));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> map.get(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getMessage(code, <span class="keyword">new</span> Object[<span class="number">0</span>], getLocale());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMessageException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getMessage(code, args, getLocale());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMessageException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code, Object[] args, String defaultMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getMessage(code, args, defaultMessage, getLocale());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMessageException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(String code, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getMessage(code, <span class="keyword">new</span> Object[<span class="number">0</span>], locale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMessageException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Reload-ResourceBundle-For-Development">Reload ResourceBundle For Development</h4>
<p>애플리케이션을 개발하는 도중에는 메시지 소스가 계속 변경되어야하는 문제점이 있다. 물론 스프링 부트를 사용하고 있다면 <code>spring-boot-devtool</code>로 애플리케이션을 다시 실행할 수 있다.</p>
<p>하지만, 메시지 소스의 변경이 애플리케이션 동작에 특별한 영향을 끼치지 않으므로 다시 실행될 필요성은 없다. 애플리케이션을 다시 실행하지 않고 <code>메시지 XML 파일에 대한 변경을 감시</code>하여 다시 로드할 수 있도록 해보자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomMessageSource</span> <span class="keyword">extends</span> <span class="title">AbstractMessageSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomMessageSource</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            load();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ArrayUtils.contains(environment.getActiveProfiles(), <span class="string">"production"</span>)) &#123;</span><br><span class="line">            reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> ClassPathResource(<span class="string">"i18n/messages.xml"</span>).getFile();</span><br><span class="line">                <span class="keyword">long</span> lastModified = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lastModified &lt; file.lastModified()) &#123;</span><br><span class="line">                            load();</span><br><span class="line">                            LOG.info(<span class="string">"Reload MessageSource - &#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">                            lastModified = file.lastModified();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>굳이, 파일의 수정일을 비교하지 않아도 Java 7의 <code>WatchService</code>를 이용해도 <a href="https://www.baeldung.com/java-nio2-watchservice" target="_blank" rel="noopener">이 포스트</a>처럼 폴더를 감시할 수 있다.</p>
<h2 id="참조">참조</h2>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/i18n/serviceproviders/resourcebundlecontrolprovider.html" target="_blank" rel="noopener">Installing a Custom Resource Bundle as an Extension</a></li>
<li><a href="http://www.java2s.com/Tutorial/Java/0220__I18N/XMLresourcebundle.htm" target="_blank" rel="noopener">XML resource bundle</a></li>
<li><a href="https://firstboos.tistory.com/entry/XML-%EA%B8%B0%EB%B0%98%EC%9D%98-Resource-Bundle-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">XML 기반의 Resource Bundle, PropertyPlaceHolder 사용하기</a></li>
<li><a href="http://www.fun25.co.kr/blog/java-xml-parser-example-documentbuilder" target="_blank" rel="noopener">[자바] XML 파싱 예제 - DocumentBuilder</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
        <category>스프링</category>
      </categories>
  </entry>
  <entry>
    <title>프리마커 템플릿으로 이메일 발송하기</title>
    <url>/spring/sending-mail-with-freemarker-template/</url>
    <content><![CDATA[<p><img data-src="https://javatutorial.net/wp-content/uploads/2017/12/spring-featured-image.png#compact" alt=""></p>
<h3 id="스프링-프레임워크의-이메일-지원">스프링 프레임워크의 이메일 지원</h3>
<p>스프링 프레임워크에서는 이메일을 발송할 수 있도록 <code>org.springframework.mail</code> 패키지를 제공한다.</p>
<p><code>MailSender</code> 인터페이스는 메일 발송 기능을 가지는 최상위 인터페이스이며 스프링 프레임워크는 이 보다 더 좋은 기능을 제공하도록 확장한 <code>JavaMailSender</code> 인터페이스를 포함한다.</p>
<h4 id="Dependencies">Dependencies</h4>
<p>스프링 프레임워크에서 메일을 발송할 때 사용되는 의존성은 다음과 같다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework:spring-context-support:4.3.7.RELEASE'</span>)</span><br><span class="line">compile(<span class="string">'javax.mail:mail:1.4.7'</span>)</span><br></pre></td></tr></table></figure>
<h5 id="JavaMailSenderImpl">JavaMailSenderImpl</h5>
<p>스프링 프레임워크는 <code>JavaMailSender</code> 인터페이스의 구현체인 <code>JavaMailSenderImpl</code> 클래스를 제공하며</p>
<p>우리는 굳이 JavaMailSender 구현체를 만들지 않아도 이 JavaMailSenderImpl를 사용하여 메일을 발송하는 기능을 만들 수 있다.</p>
<h5 id="MimeMessageHelper">MimeMessageHelper</h5>
<p>스프링 프레임워크는 <code>javax.mail.internet.MimeMessage</code> 클래스에 각종 설정들(제목이나 첨부파일 등)을 쉽게 지정할 수 있도록 헬퍼 클래스를 제공한다.</p>
<h3 id="이메일-발송을-위한-SMTP-서버">이메일 발송을 위한 SMTP 서버</h3>
<p>이메일을 송수신하는 서버를 SMTP(Simple Mail Transfer Protocol) 서버라고 한다.</p>
<p>그러나, 스프링 프레임워크가 자체적으로 SMTP 서버를 제공해주지는 않기 때문에 실제로 이메일을 발송하기 위해서는 SMTP 서버를 구축해야만 한다.</p>
<p>SMTP 메일 서버를 구축하는 것 대신에 우리가 많이 사용하는 구글이나 네이버 이메일 계정으로 SMTP 메일 서버를 이용할 수 있다.</p>
<p>본 포스트 에서는 구글 이메일 계정으로 SMTP 메일 서버를 이용해보겠다.</p>
<blockquote>
<p><a href="https://github.com/ChangemakerStudios/Papercut%EC%99%80" target="_blank" rel="noopener">https://github.com/ChangemakerStudios/Papercut와</a> 같은 개발용 SMTP 서버도 있다.</p>
</blockquote>
<h4 id="구글-SMTP-활성화">구글 SMTP 활성화</h4>
<p>구글 SMTP 서버를 이용하기 위해서는 구글 이메일 계정의 <a href="https://myaccount.google.com/lesssecureapps" target="_blank" rel="noopener"><code>보안 수준이 낮은 앱의 액세스</code></a>를 허용해야 한다.</p>
<p><img data-src="/spring/images/google-less-secure-apps.png" alt=""></p>
<p>이후 <a href="https://support.google.com/mail/answer/7126229?visit_id=636885550269950209-1570087438&amp;rd=1" target="_blank" rel="noopener">SMTP 서버 이용시 필요한 정보</a>는 다음과 같다.</p>
<ul>
<li>SMTP Host : <a href="http://smtp.gmail.com" target="_blank" rel="noopener">smtp.gmail.com</a></li>
<li>SMTP Username : $email</li>
<li>SMTP Password : $password</li>
<li>SMTP Post : 465</li>
<li>SSL Enable : true</li>
</ul>
<h3 id="이메일-발송-기능-구현">이메일 발송 기능 구현</h3>
<p>구글 SMTP 서버를 이용할 수 있도록 설정을 완료하였으니 이메일 발송 기능을 구현하도록 하자.</p>
<h4 id="JavaMailSender-빈-등록">JavaMailSender 빈 등록</h4>
<p>우리가 가장 먼저 해야할 일은 JavaMailSender 인터페이스 구현체를 빈으로 등록하는 것이다.</p>
<p>간단하게 앞서 소개한 JavaMailSenderImpl을 구현체로 사용하고 프로퍼티에 존재하는 정보를 불러와 값을 설정한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JavaMailSender <span class="title">javaMailSender</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JavaMailSenderImpl mailSender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">    mailSender.setHost(env.getProperty(<span class="string">"spring.mail.host"</span>));</span><br><span class="line">    mailSender.setPort(Integer.valueOf(env.getProperty(<span class="string">"spring.mail.port"</span>)));</span><br><span class="line">    mailSender.setProtocol(env.getProperty(<span class="string">"spring.mail.protocol"</span>));</span><br><span class="line">    mailSender.setUsername(env.getProperty(<span class="string">"spring.mail.username"</span>));</span><br><span class="line">    mailSender.setPassword(env.getProperty(<span class="string">"spring.mail.password"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Properties javaMailProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">    javaMailProperties.load(applicationContext.getResource(<span class="string">"classpath:mail.properties"</span>).getInputStream());</span><br><span class="line">    mailSender.setJavaMailProperties(javaMailProperties);</span><br><span class="line">    <span class="keyword">return</span> mailSender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JavaMailProperties를 프로퍼티에서 불러와 직접 값을 넣어주거나 ApplicationContext 대신에 ClassPathResource를 사용해도 무방하다.</p>
</blockquote>
<h5 id="메일-발송-프로퍼티">메일 발송 프로퍼티</h5>
<p>위 JavaMailSender에서 사용된 프로퍼티 값을 설정한다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">spring.mail.host=smtp.gmail.com</span><br><span class="line">spring.mail.port=465</span><br><span class="line">spring.mail.username=</span><br><span class="line">spring.mail.password=</span><br><span class="line"></span><br><span class="line"><span class="comment"># mail.properties</span></span><br><span class="line">mail.smtp.ssl.enable=<span class="literal">true</span></span><br><span class="line">mail.smtp.auth=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="프리마커-이메일-템플릿">프리마커 이메일 템플릿</h3>
<p>본 포스트의 목표는 단순 이메일 발송이 아닌 프리마커 템플릿을 활용해서 이메일 내용을 구성해서 발송하는 것이다.</p>
<p>많은 템플릿 중에서 프리마커를 사용하려는 이유는 가장 설정이 쉽고 이메일 내용을 구성할 때 편리하다는 개인적인 판단 때문이다.</p>
<blockquote>
<p>대부분은 Thymeleaf를 사용하는 것으로 예제를 소개하고 있다.</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">'org.freemarker:freemarker:2.3.28'</span>)</span><br></pre></td></tr></table></figure>
<p>의존성을 추가하였다면 <code>freemarker.template.Configuration</code> 클래스를 빈으로 등록한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> freemarker.template.<span class="function">Configuration <span class="title">freeMarkerConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</span><br><span class="line">    FreeMarkerConfigurationFactory freeMarkerConfigurationFactory = <span class="keyword">new</span> FreeMarkerConfigurationFactory();</span><br><span class="line">    freeMarkerConfigurationFactory.setTemplateLoaderPath(<span class="string">"classpath:/templates/mails"</span>);</span><br><span class="line">    <span class="keyword">return</span> freeMarkerConfigurationFactory.createConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>설정은 끝났다(응?)</p>
<p>메일 본문을 넣는 코드에서 다음과 같이 템플릿으로 가져오면 된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> freemarker.template.Configuration engine;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Template template = engine.getTemplate(mailBuilder.getTemplate().getContentPath(), locale);</span><br><span class="line">helper.setText(FreeMarkerTemplateUtils.processTemplateIntoString(template, context), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>프리마커 템플릿으로 내용을 구성하는 방법은 본 포스트의 목적이 아니므로 생략한다.</p>
</blockquote>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://support.google.com/mail/answer/7126229?visit_id=636885550269950209-1570087438&amp;rd=1" target="_blank" rel="noopener">다른 이메일 클라이언트에서 Gmail을 확인할 수 있도록 IMAP 사용</a></li>
<li><a href="https://www.baeldung.com/freemarker-in-spring-mvc-tutorial" target="_blank" rel="noopener">Introduction to Using FreeMarker in Spring MVC</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
  </entry>
  <entry>
    <title>스프링 부트 1.5.4에서 2.0으로 마이그레이션 하기</title>
    <url>/spring/spring-boot-2.0-migration-from-1.5.4/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>현재 개발중인 프로젝트에서 JVM 기반으로 ES6 기반의 자바스크립트를 실행해야하는 요구사항이 있어 이를 지원하는 JDK 9 이상으로 자바 버전을 올려야하는 상황이 발생하였습니다. 😑</p>
<blockquote>
<p><a href="https://www.oracle.com/corporate/features/nashorn-javascript-engine-jdk9.html" target="_blank" rel="noopener">Nashorn JavaScript Engine in JDK 9</a>에서 ES6 지원을 확인할 수 있습니다.</p>
<p>좀 더 알아보니 OpenJDK에서는 Jashorn 엔진을 제외한다고 명시했습니다.<br>
- <a href="https://openjdk.java.net/jeps/335" target="_blank" rel="noopener">https://openjdk.java.net/jeps/335</a><br>
나중에는 <a href="https://github.com/graalvm/graaljs" target="_blank" rel="noopener">GraalVM의 GraalJS</a> 쪽으로 선회하는 방법이 좋겠습니다.</p>
</blockquote>
<h3 id="스프링-버전별-JDK-지원">스프링 버전별 JDK 지원</h3>
<p>일단 애플리케이션의 기반이 되는 스프링 부트 프레임워크의 버전별 JDK 지원 목록을 확인해야했습니다. JDK 9+를 사용해야하므로 최소한으로 지원하는 버전을 찾아야합니다.</p>
<p>다음은 제가 확인한 버전별 JDK 지원 현황입니다.</p>
<table>
<thead>
<tr>
<th>Spring Boot Version</th>
<th>JDK</th>
<th>Compatible</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.5.9.RELEASE</td>
<td>Java 7</td>
<td>or Java 8</td>
</tr>
<tr>
<td>2.0.0.RELEASE</td>
<td>Java 8</td>
<td>or Java 9</td>
</tr>
<tr>
<td>2.1.1.RELEASE</td>
<td>Java 8</td>
<td>is compatible up to Java 11</td>
</tr>
<tr>
<td>2.1.7.RELEASE</td>
<td>Java 8</td>
<td>is compatible up to Java 12</td>
</tr>
<tr>
<td>2.2.0.RELEASE</td>
<td>Java 8</td>
<td>is compatible up to Java 13</td>
</tr>
</tbody>
</table>
<p>그렇다면 제 경우에는 최소한 스프링 부트 2.0.0.RELEASE로 버전을 업그레이드해야하는 상황이 생깁니다. 😱</p>
<blockquote>
<p><a href="https://github.com/spring-projects/spring-boot/releases" target="_blank" rel="noopener">GA 릴리즈</a> 버전이 <code>2.1.12.RELEASE</code>와 <code>2.2.3.RELEASE</code>이 있으므로 이중에 선택하면 될것 같습니다.</p>
</blockquote>
<h2 id="마이그레이션-시작하기">마이그레이션 시작하기</h2>
<p>마이그레이션은 <code>gradle</code>, <code>spring-boot</code>, <code>jdk</code> 세가지 영역으로 나누어 진행했습니다.</p>
<h3 id="Gradle-✅">Gradle ✅</h3>
<p>먼저 진행한 영역은 Gradle입니다.</p>
<p>원래 사용하던 Gradle 버전은 3.5.1이었는데 <a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/htmlsingle/#build-tool-plugins-gradle-plugin" target="_blank" rel="noopener">스프링 부트 2.X의 Gradle 지원 버전</a>은 4.0+ 입니다.</p>
<h4 id="Gradle-버전-업그레이드">Gradle 버전 업그레이드</h4>
<p>gradle 명령 또는 버전을 명시해서 버전을 업그레이드 할 수 있습니다.</p>
<p>업그레이드할 Gradle 버전은 <code>5.6.4</code>입니다.<br>
<a href="https://docs.gradle.org/5.6.4/release-notes.html" target="_blank" rel="noopener">Gradle 릴리즈 노트</a>에 따르면 그루비 컴파일 속도가 빨라졌다고하여 4.10.3이 아닌 5.6.4로 결정하였습니다.</p>
<blockquote>
<p>추후 문제가 발생하여 최종적으로는 6.1로 다시 업그레이드했습니다.<br>
이에 대한 내용은 문제가 발생한 곳에서 설명하겠습니다.</p>
</blockquote>
<p><strong>gradlew</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#gradle wrapper --gradle-version 5.6.4</span></span><br><span class="line">gradlew wrapper --gradle-version 5.6.4</span><br></pre></td></tr></table></figure>
<p><strong>gradle-wrapper.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#distributionUrl=https\://services.gradle.org/distributions/gradle-3.5.1-all.zip</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-5.6.4-all.zip</span></span><br><span class="line"><span class="comment">#distributionUrl=https\://services.gradle.org/distributions/gradle-6.1-all.zip</span></span><br></pre></td></tr></table></figure>
<h5 id="인텔리제이-Gradle-플러그인-충돌-⚠️">인텔리제이 Gradle 플러그인 충돌 ⚠️</h5>
<p>인텔리제이 버전에서 Gradle Wrapper 버전을 올린 후 자체 Gradle 플러그인 버전과 충돌되는 문제가 있었습니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">org.jetbrains.plugins.gradle.tooling.util.ModuleComponentIdentifierImpl.getModuleIdentifier()</span><br></pre></td></tr></table></figure>
<p><a href="http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html" target="_blank" rel="noopener">Intellij Platform SDK DevGuide / Build Number Ranges</a>에서 192와 193 브랜치를 확인해보니 <a href="https://github.com/JetBrains/intellij-community/blob/192/build/dependencies/gradle/wrapper/gradle-wrapper.properties" target="_blank" rel="noopener">192</a>에서는 Gradle Wrapper가 4.10-all이고 <a href="https://github.com/JetBrains/intellij-community/blob/193/build/dependencies/gradle/wrapper/gradle-wrapper.properties" target="_blank" rel="noopener">193</a>에서 5.5-all로 변경되었습니다.</p>
<blockquote>
<p>자체 Gradle Wrapper가 아닌 자체 Gradle 버전을 바라보는 것은 무슨 문제일까요?<br>
이로 인해, 인텔리제이 커뮤니티 버전을 사용하는 분들께는 버전 업그레이드를 권고해드렸습니다.</p>
</blockquote>
<h5 id="Lombok-Plugin">Lombok Plugin</h5>
<p>Gradle 5+부터는 빌드를 위해 <code>롬복</code> 플러그인을 사용하거나 <code>annotationProcessor</code>를 사용해야 합니다.</p>
<blockquote>
<p><a href="https://projectlombok.org/setup/gradle" target="_blank" rel="noopener">https://projectlombok.org/setup/gradle</a></p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"io.freefair.gradle:lombok-plugin:4.1.6"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">"io.freefair.lombok"</span></span><br></pre></td></tr></table></figure>
<p>또는 직접 명시</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    annotationProcessor(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Gradle 버전을 업그레이드하여도 빌드 및 구동이 정상적으로 되니 다음 영역으로 넘어가겠습니다.</p>
<h3 id="Spring-Boot-✅">Spring Boot ✅</h3>
<p>이제 대망의 스프링 부트 프레임워크의 버전을 업그레이드할 차례입니다.</p>
<p>두근두근 🤪</p>
<blockquote>
<p>자 이제 시작이야. 내꿈을, 내꿈을 위한 여행. XXX.<br>
찾아라 비밀의 열쇠, 미로같이 얽힌 모험들</p>
</blockquote>
<h4 id="기존-애플리케이션-검토">기존 애플리케이션 검토</h4>
<p>먼저 기존 애플리케이션의 의존성을 간단하게 검토해보았습니다.</p>
<table>
<thead>
<tr>
<th>이름</th>
<th>버전</th>
<th>비고</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDK</td>
<td>1.8</td>
<td>jdk8u232-b09</td>
</tr>
<tr>
<td>Gradle</td>
<td><s>3.5.1</s> 5.6.4</td>
<td></td>
</tr>
<tr>
<td>Spring Boot</td>
<td>1.5.4</td>
<td></td>
</tr>
<tr>
<td>Spring</td>
<td>4.3.7</td>
<td></td>
</tr>
<tr>
<td>Embed Tomcat</td>
<td>8.5.47</td>
<td></td>
</tr>
<tr>
<td>org.springframework.boot:spring-boot-gradle-plugin</td>
<td>1.5.7.RELEASE</td>
<td></td>
</tr>
<tr>
<td>io.spring.gradle:dependency-management-plugin</td>
<td>0.5.2.RELEASE</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Gradle은 앞서 업그레이드하였으므로 반영하였습니다.</p>
</blockquote>
<h4 id="Spring-Boot-2-0-X-Migration-✅">Spring Boot 2.0.X Migration ✅</h4>
<p>마이그레이션 시 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide" target="_blank" rel="noopener">Spring Boot 2.0 Migration Guide</a>를 참고하였습니다.</p>
<blockquote>
<p>이런 것 까지 준비해주시는 스프링 개발자분들 존경합니다 ㅠㅡㅠ.</p>
</blockquote>
<h5 id="의존성-검토">의존성 검토</h5>
<p>스프링 부트 2.X는 1.5.X와 비교하여 <code>리액티브 스택</code>을 추가로 지원함에따라 패키지 구조와 구성을 위한 프로퍼티에 대한 변화가 많습니다. 그리고 스프링 부트에서 사용하는 여러가지 의존성의 버전이 업데이트되면서 사용자마다 사용하는 기술 스택에 대한 의존성 버전을 확인해야합니다.</p>
<ul>
<li><a href="https://docs.spring.io/spring-boot/docs/1.5.x/reference/html/appendix-dependency-versions.html" target="_blank" rel="noopener">1.5.X의 의존성 버전</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/appendix-dependency-versions.html" target="_blank" rel="noopener">2.0.X의 의존성 버전</a></li>
</ul>
<table>
<thead>
<tr>
<th>Group ID</th>
<th>Artifact ID</th>
<th>Version</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>com.fasterxml.jackson.core</td>
<td>jackson-core</td>
<td>2.8.11</td>
<td>2.9.8</td>
</tr>
<tr>
<td></td>
<td>jackson-databind</td>
<td>2.8.11.3</td>
<td>2.9.8</td>
</tr>
<tr>
<td>com.hazelcast</td>
<td>hazelcast</td>
<td>3.7.8</td>
<td>3.9.4</td>
</tr>
<tr>
<td></td>
<td>hazelcast-spring</td>
<td>3.7.8</td>
<td>3.9.4</td>
</tr>
<tr>
<td>com.google.code.gson</td>
<td>gson</td>
<td>2.8.5</td>
<td>2.8.5</td>
</tr>
<tr>
<td>com.zaxxer</td>
<td>HikariCP</td>
<td>2.5.1</td>
<td>2.7.9</td>
</tr>
<tr>
<td>commons-beanutils</td>
<td>commons-beanutils</td>
<td>1.9.3</td>
<td>X</td>
</tr>
<tr>
<td>commons-collections</td>
<td>commons-collections</td>
<td>3.2.2</td>
<td>X</td>
</tr>
<tr>
<td>javax.mail</td>
<td>javax.mail-api</td>
<td>1.5.6</td>
<td>1.6.2</td>
</tr>
<tr>
<td>javax.validation</td>
<td>validation-api</td>
<td>1.1.0.Final</td>
<td>2.0.1.Final</td>
</tr>
<tr>
<td>org.apache.httpcomponents</td>
<td>httpclient</td>
<td>4.5.9</td>
<td>4.5.8</td>
</tr>
<tr>
<td>org.apache.tomcat.embed</td>
<td>tomcat-embed-core</td>
<td>8.5.43</td>
<td>8.5.39</td>
</tr>
<tr>
<td>org.assertj</td>
<td>assertj-core</td>
<td>2.6.0</td>
<td>3.9.1</td>
</tr>
<tr>
<td>org.codehaus.groovy</td>
<td>groovy</td>
<td>2.4.17</td>
<td>2.4.16</td>
</tr>
<tr>
<td>org.elasticsearch</td>
<td>elasticsearch</td>
<td>2.4.6</td>
<td>5.6.16</td>
</tr>
<tr>
<td>org.elasticsearch.client</td>
<td>transport</td>
<td>X</td>
<td>5.6.16</td>
</tr>
<tr>
<td>org.hibernate</td>
<td>hibernate-validator</td>
<td>5.3.6.Final</td>
<td>6.0.16.Final</td>
</tr>
<tr>
<td></td>
<td>hibernate-validator-annotation-processor</td>
<td>5.3.6.Final</td>
<td>6.0.16.Final</td>
</tr>
<tr>
<td>org.postgresql</td>
<td>postgresql</td>
<td>9.4.1212.jre7</td>
<td>42.2.5</td>
</tr>
<tr>
<td>org.quartz-scheduler</td>
<td>quartz</td>
<td>X</td>
<td>2.3.1</td>
</tr>
<tr>
<td></td>
<td>quartz-jobs</td>
<td>X</td>
<td>2.3.1</td>
</tr>
<tr>
<td>org.reactivestreams</td>
<td>reactive-streams</td>
<td>X</td>
<td>1.0.2</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-core</td>
<td>4.3.25.RELEASE</td>
<td>5.0.13.RELEASE</td>
</tr>
<tr>
<td>io.micrometer</td>
<td>micrometer-core</td>
<td>X</td>
<td>1.0.10</td>
</tr>
<tr>
<td>com.sun.mail</td>
<td>javax.mail</td>
<td>1.5.6</td>
<td>1.6.2</td>
</tr>
</tbody>
</table>
<blockquote>
<p>간단하게 추렸는데도 꽤 많아보이네요</p>
</blockquote>
<h5 id="프로퍼티-마이그레이터-설정">프로퍼티 마이그레이터 설정</h5>
<p>스프링 부트 2.0에서 많은 설정 프로퍼티가 변경, 삭제되어서 이를 업데이트해야합니다. 스프링 부트에서는 이 작업을 도와주기 위하여 <code>spring-boot-properties-migrator</code> 모듈을 제공합니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    runtime(<span class="string">"org.springframework.boot:spring-boot-properties-migrator"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Once you’re done with the migration, please make sure to remove this module from your project’s dependencies.</span></span><br></pre></td></tr></table></figure>
<p>위와 같이 설정하면 런타임 시에 애플리케이션 환경을 분석해주고 임시적으로 변경된 프로퍼티로 바꿔줍니다.</p>
<blockquote>
<p>변경된 프로퍼티가 존재하면 WARN 레벨의 로그로 출력되며, 삭제된 프로퍼티를 사용하는 경우 ERROR 레벨의 로그를 출력합니다.</p>
</blockquote>
<h5 id="변경사항-확인">변경사항 확인</h5>
<p>릴리즈 노트를 통해서 무엇이 바뀌었는지 간단하게 확인하였습니다.</p>
<p><strong><em>기본 데이터베이스 커넥션 풀이 Tomcat-JDBC에서 HikariCP로 변경되었습니다.</em></strong></p>
<blockquote>
<p>기존에도 HikariCP를 사용하게 변경하여서 고려할 부분은 없었습니다.</p>
</blockquote>
<p><strong><em>리액티브 스택 지원으로 인한 의존성이 추가되어 임베디드 컨테이너 패키지가 광범위하게 리팩토링되었습니다.</em></strong></p>
<blockquote>
<p>Tomcat의 AJP 프로토콜 사용 설정을 위한 코드 변경이 필요했습니다.</p>
</blockquote>
<p><strong><em>액추에이터가 자체적인 매트릭 API이 아닌 Micrometer에 의존합니다.</em></strong></p>
<blockquote>
<p>Management 서버를 이용하지 않고 자체적으로 엔드포인트를 호출하여 사용했는데 이 엔드포인트에 대한 변경사항이 많아서 코드 로직을 다시 구현했습니다.</p>
</blockquote>
<p><strong><em>스프링 소셜에 대한 자동 구성이 제외되어 의존성 관리 목록에서 제거되었습니다.</em></strong></p>
<blockquote>
<p>스프링 소셜 기능을 사용하지 않으므로 무시합니다.</p>
</blockquote>
<p><strong><em>레디스 드라이버로써 Jedis가 아닌 Lettuce를 사용합니다.</em></strong></p>
<blockquote>
<p>리액티브 스택 지원을 위해 서블릿 기반의 Jedis가 아닌 Lettuce를 선택한 듯 보입니다.</p>
</blockquote>
<p><strong><em>엘라스틱서치가 5.4+으로 업그레이드 되었습니다. 엘라스틱에서 임베디드 엘라스틱을 더이상 지원하지 않으므로 NodeClient에 대한 자동 구성이 제외되었습니다.</em></strong></p>
<blockquote>
<p>엘라스틱서치 7.3.2를 사용하고있어 의존성 버전을 고정했습니다.</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    set(<span class="string">'elasticsearch.version'</span>, <span class="string">"7.3.2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>Spring Boot Gradle Plugin의 많은 부분이 개선되었습니다. 이제 의존성 관리 플러그인을 자동으로 적용하지 않으므로 이제 직접 명시해야 합니다.</em></strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>bootRepackage</code> 태스크가 <code>bootJar</code>와 <code>bootWar</code>로 대체되었습니다. 더이상 <code>jar</code>와 <code>war</code> 태스크가 관여하지 않습니다.</li>
<li><code>BootRun</code>, <code>BootJar</code>, <code>BootWar</code> 태스크는 이제 메인 클래스 이름 설정을 위해 <code>mainClassName</code> 프로퍼티를 사용합니다.</li>
</ul>
<p><strong><em>ConditionalOnBean이 OR이 아닌 논리적 AND를 사용합니다.</em></strong></p>
<blockquote>
<p>@ConditionalOnBean 사용 시 조심해야겠네요</p>
</blockquote>
<p><strong><em>AOP 지원을 포함하여 기본적으로 CGLIB를 사용합니다.</em></strong></p>
<blockquote>
<p>인터페이스 기반의 프록시가 필요하다면 spring.aop.proxy-target-class를 설정하면 되는데 @EnableAspectJAutoProxy(proxyTargetClass = true)를 명시해서 사용하고 있으므로 별다른 변경은 없어보입니다.</p>
</blockquote>
<p><strong><em><a href="https://docs.spring.io/spring-boot/docs/2.0.9.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding" target="_blank" rel="noopener">완화된 바인딩과 관련하여 규칙이 강화</a>되었으며 새로운 구조로 대체되어 기존의 <code>org.springframework.boot.bind</code> 패키지를 더이상 이용할 수 없습니다.</em></strong></p>
<blockquote>
<p>이로 인해 spring-boot-admin 1.5.7을 더이상 사용할 수 없었습니다.</p>
</blockquote>
<h5 id="문제점-해결-⚠️">문제점 해결 ⚠️</h5>
<p>업그레이드 후 발생한 문제점을 확인하고 해결해야합니다.</p>
<p><strong>프로퍼티 변경</strong><br>
제외된 프로퍼티 또는 변경된 프로퍼티가 있으면 알려주므로 쉽게 변경하였습니다.</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.contextPath=</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server.session.timeout=</span></span><br><span class="line"><span class="meta">server.servlet.session.timeout</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spring.http.multipart.max-file-size=</span></span><br><span class="line"><span class="comment"># spring.http.multipart.max-request-size=</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spring.datasource.jmx-enabled=</span></span><br><span class="line"><span class="meta">spring.datasource.tomcat.jmx-enabled</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># security.basic.enabled= # The security auto-configuation no longer custormizable</span></span><br><span class="line"><span class="comment"># security.oauth2.resource.filter-order= # The security auto-configuration no longer provide several security configurations</span></span><br><span class="line"><span class="comment"># security.user.name=</span></span><br><span class="line"><span class="comment"># security.user.password=</span></span><br><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># endpotins.enabled=</span></span><br><span class="line"><span class="comment"># endpoints.info.enabled=</span></span><br><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string"></span></span><br><span class="line"><span class="meta">management.endpoint.info.enabled</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># management.context-path=</span></span><br><span class="line"><span class="comment"># management.security.enabled= a global security is auto-configuation is provided</span></span><br><span class="line"><span class="comment"># management.ssl.enabled=</span></span><br><span class="line"><span class="meta">management.server.servlet.context-path</span>=<span class="string"></span></span><br><span class="line"><span class="meta">management.server.ssl.enabled</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>
<p><strong>임베디드 톰캣 커스터마이저 코드 변경</strong><br>
임베디드 컨테이너 패키지가 리팩토링되어 기존의 톰캣 커스터마이즈를 위한 클래스를 변경해야합니다.</p>
<table>
<thead>
<tr>
<th>Before</th>
<th>After</th>
</tr>
</thead>
<tbody>
<tr>
<td>EmbeddedServletContainer</td>
<td>WebServer</td>
</tr>
<tr>
<td>org.springframework.boot.context.embedded</td>
<td>org.springframework.boot.web.server</td>
</tr>
<tr>
<td>EmbeddedServletContainerCustomizer</td>
<td>WebServerFactoryCustomizer</td>
</tr>
<tr>
<td>TomcatEmbeddedServletContainerFactory</td>
<td>TomcatServletWebServerFactory</td>
</tr>
<tr>
<td>EmbeddedServletContainerCustomizer</td>
<td>WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt;</td>
</tr>
</tbody>
</table>
<p><strong>Spring Boot Admin 의존성 변경</strong><br>
<a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide#relaxed-binding" target="_blank" rel="noopener">Relaxed Binding</a>이 변경되면서 org.springframework.boot.bind의 RelaxedPropertyResolver가 삭제되었는데 spring-boot-admin:1.5.7에서 RelaxedPropertyResolver를 참조하므로 더이상 사용할 수 없게 되어 버전을 업그레이드 하였습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception encountered during context initialization - </span><br><span class="line">cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [net.ion.VppApplication]; </span><br><span class="line"></span><br><span class="line">nested exception is java.lang.IllegalStateException: </span><br><span class="line">Could not evaluate condition on de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration due to org&#x2F;springframework&#x2F;boot&#x2F;bind&#x2F;RelaxedPropertyResolver not found. </span><br><span class="line"></span><br><span class="line">Make sure your own configuration does not rely on that class. </span><br><span class="line">This can also happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)</span><br></pre></td></tr></table></figure>
<h4 id="Spring-Boot-from-2-0-X-to-2-1-X">Spring Boot from 2.0.X to 2.1.X</h4>
<p>2.0.0.RELEASE로 마이그레이션을 완료하였으며 다시 한번 2.1.X로 버전을 업그레이드 시도해보았습니다. 그 이유는 개발 시 활용하는 <a href="http://hotswapagent.org/mydoc_quickstart-jdk11.html" target="_blank" rel="noopener">HotswapAgent가 Java 8과 Java 11을 지원</a>하기 때문입니다.</p>
<blockquote>
<p>물론, <a href="https://github.com/HotswapProjects/openjdk-jdk9" target="_blank" rel="noopener">openjdk-jdk9</a>과 <a href="https://github.com/HotswapProjects/openjdk-jdk10" target="_blank" rel="noopener">openjdk-jdk10</a>에 대한 시도는 있었던 것 같습니다.</p>
</blockquote>
<p>하지만 정식으로 제공하는 것은 Java 8과 Java 11입니다.</p>
<p>결국 HotSwap 기능을 활성화하려면 JDK 11으로 빌드 및 구동할 수 있어야합니다. 앞서 알아본 스프링 버전별 JDK 지원 항목에 의해서 Java 11을 커버할 수 있는 2.1.1.RELEASE로 한 단계 더 업그레이드 하겠습니다.</p>
<h5 id="변경사항-확인-2">변경사항 확인</h5>
<p>이번에도 무엇이 바뀌었는지 확인하고 크게 바뀐 부분이 있는지 확인합니다.</p>
<p><strong><em>이제 Java 11을 지원합니다.</em></strong></p>
<blockquote>
<p>그래서 업그레이드를 시도하고 있죠</p>
</blockquote>
<p><strong><em>기본적으로 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#bean-overriding" target="_blank" rel="noopener">빈 오버라이딩</a>을 허용하지 않도록 변경되었습니다.</em></strong></p>
<blockquote>
<p>같은 유형의 빈을 다시 정의하는 것을 방지하는 기능인데 다시 정의하는 것들이 있어서</p>
</blockquote>
<p><strong><em>자동 구성 제외에 대한 일관성을 제공합니다. <code>@EnableAutoConfiguration</code>, <code>@SpringBootApplication</code>, <code>@ImportAutoConfiguration</code> 또는 <code>spring.autoconfigure.exclude</code>로 정의합니다.</em></strong></p>
<blockquote>
<p>다양항 방식으로 자동 구성을 끌 수 있겠네요</p>
</blockquote>
<p><strong><em>서블릿 패스 속성이 <code>server.servlet.path</code>에서 <code>spring.mvc.servlet.path</code>로 변경되었습니다.</em></strong></p>
<blockquote>
<p>해당 프로퍼티를 사용하지 않아 문제가 없습니다.</p>
</blockquote>
<p><strong><em>웹 애플리케이션이 동작하는 동안의 디버그 로깅 출력이 개선되었습니다.</em></strong></p>
<blockquote>
<p>HTTP 처리 과정을 자세히 확인할 수 있을 듯 보입니다.</p>
</blockquote>
<p><strong><em><code>HttpPutFormContentFilter</code>이 제외되었으며 <code>FormContentFilter</code>를 사용합니다. 따라서, <code>spring.mvc.formcontent.putfilter.enabled</code>는 더이상 정의할 수 없으며 <code>spring.mvc.formcontent.filter.enabled</code>으로 변경해야합니다.</em></strong></p>
<p><strong><em><code>json-simple</code>에 대한 의존성 관리가 제공되지않으며 <code>JsonParser</code> 구현체가 제거되었습니다.</em></strong></p>
<p><strong><em>Lombok이 1.18.x로 변경되어 더 이상 프라이빗 빈 생성자를 생성하지 않습니다.</em></strong></p>
<blockquote>
<p>lombok.config의 lombok.noArgsConstructor.extraPrivate=true를 설정해야 합니다.</p>
</blockquote>
<p><strong><em>임베디드 웹 서버가 일관된 최대 HTTP 헤더 크기를 갖습니다.</em></strong></p>
<blockquote>
<p>(8kB, server.max-http-header-size)</p>
</blockquote>
<p><strong><em>컨텍스트 ApplicationConversionService을 지원합니다.</em></strong></p>
<blockquote>
<p>Environment와 BeanFactory에 ApplicationConversionService가 기본으로 등록됩니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;my.duration:10s&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> Duration duration;</span><br></pre></td></tr></table></figure>
<p><strong><em>프로파일 표현 형식 지원이 향상되었습니다.</em></strong></p>
<blockquote>
<p>자세한 내용은 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#profile-expression" target="_blank" rel="noopener">여기</a>를 참고하세요</p>
</blockquote>
<p><strong><em>ThreadPoolTaskExecutor에 대한 자동 구성을 지원합니다.</em></strong></p>
<p><strong><em>@EnableScheduling이 명시된 경우 ThreadPoolTaskScheduler에 대한 자동 구성을 지원합니다.</em></strong></p>
<p><strong><em>연관된 로거들을 하나의 그룹으로 정의하는 로거 그룹을 지원합니다.</em></strong></p>
<blockquote>
<p>로거에 대한 레벨 설정시 그룹 단위로 지정할 수 있습니다.</p>
</blockquote>
<p><strong><em>Spring Data가 JDBC에 대한 리파지토리를 지원합니다.</em></strong></p>
<blockquote>
<p>제가 관심있는 부분인데 JPA를 사용하지 않고 리파지토리 기능을 사용할 수 있습니다.</p>
</blockquote>
<p><strong><em>RestClient와 RestHighLevelClient에 대한 자동 구성 및 spring.elasticsearch.rest.* 네임스페이스로 구성 옵션을 제공합니다.</em></strong></p>
<blockquote>
<p>수동으로 elasticsearch를 이용하므로 의미가 없습니다.</p>
</blockquote>
<p><strong><em>액추에이터 앤드포인트 추가 및 개선되었습니다.</em></strong></p>
<blockquote>
<p>런타임시 HealthIndicatorRegistry 빈으로 HealthIndicator를 추가 및 제거할 수 있습니다.<br>
또한, Health 엔드포인트가 특정 상태 인디케이터를 쿼리할 수 있습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ReadOperation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Health <span class="title">healthForComponent</span><span class="params">(@Selector String component)</span> </span>&#123;</span><br><span class="line">	HealthIndicator indicator = getNestedHealthIndicator(<span class="keyword">this</span>.healthIndicator,</span><br><span class="line">			component);</span><br><span class="line">	<span class="keyword">return</span> (indicator != <span class="keyword">null</span>) ? indicator.health() : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em><code>spring.jackson.visiblity.*</code>를 사용하여 Jackson visibility를 설정할 수 있습니다.</em></strong></p>
<blockquote>
<p>ObjectMapper를 수동으로 등록하므로 사용하지 않습니다.</p>
</blockquote>
<p><strong><em>HiddenHttpMethodFilter를 프로퍼티로 비활성화 할 수 있습니다.</em></strong></p>
<blockquote>
<p>수동으로 FilterRegistrationBean을 통해 HiddenHttpMethodFilter를 등록하는 부분을 프로퍼티로 변경해야겠습니다.</p>
</blockquote>
<p><strong><em>@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)로 별도의 랜덤 포트를 적용할 수 있습니다.</em></strong></p>
<blockquote>
<p>테스트 시 포트 문제가 해결될 듯 합니다.</p>
</blockquote>
<p>그외 변경된 부분이 더 있으므로 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes" target="_blank" rel="noopener">릴리즈 노트</a>를 참고하시길 바랍니다.</p>
<h5 id="문제점-해결-⚠️-2">문제점 해결 ⚠️</h5>
<p><strong>빈 오버라이딩 허용 안됨</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The bean &#39;freeMarkerConfiguration&#39;, defined in class path resource [org&#x2F;springframework&#x2F;boot&#x2F;autoconfigure&#x2F;freemarker&#x2F;FreeMarkerServletWebConfiguration.class], could not be registered. </span><br><span class="line">A bean with that name has already been defined in class path resource [..&#x2F;config&#x2F;MailConfig.class] and overriding is disabled.</span><br></pre></td></tr></table></figure>
<p>Freemaker를 메일 템플릿 엔진으로 사용하고 있었는데 freemarker.template.Configuration 빈이 오버라이딩 되기 때문에 오류가 발생했습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreeMarkerServletWebConfiguration</span> <span class="keyword">extends</span> <span class="title">AbstractFreeMarkerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> freemarker.template.<span class="function">Configuration <span class="title">freeMarkerConfiguration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    		FreeMarkerConfig configurer)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> configurer.getConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @Deprecated</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> freemarker.template.<span class="function">Configuration <span class="title">freeMarkerConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</span><br><span class="line">        FreeMarkerConfigurationFactory freeMarkerConfigurationFactory = <span class="keyword">new</span> FreeMarkerConfigurationFactory();</span><br><span class="line">        freeMarkerConfigurationFactory.setTemplateLoaderPath(<span class="string">"classpath:/templates/mails"</span>);</span><br><span class="line">        <span class="keyword">return</span> freeMarkerConfigurationFactory.createConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MailConfig에서 freemarker.template.Configuration 선언을 제거하고 프로퍼티로<br>
<code>template-loader-path</code>를 설정하였습니다.</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.freemarker.template-loader-path</span>= <span class="string">classpath:/templates/mails</span></span><br></pre></td></tr></table></figure>
<h4 id="Spring-Boot-from-2-1-X-to-2-2-X">Spring Boot from 2.1.X to 2.2.X</h4>
<p>굳이 하지 않아도 되는 작업인데 번외로 최근 버전인 2.2.3.RELEASE으로도 업그레이드 시도해보았습니다.</p>
<blockquote>
<p>또 얼마전에 <a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.2.4.RELEASE" target="_blank" rel="noopener">2.2.4.RELEASE</a>가 릴리즈 되었습니다. 😜<br>
여기서 좀 크리티컬한 오류가 생기는데 이에 대해서 개선되었나봅니다.</p>
</blockquote>
<h5 id="변경사항-확인-3">변경사항 확인</h5>
<p>업그레이드 하기 위한 작업은 변경사항을 확인하는 것부터 해야겠죠.</p>
<p>자세한 내용은 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes" target="_blank" rel="noopener">Spring boot 2.2 Release Notes</a>를 참고하세요</p>
<p><strong><em>JAVA 13을 지원합니다.</em></strong></p>
<p><strong><em>JMX가 기본적으로 활성화되어있지 않게 됩니다.</em></strong></p>
<blockquote>
<p>이 기능은 <code>spring.jmx.enabled=true</code>로 활성화할 수 있습니다</p>
</blockquote>
<p><strong><em>가능한 경우 Java EE 의존성에서 Jakarta EE 의존성으로 변경됩니다.</em></strong></p>
<blockquote>
<p><code>com.sun.mail:javax.mail</code>는 <code>com.sun.mail:jakarta.mail</code>됩니다.</p>
</blockquote>
<p><strong><em><code>spring-boot-starter-test</code>가 기본적으로 JUnit5를 지원합니다.</em></strong></p>
<blockquote>
<p>Junit4를 사용하려면 의존하는 모듈을 제외하고 Junit4를 포함해야합니다.</p>
</blockquote>
<p><strong><em>액추에이터 HTTP 트레이스와 감시 기능이 기본적으로 활성화되지 않습니다.</em></strong></p>
<p><strong><em>데이터소스 헬스 인디케이터는 별도의 <code>validationQuery</code> 속성을 포함합니다.</em></strong></p>
<p><strong><em>Gradle 4.10+가 요구됩니다.</em></strong></p>
<blockquote>
<p>저는 5.6.4를 사용하므로 문제가 되지 않습니다.</p>
</blockquote>
<p><strong><em>프리마커 템플릿에 대한 기본 템플릿 확장자가 변경되었습니다.</em></strong></p>
<blockquote>
<p>html을 사용하기 때문에 무시해도 될 것 같습니다.</p>
</blockquote>
<p><strong><em>톰캣 MBean 레지스트리가 기본적으로 비활성화되어 약 2MB의 힙이 절약됩니다.</em></strong></p>
<blockquote>
<p>MBean 매트릭이 필요하면 활성화해야겠네요</p>
</blockquote>
<p><strong><em>HttpHiddenMethodFilter가 기본적으로 비활성화됩니다.</em></strong></p>
<blockquote>
<p>다시 활성화하려면 spring.webflux.hiddenmethod.filter.enabled 또는 spring.mvc.hiddenmethod.filter.enabled를 true로 설정하세요</p>
</blockquote>
<p><strong><em>Helth Indicator 그룹 기능 구현을 위해 여러 클래스가 사용되지 않습니다.</em></strong></p>
<p><strong><em>@Configuration 클래스에서 proxyBeanMethods = false를 사용하여 시작 시간과 메모리 사용량이 줄었습니다.</em></strong></p>
<blockquote>
<p>사용자 정의 설정 클래스들을 확인해서 빈을 참조하는지 확인하여 설정하면 됩니다.<br>
참조하는 설정 클래스에 해당 옵션을 적용하면 로드 시 문제가 됩니다.</p>
</blockquote>
<p><strong><em>Gradle에서 bootRun으로 개발시 응용 프로그램을 시작할 때 JVM에 <code>-Xverify:none</code>와 <code>-XX:TieredStopAtLevel=1</code> 플래그가 설정됩니다.</em></strong></p>
<blockquote>
<p>속도 향상을 위해 기본 JVM 옵션을 부여하는 듯 합니다. 단, Java 13으로 동작하는 경우 <code>-Xverify:none</code>은 지정되지 않습니다.</p>
</blockquote>
<p><strong><em>시작 시간 절약을 위해 <code>spring.main.lazy-initialization</code> 속성으로 전역 지연 초기화 활성화를 지원합니다.</em></strong></p>
<blockquote>
<p>개발 시에는 이 속성을 사용해서 시작 시간을 앞당길 수 있습니다. 배포 환경에서는 애플리케이션이 로드되었지만 클라이언트 요청에 대해 처리할 수 없을 수 있어 비 추천합니다.</p>
</blockquote>
<p><strong><em>ApplicationContextRunner 테스트 유틸리티로 인라인 빈 등록이 가능합니다.</em></strong></p>
<blockquote>
<p>단위 테스트를 위한 유틸리티를 제공합니다.</p>
</blockquote>
<p><strong><em>유휴 JDBC 연결 매트릭을 추적하여 제공합니다.</em></strong></p>
<p><strong><em>스프링 세션의 플러쉬 모드를 지원합니다.</em></strong></p>
<blockquote>
<p>현재 애플리케이션은 개발 단계로 스프링 세션을 사용하고 있지 않으므로 무시합니다.</p>
</blockquote>
<p><strong><em>Oracle’s JDBC driver에 대한 의존성 관리가 추가되었습니다.</em></strong></p>
<blockquote>
<p>현재 애플리케이션은 PostgreSQL를 사용하므로 무시합니다.</p>
</blockquote>
<h5 id="문제점-해결-⚠️-3">문제점 해결 ⚠️</h5>
<p><strong>Cannot choose between the following variants of org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.3.3</strong></p>
<p>Spring Boot 2.2.3.RELEASE와 Gradle 5.6.4로 빌드를 시도했을때 발생한 문제점입니다.<br>
이 문제는 Gradle 6.1로 업그레이드하니 바로 해결되었습니다.</p>
<blockquote>
<p>사실 상 Spring Boot 2.2.2.RELEASE에서 2.2.3.RELEASE로 올렸을 때 발생했습니다.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Cannot choose between the following variants of org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.3.3:</span><br><span class="line">  - enforcedRuntimeElements</span><br><span class="line">  - runtimeElements</span><br><span class="line">All of them match the consumer attributes:</span><br><span class="line">  - Variant <span class="string">'enforcedRuntimeElements'</span> capability org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.3.3:</span><br><span class="line">      - Unmatched attributes:</span><br><span class="line">          - Found org.gradle.category <span class="string">'enforced-platform'</span> but wasn<span class="string">'t required.</span></span><br><span class="line"><span class="string">          - Found org.gradle.status '</span>release<span class="string">' but wasn'</span>t required.</span><br><span class="line">          - Found org.gradle.usage <span class="string">'java-runtime'</span> but wasn<span class="string">'t required.</span></span><br><span class="line"><span class="string">  - Variant '</span>runtimeElements<span class="string">' capability org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.3.3:</span></span><br><span class="line"><span class="string">      - Unmatched attributes:</span></span><br><span class="line"><span class="string">          - Found org.gradle.category '</span>platform<span class="string">' but wasn'</span>t required.</span><br><span class="line">          - Found org.gradle.status <span class="string">'release'</span> but wasn<span class="string">'t required.</span></span><br><span class="line"><span class="string">          - Found org.gradle.usage '</span>java-runtime<span class="string">' but wasn'</span>t required.</span><br></pre></td></tr></table></figure>
<p>이와 관련하여 스프링 부트 깃허브에 <a href="https://github.com/spring-projects/spring-boot/issues/19783" target="_blank" rel="noopener">Dependency resolution fails with Gradle 5.3.x to 5.6.x</a> 이슈가 올라와있어 확인해보니 다음과 같은 답변이 있었습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The problem’s caused by spring-boot-dependencies upgrading from Kotlin Coroutines 1.3.2 to 1.3.3. </span><br><span class="line">Unfortunately this affects pure-Java projects as the Kotlin Coroutines bom is imported in the spring-boot-dependencies bom.</span><br><span class="line"></span><br><span class="line">You should be able to work around the problem by overriding the version of the Kotlin Coroutines bom that is imported by Boot’s dependency management:</span><br><span class="line"></span><br><span class="line">ext[&#39;kotlin-coroutines.version&#39;]&#x3D;&#39;1.3.2&#39;</span><br><span class="line"></span><br><span class="line">- https:&#x2F;&#x2F;github.com&#x2F;spring-projects&#x2F;spring-boot&#x2F;issues&#x2F;19783#issuecomment-575506102</span><br></pre></td></tr></table></figure>
<p>하지만 의존성 관리 플러그인이 kotlin-coroutines.version을 참조하지 않는지 해결되지 않습니다.</p>
<p>알아본 결과 이를 해결하기 위한 세 가지 방법이 있습니다.</p>
<ol>
<li>Gradle 6.1 사용</li>
<li><a href="https://github.com/spring-projects/spring-boot/issues/19783#issuecomment-576235568" target="_blank" rel="noopener">io.spring.dependency-management:1.0.9.RELEASE</a>버전 사용 <em>(2020-01-20)</em></li>
<li>Spring Boot 2.2.4.RELEASE 업그레이드 <em>(2020-01-20)</em></li>
</ol>
<blockquote>
<p><a href="https://github.com/spring-projects/spring-boot/issues/19783#issuecomment-577604150" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/issues/19783#issuecomment-577604150</a><br>
결론적으로 제가 업그레이드를 시도했을때는 마침 문제가 있었고 😥 현재는 해결방법이 명확히 존재합니다.</p>
</blockquote>
<h3 id="JDK-✅">JDK ✅</h3>
<p>마지막으로 빌드되는 JDK 버전을 업그레이드해야합니다.</p>
<h4 id="OpenJDK-10">OpenJDK 10</h4>
<h5 id="문제점-확인-⚠️">문제점 확인 ⚠️</h5>
<p><strong><em>JDK9(Java SE 9) 이상에서 JAXB(javax.xml.bind) 클래스 못 찾음 문제</em></strong></p>
<p><a href="https://blog.leocat.kr/notes/2019/02/12/java-cannot-find-jaxb-from-jdk9-and-above" target="_blank" rel="noopener">https://blog.leocat.kr/notes/2019/02/12/java-cannot-find-jaxb-from-jdk9-and-above</a></p>
<blockquote>
<p>특정 JDK에서 --add-modules 옵션을 사용하지 못했습니다. 이에 대해서는 좀 더 확인해봐야됩니다.</p>
</blockquote>
<p><strong><em>cacerts</em></strong><br>
OpenJDK 10에서 애플리케이션 구동 시 인증서를 확인하지 못하는 문제점이 있습니다. 그 이유는 Cacerts에 해당 인증서의 인증기관이 없기 때문인데 JDK8의 cacerts를 대신 사용하도록 하였습니다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/a/53246850" target="_blank" rel="noopener">https://stackoverflow.com/a/53246850</a></p>
</blockquote>
<h4 id="OpenJDK-11-for-HotswapAgent">OpenJDK 11 for HotswapAgent</h4>
<p>프로젝트 개발 시 클래스 동적 로딩을 위해 <code>HotswapAgent</code>을 사용했는데 JDK8과 <a href="http://hotswapagent.org/mydoc_quickstart-jdk11.html" target="_blank" rel="noopener">JDK11</a>을 지원하여 <a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm" target="_blank" rel="noopener">trava-jdk-11-dcevm</a>을 사용하여 빌드 및 구동 확인하였습니다.</p>
<h3 id="Deploy-Optional">Deploy (Optional)</h3>
<p>저는 젠킨스를 활용해서 깃허브에 개발 브랜치로 푸시된 결과를 확인해 빌드를 진행하도록 설정되어있어 여기서 사용하는 JDK 버전도 변경해야합니다.</p>
<h4 id="젠킨스-OpenJDK-설치하기">젠킨스 OpenJDK 설치하기</h4>
<p>기존에는 Oracle JDK 8을 빌드에 사용하고 있었고 JDK9 부터는 OpenJDK로 빌드하려고 합니다. 그래서 <code>Extract \*.zip/\*.tar.gz</code>를 이용해 JDK를 설치하여 사용하도록 했습니다.</p>
<blockquote>
<p><a href="https://jdk.java.net/archive/" target="_blank" rel="noopener">Archived OpenJDK General-Availability Releases</a></p>
</blockquote>
<p>그리고 jdk 파라미터가 있는 경우 해당 JDK 버전을 사용하도록 설정하였습니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(project.hasProperty(<span class="string">'jdk'</span>)) &#123;</span><br><span class="line">    <span class="keyword">def</span> buildJDK = project.property(<span class="string">'jdk'</span>)</span><br><span class="line">    sourceCompatibility = JavaVersion.valueOf(buildJDK)</span><br><span class="line">    targetCompatibility = JavaVersion.valueOf(buildJDK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Gradle 이용시 JDK를 구분하여 처리할 수 있는 좋은 방법을 아신다면 공유 부탁드립니다.</p>
</blockquote>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide" target="_blank" rel="noopener">Spring Boot 2.0 Migration Guide</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes" target="_blank" rel="noopener">Spring Boot 2.0 Release Notes</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes" target="_blank" rel="noopener">Spring Boot 2.1 Release Notes</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes" target="_blank" rel="noopener">Spring Boot 2.2 Release Notes</a></li>
<li><a href="https://docs.gradle.org/5.6.4/release-notes.html" target="_blank" rel="noopener">Gradle Release Notes</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>스프링 부트</tag>
        <tag>마이그레이션</tag>
        <tag>삽질</tag>
      </tags>
  </entry>
  <entry>
    <title>초보 개발자들을 위한 AJAX에 대한 정리</title>
    <url>/spring/understanding-asynchronos-javascript-and-xml-with-spring/</url>
    <content><![CDATA[<blockquote>
<p>본 글은 <a href="https://github.com/kdevkr/spring-demo-ajax" target="_blank" rel="noopener">https://github.com/kdevkr/spring-demo-ajax</a> 에서 제공했던 정보입니다.</p>
</blockquote>
<h2 id="들어가며">들어가며</h2>
<blockquote>
<p><em>웹 서비스를 만들 때 자주 사용되는 비동기 통신 기술인 AJAX를 스프링 프레임워크와 연계하여 활용하는 다양한 방식에 대해서 알아보고자 합니다.</em></p>
</blockquote>
<p>XHR(XMLHttpRequest)를 직접적으로 이용하는 것보다는 JQuery에서 지원하는 AJAX(Asynchronos Javascript And XML)기능을 활용하도록 하는 것이 나을 것 같다는 생각입니다.</p>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest, Mozilla Developer Network</a></li>
<li><a href="http://api.jquery.com/jquery.ajax/" target="_blank" rel="noopener">Ajax, JQuery</a></li>
</ul>
<p>JQuery 이외에도 ajax를 지원하는 다양한 라이브러리가 존재합니다. 예를 들어, <a href="http://prototypejs.org/learn/introduction-to-ajax" target="_blank" rel="noopener">Prototypejs</a>도 많이 사용되는 유틸성 라이브러리 중 하나입니다. 그러나 저와 같은 초보자 및 신입 개발자들은 JQuery에 익숙하므로 JQuery가 지원하는 Ajax 기능에 대해서 살펴보고자 합니다.</p>
<blockquote>
<p>Vue.js에서는 <a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">axios</a>를 선호한다고 합니다.</p>
</blockquote>
<h2 id="JQuery-ajax">JQuery.ajax</h2>
<p>제이쿼리에서 제공하는 함수는 다음과 같은 구조로 구성되어 있습니다. 물론 이외에도 생략된 다양한 프로퍼티들이 존재하므로 더 찾아보시면 좋을 것 같습니다. 아래의 형태는 아마도 자주 사용되는 프로퍼티만 모아놓은 부분이라고 할 수 있습니다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type	: <span class="string">"GET"</span>, <span class="comment">//요청 메소드 타입</span></span><br><span class="line">  url		: <span class="string">"url"</span>, <span class="comment">//요청 경로</span></span><br><span class="line">  <span class="keyword">async</span> : <span class="literal">true</span>, <span class="comment">//비동기 여부</span></span><br><span class="line">  data  : &#123;<span class="attr">key</span> : value&#125;, <span class="comment">//요청 시 포함되어질 데이터</span></span><br><span class="line">  processData : <span class="literal">true</span>, <span class="comment">//데이터를 컨텐트 타입에 맞게 변환 여부</span></span><br><span class="line">  cache : <span class="literal">true</span>, <span class="comment">//캐시 여부</span></span><br><span class="line">  contentType : <span class="string">"application/json"</span>, <span class="comment">//요청 컨텐트 타입 "application/x-www-form-urlencoded; charset=UTF-8"</span></span><br><span class="line">  dataType	: <span class="string">"json"</span>, <span class="comment">//응답 데이터 형식 명시하지 않을 경우 자동으로 추측</span></span><br><span class="line">  beforeSend  : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// XHR Header를 포함해서 HTTP Request를 하기전에 호출됩니다.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  success	: <span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 정상적으로 응답 받았을 경우에는 success 콜백이 호출되게 됩니다.</span></span><br><span class="line">    <span class="comment">// 이 콜백 함수의 파라미터에서는 응답 바디, 응답 코드 그리고 XHR 헤더를 확인할 수 있습니다.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  error	: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, status, error</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">// 응답을 받지 못하였다거나 정상적인 응답이지만 데이터 형식을 확인할 수 없기 때문에 error 콜백이 호출될 수 있습니다.</span></span><br><span class="line">  	<span class="comment">// 예를 들어, dataType을 지정해서 응답 받을 데이터 형식을 지정하였지만, 서버에서는 다른 데이터형식으로 응답하면  error 콜백이 호출되게 됩니다.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  complete : <span class="function"><span class="keyword">function</span>(<span class="params">xhr, status</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// success와 error 콜백이 호출된 후에 반드시 호출됩니다.</span></span><br><span class="line">    <span class="comment">// try - catch - finally의 finally 구문과 동일합니다.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>여기서 잠깐! GET과 POST의 차이는 무엇인지 아시나요?</p>
</blockquote>
<p>바로 데이터가 어디에 위치하는가에 있습니다. POST 요청시에 URL에 파라미터가 보이지 않는 이유는 데이터가 요청 바디에 포함되기 때문입니다. 그렇기 때문에 GET과 POST에 따라 데이터를 URL에 추가해야할지 요청 바디에 추가해야할지를 알고 있어야만 합니다.</p>
<p>예를 들어, processData라는 속성은 GET 요청인데 data에 오브젝트가 지정될 경우에 요청하기전에 그 데이터를 파라미터 형식으로 URL에 추가해주는 역할을 하게 됩니다.</p>
<p>이외에도 JQuery에서는 <a href="https://api.jquery.com/category/ajax/" target="_blank" rel="noopener">다양한 ajax 기능</a>을 제공하고 있습니다. 만약, 스프링 시큐리티를 적용해서 HTTP 통신시에 CSRF 토큰이 필요하다면 다음과 같이 XHR Header에 CSRF 토큰을 추가해서 보낼 수 있습니다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 스프링 시큐리티 태그라이브러리로 메타 태그에 토큰 정보를 적용했다는 가정입니다.</span></span><br><span class="line"><span class="keyword">var</span> token = $(<span class="string">"meta[name='_csrf']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line"><span class="keyword">var</span> header = $(<span class="string">"meta[name='_csrf_header']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">   beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    xhr.setRequestHeader(header, token);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JQuery.ajax에 대해서는 이 정도까지만 알아도 됩니다.</p>
</blockquote>
<h2 id="Spring-Controller">Spring Controller</h2>
<p>스프링 프레임워크에서는 ajax 통신을 위해서 스프링 @MVC로 다양한 어노테이션을 지원합니다. 다양한 어노테이션을 확인하면서 구조를 익혀보도록 하겠습니다. 스프링 애플리케이션은 기본적으로 뷰 리졸버를 통해서 요청에 대한 응답을 하게 됩니다. 일반적인 HTTP 요청의 경우에는 JstlView로써 응답을 하게 되지만, XHR 요청에 의해서 다양한 데이터 형식으로 응답하기 위한 메시지 컨버터라는 것을 지원합니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Message Converter List</span><br><span class="line">- StringHttpMessageConverter</span><br><span class="line">- FormHttpMessageConverter</span><br><span class="line">- ByteArrayMessageConverter</span><br><span class="line">- MarshallingHttpMessageConverter</span><br><span class="line">- MappingJacksonHttpMessageConverter</span><br><span class="line">- MappingJackson2HttpMessageConverter</span><br><span class="line">- SourceHttpMessageConverter</span><br><span class="line">- BufferedImagedHttpMessageConverter</span><br></pre></td></tr></table></figure>
<blockquote>
<p>스프링의 <annotation-driven />은 많은 역할을 해주는데, 그 중 하나가 디폴트 메시지 컨버터를 등록해줍니다. 다만, MappingJacksonHttpMessageConverter는 jackson 라이브러리가 존재할때만 등록합니다.</p>
</blockquote>
<p>우리가 AJAX를 이용할 때 데이터 형식을 JSON으로 많이 사용합니다. 따라서, List, Map등과 같은 오브젝트들을 JSON 형태로 응답하고 싶다면, ModelAndView를 이용하거나 메시지컨버터를 등록해야합니다.</p>
<blockquote>
<p><em>본 문서에서는 ModelAndView로써 응답하는 방식은 설명하지 않겠습니다. <a href="http://www.nextree.co.kr/p11205/" target="_blank" rel="noopener">여기서 확인하도록 합시다</a></em></p>
</blockquote>
<p>그러나 스프링 3 이상 부터는 jackson 라이브러리를 의존성으로 추가할 경우에 자동적으로 MappingJacksonHttpMessageConverter를 적용해줍니다.</p>
<blockquote>
<p>여기서 잠깐!<br>
스프링 3.1.2 부터는 jackson 2.0을 지원하도록 추가되었습니다. jackson 2.0은 MappingJackson2HttpMessageConverter로 등록됩니다.<br>
자세한 사항은 스프링 버전별 jackson 라이브러리 버전 항목에서 확인하시기 바랍니다.</p>
</blockquote>
<p>스프링 부트에서는 이러한 부분도 관리해주므로 추가적으로 jackson 라이브러리를 pom.xml에 추가할 필요가 없습니다.</p>
<h3 id="스프링-버전별-사용되는-Jackson-Library">스프링 버전별 사용되는 Jackson Library</h3>
<p>스프링 3.0 이상부터는 jackson 관련 라이브러리에 따라 메시지 컨버터를 등록해줍니다.</p>
<h4 id="Spring-3-0-x">Spring 3.0.x</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.codehaus.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Spring-3-1-2">Spring 3.1.2</h4>
<blockquote>
<p>MappingJackson2HttpMessageConverter로 jackson 2.0을 지원합니다</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.codehaus.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Jackson 2.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.fasterxml.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.fasterxml.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.fasterxml.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Spring-4-0-0">Spring 4.0.0</h4>
<blockquote>
<p>GsonHttpMessageConverter 지원<br>
MappingJacksonHttpMessageConverter 미지원</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson 2.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.fasterxml.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.fasterxml.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.fasterxml.jackson&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/spring-projects/spring-framework/wiki/Migrating-to-Spring-Framework-4.x#jackson-1819" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework/wiki/Migrating-to-Spring-Framework-4.x#jackson-1819</a><br>
위 문서에 따르면 스프링 4.1 부터는 org.codehaus.jackson(1.8 or 1.9)의 지원을 중단하였습니다.</p>
</blockquote>
<ul>
<li>버전별 메시지 컨버터 지원표</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Spring Version</th>
<th style="text-align:center">org.codehaus.jackson(1.8 or 1.9)</th>
<th style="text-align:center">com.fasterxml.jackson(2.0)</th>
<th style="text-align:center">gson</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3.0.x</td>
<td style="text-align:center">MappingJacksonHttpMessageConverter</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3.1.2</td>
<td style="text-align:center">MappingJacksonHttpMessageConverter</td>
<td style="text-align:center">MappingJackson2HttpMessageConverter</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">4.+</td>
<td style="text-align:center"></td>
<td style="text-align:center">MappingJackson2HttpMessageConverter</td>
<td style="text-align:center">GsonHttpMessageConverter</td>
</tr>
</tbody>
</table>
<h3 id="Annotations">Annotations</h3>
<blockquote>
<p>그럼 이제 스프링 컨트롤러에서 사용되는 어노테이션들을 알아보겠습니다.</p>
</blockquote>
<h4 id="RequestMapping">@RequestMapping</h4>
<p>@RequestMapping에는 요청과 응답과 관련한 프로퍼티를 설정할 수 있습니다.  produces와 consumes는 확실히 알고 넘어가셔야 합니다.</p>
<ul>
<li>method=RequestMethod.GET<br>
method는 어떠한 요청 타입을 처리할 것인가를 결정하는 부분입니다.</li>
<li>produces=MediaType.APPLICATION_JSON_VALUE<br>
produces는 어떠한 데이터 형식으로 응답할 것인가를 결정하는 부분입니다.</li>
<li>consumes=MediaType.APPLICATION_JSON_VALUE<br>
consumes는 어떠한 요청에 대해서 처리할 것인가를 결정하는 부분입니다.</li>
</ul>
<blockquote>
<p>produces와 consumes 프로퍼티는 Spring 3.1에서 부터 지원합니다.</p>
</blockquote>
<h4 id="ModelAttribute-ReqeustParam">@ModelAttribute, @ReqeustParam</h4>
<p>이 두개의 어노테이션은 GET과 DELETE 요청에서 활용할 수 있습니다. 그 이유는 파라미터 값을 확인해서 데이터를 바인딩해주기 때문입니다. @RequestParam은 request.getParameter()로써 가져오는 반면에 @ModelAttribute는 자바 클래스의 Getter, Setter에 의해 데이터를 바인딩시키는 것입니다. 그렇기 때문에 만약 객체 단위로 바인딩하고 싶다면 @ModelAttribute를  이용해야 한다는 것입니다.</p>
<blockquote>
<p><em>직접 확인하고 싶으시다면 본 프로젝트를 동작시켜 ajaxList와 ajaxListModel의 차이를 확인하시기 바랍니다.</em></p>
</blockquote>
<h4 id="RequestBody">@RequestBody</h4>
<p>이 어노테이션은 POST와 PUT 처럼 데이터가 HTTP 요청 바디에 포함되는 경우에 이를 확인해서 데이터를 바인딩 해줍니다. 이 어노테이션의 중요한 부분은 GET 요청과 같이 파라미터를 통해 제공되는 데이터는 바인딩할 수 없다는 점입니다.</p>
<blockquote>
<p><em>직접 확인하고 싶으시다면 본 프로젝트를 동작시켜 ajaxMap와 ajaxMapGet의 차이를 확인하시기 바랍니다. ajaxMapGet의 요청이 왜 실패하는지에 대해서 서버측 로그를 살펴보시기 바랍니다.</em></p>
</blockquote>
<h4 id="ResponseBody">@ResponseBody</h4>
<p>이 어노테이션은 응답되는 데이터에 대하여 등록된 메시지 컨버터를 통해 변환시켜 응답하게 됩니다. 따라서, 뷰에 모델로서 데이터를 추가시켜 응답하는 것이 아니라 데이터를 HTTP 본문으로 응답하게 된다는 것입니다.</p>
<blockquote>
<p><em>ajaxList와 ajaxListNobody를 통해서 @ResponseBody가 있을 경우랑 없을 경우를 비교해보세요. 왜 @ResponseBody가 없을 때 ViewResolver를 찾는 것 같나요?</em></p>
</blockquote>
<h4 id="RestController">@RestController</h4>
<p>이 어노테이션은 스프링 4 부터 지원합니다. 해당 컨트롤러의 메소드들에 @ResponseBody 어노테이션을 적용합니다. 좀 더 편의성을 제공한다고 보시면 됩니다.</p>
<h2 id="Test-Case">Test Case</h2>
<p>본 프로젝트에서 현재 진행한 테스트 케이스는 다음과 같습니다.</p>
<h4 id="1-GET-ResponseBody와-ModelAttribute-RequestParm을-확인할-수-있는-케이스">1. GET, @ResponseBody와 @ModelAttribute, @RequestParm을 확인할 수 있는 케이스</h4>
<h4 id="2-GET-1번과-동일하나-ModelAttribute를-통해서-객체-단위로-바인딩하는-것을-확인할-수-있는-케이스">2. GET, 1번과 동일하나 @ModelAttribute를 통해서 객체 단위로 바인딩하는 것을 확인할 수 있는 케이스</h4>
<h4 id="3-GET-1번과-동일하나-ResponseBody를-지정하지-않았을-경우를-확인할-수-있는-케이스">3. GET, 1번과 동일하나 @ResponseBody를 지정하지 않았을 경우를 확인할 수 있는 케이스</h4>
<h4 id="4-PUT-ResponseBody와-RequestBody를-지정했을-경우를-확인할-수-있는-케이스">4. PUT, @ResponseBody와 @RequestBody를 지정했을 경우를 확인할 수 있는 케이스</h4>
<h4 id="5-GET-4번과-동일하나-GET-요청에-RequestBody를-지정했을-경우를-확인할-수-있는-케이스">5. GET, 4번과 동일하나 GET 요청에 @RequestBody를 지정했을 경우를 확인할 수 있는 케이스</h4>
<h4 id="6-POST-ResponseEntity를-통해서-HttpStatus도-지정할-수-있는-것을-확인하는-케이스">6. POST, ResponseEntity를 통해서 HttpStatus도 지정할 수 있는 것을 확인하는 케이스</h4>
<h4 id="7-POST-6번과-동일하나-ResponseBody를-지정하지-않을-경우를-확인할-수-있는-케이스">7. POST, 6번과 동일하나 @ResponseBody를 지정하지 않을 경우를 확인할 수 있는 케이스</h4>
<h4 id="8-POST-7번과-동일하나-URL에-파라미터를-함께-요청시에-RequestParam-지원여부를-확인할-수-있는-케이스">8. POST, 7번과 동일하나 URL에 파라미터를 함께 요청시에 @RequestParam 지원여부를 확인할 수 있는 케이스</h4>
<blockquote>
<p><em>6번과 7번은 의아해하실 수 있으실 겁니다. 이와 관련된 정보는 <a href="http://okky.kr/article/311196" target="_blank" rel="noopener">여기</a>에서 확인하실 수 있습니다. 간단히 말하면 ResponseEntity는 응답 헤더와 바디를 가지는 객체를 응답하는 것이라고 보면 됩니다.</em></p>
</blockquote>
<h2 id="마지막으로-초보자들이-잘못-사용하거나-접근하는-경우를-알아봅시다">마지막으로 초보자들이 잘못 사용하거나 접근하는 경우를 알아봅시다.</h2>
<blockquote>
<p>Okky에서 Ajax 관련 질문이 올라온다면 지속적으로 추가하도록 하겠습니다.</p>
</blockquote>
<h4 id="1-저는-제대로-구현한-것-같은데-에러로-응답받습니다">1. 저는 제대로 구현한 것 같은데 에러로 응답받습니다.</h4>
<ul>
<li>dataType을 지정한 뒤 그 형식으로 응답하지 않는다면 정상적으로 응답해도 에러 콜백이 호출될 가능성이 있습니다. 예를 들어, 스프링 컨트롤러에서는 문자열이나 null을 응답하는데 ajax에서는 json으로 지정할 경우에는 서버에서는 정상적으로 응답되지만 클라이언트에서는 해당 데이터를 json으로 파싱할 수 없기 때문에 에러 콜백이 호출됩니다.</li>
</ul>
<blockquote>
<p>대부분의 Ajax 관련 질문은 여기에 해당되는 경우가 많았습니다. 단순히 error가 난다고 해서 정상적으로 응답받지 못했다고 판단하고 계셨습니다. 서버는 html문서를 응답하는데 ajax 데이터 형식이 json이면 오류가 난다는 것을 기억해주시기 바랍니다.</p>
</blockquote>
<h4 id="2-데이터를-서버에서-받아올-수-없습니다">2. 데이터를 서버에서 받아올 수 없습니다.</h4>
<ul>
<li>요청 메소드 타입이 GET일 때 processData를 false로 지정할 경우에는 데이터를 url에 직접 포함시켜줘야 합니다.  만약, POST같은 요청의 경우에는 데이터가 요청 바디에 포함되어져야 한다는 것을 잊지 마시기 바랍니다.</li>
</ul>
<blockquote>
<p>POST의 경우에도 url에 파라미터가 포함된다면 @RequestParam 어노테이션을 통해 받아올 수 있습니다.</p>
</blockquote>
<h4 id="3-GET-요청을-통해-보내는데-일정-데이터-크기이상-보내지지-않습니다">3. GET 요청을 통해 보내는데 일정 데이터 크기이상 보내지지 않습니다.</h4>
<ul>
<li>브라우저별로 URL의 지원 크기가 다릅니다. 그렇기 때문에 POST로 요청 바디에 데이터를 포함시켜 보내는 이유도 바로 이 때문입니다. 물론 서버 측에서도 요청 바디에 대한 크기를 제한할 수 도 있습니다.</li>
</ul>
<blockquote>
<p>많은 신입 면접시에 GET과 POST의 차이를 묻는 이유이기도 합니다. 단순히 보안 때문에 구분해서 사용하는 것은 아니라는 점입니다.</p>
</blockquote>
<h4 id="4-406-Not-Acceptable-응답해요-ㅠㅠ-2017-02-14">4. 406 - Not Acceptable 응답해요 ㅠㅠ  [2017-02-14]</h4>
<ul>
<li>혹시 @ResponseBody로 List나 Map을 응답하고 계신가요? 응답하기 위해서는 annotation-driven 설정이 되어있어야 하고 요청하는 응답 데이터로 변환할 수 있도록 메시지 컨버터가 필요합니다.</li>
</ul>
<blockquote>
<p>스프링 버전에 따라서 다르겠지만 스프링 3 부터는 annotation-driven 설정을 하고 jackson 라이브러리르 추가한다면 디폴트 전략으로 메시지컨버터가 등록됩니다.</p>
</blockquote>
<h4 id="5-MessageConverter를-이용하고-싶지-않아요-2017-04-20">5. MessageConverter를 이용하고 싶지 않아요 [2017-04-20]</h4>
<ul>
<li>메시지 컨버터를 이용하지 않고도 JSON으로 응답할 수 있는 방법이 있습니다. 바로 ContentNegotiatingViewResolver를 이용하면 됩니다. 확장자를 이용하는 방식입니다.</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- ViewResolver 우선순위 설정 --&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">	        <span class="comment">&lt;!-- 맵핑될 확장자 정의 --&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">beans:map</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">beans:entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">beans:map</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">beans:list</span>&gt;</span></span><br><span class="line">	            <span class="comment">&lt;!-- JSON 요청을 처리할 뷰 --&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJacksonJsonView"</span>/&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">beans:list</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"ignoreAcceptHeader"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/test.json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">api</span><span class="params">(<span class="keyword">final</span> ModelMap map)</span></span>&#123;</span><br><span class="line">  Message message = <span class="keyword">new</span> Message(<span class="string">"Message Bean"</span>);</span><br><span class="line">  map.put(<span class="string">"response"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ModelMap에 추가하여 JSON 형태로 출력할 수 있게 됩니다.</p>
</blockquote>
<p>참조 : <a href="http://ismydream.tistory.com/139" target="_blank" rel="noopener">http://ismydream.tistory.com/139</a></p>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>초보 개발자가 이해하는 캐시 정책</title>
    <url>/spring/understanding-cache-control/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>웹 애플리케이션에서 서버가 클라이언트에게 제공하는 정적 리소스들의 캐시 정책을 이해하는 것은 굉장히 중요한 부분이라고 생각합니다.</p>
<h2 id="The-Cache-Control-Header">The Cache-Control Header</h2>
<p><code>Cache-Control</code> 헤더는 서버와 브라우저 사이의 <code>캐시 정책</code>이라고 할 수 있다. 이 헤더값에 따라서 브라우저가 해당 파일을 캐시해야하는지 언제 다시 서버에게 요청하는지를 결정하게 된다.</p>
<h3 id="Cache-Control-no-cache-그리고-no-store">Cache-Control: no-cache 그리고 no-store</h3>
<p>캐시 정책을 이해하기 위해서는 <code>no-cache</code>와 <code>no-store</code>의 차이점을 알아야 한다.</p>
<h4 id="no-cache">no-cache</h4>
<p><code>no-cache</code>는 브라우저가 서버의 응답을 캐시할지 스스로 결정할 수 있다. 하지만, 캐시된 정보가 해당 서버에서 제공한 것인지는 요청을 하게 된다.</p>
<h4 id="no-store">no-store</h4>
<p><code>no-store</code>는 브라우저가 서버의 응답을 캐시하지 못하도록 한다. 이 말은 반드시 매번 서버에 요청해야만 한다는 의미이다.</p>
<h2 id="스프링-MVC-캐시-정책">스프링 MVC 캐시 정책</h2>
<p>스프링 MVC에서 캐시 정책을 설정하기 위해서는 어떻게 해야할까?<br>
다음 글들을 참고해보자.</p>
<ul>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=20775788" target="_blank" rel="noopener">browser가 caching 하지 않게 하는 http header</a></li>
<li><a href="https://support.microsoft.com/ko-kr/help/234067/how-to-prevent-caching-in-internet-explorer" target="_blank" rel="noopener">Internet Explorer에서 캐싱을 방지하는 방법</a></li>
<li><a href="http://cyberx.tistory.com/9" target="_blank" rel="noopener">더 빠른 웹을 위하여 - 웹 캐쉬</a></li>
</ul>
<p>다음 코드는 캐시 정책이 설정되지 않는다. 무엇이 문제일까.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  		registry.addResourceHandler(<span class="string">"/**"</span>)</span><br><span class="line">                  .setCachePeriod(<span class="number">0</span>)</span><br><span class="line">                  .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>,<span class="string">"classpath:/resources/"</span>,<span class="string">"classpath:/static/"</span>,<span class="string">"classpath:/public/"</span>)</span><br><span class="line">                  .resourceChain(<span class="keyword">true</span>)</span><br><span class="line">                  .addResolver(<span class="keyword">new</span> PathResourceResolver()).addResolver(<span class="keyword">new</span> GzipResourceResolver());</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">      registry.addInterceptor(<span class="keyword">new</span> HandlerInterceptorAdapter() &#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">              response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"private, no-cache, no-store, must-revalidate"</span>);</span><br><span class="line">              response.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">              response.setDateHeader(<span class="string">"Expires"</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (request.getProtocol().equals(<span class="string">"HTTP/1.1"</span>)) &#123;</span><br><span class="line">                  response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      registry.addInterceptor(webContentInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="meta">@Bean</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> WebContentInterceptor <span class="title">webContentInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  		WebContentInterceptor webContentInterceptor = <span class="keyword">new</span> WebContentInterceptor();</span><br><span class="line">  		webContentInterceptor.setCacheSeconds(<span class="number">0</span>);</span><br><span class="line">  		<span class="keyword">return</span> webContentInterceptor;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>혹시 다음 부분에서 문제가 있었을까?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addInterceptor(<span class="keyword">new</span> HandlerInterceptorAdapter() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"private, no-cache, no-store, must-revalidate"</span>); <span class="comment">// HTTP/1.1</span></span><br><span class="line">        response.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>); <span class="comment">// HTTP/1.0</span></span><br><span class="line">        response.setDateHeader(<span class="string">"Expires"</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (request.getProtocol().equals(<span class="string">"HTTP/1.1"</span>)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>스프링에서 브라우저 캐시와 관련된 정보를 검색하면 위와 같이 설정하는 것을 많이 찾을 수 있다. 그런데 사실 스프링 프레임워크에서 캐시 정책을 적용하기 위해서는 <code>WebContentInterceptor</code>라는 것을 이용해야 한다.</p>
<p>이상하다. 위 코드에서 <code>WebContentInterceptor</code>는 이미 빈으로 등록하고 있다. 더구나 <code>setCacheSeconds(0)</code>이다.</p>
<h4 id="WebContentGenerator-setCacheSeconds">WebContentGenerator.setCacheSeconds</h4>
<p>WebContentGenerator의 setCacheSeconds 함수에 대해서 살펴보면 다음과 같이 설명하고 있다.</p>
<p>::: tip WebContentGenerator.setCacheSeconds<br>
Cache content for the given number of seconds, by writing cache-related HTTP headers to the response:</p>
<p>seconds == -1 (default value) : no generation cache-related headers<br>
seconds == 0 : “Cache-Control: no-store” will prevent caching<br>
seconds &gt; 0 : “Cache-Control: max-age=seconds” will ask to cache content<br>
:::</p>
<p>CacheSeconds가 -1이면 캐시와 관련된 헤더를 만들지 않고 0이면 <code>Cache-Control: no-store</code>로 캐시를 막는다.<br>
이미 <code>setCacheSeconds(0)</code>인데 그럼 무엇때문에 캐시를 했던 것일까</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addInterceptor(<span class="keyword">new</span> HandlerInterceptorAdapter() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"private, no-cache, no-store, must-revalidate"</span>); <span class="comment">// HTTP/1.1</span></span><br><span class="line">        response.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>); <span class="comment">// HTTP/1.0</span></span><br><span class="line">        response.setDateHeader(<span class="string">"Expires"</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ERROR!</span></span><br><span class="line">        <span class="keyword">if</span> (request.getProtocol().equals(<span class="string">"HTTP/1.1"</span>)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>자세히 살펴보면 요청 프로토콜이 HTTP/1.1일때 <code>Cache-Control: no-cache</code>를 지정한다는 것이 잘못된 코드이다. 프로토콜에 따라 무조건 적용하는 것이 아니라 요청에 의한 응답 리소스에 따라 캐시 정책을 지정해야 한다.</p>
<blockquote>
<p><code>Pragma : no-cache</code> 도 HTTP/1.0의 표준 스펙은 아니다. 다만, Cache-Control을 지원하지 않으므로 대안으로 사용하는 것일 뿐이다.</p>
</blockquote>
<p>그래서 스프링 MVC는 <code>인터셉터</code>를 통해 헤더에 직접 지정하지 않고 <code>WebContentInterceptor</code>를 제공하여 캐시 정책을 등록하게 도와준다.</p>
<p>그러므로 스프링은 WebContentInterceptor을 제공하고 캐시 전략을 등록하게 도와주는 것입니다.</p>
<blockquote>
<p><code>인터셉터</code>에서 캐시 정책을 지정하는 부분을 지우자.</p>
</blockquote>
<p>최종적으로 WebContentInterceptor에 의해 캐시 방지 처리된 페이지 결과는 다음과 같다.</p>
<p><code>Chrome</code></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Cache-Control: no-store, must-revalidate, proxy-revalidate</span><br><span class="line">Content-Language: ko-KR</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Date: Sat, 09 Jun 2018 07:54:50 GMT</span><br><span class="line">Server: nginx/1.10.3</span><br><span class="line">X-Application-Context: application:production:5000</span><br><span class="line">Content-Length: 2049</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>
<p><code>IE 11</code></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-store, must-revalidate, proxy-revalidate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Language: ko</span><br><span class="line">Content-Length: 2049</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Sat, 09 Jun 2018 08:24:47 GMT</span><br><span class="line">Server: nginx/1.10.3</span><br><span class="line">X-Application-Context: application:production:5000</span><br></pre></td></tr></table></figure>
<h4 id="Path별-캐시-정책-지정하기">Path별 캐시 정책 지정하기</h4>
<p>스프링 MVC에서 Path별 캐시 정책을 지정할 수 있다. <code>WebContentInterceptor.setCacheMappings(Properties cacheMappings</code>와 <code>WebContentInterceptor.addCacheMapping(CacheControl cacheControl, String... paths)</code>으로 지원한다.</p>
<h2 id="샘플-애플리케이션에-캐시-정책을-지정해보자">샘플 애플리케이션에 캐시 정책을 지정해보자</h2>
<p>스프링 MVC에서 캐시 정책을 지정하는 방법을 알아보았다. 이제는 실제로 캐시 정책을 지정해보도록 하겠다.</p>
<p>먼저, <code>캐시 정책을 지정하기 위한 샘플 애플리케이션</code>은 다음과 같이 구성된다.</p>
<p><strong>/</strong><br>
index.html으로 렌더링한 페이지를 응답한다.</p>
<p><strong>/main</strong><br>
main.html으로 렌더링한 페이지를 응답한다.</p>
<p><strong>/api/users</strong><br>
샘플 애플리케이션의 사용자 목록을 응답하는 API으로 JSON 형식으로 응답된다.</p>
<p><strong>/resources/index.js</strong><br>
/resources/index.js 경로로 index.js라는 정적 리소스를 응답한다.</p>
<p>인터셉터에서는 <code>Cache-Control</code> 헤더를 지정하지 않고 응답하기전에 <code>Cache-Control</code>의 헤더를 확인만 한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Configuration</span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger console = LoggerFactory.getLogger(MvcConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(webContentInterceptor());</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> HandlerInterceptorAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                console.info(<span class="string">"---- Cache-Control ----"</span>);</span><br><span class="line">                console.info(<span class="string">"request : &#123;&#125;"</span>, request.getHeader(<span class="string">"Cache-Control"</span>));</span><br><span class="line">                console.info(<span class="string">"response : &#123;&#125;"</span>, response.getHeader(<span class="string">"Cache-Control"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Serve For Static Resources</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/static/"</span>)</span><br><span class="line"><span class="comment">//                .setCachePeriod(3600)</span></span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS))</span><br><span class="line">                .resourceChain(<span class="keyword">true</span>)</span><br><span class="line">                .addResolver(<span class="keyword">new</span> GzipResourceResolver())</span><br><span class="line">                .addResolver(<span class="keyword">new</span> PathResourceResolver());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Serve For Dynamic Response</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebContentInterceptor <span class="title">webContentInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebContentInterceptor webContentInterceptor = <span class="keyword">new</span> WebContentInterceptor();</span><br><span class="line">        webContentInterceptor.addCacheMapping(CacheControl.noStore().mustRevalidate().proxyRevalidate().cachePrivate(), <span class="string">"/api/**"</span>);</span><br><span class="line"><span class="comment">//        webContentInterceptor.addCacheMapping(CacheControl.noCache(), "/main/**");</span></span><br><span class="line">        webContentInterceptor.addCacheMapping(CacheControl.noStore(), <span class="string">"/main/**"</span>);</span><br><span class="line">        <span class="keyword">return</span> webContentInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="index-html의-캐시-정책">index.html의 캐시 정책</h3>
<p>동적 리소스인 index.html은 아무런 캐시 전략을 설정하지 않았다.</p>
<p><img data-src="/images/spring/index-public.png" alt=""></p>
<p>index.html을 응답받은 브라우저는 응답 헤더에 <code>Cache-Control</code>이 없으므로 스스로 판단하여 캐시 정책을 설정하게 된다.</p>
<p>다음은 <code>/</code>에서 <code>/main</code>으로 이동한 뒤에 브라우저의 뒤로가기 기능으로 <code>/</code>로 되돌아 갔을 때의 <code>index.html</code>의 응답 헤더이다.</p>
<p><img data-src="/images/spring/index-disk-cache.png" alt=""></p>
<p>브라우저는 <code>from disk cache</code> 디스크에 저장된 캐시 파일로 index.html을 보여주고 있다.</p>
<h3 id="main-html의-캐시-정책">main.html의 캐시 정책</h3>
<p><code>동적 리소스</code>인 main.html은 <code>no-store</code> 캐시 정책을 설정하였다.</p>
<p>브라우저는 main.html에 대하여 캐시 정책을 세우지 않고 매번 서버에 요청한다.</p>
<p><img data-src="/images/spring/main-no-store.png" alt=""></p>
<h3 id="index-js의-캐시-정책">index.js의 캐시 정책</h3>
<p>index.js와 같은 정적 리소스의 경우에는 <code>ResourceHandlerRegistry</code>에서 캐시 정책을 지정할 수 있다. <code>ResourceHandlerRegistry.setCacheControl</code>으로 <code>CacheControl.maxAge(1, TimeUnit.HOURS)</code>을 지정하여 index.js의 캐시 기간은 1시간이 된다.</p>
<p><img data-src="/images/spring/index-js-memory-cache.png" alt=""></p>
<p>위 처럼 <code>max-age</code>를 설정하면 해당 리소스의 <code>Last-Modified 헤더</code>에 따라 캐시할 기간이 설정되어지며 기간이 지났으면 다시 서버에서 요청한다.</p>
<h2 id="참조">참조</h2>
<ul>
<li><a href="https://www.incapsula.com/cdn-guide/glossary/cache-control.html" target="_blank" rel="noopener">Cache-Control</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>초보 개발자가 이해하는 HTTP Content-Type</title>
    <url>/spring/understanding-http-content-types/</url>
    <content><![CDATA[<p>HTTP는 하이퍼텍스트 통신 프로토콜으로 서버와 클라이언트가 서로 통신하기 위하여 요청과 응답을 받는다.</p>
<p>이때 클라이언트가 서버에게 요청할 때 보내는 데이터 유형과 어떻게 보내야 올바른지 알아보자.</p>
<p>REST 클라이언트 앱인 <code>Postman</code>은 다음과 같은 <code>Content-Type</code>을 제공한다.</p>
<p><img data-src="/spring/images/postman-content-type.png" alt=""></p>
<p>일반적인 HTML 폼으로 전송할 때는 <code>x-www-form-urlencoded</code> 또는 <code>multipart/form-data</code>로 전송된다고 알고 있다.</p>
<p>혹시 모르고 있었더라도 걱정하지 말아라. 이제 알았으면 된거다.</p>
<p>중요한 것은 왜 요청 바디가 <code>raw</code>일 때 <code>text/plain</code>, <code>application/json</code>, <code>application/xml</code>등을 선택할 수 있는지를 아는 것이다.</p>
<h2 id="Content-Type-헤더">Content-Type 헤더</h2>
<p>우리가 중점적으로 알아보아야 할 것은 <code>multipart/form-data</code>, <code>x-www-form-urlencoded</code>, <code>application/json</code>이다.</p>
<h4 id="application-json">application/json</h4>
<p>대부분의 API에서 활용하는 <code>Content-Type</code> 헤더로써 <code>application/json</code>으로 페이로드와 함께 HTTP 요청을 하게 되면 서버가 <code>JSON 타입</code>으로 변환해서 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    key1: <span class="string">'foo'</span>,</span><br><span class="line">    key2: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'https://localhost:8080'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: data</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// always</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>::: tip Spring MVC<br>
스프링 컨트롤러에서 @RequestMapping과 함께 @RequestBody로 요청 페이로드를 Jackson ObjectMapper를 통해 JSON으로 받을 수 있다.<br>
:::</p>
<h4 id="x-www-form-urlencoded">x-www-form-urlencoded</h4>
<p>위에서 일반적으로 서버로 요청할 때는 <code>x-www-form-urlencoded</code>를 <code>Content-Type</code> 헤더로 명시하여 전송한다고 말했다.</p>
<p>그러면 <code>x-www-form-urlencoded</code>를 <code>Content-Type</code>으로 사용할 경우 요청 페이로드는 어떻게 구성되는지 살펴보자.</p>
<p>다음은 모질라 웹 레퍼런스 문서에서 제공하는 예시이다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: foo.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 13</span><br><span class="line"></span><br><span class="line">say=Hi&amp;to=Mom</span><br></pre></td></tr></table></figure>
<p><code>say=Hi&amp;to=Mom</code>가 위 요청에 대한 페이로드 부분이다.</p>
<p>이 페이로드는 키와 값을 =와 함께 표현하고 &amp;의 묶음으로 표현하는게 <code>x-www-form-urlencoded</code>의 데이터 구조이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    key1: <span class="string">'foo'</span>,</span><br><span class="line">    key2: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'https://localhost:8080'</span>,</span><br><span class="line">    data: data</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// always</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="스프링-MVC에서의-모델-바인딩">스프링 MVC에서의 모델 바인딩</h2>
<p>사실 이 글을 쓰는 이유는 초보 개발자 입장에서 <code>스프링 MVC</code>에서 HTTP 요청 데이터에 대하여 어떻게 <code>모델로 바인딩</code>을 하는지 알려주기 위해서이다.</p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beans-conventions" target="_blank" rel="noopener">스프링 공식 레퍼런스 : Setting and Getting Basic and Nested Properties</a>에서는 프로퍼티를 가져오거나 설정하는 것을 <code>getPropertyValue</code>와 <code>getPropertyValues</code> 그리고 <code>setPropertyValue</code>와 <code>setPropertyValues</code> 메소드로 수행한다고 설명한다.</p>
<p>그리고 자바빈 스펙에 따라 <code>오브젝트의 프로퍼티로 나타내는 규칙</code>도 같이 알려주고 있다.</p>
<h5 id="프로퍼티-예시">프로퍼티 예시</h5>
<ul>
<li>name<br>
Indicates the property name that corresponds to the getName() or isName() and setName(…) methods.</li>
<li><a href="http://account.name" target="_blank" rel="noopener">account.name</a><br>
Indicates the nested property name of the property account that corresponds to (for example) the getAccount().setName() or getAccount().getName() methods.</li>
<li>account[2]<br>
Indicates the third element of the indexed property account. Indexed properties can be of type array, list, or other naturally ordered collection.</li>
<li>account[COMPANYNAME]<br>
Indicates the value of the map entry indexed by the COMPANYNAME key of the account Map property.</li>
</ul>
<p>간단하게 살펴보면 account 클래스의 <code>name 프로퍼티</code>를 바인딩할 경우에는 <code>account.name</code>이라고 표현되어야하고 <code>account[2]</code>라고 표현되면 3번째 <code>인덱스 프로퍼티</code>로 나타내며 <code>account[COMPANYNAME]</code>이면 <code>COMPANYNAME</code>을 키로 가지는 <code>Map 프로퍼티</code>인 것이다.</p>
<h4 id="ModelAttribute">@ModelAttribute</h4>
<p>이 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args" target="_blank" rel="noopener"><code>@ModelAttribute</code></a> 어노테이션은 컨트롤러에서 리퀘스트 파라미터를 쉽게 빈 오브젝트로 바인딩하기 위해 사용한다.</p>
<p>그런데 다음과 같이 빈 오브젝트에 <code>맵 프로퍼티</code>가 존재할 경우 <code>@ModelAttribute</code>로 데이터 바인딩을 시도할 때 <code>주의</code>해야한다. 앞서 <code>x-www-form-urlencoded</code>의 데이터 구조를 살펴본 것은 바로 이 때문이다.</p>
<p>만약에 빈 오브젝트에 메타데이터로 맵 오브젝트를 담고 싶다고 가정할 때 서버로 맵 오브젝트를 보내어야하는 요구사항이 생긴다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>그런데 위 자바 빈 스펙 규칙에 따르면 맵 프로퍼티는 <code>metadata[address][location]</code>와 같이 표현되어야 한다.</p>
<p>그런데 서버로 요청되는 페이로드가 <code>metadata[address][location]=value</code>가 되어버리면 metadata 프로퍼티의 address가 배열의 인덱스인지 맵의 인덱스 키인지 <code>구별할 수 없다</code></p>
<p>결국 <a href="https://homoefficio.github.io/2017/04/25/Spring-%EA%B0%80-%ED%8F%AC%ED%95%A8%EB%90%9C-URL-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9-%ED%95%98%EA%B8%B0/" target="_blank" rel="noopener">관련 포스트</a>처럼 다음과 같은 오류가 발생할 것이다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Property referenced in indexed property path <span class="string">'metadata[address][location]'</span> is neither an array nor a List nor a Map</span><br></pre></td></tr></table></figure>
<p>그러면 요청 페이로드가 <a href="https://gist.github.com/codesnik/1433581" target="_blank" rel="noopener">.형식으로 데이터를 변환</a>되어 <code>metadata.address.location=value</code>로 전송된다면 올바르게 바인딩 할 수 있을까?</p>
<p>답은 아니다!</p>
<p>바인딩이 되지 않는다.</p>
<p>맵 프로퍼티로 바인딩하기 위해서는 person.metadata[address]이어야만 하기 때문이다.</p>
<h4 id="복잡한-페이로드라면-application-json을-사용하자">복잡한 페이로드라면 application/json을 사용하자.</h4>
<p>따라서, 복잡한 형태로 데이터가 구성되어야 한다면<code>x-www-form-urlencoded</code>가 아니라 <code>application/json</code>으로 명시하여 서버가 처리할 수 있도록 해야하는게 좋다.</p>
<p>그리고 서버 API도 복잡한 형태의 오브젝트를 페이로드로 받도록 요구된다면 애초에 <code>application/json</code>만 요청할 수 있도록 하자.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"metadata"</span>:&#123;<span class="attr">"address"</span>:&#123;<span class="attr">"location"</span>:<span class="string">"value"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>물론 스프링이 <code>BeanWrapper</code> 또는 <code>DataBinder</code>를 구현하는 것도 하나의 방법이긴 하다.</p>
<p>하지만, 모델 바인딩을 위한 코드를 API와 오브젝트별로 작성해야 하기에 배보다 배꼽이 더 커질수가 있다.</p>
<p>그리고 <code>@Valid</code>와 <code>@Validated</code>를 이용한 벨리데이션을 쉽게 적용할 수 없고 <code>Validator</code>도 추가로 직접 호출해서 오브젝트를 <code>검증</code>해야 한다.</p>
<h2 id="참조">참조</h2>
<ul>
<li><a href="https://medium.com/@mohamedraja_77/content-type-x-www-form-urlencoded-form-data-and-json-e17c15926c69" target="_blank" rel="noopener">Content Type : x-www-form-urlencoded, form-data and json</a></li>
<li><a href="https://dev.to/sidthesloth92/understanding-html-form-encoding-url-encoded-and-multipart-forms-3lpa" target="_blank" rel="noopener">Understanding HTML Form Encoding: URL Encoded and Multipart Forms</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation" target="_blank" rel="noopener">Validation, Data Binding, and Type Conversion</a></li>
<li><a href="http://1ambda.github.io/content-type-vs-accept-http-header/" target="_blank" rel="noopener">Content-Type vs Accept, HTTP Header</a></li>
<li><a href="https://gist.github.com/jays1204/703297eb0da1facdc454" target="_blank" rel="noopener">Http Method는 POST, Content-Type이 application/x-www-form-urlencoded인 경우 body를 encoding하는게 맞을까?</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>초보가 이해하는 스프링 시큐리티</title>
    <url>/spring/understanding-spring-security/</url>
    <content><![CDATA[<blockquote>
<p>본 글은 OKKY에 공유된 <a href="https://okky.kr/article/382738" target="_blank" rel="noopener">초보가 이해하는 스프링 시큐리티</a> 입니다.</p>
</blockquote>
<h2 id="들어가며">들어가며</h2>
<h2 id="스프링-시큐리티란-무엇인가">스프링 시큐리티란 무엇인가?</h2>
<p>스프링 시큐리티를 이해하기 위해서 스프링 시큐리티가 무엇인지를 알아야합니다. 스프링 시큐리티 레퍼런스에서는 자바 EE 기반의 엔터프라이즈 소프트웨어 애플리케이션을 위한 포괄적인 보안 서비스들을 제공하고 오픈 플랫폼이면서 자신만의 인증 매커니즘을 간단하게 만들 수 있다고 자랑(?)하고 있습니다.</p>
<p>하지만, 신입 개발자들 수준에서 스프링 시큐리티와 같은 보안 기술을 이해하기란 참 힘든 과정이라고 생각합니다.</p>
<blockquote>
<p>저만 이해하기 힘들 수 있어요 ㅠㅠ</p>
</blockquote>
<p>스프링 시큐리티를 이해하기 위해서는 스프링 시큐리티가 애플리케이션 보안을 구성하는 두가지 영역에 대해서 알아야 합니다. 바로 인증(Authentication)과 권한(Authorization)이라는 것입니다. 이 두 영역은 스프링 시큐리티의 목표이기 때문에 반드시 이해하고 넘어가야 합니다. <code>인증</code>은 애플리케이션의 작업을 수행할 수 있는 주체(사용자)라고 주장할 수 있는 것을 말하며 권한은 인증된 주체가 애플리케이션의 동작을 수행할 수 있도록 허락되있는지를 결정하는 것을 말합니다. 따라서, 권한 승인이 필요한 부분으로 접근하려면 인증 과정을 통해 주체가 증명 되어야만 한다는 것입니다.</p>
<p>앞서 스프링 시큐리티는 자신만의 인증 매커니즘을 간단하게 만들 수 있다고 자랑한다고 했는데요. 스프링 시큐리티는 이와 관련해서 인증 매커니즘과 관계없이 상당히 깊은 권한 부여를 제공하고 있습니다. 권한 부여에도 두가지 영역이 존재하는데 웹 요청 권한, 메소드 호출 및 도메인 인스턴스에 대한 접근 권한 부여입니다. 스프링 시큐리티는 이렇게 모든 중요한 영역에 필요한 기능을 제공하고 있습니다.</p>
<p><a href="http://zgundam.tistory.com/43" target="_blank" rel="noopener">제타건담님의 글</a>에서는 로그인 화면을 통해서 아이디와 비밀번호를 입력받아 로그인하는 과정을 인증이라고 서술하고 있습니다. 이와 관련된 용어가 바로 HTTP 기본 인증(HTTP Basic Authentication) 매커니즘이라고 할 수 있습니다. 그리고 이 HTTP 기본 인증 매커니즘을 이용하는 방식이 바로 스프링 시큐리티 레퍼런스에서 설명하는 폼 기반 로그인이 됩니다.</p>
<blockquote>
<p>아 물론, HTTP 기본 인증 == 폼 기반 로그인이라는 말은 아닙니다. 폼 양식을 통한 로그인도 username과 password를 통해 인증하기 때문에 HTTP 기본 인증 매커니즘을 이용하는 방식이라고 이해할 수 있다는 것입니다.</p>
</blockquote>
<p>실제로 <a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#basic" target="_blank" rel="noopener">스프링 시큐리티 레퍼런스 문서의 Basic and Digest Authentication</a>에서는 다음을 언급하고 있습니다.</p>
<p>Basic authentication is often used with stateless clients which pass their credentials on each request. It’s quite common to use it in combination with form-based authentication where an application is used through both a browser-based user interface and as a web-service.</p>
<blockquote>
<p>인증과 권한이라는 개념을 이해하셨다면 스프링 시큐리티에 대해서 배워보도록 하겠습니다.</p>
</blockquote>
<h3 id="스프링-시큐리티-시작하기">스프링 시큐리티 시작하기</h3>
<p>스프링 시큐리티는 메이븐이나 그래들같은 빌드도구를 통해 쉽게 가져올 수 있습니다.</p>
<h4 id="with-Maven">with Maven</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... other dependency elements ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="with-Gradle">with Gradle</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	compile <span class="string">'org.springframework.security:spring-security-web:4.2.2.RELEASE'</span></span><br><span class="line">	compile <span class="string">'org.springframework.security:spring-security-config:4.2.2.RELEASE'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>저는 메이븐 대신 그래들을 사용해봤습니다.</p>
</blockquote>
<h3 id="Java-Configuration">Java Configuration</h3>
<p>스프링 시큐리티 레퍼런스에서는 자바 기반의 설정으로 설명하고 있습니다. 그 이유는 무엇일까요?</p>
<p>스프링 프레임워크 3.1에서부터 어노테이션을 통한 자바 설정을 지원하기 때문에 스프링 시큐리티 3.2부터는 XML로 설정하지 않고도 간단하게 설정할 수 있도록 지원하기 때문입니다.</p>
<p>원래 XML 기반의 설정에서는 web.xml에 org.springframework.web.filter.DelegatingFilterProxy라는 springSecurityFilterChain을 등록하는 것으로 시작합니다만, 자바 기반의 설정에서는 WebSecurityConfigurerAdapter를 상속받은 클래스에 @EnableWebSecurity 어노테이션을 명시하는 것만으로도 springSecurityFilterChain가 자동으로 포함되어집니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>그리고 포함된 springSecurityFilterChain을 등록하기 위해서는 AbstractSecurityWebApplicationInitializer를 상속받은 WebApplicationInitializer를 만들어두면 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityWebApplicationInitializer</span></span></span><br><span class="line"><span class="class">	<span class="keyword">extends</span> <span class="title">AbstractSecurityWebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>XML을 작성하는 것보다는 자바 기반의 구성이 더욱 쉽습니다.</p>
</blockquote>
<p>그 다음에는 보통 스프링 MVC를 이용해서 애플리케이션을 구성하기 때문에 ApplicationIniticalizer에 WebSecurityConfigurerAdapter를 상속받은 클래스를 getRootConfigClasses() 메소드에 추가하는 것으로 스프링 시큐리티에 대한 기본적인 적용은 끝입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationInitializer</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">		<span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Class[] &#123; WebSecurityConfig<span class="class">.<span class="keyword">class</span> &#125;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ... other overrides ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>이로써 유추 해볼때, springSecurityFilterChain은 루트 컨텍스트에서 등록되어야하는 것을 알 수 있겠습니다. 각 필터에 대한 우선순위에 대해서도 추가적으로 알 필요성이 생기는 부분입니다.</p>
</blockquote>
<h4 id="HttpSecurity">HttpSecurity</h4>
<p>그리고나서 configure(HttpSecurity http) 메소드를 통해서 우리만의 인증 매커니즘을 구성해야합니다. 그런데 아직까지는 어떻게 구성해야할지 막막하기만 합니다. 관련된 정보를 좀더 찾아보도록 하겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	http.httpBasic()</span><br><span class="line">		.and()</span><br><span class="line">		.authorizeRequests()</span><br><span class="line">			.antMatchers(<span class="string">"/users/&#123;userId&#125;"</span>).access(<span class="string">"@authenticationCheckHandler.checkUserId(authentication,#userId)"</span>)</span><br><span class="line">			.antMatchers(<span class="string">"/admin/db/**"</span>).access(<span class="string">"hasRole('ADMIN_MASTER') or hasRole('ADMIN') and hasRole('DBA')"</span>)</span><br><span class="line">			.antMatchers(<span class="string">"/register/**"</span>).hasRole(<span class="string">"ANONYMOUS"</span>)</span><br><span class="line">		.and()</span><br><span class="line">		.formLogin()</span><br><span class="line">			.loginPage(<span class="string">"/login"</span>)</span><br><span class="line">			.usernameParameter(<span class="string">"email"</span>)</span><br><span class="line">			.passwordParameter(<span class="string">"password"</span>)</span><br><span class="line">			.successHandler(successHandler())</span><br><span class="line">			.failureHandler(failureHandler())</span><br><span class="line">			.permitAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>뭐 사실상 별게 없습니다. HttpSecurity의 인스턴스를 통해 자신만의 인증 매커니즘을 만들 수 있는 것이라고 보면 됩니다. 대부분의 설정은 여기를 통하게 되니까요 .authorizeRequests()를 통해 요청에 대한 권한을 지정할 수 있게 되는 것 같습니다. 그리고 기본적인 형태의 <code>.anyRequest().authenticated()</code>라는 의미는 어떠한 요청이든지 인증되어야한다는 것이겟죠? .formLogin()은 폼을 통한 로그인을 이용한다는 의미이며, .loginPage(&quot;/login&quot;)을 통해 로그인 페이지는 /login 경로로 제공하며 /login의 POST 요청이 바로 로그인 처리 과정이라는 것입니다.</p>
<p>확장된 형태에서의 .antMatchers().hasRole() 또는 .antMatchers().access()는 해당 경로에 대해서 어떠한 권한을 가져야만 접근할 수 있는가를 표현하는 것입니다. 다음은 antMatchers() 다음으로 지정할 수 있는 항목들입니다.</p>
<ul>
<li>anonymous()<br>
인증되지 않은 사용자가 접근할 수 있습니다.</li>
<li>authenticated()<br>
인증된 사용자만 접근할 수 있습니다.</li>
<li>fullyAuthenticated()<br>
완전히 인증된 사용자만 접근할 수 있습니다(?)</li>
<li>hasRole() or hasAnyRole()<br>
특정 권한을 가지는 사용자만 접근할 수 있습니다.</li>
<li>hasAuthority() or hasAnyAuthority()<br>
특정 권한을 가지는 사용자만 접근할 수 있습니다.</li>
<li>hasIpAddress()<br>
특정 아이피 주소를 가지는 사용자만 접근할 수 있습니다.</li>
<li>access()<br>
SpEL 표현식에 의한 결과에 따라 접근할 수 있습니다.</li>
<li>not()<br>
접근 제한 기능을 해제합니다.</li>
<li>permitAll() or denyAll()<br>
접근을 전부 허용하거나 제한합니다.</li>
<li>rememberMe()<br>
리멤버 기능을 통해 로그인한 사용자만 접근할 수 있습니다.</li>
</ul>
<blockquote>
<p>Role은 역할이고 Authority는 권한이지만 사실은 표현의 차이입니다. Role은 &quot;ADMIN&quot;으로 표현하고 Authority는 &quot;ROLE_ADMIN&quot;으로 표기하는 것 뿐입니다. 실제로 hasRole()에 ROLE_ADMIN으로 표기하면 ROLE을 지우라는 에러를 볼수 있게 됩니다.</p>
</blockquote>
<blockquote>
<p>스프링 시큐리티 태그 라이브러리 또한 SpEL 표현식을 사용할 수 있습니다. &lt;sec:authentication /&gt; 이렇게 말입니다.</p>
</blockquote>
<h4 id="AuthenticationManagerBuilder">AuthenticationManagerBuilder</h4>
<p>AuthenticationManagerBuilder를 통해 인증 객체를 만들 수 있도록 제공하고 있습니다. 아래는 스프링 시큐리티 레퍼런스에서 알려주는 방식인데 AuthenticationManagerBuilder를 메소드를 통해 주입받아 처리하는 방식입니다. WebSecurityConfigurerAdapter의 configure(AuthenticationManagerBuilder auth)를 오버라이딩하는 것에 대한 차이는 없습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	auth.inMemoryAuthentication().withUser(<span class="string">"scott"</span>).password(<span class="string">"tiger"</span>).roles(<span class="string">"ROLE_USER"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	auth.inMemoryAuthentication().withUser(<span class="string">"admin"</span>).password(<span class="string">"admin"</span>).roles(<span class="string">"ADMIN"</span>, <span class="string">"DBA"</span>);</span><br><span class="line">	auth.inMemoryAuthentication().withUser(<span class="string">"scott"</span>).password(<span class="string">"tiger"</span>).roles(<span class="string">"USER"</span>, <span class="string">"SETTING"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>원하는 방식을 사용하면 됩니다. 하지만, 스프링 시큐리티 레퍼런스와 샘플을 만든 개발자가 왜 첫번째 방식으로 설명하는지에 대한 의미를 생각해봅시다.</p>
<blockquote>
<p>아시는 분이 있다면 알려주시면 감사하겠습니다.</p>
</blockquote>
<h3 id="스프링-시큐리티-속으로-들어가기">스프링 시큐리티 속으로 들어가기</h3>
<p>지금까지 했던 설정들은 아주 기본적인 형태들이기 때문에 실제로 우리만의 인증 매커니즘으로 커스터마이징을 한 뒤 스프링 시큐리티에서 제공하는 부가적인 기능을 추가해야합니다.</p>
<h4 id="Method-Security">Method Security</h4>
<p>스프링 시큐리티 2.0 에서부터 서비스 계층의 메소드에 보안을 추가할 수 있도록 지원합니다. @Secured 어노테이션 뿐만 아니라 JSR-250 어노테이션도 지원하도록 제공됩니다. 스프링 시큐리티 3.0에서는 표현 기반의 어노테이션을 사용할 수 있게 됩니다.</p>
<p>우리는 Configuration 클래스에 @EnableGlobalMethodSecurity를 적용함으로써 어노테이션 기반의 보안을 활성화시킬 수 있습니다. 예를 들어, 스프링 시큐리티의 @Secured 어노테이션을 활성화시키려면 다음과 같이 구성하게 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>그리고나서 클래스 또는 인터페이스의 메소드에 @Secured 어노테이션을 추가하면 그에 따른 해당 메소드에 대한 액세스가 제한됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Secured</span>(<span class="string">"IS_AUTHENTICATED_ANONYMOUSLY"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">readAccount</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Secured</span>(<span class="string">"IS_AUTHENTICATED_ANONYMOUSLY"</span>)</span><br><span class="line"><span class="keyword">public</span> Account[] findAccounts();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Secured</span>(<span class="string">"ROLE_TELLER"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">post</span><span class="params">(Account account, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>역할 단위로 제약조건을 지정할 수 있음을 알 수 있습니다.</p>
</blockquote>
<p>스프링 시큐리티 3.0부터 지원하는 표현식 기반의 문법을 사용하기 위해서는 다음과 같이 구성합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodSecurityConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"isAnonymous()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">readAccount</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"isAnonymous()"</span>)</span><br><span class="line"><span class="keyword">public</span> Account[] findAccounts();</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasAuthority('ROLE_TELLER')"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">post</span><span class="params">(Account account, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Remember-Me">Remember-Me</h4>
<p>리멤버-미 기능은 도대체 무엇일까요? 구글에 what is remember me 라는 키워드로 검색을 해보았습니다.</p>
<ul>
<li><a href="https://www.formsite.com/faq/general/What-does-Remember-Me-mean-on-the-Login-page.html" target="_blank" rel="noopener">What-does-Remember-Me-mean-on-the-Login-page</a></li>
<li><a href="http://help.thunderbird.edu/portal-login/remember-me" target="_blank" rel="noopener">What is “Remember Me” ?</a></li>
</ul>
<p>단순히 아이디를 기억해놓는 것이 아니라 로그인 정보를 유지하는 것을 말합니다.</p>
<p>Do NOT use “Remember Me” on any public computer, on campus, in Internet cafe’s, or anywhere else where you cannot control access!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	http.rememberMe().rememberMeParameter(<span class="string">"remember-me"</span>).key(REMEMBER_ME_KEY).rememberMeServices(persistentTokenBasedRememberMeServices());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersistentTokenBasedRememberMeServices <span class="title">persistentTokenBasedRememberMeServices</span><span class="params">()</span></span>&#123;</span><br><span class="line">	PersistentTokenBasedRememberMeServices persistentTokenBasedRememberMeServices =</span><br><span class="line">			<span class="keyword">new</span> PersistentTokenBasedRememberMeServices(REMEMBER_ME_KEY, userDetailsService, persistentTokenRepository());</span><br><span class="line">	<span class="keyword">return</span> persistentTokenBasedRememberMeServices;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">	TokenRepositoryImpl tokenRepositoryImpl = <span class="keyword">new</span> TokenRepositoryImpl();</span><br><span class="line">	<span class="keyword">return</span> tokenRepositoryImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>저는 영속성 기반의 리멤버-미 기능을 추가하였습니다. 이때, 리멤버-미 토큰을 저장할 수 있도록 TokenRepository 인터페이스를 구현해야하는데요. 일종의 서비스 객체라고 생각하시면 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenRepositoryImpl</span>  <span class="keyword">implements</span> <span class="title">PersistentTokenRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TokenRepository tokenRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNewToken</span><span class="params">(PersistentRememberMeToken token)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Token newToken = <span class="keyword">new</span> Token();</span><br><span class="line">		newToken.setEmail(token.getUsername());</span><br><span class="line">		newToken.setToken(token.getTokenValue());</span><br><span class="line">		newToken.setLast_used(token.getDate());</span><br><span class="line">		newToken.setSeries(token.getSeries());</span><br><span class="line">		tokenRepository.save(newToken);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateToken</span><span class="params">(String series, String tokenValue, Date lastUsed)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		Token updateToken = tokenRepository.findOne(series);</span><br><span class="line">		updateToken.setToken(tokenValue);</span><br><span class="line">		updateToken.setLast_used(lastUsed);</span><br><span class="line">		updateToken.setSeries(series);</span><br><span class="line">		tokenRepository.save(updateToken);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> PersistentRememberMeToken <span class="title">getTokenForSeries</span><span class="params">(String series)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Token token = tokenRepository.findOne(series);</span><br><span class="line">		PersistentRememberMeToken persistentRememberMeToken = <span class="keyword">new</span> PersistentRememberMeToken(token.getEmail(), series, token.getToken(), token.getLast_used());</span><br><span class="line">		<span class="keyword">return</span> persistentRememberMeToken;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUserTokens</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		tokenRepository.deleteByEmail(username);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>본 애플리케이션에서의 Email은 유니크한 속성을 가집니다.</code></p>
<h4 id="Password-Encoding">Password Encoding</h4>
<p>AuthenticationManagerBuilder.userDetailsService().passwordEncoder()를 통해 패스워드 암호화에 사용될 PasswordEncoder 구현체를 지정할 수 있습니다. PasswordEncoder 인터페이스는 다음과 같이 구성되어 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or</span></span><br><span class="line"><span class="comment">	 * greater hash combined with an 8-byte or greater randomly generated salt.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Verify the encoded password obtained from storage matches the submitted raw</span></span><br><span class="line"><span class="comment">	 * password after it too is encoded. Returns true if the passwords match, false if</span></span><br><span class="line"><span class="comment">	 * they do not. The stored password itself is never decoded.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> rawPassword the raw password to encode and match</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> encodedPassword the encoded password from storage to compare with</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if the raw password, after encoding, matches the encoded password from</span></span><br><span class="line"><span class="comment">	 * storage</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>단순히 인코딩하는 함수와 평문으로 제공되는 패스워드와 인코딩되어있는 패스워드(예를들어, 데이터베이스에 인코딩되어 저장되어 있는 패스워드)를 비교할 수 있습니다.</p>
</blockquote>
<p>저는 PasswordEncoder 구현체인 BCryptPasswordEncoder를 지정했습니다. 당연히 직접 구현체를 만들어서 적용해도 됩니다! (아무래도 직접 만들어서 사용하는 것이 더 좋겟죠?)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PasswordEncoder를 빈으로 등록해두면 다음과 같이 저장된 패스워드를 비교할 수 있습니다. 저장된 패스워드는 PasswordEncoder에 의해 암호화된 평문이기 때문입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users/&#123;userId&#125;"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"#updateUser.email == authentication.name"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Long id, @ModelAttribute @Valid UserDTO.Update updateUser, Model model)</span>&#123;</span><br><span class="line">	User currentUser = userService.findOne(id);</span><br><span class="line">	<span class="keyword">if</span>(!passwordEncoder.matches(updateUser.getPassword(), currentUser.getPassword()))&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not password equals..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="WebSecurity-Ignoring">WebSecurity Ignoring</h4>
<p>스프링 시큐리티 레퍼런스와는 달리 리소스와 관련해서는 <code>WebSecurity.ignoring()</code>를 이용해서 보안이 적용되지 않도록 할 수 있도록 지원합니다. 스프링 시큐리티 API 문서에서 확인할 수 있는데 레퍼런스에 설명이 없다는 것이 좀 아쉬운 부분입니다.</p>
<p><code>음... permitAll과 ignoring의 차이가 있는가를 아시는분은 댓글 남겨주시기 바랍니다 ㅠㅠ</code></p>
<h4 id="Localization">Localization</h4>
<p>스프링 시큐리티는 메시지에 대한 현지화를 지원합니다. 메시지 소스 관련 프로퍼티 파일들은 spring-security-core.jar에 포함 되어져있습니다.</p>
<p>우리는 메시지 프로퍼티 파일들을 메시지소스로 등록하면 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">		messageSource.addBasenames(<span class="string">"security/messages"</span>);</span><br><span class="line">		messageSource.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		<span class="keyword">return</span> messageSource;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">		LocaleChangeInterceptor localeChangeInterceptor = <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">		localeChangeInterceptor.setParamName(<span class="string">"lang"</span>);</span><br><span class="line">		<span class="keyword">return</span> localeChangeInterceptor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		SessionLocaleResolver localeResolver = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">		localeResolver.setDefaultLocale(Locale.KOREAN);</span><br><span class="line">		<span class="keyword">return</span> localeResolver;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>메시지 프로퍼티 파일들은 src/main/resource/security 폴더에 위치하고 있습니다.</p>
</blockquote>
<h4 id="AuthenticationSuccessHandler-AuthenticationFailureHandler">AuthenticationSuccessHandler &amp; AuthenticationFailureHandler</h4>
<p>OKKY의 질문게시판에서 로그인 실패를 어떻게 체크하는가에 대해서 질문하는 글을 보았습니다. 저는 스프링 시큐리티에서 사용하는 AuthenticationFailureHandler 구현체를 상속받아서 처리하도록 하겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationSuccessHandlerImpl</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span>  </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AuthenticationSuccessHandlerImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">			Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		logger.info(<span class="string">"Login Success... - &#123;&#125;"</span>, authentication.getPrincipal());</span><br><span class="line">		response.sendRedirect(<span class="string">"/?login"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AuthenticationSuccessHandler 구현체에서는 로그인을 성공했을때 호출(인증 객체가 생성되어진 후)되기 때문에 Authentication 인스턴스 파라미터를 이용할 수 있습니다. authentication.getPrincipal()을 호출하게 되면 저 같은 경우에는 org.springframework.security.core.userdetails.User 가 아닌 com.kdev.app.security.userdetails.UserDetails를 이용할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFailureHandlerImpl</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AuthenticationFailureHandlerImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AuthenticationFailureHandlerImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.setDefaultFailureUrl(<span class="string">"/login?error"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">			AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		logger.info(<span class="string">"Login Failed... - &#123;&#125;"</span>,request.getParameter(<span class="string">"email"</span>));</span><br><span class="line">		<span class="keyword">super</span>.onAuthenticationFailure(request, response, exception);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>로그인 실패 시 SimpleUrlAuthenticationFailureHandler의 defaultFailureUrl를 지정하면 SPRING_SECURITY_LAST_EXCEPTION에 대한 정보를 가지면서 해당 경로로 이동하게 됩니다.</p>
<p>AuthenticationException으로 로그인 실패의 이유도 체크할 수 있게 되죠</p>
<h3 id="스프링-시큐리티-페이지">스프링 시큐리티 페이지</h3>
<p>스프링 시큐리티에서 제공해주는 기본 로그인 페이지 대신에 우리만의 로그인 페이지를 만들어보도록 하겠습니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/security/tags"</span> <span class="attr">prefix</span>=<span class="string">"sec"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		&lt;meta id="_csrf" name="_csrf" content="$&#123;_csrf.token&#125;" /&gt;</span></span><br><span class="line"><span class="comment">		&lt;meta id="_csrf_header" name="_csrf_header" content="$&#123;_csrf.headerName&#125;" /&gt;</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">sec:csrfMetaTags</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security + JPA<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Page <span class="tag">&lt;<span class="name">small</span>&gt;</span>with Bootstrap<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/login"</span>&gt;</span></span><br><span class="line">		&lt;%-- &lt;input type="hidden" name="$&#123;_csrf.parameterName&#125;" value="$&#123;_csrf.token&#125;"/&gt; --%&gt;</span><br><span class="line">		  <span class="tag">&lt;<span class="name">sec:csrfInput</span> /&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>이메일<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>비밀번호<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span> &gt;</span> Remember me</span><br><span class="line">		    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;not empty SPRING_SECURITY_LAST_EXCEPTION&#125;"</span>&gt;</span></span><br><span class="line">		  		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;SPRING_SECURITY_LAST_EXCEPTION.message&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		  		<span class="tag">&lt;<span class="name">c:remove</span> <span class="attr">var</span>=<span class="string">"SPRING_SECURITY_LAST_EXCEPTION"</span> <span class="attr">scope</span>=<span class="string">"session"</span>/&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>로그인<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"/register"</span>&gt;</span>회원가입<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">   &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">   &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>SPRING_SECURITY_LAST_EXCEPTION</code>의 존재 여부에 따라서 스프링 시큐리티에서 발생하는 예외에 대한 메시지를 출력할 수 있습니다.</p>
<blockquote>
<p>스프링 시큐리티 레퍼런스에서는 단순히 파라미터의 존재여부에 따라서 출력형태를 지정하고 있습니다. 이 부분도 참 아쉽습니다.</p>
</blockquote>
<h3 id="UserDetails-UserDetailsService">UserDetails &amp; UserDetailsService</h3>
<p>아 죄송합니다. UserDetails 인터페이스에 대해서 설명을 안했네요 ㅠㅠ</p>
<p>스프링 시큐리티는 사용자 정보를 UserDetails 구현체로 사용합니다. 그래서 스프링 시큐리티는 org.springframework.security.core.userdetails.User라는 클래스를 제공합니다. 그러나, 이름과 패스워드 그리고 권한들에 대한 필드만 존재하기 때문에 이메일 정보 또는 프로필 이미지 경로 등과 같은 부가적인 정보를 담을 수 없습니다.</p>
<p>따라서, UserDetails 구현체를 직접 만들어야 합니다. org.springframework.security.core.userdetails.User 자체도 UserDetails 구현체이기 때문에 이를 상속받아서 구현해도 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">security</span>.<span class="title">core</span>.<span class="title">userdetails</span>.<span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4855890427225819382L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String nickname;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	<span class="keyword">private</span> Date createdAt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDetails</span><span class="params">(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(username, password, authorities);</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDetails</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(user.getEmail(), user.getPassword(), user.isAccountNonExpired(), user.isAccountNonLocked(), user.isCredentialsNonExpired(), user.isEnabled(), authorities(user));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.id = user.getId();</span><br><span class="line">		<span class="keyword">this</span>.nickname = user.getNickname();</span><br><span class="line">		<span class="keyword">this</span>.email = user.getEmail();</span><br><span class="line">		<span class="keyword">this</span>.createdAt = user.getCreatedAt();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> nickname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> createdAt;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedAt</span><span class="params">(Date createdAt)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.createdAt = createdAt;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Collection&lt;? extends GrantedAuthority&gt; authorities(User user) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</span><br><span class="line">		user.getAuthorities().forEach(a -&gt; &#123;</span><br><span class="line">			authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(a.getAuthority()));</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> authorities;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDetails</span><span class="params">(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities,</span></span></span><br><span class="line"><span class="function"><span class="params">			String nickname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(username, password, authorities);</span><br><span class="line">		<span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">		<span class="keyword">this</span>.email = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserDetails</span><span class="params">(String username, String password, <span class="keyword">boolean</span> enabled, <span class="keyword">boolean</span> accountNonExpired,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">boolean</span> credentialsNonExpired, <span class="keyword">boolean</span> accountNonLocked,</span></span></span><br><span class="line"><span class="function"><span class="params">			Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(username, password, authorities);</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>그러면 우리는 Authentication.getPrincipal() 메소드를 통해 얻은 Principal 객체를 통해서도 부가적인 필드에 접근할 수 있습니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sec:authentication</span> <span class="attr">property</span>=<span class="string">"principal.email"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>org.springframework.security.core.userdetails.UserDetailsService 구현체는 스프링 시큐리티 인증 시에 사용됩니다. UserRepository를 통해 영속성으로 저장된 인증정보를 검색한 후 존재하지 않다면 UsernameNotFoundException을 던지고 있다면 UserDetails 객체를 반환합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsService</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">security</span>.<span class="title">core</span>.<span class="title">userdetails</span>.<span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String email)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		User user = userRepository.findByEmail(email);</span><br><span class="line">		<span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(email);</span><br><span class="line">		&#125;</span><br><span class="line">		com.kdev.app.security.userdetails.UserDetails userDetails = <span class="keyword">new</span> com.kdev.app.security.userdetails.UserDetails(user);</span><br><span class="line">		<span class="keyword">return</span> userDetails;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>그런데 좀 이상하다고 느껴집니다. 그러면 패스워드 검증은 언제하는것일까요? 바로 AuthenticationProvider 구현체에서 진행하게 됩니다. AuthenticationProvider 구현체에서는 authenticate() 메소드를 통해서 Authentication 객체(UsernamePasswordAuthentication)를 반환합니다. 즉, 반환하기 직전에 패스워드를 검증하는 것입니다.</p>
<p>우리는 AuthenticationProvider를 직접적으로 구현하지 않았으니까 이 부분에 대해서 모르고 넘어갈 뻔 했습니다.</p>
<p><a href="http://syaku.tistory.com/286" target="_blank" rel="noopener">샤쿠님의 스프링 시큐리티 커스텀 로그인</a>이라는 글에서 직접 AuthenticationProvider를 구현해서 사용하는 것을 확인할 수 있습니다.</p>
<h2 id="끝마치며">끝마치며</h2>
<p>우리가 알아본 것 이외에도 스프링 시큐리티가 제공하는 기능들이 더 존재합니다. 예를 들어, 웹소켓, RESTful API등에도 보안을 적용할 수 있습니다.</p>
<p>공부하면서 알게된 부분인데, 스프링 프레임워크에서 제공하는 인-메모리 기반 인증 객체(inMemoryAuthentication())는 파라미터로 제공되는 UserDetails의 정보를 활용하여 User 객체를 생성하기 때문에 UserDetails의 구현체를 만든다 하더라도 의미가 없게 됩니다. 만약, 인 메모리 방식과 영속성 방식을 혼용해서 사용하고 싶다면 이 부분에 대해서 연구해볼 필요가 있겠습니다.</p>
<p>다음은 스프링 시큐리티에 대해서 알아볼 때 좋은 포스트 및 동영상들입니다.</p>
<ul>
<li><a href="http://syaku.tistory.com/278" target="_blank" rel="noopener">샤쿠님의 스프링 시큐리티 커스텀 로그인</a></li>
<li><a href="http://zgundam.tistory.com/43" target="_blank" rel="noopener">제타건담님의 스프링 시큐리티</a></li>
<li><a href="https://www.youtube.com/watch?v=C0BQplG7Epo&amp;list=PLvudjKUrAA6bLu1CvgSPEKLhlIEIAJXjm" target="_blank" rel="noopener">아라한사님의 스프링 시큐리티 따라해보기</a></li>
<li><a href="https://www.youtube.com/watch?v=AiDjJzMXWmM" target="_blank" rel="noopener">백기선님의 스프링 시큐리티</a></li>
<li><a href="http://hamait.tistory.com/325" target="_blank" rel="noopener">하마님의 스프링 시큐리티</a></li>
</ul>
<blockquote>
<p>아는게 없으니 쉽게 이해하지 못하는 부분이 많습니다. 많은 신입 개발자들을 응원합니다 ^ㅡ^</p>
</blockquote>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx를 이용한 스프링 부트 애플리케이션 프록시</title>
    <url>/spring/using-nginx-proxy-for-spring-boot-application/</url>
    <content><![CDATA[<p>리눅스에서 80이나 443같은 잘알려진 포트들은 루트 사용자 권한이 있어야 사용할 수 있다. 만약, 스프링 부트 애플리케이션의 내장 톰캣이 이러한 포트를 사용하고 싶다면 실행시 sudo 명령이 포함되어야 한다.</p>
<p>하지만, 루트 사용자 권한을 부여하는 것보다는 <code>iptables</code>를 이용한 포트포워딩이나 <code>Proxy</code> 서버를 두는 것이 더 좋다.</p>
<h2 id="목표">목표</h2>
<ol>
<li>웹서버(Nginx) 구동</li>
<li>SSL 인증서 생성</li>
<li>Nginx SSL 설정</li>
<li>Nginx Proxy 설정</li>
</ol>
<h3 id="1-Nginx">1. Nginx</h3>
<p>Redirect HTTP requests to HTTPS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br><span class="line"><span class="comment"># /etc/nginx/config.d/default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-SSL-Certificate">2. SSL Certificate</h3>
<p>자체 인증서 발급 예제 참고</p>
<ul>
<li><a href="https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%9E%90%EC%B2%B4%EC%84%9C%EB%AA%85_SSL_%EC%9D%B8%EC%A6%9D%EC%84%9C_%EC%83%9D%EC%84%B1" target="_blank" rel="noopener">리눅스 자체서명 SSL 인증서 생성</a></li>
<li><a href="https://www.securesign.kr/guides/SSL-Certificate-Convert-Format" target="_blank" rel="noopener">Convert Certificate Format</a></li>
<li><a href="https://cinhtau.net/2016/08/09/convert-private-ssl-key-from-jks-to-pem-format/" target="_blank" rel="noopener">CONVERT PRIVATE SSL KEY FROM JKS TO PEM FORMAT</a></li>
</ul>
<h3 id="3-Nginx-SSL-Config">3. Nginx SSL Config</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/config.d/default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443    ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"> </span><br><span class="line">    ssl_certificate         /etc/nginx/cert/ca.pem;</span><br><span class="line">    ssl_certificate_key     /etc/nginx/cert/ca-private.key;</span><br><span class="line">    ssl_protocols           TLSv1 TSLv1.1 TLSv1.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-Nginx-Proxy-Config">4. Nginx Proxy Config</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443     ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass         https://127.0.0.1:8080;</span><br><span class="line"> </span><br><span class="line">        proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="comment">#sudo systemctl restart nginx</span></span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://bjornjohansen.no/redirect-to-https-with-nginx" target="_blank" rel="noopener">Redirect all HTTP requests to HTTPS with Nginx</a></li>
<li><a href="https://medium.com/@codebyamir/using-apache-as-a-reverse-proxy-for-spring-boot-embedded-tomcat-f704da73e7c8" target="_blank" rel="noopener">Using Apache as a Reverse Proxy for Spring Boot Embedded Tomcat</a></li>
</ul>
]]></content>
      <categories>
        <category>스프링</category>
        <category>프록시</category>
      </categories>
  </entry>
  <entry>
    <title>스프링 부트 애플리케이션과 VueJS 통합하기</title>
    <url>/vuejs/spring-boot-application-with-vuejs/</url>
    <content><![CDATA[<h2 id="스프링-부트-애플리케이션과-VueJS-통합하기">스프링 부트 애플리케이션과 VueJS 통합하기</h2>
<p>본 프로젝트는 스프링 부트 애플리케이션과 Webpack과 같은 번들러와 함께 개발할 경우에 어떻게 수시로 번들링되는 파일을 스프링 부트 애플리케이션에서 배포할 수 있는지를 알아보는 예제입니다.</p>
<h3 id="스프링-애플리케이션의-배포">스프링 애플리케이션의 배포</h3>
<p>먼저, 스프링 애플리케이션이 어떻게 정적 파일을 배포하는지를 이해해야 합니다. 스프링 애플리케이션은 톰캣과 같은 WAS와 함께 동작합니다. 클래스패스에 있는 정적 파일을 빌드 과정에서 포함되어 톰캣이 정적 파일로 배포할 수 있습니다.</p>
<blockquote>
<p>현재 프로젝트 경로에 존재하는 파일이 톰캣이 배포할 수 있는 파일과 다를 수 있다는 말입니다. 이해하셨나요?</p>
</blockquote>
<h4 id="Update-clasess-and-resources">Update clasess and resources</h4>
<p>첫번째 방법은 스프링 부트 애플리케이션에 포함된 내장 톰캣이 배포하는 정적 파일을 갱신하는 것입니다.</p>
<p><img data-src="/spring/images/configuration-update-classes-and-resources.PNG" alt=""></p>
<p>Webpack에서 만드는 번들링 파일을 현재 프로젝트의 클래스패스에 생성되게 하면 됩니다. 그러면 현재 클래스패스의 리소스가 변경되었다고 감지하여 애플리케이션을 업데이트하게 됩니다.</p>
<p>그런데 단점이 있습니다. 클래스패스의 리소스가 변경되는 것을 감지하고 다시 리소스를 업데이트하기 까지의 시간이 걸립니다.</p>
<h3 id="Webpack-프록시-서버">Webpack 프록시 서버</h3>
<p>톰캣이 배포하는 리소스를 변경하는 것은 하나의 방법이지만 수시로 번들링되는 것을 빠른 시간안에 적용하여 확인하는 것에는 어려움이 있습니다. 그래서 다른 방법으로 이 번들링되는 파일들을 대신 처리하여 주는 프록시 서버를 만드는 것입니다.</p>
<p>프록시 서버를 구성하는 방법은 두가지가 있습니다.</p>
<ul>
<li>webpack + express + <a href="https://github.com/webpack/webpack-dev-middleware" target="_blank" rel="noopener">webpack-dev-middleware</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a></li>
</ul>
<p>하나는 Express 노드 서버를 구성하고 <code>webpack-dev-middleware</code>를 적용하는 것입니다.</p>
<p>두번째는 webpack 그룹이 제공하는 <code>webpack-dev-server</code>를 이용하는 것입니다.</p>
<blockquote>
<p>어느 방법이든지 상관 없습니다. 행위는 똑같으니까요</p>
</blockquote>
<h4 id="webpack-dev-server">webpack-dev-server</h4>
<p>저는 기존에 사용하던 express 서버가 없으므로 간단하게 webpack-dev-server를 활용합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>webpack-dev-server 모듈을 설치하고 Webpack의 devServer 설정을 구성합니다.</p>
<blockquote>
<p>webpack-dev-server가 webpack.config.js의 devServer 설정에 따라 실행됩니다.</p>
</blockquote>
<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'src/main/resources/dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        contentBase: path.resolve(__dirname, <span class="string">'src/main/resources/dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        host:  <span class="string">'localhost'</span>,</span><br><span class="line">        port: <span class="number">8081</span>,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'**'</span>: <span class="string">'http://localhost:8080/'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>기본 번들링 파일이 생성되는 위치는 <code>src/main/resources/dist</code>로 빌드시에도 번들링된 파일을 배포할 수 있도록 하였으며 <code>webpack-dev-server</code>는 <code>src/main/resources/dist</code>에 있는 정적 파일들을 <code>/dist/</code>를 기준으로 배포하게 합니다.</p>
<p>그리고 모든 경로에 대하여 애플리케이션 실행 주소를 바라보게 <code>proxy</code> 설정을 합니다.</p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"webpack"</span>: <span class="string">"webpack --config webpack.config.js"</span>,</span><br><span class="line">        <span class="attr">"dev"</span>: <span class="string">"webpack -d --config webpack.config.js --watch"</span>,</span><br><span class="line">        <span class="attr">"dev:server"</span>: <span class="string">"webpack-dev-server"</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack-dev-server를 구동할 수 있도록 NPM 스크립트를 만들고 실행합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev:server</span><br><span class="line"></span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">i ｢wds｣: Project is running at http://localhost:8081/</span><br><span class="line">i ｢wds｣: webpack output is served from /dist/</span><br><span class="line">i ｢wds｣: Content not from webpack is served from C:\Users\K\git\spring-demo-vuejs\src\main\resources\dist</span><br></pre></td></tr></table></figure>
<h4 id="프록시-서버를-통해-개발하기">프록시 서버를 통해 개발하기</h4>
<p>프록시 서버도 구동되었으니 브라우저에서 <code>8081</code> 포트로 접근하여 개발하면 됩니다.</p>
<p>네트워크 탭으로 확인해보면 프록시 서버가 <code>/dist/</code> 경로를 기준으로 번들링된 파일을 제공하는 것을 확인할 수 있습니다.</p>
<p><img data-src="/vuejs/images/webpack-dev-server-network.PNG" alt=""></p>
<h3 id="초기-데이터-적재">초기 데이터 적재</h3>
<p>많은 분들이 궁금해하시는 부분일 것 같습니다. 애석하게도 번들링되는 파일에 애플리케이션의 데이터를 적재하는 것은 불가능 합니다. 그래서 번들링되는 스크립트에서 데이터를 불러올 수 있도록 몇가지 방법을 고려해봐야합니다.</p>
<h4 id="Object-defineProperty-그리고-freeze">Object.defineProperty 그리고 freeze</h4>
<p>첫번째 방법은 스프링 애플리케이션이 제공하는 <code>.html</code> 파일에 스크립트 블록을 만들어 변경되지 않는 오브젝트를 만드는 것입니다.</p>
<ul>
<li>Object.defineProperty : 오브젝트의 새로운 속성을 정의합니다.</li>
<li>Object.freeze : 오브젝트를 변경되지 않도록 동결시킵니다.</li>
</ul>
<p>다음은 위 정적 함수들을 사용하여 변경되지 않는 데이터 속성을 만드는 예제입니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'state'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        enumerable: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        configurable: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        writable: <span class="literal">false</span>,</span></span><br><span class="line">        value: &#123;</span><br><span class="line"><span class="actionscript">            id: <span class="string">"$&#123;state.id&#125;"</span>,</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">"$&#123;state.name&#125;"</span>,</span></span><br><span class="line"><span class="actionscript">            origin: <span class="string">"$&#123;state.origin&#125;"</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// ,$&#123;_csrf.parameterName&#125;: "$&#123;_csrf.token&#125;"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.freeze(<span class="built_in">window</span>.state);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>state</code>는 애플리케이션이 제공하는 모델 속성입니다.</p>
<blockquote>
<p>본 예제에서는 프리마커 템플릿 엔진을 사용하고 있습니다.</p>
</blockquote>
<h4 id="초기-데이터-API-호출">초기 데이터 API 호출</h4>
<p>두번째는 스크립트 파일 로드시 초기 데이터를 받아오는 API를 호출하는 방법입니다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getState()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            state: <span class="built_in">window</span>.state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getState() &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">state</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> response = <span class="keyword">await</span> $http.get(<span class="string">'/api/state'</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            state().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.state = res.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="끝마치며">끝마치며</h2>
<p>제가 설명하는 방법이 올바른 것은 아닙니다. 다만, 이런 방법이 있다는 것을 알고 도입을 고려하시기 바랍니다. 또한, 어떠한 경우든 사용자의 개인정보와 같은 보호가 필요한 데이터는 초기 데이터로 적재하지 않도록 하시기 바랍니다.</p>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate와 WebClient로 Open API를 사용하는 방법 비교하기</title>
    <url>/spring/compare-how-to-use-open-api-using-rest-template-and-web-client/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>공공데이터포털에서 제공하는 <a href="https://www.data.go.kr/dataset/3043723/openapi.do" target="_blank" rel="noopener">한국전력거래소 계통운영 정보</a>와 같은 Open API를 RestTemplate(블로킹 클라이언트)와 WebClient(리액티브 논-블로킹 클아이언트)를 활용하여 호출하고 응답받는 방법을 비교해보겠습니다.</p>
<h2 id="HTTP-Request-Client">HTTP Request Client</h2>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">RestTemplate</a></li><li class="tab"><a href="#unique-name-2">WebClient</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><h3 id="RestTemplate">RestTemplate</h3>
<p><code>RestTemplate</code>는 <a href="https://hc.apache.org/" target="_blank" rel="noopener">Apache HttpComponents</a> 또는 <a href="https://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a>와 같은 라이브러리를 사용하여 HTTP 요청을 수행하는 클라이언트입니다.</p>
<blockquote>
<p>The RestTemplate will be deprecated in a future version and will not have major new features added going forward.</p>
</blockquote>
<p>위 설명에 따르면 RestTemplate에 대한 기능 지원은 없을 예정이며 언제가 될지는 모르겠으나 없어질 수 있다고 합니다. 새로 추가된 WebClient로 통합하려고 하는 듯 합니다.</p>
<h4 id="Example">Example</h4>
<p>그러면 기존에 사용하던 RestTemplate로 Open API를 호출하는 예제를 살펴보겠습니다.</p>
<blockquote>
<p>본 예제는 인코딩된 서비스 키를 사용하므로 쿼리 파라미터에 대한 인코딩 설정을 하지 않았습니다.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TEST_000_http_request_using_rest_template</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplateBuilder().build();</span><br><span class="line"></span><br><span class="line">        DefaultUriBuilderFactory uriBuilderFactory = <span class="keyword">new</span> DefaultUriBuilderFactory(<span class="string">"https://openapi.kpx.or.kr"</span>);</span><br><span class="line">        uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.NONE);</span><br><span class="line"></span><br><span class="line">        UriBuilder uriBuilder = uriBuilderFactory.builder();</span><br><span class="line">        uriBuilder</span><br><span class="line">            .path(<span class="string">"/openapi/sukub5mToday/getSukub5mToday"</span>)</span><br><span class="line">            .queryParam(<span class="string">"ServiceKey"</span>, <span class="string">"[encodedServiceKey]"</span>);</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.exchange(uriBuilder.build(), HttpMethod.GET, <span class="keyword">null</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String response = responseEntity.getBody();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="unique-name-2"><h3 id="WebClient">WebClient</h3>
<p><code>WebClient</code>는 리액티브 스택을 지원할 수 있도록 <a href="https://github.com/reactor/reactor-netty" target="_blank" rel="noopener">Reactor Netty</a>를 사용하여 논-블로킹으로 HTTP 요청을 수행하는 리액티브 클라이언트입니다.</p>
<h4 id="Example">Example</h4>
<p>이제 RestTemplate와 비교하여 똑같은 동작을 해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TEST_001_http_request_using_web_client</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DefaultUriBuilderFactory uriBuilderFactory = <span class="keyword">new</span> DefaultUriBuilderFactory(<span class="string">"https://openapi.kpx.or.kr"</span>);</span><br><span class="line">        uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.NONE);</span><br><span class="line"></span><br><span class="line">        WebClient webClient = WebClient.builder().uriBuilderFactory(uriBuilderFactory).build();</span><br><span class="line">        WebClient.ResponseSpec responseSpec = webClient.get().uri(uriBuilder -&gt; uriBuilder</span><br><span class="line">                .path(<span class="string">"/openapi/sukub5mToday/getSukub5mToday"</span>)</span><br><span class="line">                .queryParam(<span class="string">"ServiceKey"</span>, <span class="string">"[encodedServiceKey]"</span>)</span><br><span class="line">                .build()</span><br><span class="line">        ).retrieve();</span><br><span class="line"></span><br><span class="line">        String response = responseSpec.bodyToMono(String<span class="class">.<span class="keyword">class</span>).<span class="title">block</span>()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Mono.block()을 통해 비동기가 아닌 RestTemplate와 같은 동기로 수행할 수 있습니다.</p>
</blockquote></div></div></div>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">RestTemplate</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html" target="_blank" rel="noopener">WebClient</a></li>
<li><a href="https://junebuug.github.io/2019-02-11/resttemplate-vs-webclient" target="_blank" rel="noopener">RestTemplate 말고 WebClient</a></li>
<li><a href="https://www.baeldung.com/spring-webclient-resttemplate" target="_blank" rel="noopener">Spring WebClient vs. RestTemplate</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>RestTemplate</tag>
        <tag>WebClient</tag>
        <tag>Open API</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle과 함께 스프링 프레임워크 프로젝트 구성하기</title>
    <url>/spring/building-a-spring-framework-project-with-gradle/</url>
    <content><![CDATA[<p>Gradle Project를 만들어 스프링 웹 MVC 애플리케이션을 구성하고 톰캣으로 웹 애플리케이션을 구동해보자.</p>
<h2 id="그래들-프로젝트-만들기">그래들 프로젝트 만들기</h2>
<p><code>인텔리제이</code>로 스프링 프레임워크를 선택해서 프로젝트를 만들게 되면 <code>메이븐</code>과 <code>XML</code> 기반으로 구성된다.</p>
<p>이렇게 하지 않고 프로젝트 관리 도구로 <code>그래들</code>을 사용하면서 스프링 웹 MVC 애플리케이션을 구성하자.</p>
<p>일단 먼저 <code>그래들 프로젝트</code>를 만들어야 한다.</p>
<p><img data-src="/spring/images/gradle-01.png" alt=""></p>
<h3 id="웹-애플리케이션-디렉토리-구조">웹 애플리케이션 디렉토리 구조</h3>
<p>일반적인 자바 웹 애플리케이션 구조는 다음과 같다.</p>
<p><img data-src="/spring/images/gradle-03.png" alt=""></p>
<p>그런데 그래들 프로젝트를 만들면 프로젝트 구조에 <code>src/main/java</code>와 <code>src/test/java</code>와 같은 모듈 디렉토리가 없을 수 있다.</p>
<p>이럴 때 <code>Preference</code>에서 <code>Gradle</code> 찾아 <code>Create directories for empty content roots automatically</code>를 활성화하면 <code>프로젝트 루트</code>에 모듈 디렉토리가 없을 경우 자동으로 만들어준다.</p>
<p><img data-src="/spring/images/gradle-02.png" alt=""></p>
<h4 id="webapp">webapp</h4>
<p>webapp 디렉토리는 웹 애플리케이션의 특별한 폴더이다.</p>
<p><code>src/main/webapp</code> 디렉토리를 만들자.</p>
<p>그리고 그 안에 <code>WEB-INF</code> 폴더 까지 만들자</p>
<p><img data-src="/spring/images/gradle-03.png" alt=""></p>
<h2 id="Spring-Web-MVC">Spring Web MVC</h2>
<p>이제 프로젝트에 스프링 웹 애플리케이션을 만들어보자.</p>
<h3 id="라이브러리-의존성">라이브러리 의존성</h3>
<p><code>build.gradle</code>의 의존성 항목에 <code>Spring Web MVC 3.4.8.RELEASE</code>를 추가하자.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework:spring-webmvc:4.3.8.RELEASE'</span></span><br><span class="line">    providedCompile <span class="string">'javax.servlet:javax.servlet-api:4.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Spring-MVC-Architecture">Spring MVC Architecture</h3>
<p>스프링 웹 MVC의 구성은 다음과 같다.</p>
<p><img data-src="https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/mvc.png#center" alt=""></p>
<p>모든 요청에 대하여 우선적으로 받는 <code>DispatcherServlet</code>(위 그림에서 FrontController)를 서블릿 컨텍스트에 등록해야하고 톰캣이 그 컨텍스트로 서버를 동작시킨다.</p>
<p>톰캣은 <code>web.xml</code>이라는 배포 서술자에 따라 서버를 동작시키는데 스프링은 <code>WebApplicationInitializer</code>의 구현체로 그 역할을 대신할 수 있게 해준다.</p>
<h4 id="WebApplicationInitializer">WebApplicationInitializer</h4>
<p><code>WebApplicationInitializer</code> 구현체를 만들면 코드 기반 설정을 감지하고 자동으로 서블릿 3+ 컨테이너를 초기화한다. 여기에 <code>DispatcherServlet</code>을 ServletContext에 등록하자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext container)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DispatcherServlet">DispatcherServlet</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext container)</span> </span>&#123;</span><br><span class="line">        ServletRegistration.Dynamic registration = container.addServlet(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> DispatcherServlet());</span><br><span class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registration.addMapping(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>기본 DispatcherServlet을 등록하고 톰캣을 통해 서버를 실행시키면 다음과 같은 오류를 내뿜으며 실행이 되지 않는다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.catalina.core.StandardContext loadOnStartup</span><br><span class="line">심각: Servlet [dispatcher] in web application [] <span class="function">threw <span class="title">load</span><span class="params">()</span> exception</span></span><br><span class="line"><span class="function">java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/dispatcher-servlet.xml]</span></span><br></pre></td></tr></table></figure>
<p>기본으로 <code>WEB-INF</code> 디렉토리에 있는 <code>[servlet-name]-servlet.xml</code>파일을 읽어 초기화하도록 되어있기 때문이다.</p>
<p>그래서 우리는 애플리케이션 컨텍스트를 만들어 디스패쳐 서블릿에 넣어주자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">context.scan(<span class="string">"com.demo.app"</span>);</span><br><span class="line"></span><br><span class="line">ServletRegistration.Dynamic dispatcher = servletContext.addServlet(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> DispatcherServlet(context));</span><br><span class="line">dispatcher.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">dispatcher.addMapping(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>
<p>그러면 아래와 같이 디스패처 서블릿이 <code>독립적인 서블릿 웹 컨텍스트</code>를 가진다.</p>
<p><img data-src="https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/mvc-context-hierarchy.png" alt=""></p>
<p>위 그림에서 확인할 수 있듯이 독립적인 서블릿 웹 컨텍스트를 가지므로 다른 스프링 모듈(스프링은 모듈간 결합이 가능하다)에서 서블릿 웹 컨텍스트에 등록되어 <code>관리되는 빈들을 공유할 수 없다</code>.</p>
<p>스프링은 각 <code>애플리케이션 컨텍스트(빈 팩토리)</code>의 빈들을 공통으로 관리할 수 있도록 <code>ContextLoader</code>를 제공한다.</p>
<p><code>ContextLoaderListener</code>로 애플리케이션 컨텍스트를 등록하고 서블릿 컨텍스트에 이 리스너를 추가하자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">context.setConfigLocation(<span class="string">"com.demo.app"</span>);</span><br><span class="line">servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(context));</span><br><span class="line"></span><br><span class="line">ServletRegistration.Dynamic dispatcher = servletContext.addServlet(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> DispatcherServlet(context));</span><br><span class="line">dispatcher.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">dispatcher.addMapping(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Spring-MVC-Configuration">Spring MVC Configuration</h3>
<p>서블릿 컨테이너에 디스패쳐 서블릿까지 등록했으면 스프링 웹 MVC를 활성화해야한다.</p>
<h4 id="EnableWebMvc">@EnableWebMvc</h4>
<p>스프링 웹 MVC는 간단하게 @Configuration가 명시된 설정 클래스에 @EnableWebMvc 어노테이션을 명시하면 된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.demo.app"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        context.setConfigLocation(<span class="string">"com.demo.app"</span>);</span><br><span class="line">        servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(context));</span><br><span class="line"></span><br><span class="line">        ServletRegistration.Dynamic dispatcher = servletContext.addServlet(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> DispatcherServlet(context));</span><br><span class="line">        dispatcher.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        dispatcher.addMapping(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Controller">@Controller</h4>
<p>스프링 웹 MVC를 활성화 했으면 요청을 담당하는 컨트롤러를 <code>@Controller</code>를 명시해서 등록할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이 상태로 &quot;/&quot;에 접속해보자. 그러면 다음과 같이 <code>ViewResolver</code>를 설정하라고 알려준다.</p>
<h4 id="ViewResolver">ViewResolver</h4>
<p>컨트롤러 내에 <code>@RequestMapping</code>이 붙은 메소드가 문자열을 응답하면 해당 이름을 가진 뷰로 응답하도록 처리된다.</p>
<p>그런데 위에서는 그 뷰를 처리할 수 있는 뷰 리졸버가 빈으로 등록되어 있지 않았던 것이다.</p>
<p>뷰 리졸버는 <code>InternalResourceViewResolver</code>, <code>FreemarkerViewResolver</code> 등 많은 종류가 있는데</p>
<p>우리는 JSP 템플릿을 처리하기 위해 사용하는 <code>InternalResourceViewResolver</code>를 등록해보자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InternalResourceViewResolver viewResolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">    viewResolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">    viewResolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> viewResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Run-on-Server">Run on Server</h2>
<p>자바 웹 애플리케이션을 구동시키기 위해서는 톰캣같은 서블릿 엔진이 필요하다.</p>
<p>일반적으로는 톰캣을 설치하고 <code>Edit Configurations...</code>를 통해 톰캣 서버로 실행할 수 있는 환경을 추가해야한다.</p>
<p><img data-src="/spring/images/gradle-10.png" alt=""></p>
<h3 id="임베디드-톰캣">임베디드 톰캣</h3>
<p>아파치는 굳이 톰캣을 설치하지 않고도 구동할 수 있도록 <a href="https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core/9.0.14" target="_blank" rel="noopener"><code>Tomcat Embed</code></a>를 제공한다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.apache.tomcat.embed'</span>, <span class="string">name:</span> <span class="string">'tomcat-embed-core'</span>, <span class="string">version:</span> <span class="string">'9.0.14'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.apache.tomcat.embed'</span>, <span class="string">name:</span> <span class="string">'tomcat-embed-jasper'</span>, <span class="string">version:</span> <span class="string">'9.0.14'</span></span><br></pre></td></tr></table></figure>
<p>그래들로 위 라이브러리들을 임포트했다면 <code>Application.java</code>를 만들어 톰캣을 구동시키도록 작성하자.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">        Connector connector = tomcat.getConnector();</span><br><span class="line">        connector.setURIEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        tomcat.addWebapp(<span class="string">"/"</span>, <span class="keyword">new</span> File(<span class="string">"src/main/webapp"</span>).getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        tomcat.setPort(<span class="number">8080</span>);</span><br><span class="line">        tomcat.start();</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이제 <code>Application.java</code>를 실행하면 다음 로그처럼 <code>톰캣</code>이 구동된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>월 <span class="number">09</span>, <span class="number">2019</span> <span class="number">8</span>:<span class="number">07</span>:<span class="number">13</span> 오후 org.springframework.web.context.support.AnnotationConfigWebApplicationContext loadBeanDefinitions</span><br><span class="line">정보: Found <span class="number">2</span> annotated classes in <span class="keyword">package</span> [com.demo.app]</span><br><span class="line"><span class="number">2</span>월 <span class="number">09</span>, <span class="number">2019</span> <span class="number">8</span>:<span class="number">07</span>:<span class="number">14</span> 오후 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping register</span><br><span class="line">정보: Mapped <span class="string">"&#123;[],methods=[GET]&#125;"</span> onto <span class="keyword">public</span> java.lang.String com.demo.app.controller.HomeController.index(org.springframework.ui.Model)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>월 <span class="number">09</span>, <span class="number">2019</span> <span class="number">8</span>:<span class="number">07</span>:<span class="number">14</span> 오후 org.springframework.web.servlet.DispatcherServlet initServletBean</span><br><span class="line">정보: FrameworkServlet <span class="string">'dispatcher'</span>: initialization completed in <span class="number">14</span> ms</span><br><span class="line"><span class="number">2</span>월 <span class="number">09</span>, <span class="number">2019</span> <span class="number">8</span>:<span class="number">07</span>:<span class="number">14</span> 오후 org.apache.coyote.AbstractProtocol start</span><br><span class="line">정보: Starting ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br></pre></td></tr></table></figure>
<p>정말 구동되어 서버가 JSP를 처리할 수 있을까?</p>
<p><code>http://localhost:8080/</code>으로 접속해보자.</p>
<p><img data-src="/spring/images/gradle-11.png" alt=""></p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://github.com/kdevkr/spring-demo-configuration/tree/oligarch/spring-demo-java" target="_blank" rel="noopener">Java Configuration</a></li>
<li><a href="https://stackoverflow.com/questions/45169586/how-do-i-embed-tomcat-in-a-spring-framework-mvc-application" target="_blank" rel="noopener">How do I embed Tomcat in a Spring Framework MVC application?</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>YamlPropertiesFactoryBean으로 YAML 프로퍼티 만들기</title>
    <url>/spring/create-properties-from-yaml-resources-using-yaml-properties-factory-bean/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>스프링은 Properties 뿐만 아니라 Yaml 형식으로 애플리케이션 프로퍼티 설정을 할 수 있습니다. 그렇다면 스프링은 어떻게 Yaml 파일을 불러와 프로퍼티로 만드는 것일까요?</p>
<h2 id="YamlPropertiesFactoryBean">YamlPropertiesFactoryBean</h2>
<p>YamlPropertiesFactoryBean은 YamlProcessor를 확장한 클래스로 YamlProcessor의 <code>콜백 패턴</code>을 통해 처리된 Properties를 모아서 하나의 Properties로 만들어주는 팩토리 메소드를 제공합니다.</p>
<h3 id="Dependencies">Dependencies</h3>
<p><code>spring-beans</code> 모듈에는 <code>SnakeYaml</code> 라이브러리를 활용해서 <code>Yaml</code>을 처리할 수 있는 클래스를 보유하고 있습니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">"org.yaml:snakeyaml:1.25"</span>)</span><br><span class="line">implementation(<span class="string">"org.springframework:spring-beans:5.2.3.RELEASE"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Example">Example</h3>
<p>YAML 파일을 리소스로 불러오기만 하면 쉽게 프로퍼티로 변환할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">YamlPropertiesFactoryBean yamlPropertiesFactoryBean = <span class="keyword">new</span> YamlPropertiesFactoryBean();</span><br><span class="line">yamlPropertiesFactoryBean.setResources(<span class="keyword">new</span> ClassPathResource(<span class="string">"application-test.yml"</span>));</span><br><span class="line">Properties properties = yamlPropertiesFactoryBean.getObject();</span><br></pre></td></tr></table></figure>
<h2 id="YamlPropertySourceLoader">YamlPropertySourceLoader</h2>
<p><a href="https://github.com/spring-projects/spring-boot/blob/oligarch/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java" target="_blank" rel="noopener">YamlPropertySourceLoader</a>는 스프링 부트에서 제공하는 로더 클래스로써 <code>.yml</code> 또는 <code>.yaml</code>로 끝나는 파일을 PropertySource로 넣어주는 역할을 합니다.</p>
<h3 id="Dependencies-2">Dependencies</h3>
<p>YamlPropertySourceLoader는 org.springframework.boot.env 패키지에 포함되어있습니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">"org.springframework.boot:spring-boot:2.2.4.RELEASE"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Example-2">Example</h3>
<p>YamlPropertySourceLoader를 통해 리소스로부터 PropertySource 리스트를 받은 뒤 각 PropertySource의 Object를 받아 Properties로 병합할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">YamlPropertySourceLoader yamlPropertySourceLoader = <span class="keyword">new</span> YamlPropertySourceLoader();</span><br><span class="line">List&lt;PropertySource&lt;?&gt;&gt; propertySources = yamlPropertySourceLoader.load(<span class="string">"application-test"</span>, <span class="keyword">new</span> ClassPathResource(<span class="string">"application-test.yml"</span>));</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">for</span>(PropertySource propertySource : propertySources) &#123;</span><br><span class="line">    Object source = propertySource.getSource();</span><br><span class="line">    properties.putAll((Map) source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Yaml</tag>
        <tag>Properties</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB - Prometheus Exporter</title>
    <url>/database/kdb/prometheus-exporter/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>2020년 5월에 <a href="https://github.com/KxSystems/prometheus-kdb-exporter" target="_blank" rel="noopener">KxSystems/prometheus-kdb-exporter</a> 프로젝트가 추가되어 프로메테우스로 KDB+ 에 대한 모니터링을 할 수 있게 되었습니다.</p>
<p>이번 글에서는 Prometheus Exporter를 KDB+에 적용하고 모니터링하는 것에 대하여 설명하겠습니다.</p>
<h2 id="🛠-Prometheus-Exporter-for-KDB">🛠 Prometheus Exporter for KDB+</h2>
<p>프로젝트 예제에서는 KDB+를 구동하면서 Exporter를 실행하는 것을 설명합니다. 하지만, 저는 KDB+ 구동과 상관없이 Prometheus Exporter를 원할때 추가할 수 있도록 스크립트를 불러오도록 하겠습니다.</p>
<h3 id="Dynamic-Load-exporter-q">Dynamic Load exporter.q</h3>
<p>프로젝트에서 제공하는 <code>exporter.q</code>와 <code>extract.q</code>를 불러올 수 있도록 파일을 복사합니다.</p>
<p>저는 KDB+ 구동 시 실행되는 <code>q.q</code> 파일 하위에 <code>prometheus-exporter</code>라는 폴더를 만들었습니다.</p>
<p><img data-src="/database/kdb/images/prometheus-exporter-dir.png" alt=""></p>
<p>q 에서는 <code>\</code> 또는 <code>system</code> 을 통해 시스템 명령어를 수행할 수 있습니다.</p>
<p>예를 들어, q에서 바라보는 현재 디렉토리가 <code>q/data</code>라고 한다면 다음과 같이 디렉토리를 이동하고 파일을 불러올 수 있게 됩니다.</p>
<figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">system</span> <span class="string">"cd ../prometheus-exporter"</span></span><br><span class="line"><span class="built_in">system</span> <span class="string">"l exporter.q"</span></span><br><span class="line"><span class="built_in">system</span> <span class="string">"cd ../data"</span></span><br></pre></td></tr></table></figure>
<h3 id="KDB-Prometheus-Metrics">KDB+ Prometheus Metrics</h3>
<p>exporter.q가 정상적으로 불러와졌다면 브라우저로 <code>/metrics</code> 경로로 접속하여 Prometheus Metrics를 확인할 수 있습니다.</p>
<p><img data-src="/database/kdb/images/kdb-prometheus-metrics.png" alt=""></p>
<p>이제 프로메테우스가 이 주소를 통해 매트릭을 수집할 수 있도록 설정하면 됩니다.</p>
<figure class="highlight"><figcaption><span>prometheus.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets: []</span><br><span class="line">    scheme: http</span><br><span class="line">    timeout: 10s</span><br><span class="line">    api_version: v1</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: prometheus</span><br><span class="line">  honor_timestamps: true</span><br><span class="line">  scrape_interval: 1m</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  metrics_path: /metrics</span><br><span class="line">  scheme: http</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - localhost:9090</span><br><span class="line"></span><br><span class="line">- job_name: kdb</span><br><span class="line">  honor_timestamps: true</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - localhost:5000</span><br></pre></td></tr></table></figure>
<h2 id="🖥-Grafana-Dashboard">🖥 Grafana Dashboard</h2>
<p>다음의 링크를 통해 그라파나 대시보드를 구성할 수 있는 json 정보를 확인할 수 있습니다.</p>
<p><a href="https://github.com/KxSystems/prometheus-kdb-exporter/blob/oligarch/examples/DockerCompose/grafana-config/dashboards/kdb-dashboard.json" target="_blank" rel="noopener">https://github.com/KxSystems/prometheus-kdb-exporter/blob/oligarch/examples/DockerCompose/grafana-config/dashboards/kdb-dashboard.json</a></p>
<p>그라파나 대시보드 Import 기능을 통해 KDB+ 대시보드를 구성합니다.</p>
<p><img data-src="/database/kdb/images/import-grafana-dashboard-for-kdb.png" alt=""></p>
<p>이제 그라파나가 프로메테우스로 수집된 KDB+ 정보를 시각화 할 수 있습니다.</p>
<p><img data-src="/database/kdb/images/grafana-kdb-dashbaord.png" alt=""></p>
]]></content>
      <tags>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
        <tag>KDB</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB - System Common Logging</title>
    <url>/database/kdb/system-common-logging/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>KDB+/q 스크립트에서 로그 메시지를 출력하는 방법과 함께 <code>Log4j</code>와 같이 로그 레벨 기반의 로깅 시스템을 적용하기 위한 방법에 대해서 알아봅니다.</p>
<h2 id="System-Common-Logging">System Common Logging</h2>
<h3 id="Write-in-Console">Write in Console</h3>
<p>KDB+에서 콘솔에 값을 출력하기 위한 방법은 여러가지가 있습니다.</p>
<ul>
<li><a href="https://code.kx.com/q/ref/display/" target="_blank" rel="noopener">!Display</a></li>
<li><a href="https://code.kx.com/q/ref/show/" target="_blank" rel="noopener">show</a></li>
<li>-1 또는 -2</li>
</ul>
<p>기본 <code>q.q</code> 파일의 내용에서처럼 <code>-1</code>과 <code>-2</code>를 이용하여 문자열을 출력할 수 있습니다.</p>
<figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">"Welcome to kdb+ 32bit edition\nFor support please see http://groups.google.com/d/forum/personal-kdbplus\nTutorials can be found at http://code.kx.com\nTo exit, type \\\\\nTo remove this startup msg, edit q.q"</span>;</span><br></pre></td></tr></table></figure>
<p>단, <code>!Display</code> 와 <code>show</code>는 따옴표가 그대로 출력되므로 감안하고 사용하시기 바랍니다.</p>
<h3 id="System-out-println">System.out.println</h3>
<p>자바에서 가장 기본적인 로그 출력 함수는 <code>System.out.println</code>입니다. 그렇다면 q 스크립트에서 사용할 기본 메시지 출력 함수를 만들어봅시다.</p>
<figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.out.println:&#123;<span class="number">-1</span> <span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P,<span class="string">" "</span>,x;&#125;</span><br><span class="line">/ join strings using <span class="built_in">raze</span></span><br><span class="line">.<span class="built_in">system</span>.out.println:&#123;<span class="number">-1</span> <span class="built_in">raze</span>[(<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P;<span class="string">" "</span>;x)];&#125;</span><br></pre></td></tr></table></figure>
<p>로컬 타임스탬프에서 날짜와 시간을 추출하여 하나의 문자열로 만든 후 파라미터로 받은 문자열 x를 결합하여 콘솔로 출력합니다.</p>
<h3 id="Logging-with-LogLevel">Logging with LogLevel</h3>
<p>기본 메시지 출력 함수를 정의해보았으나 이를 사용하기에는 뭔가 좀 불편한 부분이 있습니다. <code>Log4j</code>와 같은 라이브러리는 로그 레벨에 따라 로그를 출력할지 말지를 결정합니다. 우리도 기본 메시지 출력 함수를 로그 레벨에 따라 출력되도록 확장해봅시다.</p>
<p>먼저, <code>.system</code> 네임스페이스에 데이터베이스에 대한 로그 레벨 변수를 만들겠습니다.<br>
로그 레벨은 다음과 같이 error, info, warn, debug, trace로 구성합니다.</p>
<figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line">\d .<span class="built_in">system</span></span><br><span class="line">logLevel: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">/ 로그 출력 형식</span><br><span class="line"><span class="number">-1</span> <span class="built_in">raze</span>[<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P],<span class="string">" "</span>,<span class="string">"INFO"</span>,<span class="string">" - "</span>,<span class="string">"Hello World"</span>]</span><br></pre></td></tr></table></figure>
<p>로그 출력함수는 <code>날짜 시간 로그레벨 - 메시지</code> 형식으로 출력합니다. 이제 로그레벨별로 로그 함수를 정의합니다.</p>
<figure class="highlight q"><figcaption><span>kdb+/q</span></figcaption><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.log:&#123;if[x &lt;= .<span class="built_in">system</span>.logLevel;<span class="number">-1</span> <span class="built_in">raze</span>[<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P],<span class="string">" "</span>,y,<span class="string">" - "</span>,z]&#125;</span><br><span class="line"></span><br><span class="line">.log.error: .<span class="built_in">system</span>.log[<span class="number">0</span>;<span class="string">"[ERROR]"</span>]</span><br><span class="line">.log.info: .<span class="built_in">system</span>.log[<span class="number">1</span>;<span class="string">"[INFO]"</span>]</span><br><span class="line">.log.warn: .<span class="built_in">system</span>.log[<span class="number">2</span>;<span class="string">"[WARN]"</span>]</span><br><span class="line">.log.debug: .<span class="built_in">system</span>.log[<span class="number">3</span>;<span class="string">"[DEBUG]"</span>]</span><br><span class="line">.log.trace: .<span class="built_in">system</span>.log[<span class="number">4</span>;<span class="string">"[TRACE]"</span>]</span><br></pre></td></tr></table></figure>
<p>그러면 이제 시스템 로그 레벨을 디버그로 설정하고 디버그 단위로 출력하면 시스템 로그로 남기게 됩니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.logLevel:<span class="number">3</span></span><br><span class="line">.log.debug <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">/ <span class="number">2020.07</span><span class="number">.08</span> <span class="number">09</span>:<span class="number">10</span>:<span class="number">54</span> [DEBUG] - Hello World</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>KDB</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL - Install</title>
    <url>/database/postgresql/install/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>PostgreSQL에 입문하기 위한 가장 첫단계는 PostgreSQL을 설치하는 것입니다.</p>
<p><a href="https://www.postgresql.org/download/" target="_blank" rel="noopener">공식 홈페이지</a>에서 여러가지 운영체제 환경에 대한 바이너리 패키지를 제공합니다.</p>
<h2 id="설치">설치</h2>
<p>실제 애플리케이션 프로덕션 환경이 아니라면 직접 <code>바이너리 패키지</code>를 다운받아 설치하는 것보다는 <code>도커 컨테이너</code>로 구동하는 것이 좋습니다.</p>
<h3 id="도커-이미지-다운로드">도커 이미지 다운로드</h3>
<p>도커 <code>pull</code> 명령어를 통해 PostgreSQL 이미지를 다운로드하고 컨테이너를 실행합니다.</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ sudo docker pull postgres:9.6.18-alpine</span><br><span class="line">$ sudo docker run --name postgres -d -e POSTGRES_PASSWORD=password -p 5432:5432 postgres:9.6.18-alpine</span><br></pre></td></tr></table></figure>
<p>PostgreSQL 도커 컨테이너가 실행되었다면 다음과 같이 쉘로 접속합니다.</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it postgres /bin/bash</span><br></pre></td></tr></table></figure>
<p><code>root</code> 사용자에서 <code>postgres</code> 사용자로 전환하여 데이터베이스에 접근합니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/passwd | grep postgre</span><br><span class="line">postgres:...:/var/lib/postgresql:/bin/sh</span><br><span class="line"></span><br><span class="line">$ su postgres</span><br><span class="line">$ psql</span><br></pre></td></tr></table></figure>
<h3 id="CREATE-DATABASE-AND-USER">CREATE DATABASE AND USER</h3>
<p>데이터베이스를 생성하고 데이터베이스에 접근할 수 있는 사용자를 만들어봅니다.</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test_db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> mambo <span class="keyword">WITH</span> <span class="keyword">ENCRYPTED</span> <span class="keyword">PASSWORD</span> <span class="string">'mambo'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> <span class="keyword">DATABASE</span> test_db <span class="keyword">TO</span> mambo;</span><br></pre></td></tr></table></figure>
<h3 id="PostgreSQL-Interactive-Terminal">PostgreSQL Interactive Terminal</h3>
<p>이제 psql을 이용하여 <code>mambo</code> 사용자로 <code>test_db</code> 데이터베이스에 접속할 수 있습니다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ psql test_db -U mambo</span><br></pre></td></tr></table></figure>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://www.postgresql.org/docs/current/sql-createuser.html" target="_blank" rel="noopener">PostgreSQL - CREATE USER</a></li>
<li><a href="https://www.postgresql.org/docs/current/sql-createdatabase.html" target="_blank" rel="noopener">PostgreSQL - CREATE DATABASE</a></li>
<li><a href="https://www.postgresql.org/docs/current/sql-grant.html" target="_blank" rel="noopener">PostgreSQL - GRANT</a></li>
<li><a href="https://www.postgresql.org/docs/current/app-psql.html" target="_blank" rel="noopener">PostgreSQL - psql</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PostgreSQL - Monitoring</title>
    <url>/database/postgresql/monitoring/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>저는 PostgreSQL를 주 관계형 데이터베이스로 사용하고 있습니다. 최근 프로메테우스와 그라파나를 연계하여 모니터링 대시보드를 구성하는 것을 연습해보고 있습니다. <code>PostgresSQL</code>를 위한 <a href="https://github.com/wrouesnel/postgres_exporter" target="_blank" rel="noopener">Prometheus Exporter</a>를 제공하고 있으므로 이를 활용해보도록 하겠습니다.</p>
<p>본 글은 프로메테우스와 그라파나가 설치되어있다는 가정하에 진행됩니다. 만약, 프로메테우스 또는 그라파나가 구성되어있지 않다면 다음 링크들을 참고하여 설치하시기 바랍니다.</p>
<ul>
<li><a href="https://prometheus.io/docs/prometheus/latest/installation/#using-docker" target="_blank" rel="noopener">Prometheus Installation Using Docker</a></li>
<li><a href="https://grafana.com/docs/grafana/latest/installation/docker/" target="_blank" rel="noopener">Run Grafana Docker image</a></li>
</ul>
<h2 id="PostgreSQL-Server-Exporter">PostgreSQL Server Exporter</h2>
<p><a href="https://github.com/wrouesnel/postgres_exporter" target="_blank" rel="noopener">wrouesnel/postgres_exporter</a>는 포스트그레 서버 매트릭을 위한 Prometheus Exporter 입니다. 도커를 이용하면 쉽게 PostgreSQL Exporter를 실행할 수 있습니다.</p>
<h3 id="도커-이미지-설치">도커 이미지 설치</h3>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name=postgres_exporter --net=host -e DATA_SOURCE_NAME=<span class="string">"postgresql://postgres:password@localhost:5432/postgres?sslmode=disable"</span> wrouesnel/postgres_exporter</span></span><br></pre></td></tr></table></figure>
<p>이제 <a href="http://localhost:9187/metrics" target="_blank" rel="noopener">http://localhost:9187/metrics</a> 에서 PostgreSQL 서버 매트릭을 확인할 수 있습니다.</p>
<p><img data-src="/database/postgresql/images/prometheus-exporter-metrics.png" alt=""></p>
<h3 id="프로메테우스-타겟-적용">프로메테우스 타겟 적용</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">localhost:9187</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/database/postgresql/images/prometheus-targets.png" alt=""></p>
<h3 id="그라파나-대시보드-추가">그라파나 대시보드 추가</h3>
<p>Grafana Labs에서 <code>wrouesnel/postgres_exporter</code>으로 수집된 매트릭을 기반으로 구성한 대시보드를 찾아 추가합니다.</p>
<p>저는 <a href="https://grafana.com/grafana/dashboards/9628" target="_blank" rel="noopener">PostgreSQL Database by Lucas Estienne</a> 대시보드를 추가하겠습니다.</p>
<p><img data-src="/database/postgresql/images/grafana-dashboard.png" alt=""></p>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>Postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker - 도커 엔진 설치하기</title>
    <url>/dev-ops/docker/install-docker-engine/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>도커 컨테이너 환경을 경험해보기 위해서는 컨테이너 구동을 위한 도커 엔진을 설치해야합니다. MacOS 또는 윈도우 환경에서는 Docker Desktop을 설치하면 자동으로 도커 엔진이 설치됩니다. 다만, 우분투와 같은 리눅스 서버는 도커 데스크탑을 제공하지 않으므로 직접 바이너리 패키지를 받아 설치해야합니다.</p>
<h2 id="도커-엔진-설치하기">도커 엔진 설치하기</h2>
<p>우분투 리눅스에서 도커 엔진을 설치하기 위해서는 다음의 64비트 버전이 필요합니다.</p>
<ul>
<li>Ubuntu Focal 20.04</li>
<li>Ubuntu Bionic 18.04</li>
<li>Ubuntu Xenial 16.04</li>
</ul>
<p>Docker Engine is supported on x86_64 (or amd64), armhf, and arm64 architectures.</p>
<h3 id="리파지토리-설정">리파지토리 설정</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure>
<h3 id="도커-엔진-패키지-설치">도커 엔진 패키지 설치</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<h2 id="도커-컴포즈-설치하기">도커 컴포즈 설치하기</h2>
<p>리눅스에서 도커 컴포즈를 이용하기 위해서는 별도로 설치해야합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.26.2, build eefe0d31</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Docker - 스토리지 사용하기</title>
    <url>/dev-ops/docker/use-storage/</url>
    <content><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>기본적으로 도커 컨테이너에서 발생하는 데이터는 컨테이너 공간에 저장되어 컨테이너가 삭제되는 순간 데이터가 같이 삭제되는 구조를 가지고 있습니다. 이에 도커는 볼륨이라는 매커니즘을 제공하여 컨테이너가 삭제되어도 데이터를 유지할 수 있도록 영속성을 제공합니다.</p>
<h2 id="스토리지">스토리지</h2>
<p>도커에서 데이터를 유지하기 위해 제공하는 스토리지 유형에는 볼륨과 마운트가 있습니다. 일반적으로 호스트 영역과 연결하는 것이 바인드 마운트이며 볼륨은 도커가 관리하는 영역에 데이터를 유지하는 공간을 만들어내는 것입니다.</p>
<p><img data-src="https://docs.docker.com/storage/images/types-of-mounts.png" alt=""></p>
<p><code>볼륨 영역</code>(리눅스에서 /var/lib/docker/volumes/)은 도커에서 관리하기 때문에 도커 프로세스가 아닌 경우 데이터를 수정할 수 없게 됩니다. 따라서, 도커에서 데이터를 유지하는 가장 좋은 방법은 볼륨을 사용하는 것일 수 있습니다.</p>
<p><code>바인드 마운트</code>는 호스트 디렉토리를 사용하기 때문에 언제든지 영역에 접근하고 데이터를 수정할 수 있습니다. 단, 호스트 프로세스에서 해당 영역을 사용하거나 접근할 수 있기 때문에 이를 인지하고 사용해야 합니다.</p>
<p><code>tmpfs 마운트</code>는 호스트 메모리 영역에 데이터를 저장합니다. 예를 들어, 쿠버네티스 스크릿의 경우 비밀번호, OAuth 토큰, SSH 키와 같은 민감한 정보들은 호스트 메모리에 저장합니다.</p>
<h3 id="바인드-마운트-연습하기">바인드 마운트 연습하기</h3>
<p>도커 이미지로 구성한 <a href="https://github.com/kdevkr/docker-kdb" target="_blank" rel="noopener">Docker KDB+</a>는 KDB+를 우분투 컨테이너에서 구동하도록 되어있습니다. KDB+가 실행될 때 호출되는 <code>q.q</code>라는 q 스크립트 파일이 있습니다. 기본으로 이미지에 포함되어 있는 q.q 스크립트 대신에 실행할 스크립트를 바인드 마운트를 통해 연결할 수 있습니다.</p>
<p><code>Hello Mambo!</code>라는 메시지를 KDB+ 실행할 때 출력하기 위하여 q.q 파일을 만들어 다음과 같이 스크립트를 작성합니다. 이 파일은 <code>/home/mambo/kdb</code> 경로에 있다고 가정합니다.</p>
<figure class="highlight q"><figcaption><span>q.q</span></figcaption><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.out.println:&#123;<span class="number">-1</span> <span class="built_in">raze</span>[<span class="string">" "</span><span class="built_in">sv</span> <span class="built_in">string</span><span class="type">`date</span><span class="type">`second</span>$.z.P],<span class="string">" "</span>,x;&#125;;</span><br><span class="line">.<span class="built_in">system</span>.out.println <span class="string">"Hello Mambo!"</span>;</span><br></pre></td></tr></table></figure>
<p>그런 다음 도커 컨테이너를 실행할 때 <code>-v</code> 옵션으로 앞서 작성한 q.q 파일을 이미지에 존재하는 파일로 대체하도록 지정합니다.</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name kdb -v /home/mambo/kdb/q.q:/root/q/q.q -e ON_STARTUP=/root/q/q.q -p 5000:5000 kdb</span></span><br></pre></td></tr></table></figure>
<p>그러면 해당 스크립트 파일이 대체되어 다음과 같이 컨테이너 로그로 출력되는 것을 확인할 수 있습니다.</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ docker logs kdb</span><br><span class="line">0</span><br><span class="line">Welcome to kdb+ 32bit edition</span><br><span class="line">For support please see http://groups.google.com/d/forum/personal-kdbplus</span><br><span class="line">Tutorials can be found at http://code.kx.com</span><br><span class="line">To <span class="built_in">exit</span>, <span class="built_in">type</span> \\</span><br><span class="line">To remove this startup msg, edit q.q</span><br><span class="line">2020.07.15 12:14:13 Hello Mambo!</span><br></pre></td></tr></table></figure>
<h3 id="볼륨-마운트-연습하기">볼륨 마운트 연습하기</h3>
<p>도커 컨테이너에 볼륨을 마운트하는 것을 해보겠습니다. 먼저 <code>docker inspect</code> 명령으로 컨테이너에서 사용중인 볼륨이 있는지를 확인합니다.</p>
<p>컨테이너에 대한 마운트 부분을 추출하기 위하여 <a href="https://stackoverflow.com/questions/30133664/how-do-you-list-volumes-in-docker-containers" target="_blank" rel="noopener">How do you list volumes in docker containers?</a>에서 알려주는대로 명령어를 실행합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker inspect -f <span class="string">'&#123;&#123; .Mounts &#125;&#125;'</span> kdb</span><br><span class="line">[&#123;<span class="built_in">bind</span>  /home/mambo/kdb/q.q /root/q/q.q   <span class="literal">true</span> rprivate&#125;]</span><br></pre></td></tr></table></figure>
<p>현재 KDB 컨테이너는 바인드 마운트에 대한 정보는 있으나 볼륨에 대한 정보는 존재하지 않음을 확인할 수 있습니다. 결국 KDB+ 데이터는 컨테이너 영역에 존재하므로 데이터를 유지하기 위하여 볼륨을 사용해야 합니다.</p>
<p>우선 KDB 컨테이너에서 사용할 볼륨을 생성합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker create volume --name kdb-volume</span><br><span class="line">$ docker volume ls</span><br><span class="line">DRIVER      VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>       kdb-volume</span><br></pre></td></tr></table></figure>
<p>기존 KDB 컨테이너를 삭제한 후 앞서 생성하였던 KDB 볼륨을 마운트합니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker stop kdb</span><br><span class="line">$ docker rm kdb</span><br><span class="line"></span><br><span class="line">$ docker run -d --name kdb -v kdb-volume:/root/q -v /home/mambo/kdb/q.q:/root/q/q.q -e ON_STARTUP=/root/q/q.q -p 5000:5000 kdb</span><br></pre></td></tr></table></figure>
<p>다시 컨테이너에 대한 마운트 부분을 확인하면 다음과 같이 볼륨을 사용하고 있는 것을 알 수 있습니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker inspect -f <span class="string">'&#123;&#123; .Mounts &#125;&#125;'</span> kdb                                                                                       </span><br><span class="line">[&#123;volume kdb-volume /var/lib/docker/volumes/kdb-volume/_data /root/q <span class="built_in">local</span> z <span class="literal">true</span> &#125; &#123;<span class="built_in">bind</span>  /home/mambo/kdb/q.q /root/q/q.q   <span class="literal">true</span> rprivate&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://docs.docker.com/storage/" target="_blank" rel="noopener">Manage data in Docker</a></li>
<li><a href="https://stackoverflow.com/questions/30133664/how-do-you-list-volumes-in-docker-containers" target="_blank" rel="noopener">How do you list volumes in docker containers?</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Volume</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 변수 할당 및 테이블 생성</title>
    <url>/database/kdb/kdb-tutorial/assign-variables-and-tables/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><strong>KDB 튜토리얼 - 변수 할당 및 테이블 생성</strong></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>KDB+는 일반적인 데이터베이스와는 약간 다릅니다. 그것은 <a href="https://code.kx.com/q/basics/datatypes/" target="_blank" rel="noopener">데이터 유형</a>에서도 확인할 수 있습니다.</p>
<table>
<thead>
<tr>
<th>N</th>
<th>Name</th>
<th>Literal</th>
<th>Java</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>list</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>boolean</td>
<td>0b</td>
<td>Boolean</td>
</tr>
<tr>
<td>2</td>
<td>guid</td>
<td></td>
<td>UUID</td>
</tr>
<tr>
<td>4</td>
<td>byte</td>
<td>0x00</td>
<td>Byte</td>
</tr>
<tr>
<td>5</td>
<td>short</td>
<td>0h</td>
<td>Short</td>
</tr>
<tr>
<td>6</td>
<td>int</td>
<td>0i</td>
<td>Integer</td>
</tr>
<tr>
<td>7</td>
<td>long</td>
<td>0j</td>
<td>Long</td>
</tr>
<tr>
<td>8</td>
<td>real</td>
<td>0e</td>
<td>Float</td>
</tr>
<tr>
<td>9</td>
<td>float</td>
<td>0f</td>
<td>Double</td>
</tr>
<tr>
<td>10</td>
<td>char</td>
<td>&quot; &quot;</td>
<td>Character</td>
</tr>
<tr>
<td>11</td>
<td>symbol</td>
<td>`</td>
<td>String</td>
</tr>
<tr>
<td>12</td>
<td>timestamp</td>
<td>dateDtimespan</td>
<td>Timestamp</td>
</tr>
<tr>
<td>13</td>
<td>month</td>
<td>2000.01m</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>date</td>
<td>2000.01.01</td>
<td>Date</td>
</tr>
<tr>
<td>15</td>
<td>datetime</td>
<td>dateTtime</td>
<td>Timestamp</td>
</tr>
<tr>
<td>16</td>
<td>timespan</td>
<td>00:00:00.000000000</td>
<td>Timespan</td>
</tr>
<tr>
<td>17</td>
<td>minute</td>
<td>00:00</td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>second</td>
<td>00:00:00</td>
<td></td>
</tr>
<tr>
<td>19</td>
<td>time</td>
<td>00:00:00.000</td>
<td>Time</td>
</tr>
<tr>
<td>98</td>
<td>table</td>
<td></td>
<td></td>
</tr>
<tr>
<td>99</td>
<td>dictionary</td>
<td></td>
<td></td>
</tr>
<tr>
<td>100</td>
<td>lambda</td>
<td></td>
<td></td>
</tr>
<tr>
<td>101</td>
<td>unary primitive</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="심볼">심볼</h3>
<p>심볼은 백틱으로 시작하는 문자열이며 스트링과는 다릅니다.</p>
<blockquote>
<p>스트링은 데이터 유형이 아닙니다.</p>
</blockquote>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="type">`symbol</span> ~ <span class="string">"symbol"</span></span><br><span class="line"><span class="number">0</span>b</span><br></pre></td></tr></table></figure>
<p>그리고 빈 심볼은 백틱으로만 표현됩니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">null</span> `</span><br><span class="line"><span class="number">1</span>b</span><br></pre></td></tr></table></figure>
<h2 id="변수-및-테이블">변수 및 테이블</h2>
<h3 id="변수-할당">변수 할당</h3>
<p>현재 컨텍스트의 변수에 데이터를 할당하는 것은 <code>:</code>를 이용합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">str:<span class="string">"string"</span></span><br><span class="line">sym:<span class="type">`symbol</span></span><br><span class="line">tab:([] x:<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; y:<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<h3 id="테이블-생성">테이블 생성</h3>
<p>사실 앞서 변수에 데이터를 할당하는 예제에서 테이블을 할당했었습니다. 바로 tab이라는 변수입니다.</p>
<p><strong>테이블 정의 문법</strong><br>
테이블을 생성하는 구문은 다음과 같습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">([] *c1*:*L1*; ...; *cn*:*Ln*)</span><br><span class="line"></span><br><span class="line">t:([] name:`Dent`Beeblebrox`Prefect; iq:<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">flip</span> `name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line">name       iq</span><br><span class="line">--------------</span><br><span class="line">Dent       <span class="number">98</span></span><br><span class="line">Beeblebrox <span class="number">42</span></span><br><span class="line">Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure>
<p>위 구문에서 [] 안에는 테이블의 키를 표현하여 키 테이블로 구성할 수 있습니다.</p>
<blockquote>
<p>일반 테이블과 키 테이블은 다릅니다!</p>
</blockquote>
<h4 id="빈-테이블-스키마">빈 테이블 스키마</h4>
<p>위 예제에서는 테이블을 생성하는 동시에 데이터를 추가했음을 확인할 수 있습니다. 그러면 데이터가 없는 빈 테이블은 어떻게 만들 수 있을까요?</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t:([] name:(); iq:())</span><br><span class="line"></span><br><span class="line">name iq</span><br><span class="line">-------</span><br></pre></td></tr></table></figure>
<p>그리고 테이블 컬럼에 데이터 유형을 지정하는 것이 좋습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t:([] name:<span class="type">`symbol</span>$(); iq:`int$())</span><br></pre></td></tr></table></figure>
<h4 id="레코드-출력">레코드 출력</h4>
<p>테이블의 레코드를 확인하는 방법은 여러가지가 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> t</span><br><span class="line"></span><br><span class="line">name       iq</span><br><span class="line">--------------</span><br><span class="line">Dent       <span class="number">98</span></span><br><span class="line">Beeblebrox <span class="number">42</span></span><br><span class="line">Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>혹시 이상한 부분 눈치채셨나요?</p>
</blockquote>
<p>일반적인 SQL의 SELECT 구문은 다음과 같습니다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>
<p>그런데 KDB+에서 사용하는 SQL 구문에서 와일드카드(*)는 표현하지 않습니다.</p>
<h3 id="키-테이블">키 테이블</h3>
<p>앞서 일반적인 테이블과 키 테이블은 다르다고 했습니다. 뭐가 다른걸까요?</p>
<p>키 테이블의 데이터 유형을 확인해보면 테이블이 아니라 사전입니다.</p>
<p>간단한 예제를 살펴보도록 하겠습니다. 다음과 같이 사전으로 키 테이블을 구성할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">v:<span class="built_in">flip</span> `name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">k:<span class="built_in">flip</span> (<span class="built_in">enlist</span> `eid)!<span class="built_in">enlist</span> <span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span></span><br><span class="line">kv: k!v</span><br><span class="line"></span><br><span class="line">eid | name       iq</span><br><span class="line">----| --------------</span><br><span class="line"><span class="number">1001</span>| Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span>| Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span>| Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure>
<h4 id="키-테이블-정의-문법">키 테이블 정의 문법</h4>
<p>테이블 정의 문법에 []안에 키를 넣어 키 테이블을 만들수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">kv:([eid:`int$()] <span class="type">`symbol</span>$name:(); iq:`int$())</span><br><span class="line"></span><br><span class="line">eid| name iq</span><br><span class="line">---| -------</span><br></pre></td></tr></table></figure>
<p>또한, <code>xkey</code>를 활용해서 일반 테이블 컬럼중에서 기본 키를 지정하여 키 테이블을 만들 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">t:([] eid:<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>; name:`Dent`Beeblebrox`Prefect; iq:<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">kv: `eid <span class="built_in">xkey</span> t</span><br><span class="line"></span><br><span class="line">eid | name       iq</span><br><span class="line">----| --------------</span><br><span class="line"><span class="number">1001</span>| Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span>| Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span>| Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure>
<p>그러면 반대로 키 테이블을 일반 테이블로 변환하려면 어떻게 할까요? 바로 <code>xkey</code>를 역으로 이용하면 됩니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">kv:([eid:<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>] name:`Dent`Beeblebrox`Prefect; iq:<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">() <span class="built_in">xkey</span> kv</span><br><span class="line"></span><br><span class="line">eid  name       iq</span><br><span class="line">-------------------</span><br><span class="line"><span class="number">1001</span> Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span> Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span> Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure>
<p>그리고 이를 다시 쉽게 하는 방법도 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>!t</span><br><span class="line"></span><br><span class="line">eid | name       iq</span><br><span class="line">----| --------------</span><br><span class="line"><span class="number">1001</span>| Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span>| Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span>| Prefect    <span class="number">126</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span>!kv</span><br><span class="line"></span><br><span class="line">eid  name       iq</span><br><span class="line">-------------------</span><br><span class="line"><span class="number">1001</span> Dent       <span class="number">98</span></span><br><span class="line"><span class="number">1002</span> Beeblebrox <span class="number">42</span></span><br><span class="line"><span class="number">1003</span> Prefect    <span class="number">126</span></span><br></pre></td></tr></table></figure>
<p>우리는 변수를 할당하는 방법과 테이블을 구성하는 방법도 알게되었습니다.</p>
<p>다음 시간에는 q-sql 이라는 q 언어에서 사용할 수 있는 SQL 구문에 대해서 알아보면서 테이블에 레코드를 저장하고 수정, 삭제하는 것을 살펴보겠습니다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="">Kdb+ and q documentation</a></li>
<li><a href="https://code.kx.com/q4m3/8_Tables/" target="_blank" rel="noopener">Q for Mortals - Tables</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 파일 다루기</title>
    <url>/database/kdb/kdb-tutorial/file/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><strong>KDB 튜토리얼 - 파일 다루기</strong></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>KDB+에서 파일을 다루는 방법에 대해서 알아봅니다. 메모리(RDB)에 존재하는 데이터를 디스크(HDB)에 저장하거나 반대로 디스크에 존재하는 데이터를 메모리에 불러올 수 있습니다.</p>
<p>자 그럼 파일을 다루는 법을 배우러 가보실까요?</p>
<h2 id="파일-다루기">파일 다루기</h2>
<p>아래는 파일 관련 키워드입니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> console     <span class="built_in">read0</span>  <span class="number">0</span>: File Text      read/write chars¹</span><br><span class="line"><span class="number">1</span> stdout      <span class="built_in">read1</span>  <span class="number">1</span>: File Binary    read/write bytes¹</span><br><span class="line"><span class="number">2</span> stderr             <span class="number">2</span>: Dynamic Load   <span class="built_in">load</span> shared object</span><br><span class="line">                     ?  Enum Extend</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span> <span class="built_in">set</span>       read/write <span class="built_in">or</span> memory-map a data file¹</span><br><span class="line"></span><br><span class="line"><span class="built_in">hopen</span> <span class="built_in">hclose</span>  open/close a file¹</span><br><span class="line"></span><br><span class="line"><span class="built_in">hcount</span>        file size</span><br><span class="line"><span class="built_in">hdel</span>          <span class="keyword">delete</span> a file <span class="built_in">or</span> folder</span><br><span class="line"><span class="built_in">hsym</span>          symbol/s to file symbol/s¹</span><br><span class="line"></span><br><span class="line"><span class="built_in">save</span>   <span class="built_in">load</span>   a table</span><br><span class="line"><span class="built_in">rsave</span>  <span class="built_in">rload</span>  a splayed table</span><br><span class="line">dsave         <span class="built_in">tables</span></span><br></pre></td></tr></table></figure>
<p>우리는 이 키워드들을 활용해서 파일을 다루게 됩니다.</p>
<h3 id="텍스트-저장-및-읽기">텍스트 저장 및 읽기</h3>
<p><code>0:</code>는 텍스트를 파일에 저장하고 <code>read0</code>은 파일에 저장된 텍스트를 불러올 수 있습니다.</p>
<p>먼저, <code>0:</code>으로 텍스트를 파일에 저장합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ file_symbol <span class="number">0</span>: strings</span><br><span class="line">`:data/hello.txt <span class="number">0</span>: <span class="built_in">enlist</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>그리고 다시 <code>read0</code>으로 파일에 저장된 텍스트를 읽을 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read0</span> `:data/hello.txt</span><br><span class="line"><span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read0</span> `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line"><span class="string">"id,sex,birth_year,country,region,group,infection_reason,infection_order,infected_by,contact_number,confirmed_date,released_date,deceased_date,state"</span></span><br><span class="line"><span class="string">"1,female,1984,China,filtered at airport,,visit to Wuhan,1,,45,2020-01-20,2020-02-06,,released"</span></span><br><span class="line"><span class="string">"2,male,1964,Korea,filtered at airport,,visit to Wuhan,1,,75,2020-01-24,2020-02-05,,released"</span></span><br><span class="line"><span class="string">"3,male,1966,Korea,capital area,,visit to Wuhan,1,,16,2020-01-26,2020-02-12,,released"</span></span><br></pre></td></tr></table></figure>
<h4 id="CSV로-저장하고-불러오기">CSV로 저장하고 불러오기</h4>
<p>KDB+는 쉽게 테이블을 CSV 형식의 텍스트로 만들수 있습니다. 그리고 <code>0:</code>을 통해 CSV 파일로 저장할 수 있게 됩니다.</p>
<p>먼저, 테이블을 CSV 형식의 텍스트로 만듭니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">csv</span> <span class="number">0</span>: patient</span><br><span class="line"></span><br><span class="line"><span class="string">"id,sex,birth_year,country,region,group,infection_reason,infection_order,infected_by,contact_number,confirmed_date,released_date,deceased_date,state"</span></span><br><span class="line"><span class="string">"1,female,1984,China,filtered at airport,,visit to Wuhan,1,,45,2020-01-20,2020-02-06,,released"</span></span><br><span class="line"><span class="string">"2,male,1964,Korea,filtered at airport,,visit to Wuhan,1,,75,2020-01-24,2020-02-05,,released"</span></span><br><span class="line"><span class="string">"3,male,1966,Korea,capital area,,visit to Wuhan,1,,16,2020-01-26,2020-02-12,,released"</span></span><br></pre></td></tr></table></figure>
<p>그리고 CSV 형식의 텍스트를 <code>0:</code>으로 파일로 저장합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`:data/patient.<span class="built_in">csv</span> <span class="number">0</span>: <span class="built_in">csv</span> <span class="number">0</span>: patient</span><br></pre></td></tr></table></figure>
<p>다시 CSV 파일에 저장된 데이터를 기반으로 테이블로 구성할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ (types;delimiter) <span class="number">0</span>: file_symbol</span><br><span class="line">patient: `id <span class="built_in">xkey</span> (<span class="string">"isissssiiiddds"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line">route: (<span class="string">"idsssff"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/route.<span class="built_in">csv</span></span><br><span class="line">time: (<span class="string">"diiiiiiiiii"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/time.<span class="built_in">csv</span></span><br></pre></td></tr></table></figure>
<h4 id="특정-포맷으로-불러오기">특정 포맷으로 불러오기</h4>
<p>파일에 저장된 텍스트에 대하여 특정 포맷 형식으로 변환하여 불러올 수 있습니다.</p>
<p>다음은 처음 8자리는 date 형식이고 나머지 9자리는 time 형식으로 구분한 것입니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ (types; widths) <span class="number">0</span>: file_descriptor <span class="built_in">or</span> list_of_strings</span><br><span class="line"><span class="built_in">flip</span> <span class="type">`date</span><span class="type">`time</span>!(<span class="string">"DT"</span>;<span class="number">8</span> <span class="number">9</span>) <span class="number">0</span>: (<span class="string">"20200201000000000"</span>;<span class="string">"20200301235959000"</span>)</span><br><span class="line"></span><br><span class="line">date       time        </span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">2020.02</span><span class="number">.01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.000</span></span><br><span class="line"><span class="number">2020.03</span><span class="number">.01</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59.000</span></span><br></pre></td></tr></table></figure>
<h3 id="데이터-설정-및-가져오기">데이터 설정 및 가져오기</h3>
<p>키워드 <code>get</code> 그리고 <code>set</code>은 텍스트 파일이 아닌 바이너리 파일로 저장하고 불러올 수 있습니다.</p>
<p>따라서, KDB+가 읽을 수 있는 데이터 파일이 아닌 경우 오류가 발생합니다.</p>
<p>다음은 간단한 텍스트를 데이터 파일로 저장하고 불러오는 예제입니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`:data/hello <span class="built_in">set</span> <span class="string">"Hello World"</span></span><br><span class="line"><span class="built_in">get</span> `:data/hello</span><br><span class="line"></span><br><span class="line">/ 데이터 파일이 아닌 경우</span><br><span class="line"><span class="built_in">get</span> `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line">error: `data/dataset/patient.<span class="built_in">csv</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>CSV 파일은 불러오지 못했죠?</p>
</blockquote>
<h3 id="테이블-저장-및-불러오기">테이블 저장 및 불러오기</h3>
<p>키워드 <code>save</code>와 <code>load</code>를 이용하여 테이블 데이터를 저장하고 불러올 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">save</span> x</span><br><span class="line"><span class="built_in">save</span> `patient</span><br><span class="line">`:patient</span><br><span class="line"></span><br><span class="line">/ 현재 컨텍스트의 patient를 삭제합니다.</span><br><span class="line"><span class="keyword">delete</span> patient <span class="keyword">from</span> `.</span><br><span class="line"></span><br><span class="line">/ 현재 컨텍스트에 patient 테이블이 없습니다.</span><br><span class="line">patient</span><br><span class="line">error: `patient</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">load</span> x</span><br><span class="line"><span class="built_in">load</span> `patient</span><br><span class="line">`patient</span><br><span class="line"></span><br><span class="line">/ 다시 불러온 patient 테이블을 확인합니다.</span><br><span class="line">patient</span><br><span class="line"></span><br><span class="line">id| sex    birth_year country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> | female <span class="number">1984</span>       China   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">2</span> | male   <span class="number">1964</span>       Korea   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"><span class="number">3</span> | male   <span class="number">1966</span>       Korea   capital area                                 visit to Wuhan                    <span class="number">1</span>                           <span class="number">16</span>             <span class="number">2020.01</span><span class="number">.26</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br><span class="line"><span class="number">4</span> | male   <span class="number">1964</span>       Korea   capital area                                 visit to Wuhan                    <span class="number">1</span>                           <span class="number">95</span>             <span class="number">2020.01</span><span class="number">.27</span>     <span class="number">2020.02</span><span class="number">.09</span>                  released</span><br></pre></td></tr></table></figure>
<h4 id="특정-파일-포맷으로-저장">특정 파일 포맷으로 저장</h4>
<p>KDB+는 바이너리 뿐만 아니라 <code>csv</code>, <code>txt</code>, <code>xls</code>, <code>xml</code>형식으로 저장할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">(none)   binary</span><br><span class="line"> <span class="built_in">csv</span>     comma-separated values</span><br><span class="line"> txt     plain text</span><br><span class="line"> xls     Excel spreadsheet</span><br><span class="line"> xml     Extensible Markup Language (XML)</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">save</span> x.extension</span><br><span class="line"><span class="built_in">save</span> `:data/patient.<span class="built_in">csv</span></span><br><span class="line"><span class="built_in">save</span> `:data/patient.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">save</span> `:data/patient.xls</span><br><span class="line"><span class="built_in">read0</span> `:data/patient.xls</span><br></pre></td></tr></table></figure>
<h3 id="재생-테이블-저장-및-불러오기">재생 테이블 저장 및 불러오기</h3>
<p>키워드 <code>rsave</code>와 <code>rload</code>로 키가 없는 일반 테이블에 대하여 컬럼별로 저장되는 재생 테이블로 저장하고 불러올 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">rsave</span> x</span><br><span class="line"><span class="built_in">rsave</span> `:data/time</span><br><span class="line"></span><br><span class="line">/ 키 테이블을 저장하려는 경우</span><br><span class="line"><span class="built_in">rsave</span> `:data/patient</span><br><span class="line">error: `type</span><br><span class="line"></span><br><span class="line">/ reload x</span><br><span class="line"><span class="built_in">rload</span> `:data/time</span><br><span class="line">date       acc_test acc_negative acc_confirmed acc_released acc_deceased new_test new_negative new_confirmed new_released new_deceased</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">2020.01</span><span class="number">.20</span> <span class="number">1</span>        <span class="number">0</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>            <span class="number">1</span>        <span class="number">0</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>           </span><br><span class="line"><span class="number">2020.01</span><span class="number">.21</span> <span class="number">1</span>        <span class="number">0</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>            <span class="number">0</span>        <span class="number">0</span>            <span class="number">0</span>             <span class="number">0</span>            <span class="number">0</span>           </span><br><span class="line"><span class="number">2020.01</span><span class="number">.22</span> <span class="number">4</span>        <span class="number">3</span>            <span class="number">1</span>             <span class="number">0</span>            <span class="number">0</span>            <span class="number">3</span>        <span class="number">3</span>            <span class="number">0</span>             <span class="number">0</span>            <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>재생 테이블로 저장하는 경우 테이블 이름이 폴더 이름이 되며 각 컬럼이 파일로 구분되어 저장됨을 확인할 수 있습니다.</p>
<p><img data-src="/images/2020/kdb-rsave.PNG" alt=""></p>
<h3 id="기타-명령어">기타 명령어</h3>
<h4 id="파일-사이즈-확인하기">파일 사이즈 확인하기</h4>
<p>키워드 <code>hcount</code>는 파일의 바이트 단위 크기를 가져옵니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hcount</span> `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line"><span class="number">254898</span></span><br></pre></td></tr></table></figure>
<h4 id="파일-삭제하기">파일 삭제하기</h4>
<p>키워드 <code>hdel</code>로 파일을 삭제할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">hdel</span> file_symbol</span><br><span class="line"><span class="built_in">hdel</span> `:data/time.<span class="built_in">csv</span></span><br><span class="line">`:data/time.<span class="built_in">csv</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hdel</span> `:data/dataset</span><br><span class="line">error: `data/dataset. OS reports: Directory <span class="built_in">not</span> empty</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>hdel</code>은 폴더가 비어있어야 삭제할 수 있습니다.</p>
</blockquote>
<h3 id="Q-네임스페이스">.Q 네임스페이스</h3>
<p>다음에 알아볼 네임스페이스 중 <code>.Q</code>에는 테이블을 저장하고 불러오는 프로세스를 처리할 수 있는 함수를 포함하고 있습니다.</p>
<ul>
<li><code>.Q.dpft</code> : 테이블 저장</li>
<li><code>.Q.v</code> : 테이블 불러오기</li>
</ul>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">save</span> table</span><br><span class="line">/ .Q.dpft[filpath;partition;fields;table]</span><br><span class="line">.Q.dpft[`:data;`;`id;`route]</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">load</span> splayed table</span><br><span class="line">.Q.v `:data/time</span><br><span class="line"></span><br><span class="line">/ <span class="built_in">load</span> splayed table to dict</span><br><span class="line">.Q.v `:data/time</span><br><span class="line"></span><br><span class="line">date         | <span class="number">2020.01</span><span class="number">.20</span> <span class="number">2020.01</span><span class="number">.21</span> <span class="number">2020.01</span><span class="number">.22</span> <span class="number">2020.01</span><span class="number">.23</span> <span class="number">2020.01</span><span class="number">.24</span> <span class="number">2020.01</span><span class="number">.25</span> <span class="number">2020.01</span><span class="number">.26</span> <span class="number">2020.01</span><span class="number">.27</span> <span class="number">2020.01</span><span class="number">.28</span> <span class="number">2020.01</span><span class="number">.29</span> <span class="number">2020.01</span><span class="number">.30</span> <span class="number">2020.01</span><span class="number">.31</span> <span class="number">2020.02</span><span class="number">.01</span> <span class="number">2020.02</span><span class="number">.02</span> <span class="number">2020.02</span><span class="number">.03</span> <span class="number">2020.02</span><span class="number">.04</span> <span class="number">2020.02</span><span class="number">.05</span> <span class="number">2020.02</span><span class="number">.06</span> <span class="number">2020.02</span><span class="number">.07</span> <span class="number">2020.02</span><span class="number">.08</span> <span class="number">2020.02</span><span class="number">.09</span> <span class="number">2020.02</span><span class="number">.10</span> <span class="number">2020.02</span><span class="number">.11</span> <span class="number">2020.02</span><span class="number">.12</span> <span class="number">2020.02</span><span class="number">.13</span> <span class="number">2020.02</span><span class="number">.14</span> <span class="number">2020.02</span><span class="number">.15</span> <span class="number">2020.02</span><span class="number">.16</span> <span class="number">2020.02</span><span class="number">.17</span> <span class="number">2020.02</span><span class="number">.18</span> <span class="number">2020.02</span><span class="number">.19</span> <span class="number">2020.02</span><span class="number">.20</span> <span class="number">2020.02</span><span class="number">.21</span> <span class="number">2020.02</span><span class="number">.22</span> <span class="number">2020.02</span><span class="number">.23</span> <span class="number">2020.02</span><span class="number">.24</span> <span class="number">2020.02</span><span class="number">.25</span> <span class="number">2020.02</span><span class="number">.26</span> <span class="number">2020.02</span><span class="number">.27</span> <span class="number">2020.02</span><span class="number">.28</span> <span class="number">2020.02</span><span class="number">.29</span> <span class="number">2020.03</span><span class="number">.01</span> <span class="number">2020.03</span><span class="number">.02</span> <span class="number">2020.03</span><span class="number">.03</span> <span class="number">2020.03</span><span class="number">.04</span></span><br><span class="line">acc_test     | <span class="number">1</span>          <span class="number">1</span>          <span class="number">4</span>          <span class="number">22</span>         <span class="number">27</span>         <span class="number">27</span>         <span class="number">51</span>         <span class="number">61</span>         <span class="number">116</span>        <span class="number">187</span>        <span class="number">246</span>        <span class="number">312</span>        <span class="number">371</span>        <span class="number">429</span>        <span class="number">490</span>        <span class="number">607</span>        <span class="number">714</span>        <span class="number">885</span>        <span class="number">1352</span>       <span class="number">2097</span>       <span class="number">2598</span>       <span class="number">3110</span>       <span class="number">4325</span>       <span class="number">5624</span>       <span class="number">6511</span>       <span class="number">7242</span>       <span class="number">7734</span>       <span class="number">8161</span>       <span class="number">8718</span>       <span class="number">9772</span>       <span class="number">11173</span>      <span class="number">13202</span>      <span class="number">16400</span>      <span class="number">21586</span>      <span class="number">26179</span>      <span class="number">32756</span>      <span class="number">40304</span>      <span class="number">53553</span>      <span class="number">66652</span>      <span class="number">81167</span>      <span class="number">94055</span>      <span class="number">109591</span>     <span class="number">125851</span>     <span class="number">136707</span>     <span class="number">146541</span>    </span><br><span class="line">acc_negative | <span class="number">0</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">21</span>         <span class="number">25</span>         <span class="number">25</span>         <span class="number">47</span>         <span class="number">56</span>         <span class="number">97</span>         <span class="number">155</span>        <span class="number">199</span>        <span class="number">245</span>        <span class="number">289</span>        <span class="number">327</span>        <span class="number">414</span>        <span class="number">462</span>        <span class="number">522</span>        <span class="number">693</span>        <span class="number">1001</span>       <span class="number">1134</span>       <span class="number">1683</span>       <span class="number">2552</span>       <span class="number">3535</span>       <span class="number">4811</span>       <span class="number">5921</span>       <span class="number">6679</span>       <span class="number">7148</span>       <span class="number">7647</span>       <span class="number">7980</span>       <span class="number">8923</span>       <span class="number">9973</span>       <span class="number">11238</span>      <span class="number">13016</span>      <span class="number">15116</span>      <span class="number">17520</span>      <span class="number">20292</span>      <span class="number">25447</span>      <span class="number">31576</span>      <span class="number">39318</span>      <span class="number">48593</span>      <span class="number">55723</span>      <span class="number">71580</span>      <span class="number">85484</span>      <span class="number">102965</span>     <span class="number">118965</span>    </span><br><span class="line">acc_confirmed| <span class="number">1</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">3</span>          <span class="number">4</span>          <span class="number">4</span>          <span class="number">4</span>          <span class="number">6</span>          <span class="number">11</span>         <span class="number">12</span>         <span class="number">15</span>         <span class="number">15</span>         <span class="number">16</span>         <span class="number">18</span>         <span class="number">23</span>         <span class="number">24</span>         <span class="number">24</span>         <span class="number">27</span>         <span class="number">27</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">28</span>         <span class="number">29</span>         <span class="number">30</span>         <span class="number">31</span>         <span class="number">51</span>         <span class="number">104</span>        <span class="number">204</span>        <span class="number">433</span>        <span class="number">602</span>        <span class="number">833</span>        <span class="number">977</span>        <span class="number">1261</span>       <span class="number">1766</span>       <span class="number">2337</span>       <span class="number">3150</span>       <span class="number">4212</span>       <span class="number">4812</span>       <span class="number">5328</span>       <span class="number">5766</span>      </span><br><span class="line">acc_released | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">3</span>          <span class="number">4</span>          <span class="number">4</span>          <span class="number">7</span>          <span class="number">7</span>          <span class="number">7</span>          <span class="number">9</span>          <span class="number">9</span>          <span class="number">10</span>         <span class="number">12</span>         <span class="number">16</span>         <span class="number">16</span>         <span class="number">17</span>         <span class="number">18</span>         <span class="number">18</span>         <span class="number">24</span>         <span class="number">24</span>         <span class="number">24</span>         <span class="number">27</span>         <span class="number">27</span>         <span class="number">28</span>         <span class="number">31</span>         <span class="number">34</span>         <span class="number">41</span>         <span class="number">88</span>        </span><br><span class="line">acc_deceased | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">2</span>          <span class="number">6</span>          <span class="number">8</span>          <span class="number">12</span>         <span class="number">12</span>         <span class="number">13</span>         <span class="number">16</span>         <span class="number">17</span>         <span class="number">22</span>         <span class="number">28</span>         <span class="number">32</span>         <span class="number">35</span>        </span><br><span class="line">new_test     | <span class="number">1</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">18</span>         <span class="number">5</span>          <span class="number">0</span>          <span class="number">24</span>         <span class="number">10</span>         <span class="number">55</span>         <span class="number">71</span>         <span class="number">59</span>         <span class="number">66</span>         <span class="number">59</span>         <span class="number">58</span>         <span class="number">61</span>         <span class="number">117</span>        <span class="number">107</span>        <span class="number">171</span>        <span class="number">467</span>        <span class="number">745</span>        <span class="number">501</span>        <span class="number">512</span>        <span class="number">1215</span>       <span class="number">1299</span>       <span class="number">887</span>        <span class="number">731</span>        <span class="number">492</span>        <span class="number">427</span>        <span class="number">557</span>        <span class="number">1054</span>       <span class="number">1401</span>       <span class="number">2029</span>       <span class="number">3198</span>       <span class="number">5186</span>       <span class="number">4593</span>       <span class="number">6577</span>       <span class="number">7548</span>       <span class="number">13249</span>      <span class="number">13099</span>      <span class="number">14515</span>      <span class="number">12888</span>      <span class="number">15536</span>      <span class="number">16260</span>      <span class="number">10856</span>      <span class="number">9834</span>      </span><br><span class="line">new_negative | <span class="number">0</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">18</span>         <span class="number">4</span>          <span class="number">0</span>          <span class="number">22</span>         <span class="number">9</span>          <span class="number">41</span>         <span class="number">58</span>         <span class="number">44</span>         <span class="number">46</span>         <span class="number">44</span>         <span class="number">38</span>         <span class="number">87</span>         <span class="number">48</span>         <span class="number">60</span>         <span class="number">171</span>        <span class="number">308</span>        <span class="number">133</span>        <span class="number">549</span>        <span class="number">869</span>        <span class="number">983</span>        <span class="number">1276</span>       <span class="number">1110</span>       <span class="number">758</span>        <span class="number">469</span>        <span class="number">499</span>        <span class="number">333</span>        <span class="number">943</span>        <span class="number">1050</span>       <span class="number">1265</span>       <span class="number">1778</span>       <span class="number">2100</span>       <span class="number">2404</span>       <span class="number">2772</span>       <span class="number">5155</span>       <span class="number">6129</span>       <span class="number">7742</span>       <span class="number">9275</span>       <span class="number">7130</span>       <span class="number">15857</span>      <span class="number">13904</span>      <span class="number">17481</span>      <span class="number">16000</span>     </span><br><span class="line">new_confirmed| <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">2</span>          <span class="number">5</span>          <span class="number">1</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">5</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">20</span>         <span class="number">53</span>         <span class="number">100</span>        <span class="number">229</span>        <span class="number">169</span>        <span class="number">231</span>        <span class="number">144</span>        <span class="number">284</span>        <span class="number">505</span>        <span class="number">571</span>        <span class="number">813</span>        <span class="number">1062</span>       <span class="number">600</span>        <span class="number">516</span>        <span class="number">438</span>       </span><br><span class="line">new_released | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">2</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">2</span>          <span class="number">4</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">6</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">3</span>          <span class="number">3</span>          <span class="number">7</span>          <span class="number">47</span>        </span><br><span class="line">new_deceased | <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>이번에는 파일을 저장하고 불러오며 파일을 다루는 방법에 대해서 알아보았습니다. 이제 다른 시스템(자바 애플리케이션 등)에서 필요한 데이터를 추출하여 파일로 저장하여 사용할 수 있게 되었습니다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://code.kx.com/q/basics/files/" target="_blank" rel="noopener">Reference - File system</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 함수</title>
    <url>/database/kdb/kdb-tutorial/function/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><strong>KDB 튜토리얼 - 함수</strong></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>이번 시간에는 일반적인 데이터베이스의 Function을 만드는 것 처럼 KDB+에 함수를 만들고 호출하는 것을 알아봅니다.</p>
<h2 id="함수">함수</h2>
<p>함수 또한 변수와 테이블처럼 컨택스트에 할당할 수 있습니다.</p>
<h3 id="함수-정의하기">함수 정의하기</h3>
<p>함수 정의는 중괄호와 매개변수로 이루어진 표현식입니다.</p>
<p>{[p1;…;pn] e1; …; em}</p>
<p>다음은 라디안 함수를 정의한 것입니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">PI: acos <span class="number">-1</span></span><br><span class="line">radian:&#123;x * PI % <span class="number">180.0</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>매개변수 <code>[]</code>는 생략할 수 있습니다.</p>
</blockquote>
<h4 id="함수로-데이터-추가하기">함수로 데이터 추가하기</h4>
<p>함수 안에서 테이블에 데이터를 추가하려면 <code>table,:data</code>를 이용해야합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.fn.insert.patient:&#123;patient,:x <span class="number">1</span>b&#125;</span><br></pre></td></tr></table></figure>
<h3 id="함수-사용하기">함수 사용하기</h3>
<p>함수를 사용할때 매개변수는 대괄호에 표현합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">radian[<span class="number">37.547889</span>]</span><br><span class="line"><span class="number">0.6553343</span></span><br><span class="line"></span><br><span class="line">radian <span class="number">37.547889</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>매개변수가 하나일 경우 대괄호를 생략할 수 있어요</p>
</blockquote>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://code.kx.com/q4m3/6_Functions/" target="_blank" rel="noopener">Q Mortals - Functions</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 그룹핑과 집계</title>
    <url>/database/kdb/kdb-tutorial/grouping-and-aggregation/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><strong>KDB 튜토리얼 - 그룹핑과 집계</strong></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>이전 시간에 Q-SQL의 SELECT와 WHERE, ORDER BY에 대해서 다루었습니다. 이번에는 그룹핑과 집계를 알아봅니다.</p>
<h2 id="그룹핑과-집계">그룹핑과 집계</h2>
<p>SQL과 달리 KDB+의 그룹핑과 집계는 독립적으로 동작합니다.</p>
<h3 id="Group-By">Group By</h3>
<p><code>by</code> 키워드로 그룹핑할 수 있습니다.</p>
<p>예를 들어, 일자별 검사 현황(time)를 월별 신규 검사 현황으로 그룹핑한다면 다음과 같습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span> new_test, <span class="built_in">sum</span> new_negative, <span class="built_in">sum</span> new_confirmed, <span class="built_in">sum</span> new_released, <span class="built_in">sum</span> new_deceased <span class="keyword">by</span> date.month <span class="keyword">from</span> time</span><br><span class="line"></span><br><span class="line">month  | new_test new_negative new_confirmed new_released new_deceased</span><br><span class="line">-------| -------------------------------------------------------------</span><br><span class="line"><span class="number">2020.01</span>| <span class="number">312</span>      <span class="number">245</span>          <span class="number">11</span>            <span class="number">0</span>            <span class="number">0</span>           </span><br><span class="line"><span class="number">2020.02</span>| <span class="number">93743</span>    <span class="number">55478</span>        <span class="number">3139</span>          <span class="number">28</span>           <span class="number">17</span>          </span><br><span class="line"><span class="number">2020.03</span>| <span class="number">52486</span>    <span class="number">63242</span>        <span class="number">2616</span>          <span class="number">60</span>           <span class="number">18</span></span><br></pre></td></tr></table></figure>
<h3 id="Aggregation">Aggregation</h3>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 자바 클라이언트</title>
    <url>/database/kdb/kdb-tutorial/java-client/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><strong>KDB 튜토리얼 - 자바 클라이언트</strong></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>우리는 KDB+에 직접 접근하여 변수 할당, 테이블 생성, 함수 생성, 데이터 저장등을 해왔습니다. 자바 애플리케이션에서 일반적인 데이터베이스로 접근할 때 데이터소스를 이용하는 것처럼 다양한 애플리케이션에서 사용할 수 있는 클라이언트 API를 제공합니다.</p>
<p>이번 시간에는 자바 애플리케이션에서 KDB+에 접근하여 함수를 호출하거나 응답을 받을 수 있는 <a href="https://github.com/KxSystems/javakdb" target="_blank" rel="noopener">javakdb</a> 클라이언트를 사용해보고자 합니다.</p>
<h2 id="c-java">c.java</h2>
<p><code>c.java</code>는 TCP/IP로 kdb+와 Java 간의 통신을 위한 드라이버입니다.</p>
<p>이 드라이버는 다음과 같은 기능을 제공합니다.</p>
<ul>
<li>kdb+ 쿼리</li>
<li>kdb+ 퍼블리셔 구독</li>
<li>kdb+ 컨슈머로 퍼블리싱</li>
</ul>
<p>그 중에서 우리는 kdb+ 쿼리 기능을 사용할 것입니다.</p>
<h3 id="Connection">Connection</h3>
<p><code>c</code> 생성자는 새로운 커넥션 인스턴스를 만듭니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c c = <span class="keyword">new</span> c(<span class="string">"localhost"</span>,<span class="number">5600</span>,<span class="string">"kdev:kdev"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="메시지-보내기">메시지 보내기</h3>
<p><code>c.k</code> 또는 <code>c.ks</code> 함수를 통해 <code>c</code> 클라이언트가 KDB+로 메시지를 보내고 응답을 받을 수 있습니다.</p>
<ul>
<li>c.k() : 동기 메시지</li>
<li>c.ks() : 비동기 메시지</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.ks(<span class="string">"-1\"Hello World\""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in log</span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<h3 id="메시지-응답-가져오기">메시지 응답 가져오기</h3>
<p><code>.Q.w[]</code> 메시지를 보내어 현재 메모리 사용량 통계 정보를 응답받아 표시해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object k = c.k(<span class="string">".Q.w[]"</span>);</span><br><span class="line"><span class="keyword">if</span>(k <span class="keyword">instanceof</span> kx.c.Dict) &#123;</span><br><span class="line">    kx.c.Dict dict = (kx.c.Dict) k;</span><br><span class="line"></span><br><span class="line">    String[] keys = (String[]) dict.x;</span><br><span class="line">    <span class="keyword">long</span>[] values = (<span class="keyword">long</span>[]) dict.y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">        String key = keys[i];</span><br><span class="line">        <span class="keyword">long</span> value = values[i];</span><br><span class="line">        System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// system console</span></span><br><span class="line">used:<span class="number">775792</span></span><br><span class="line">heap:<span class="number">67108864</span></span><br><span class="line">peak:<span class="number">67108864</span></span><br><span class="line">wmax:<span class="number">0</span></span><br><span class="line">mmap:<span class="number">0</span></span><br><span class="line">mphy:<span class="number">2085904384</span></span><br><span class="line">syms:<span class="number">799</span></span><br><span class="line">symw:<span class="number">29324</span></span><br></pre></td></tr></table></figure>
<p><code>.Q.w[]</code> 결과는 사전이므로 <code>kx.c.Dict</code> 오브젝트로 키와 값을 구분하여 가져올 수 있습니다.</p>
<h4 id="JSON-응답">JSON 응답</h4>
<p>메시지 응답이 문자열인 경우 char[] 오브젝트를 결과로 받습니다. char[]를 String으로 변환하면 JSON String으로 가져올 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object k = c.k(<span class="string">".j.j select from patient where sex = `female, state = `deceased"</span>);</span><br><span class="line">String r = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) k);</span><br><span class="line">System.out.println(r);</span><br></pre></td></tr></table></figure>
<p><em>System Console</em></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">"id"</span>:<span class="number">38</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1963</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-18"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-02-23"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">205</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1965</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Gyeongsangbuk-do"</span>,<span class="attr">"group"</span>:<span class="string">"Cheongdo Daenam Hospital"</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-22"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-02-21"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">925</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1951</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Gyeongsangbuk-do"</span>,<span class="attr">"group"</span>:<span class="string">"Shincheonji Church"</span>,<span class="attr">"infection_reason"</span>:<span class="string">"contact with patient"</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-25"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-02-24"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2614</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1943</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-29"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-03-01"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2769</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1934</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-02-29"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-03-02"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">4046</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>,<span class="attr">"birth_year"</span>:<span class="number">1962</span>,<span class="attr">"country"</span>:<span class="string">"Korea"</span>,<span class="attr">"region"</span>:<span class="string">"Daegu"</span>,<span class="attr">"group"</span>:<span class="string">""</span>,<span class="attr">"infection_reason"</span>:<span class="string">""</span>,<span class="attr">"infection_order"</span>:<span class="literal">null</span>,<span class="attr">"infected_by"</span>:<span class="literal">null</span>,<span class="attr">"contact_number"</span>:<span class="literal">null</span>,<span class="attr">"confirmed_date"</span>:<span class="string">"2020-03-01"</span>,<span class="attr">"released_date"</span>:<span class="string">""</span>,<span class="attr">"deceased_date"</span>:<span class="string">"2020-03-01"</span>,<span class="attr">"state"</span>:<span class="string">"deceased"</span>&#125;]</span><br></pre></td></tr></table></figure>
<h4 id="Table-응답">Table 응답</h4>
<p>메시지 응답이 테이블일 경우에는 <code>kx.c.Flip</code> 오브젝트로 컬럼과 값을 구분하여 가져올 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object k = c.k(<span class="string">"select from time"</span>);</span><br><span class="line">kx.c.Flip r = (kx.c.Flip) k;</span><br><span class="line">String[] x = r.x;</span><br><span class="line">Object[] y = r.y;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>왠만하면 JSON 으로 변환해서 응답받고 이를 자바 빈 오브젝트로 변환하는게 좋을 것 같습니다.</p>
</blockquote>
<p>이제 우리는 자바 애플리케이션에서도 메시지를 호출하여 함수를 실행할수도 있고 응답을 받을 수도 있습니다.</p>
<p>이상으로 KDB 튜토리얼을 마칩니다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://code.kx.com/v2/interfaces/java-client-for-q/" target="_blank" rel="noopener">Using Java with kdb+</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 네임스페이스</title>
    <url>/database/kdb/kdb-tutorial/namespace/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><strong>KDB 튜토리얼 - 네임스페이스</strong></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>KDB+를 다루면서 변수 또는 테이블, 함수를 현재 컨텍스트에 할당하였습니다. 그런데 말입니다. 만약, 여러 스크립트에서 똑같은 변수 이름을 사용한다면 어떻게 될까요? A.q라는 스크립트가 먼저 수행되고 B.q가 스크립트가 나중에 수행되는데 충돌된 이름이 있다면 A.q 스크립트에서 할당한 변수는 덮어쓰여지고 맙니다.</p>
<p>KDB+에는 이러한 변수 이름이 충돌되는 문제를 해결하기 위하여 네임스페이스라는 특별한 공간을 제공합니다.</p>
<blockquote>
<p>자바에서 패키지라고 볼 수 있겟네요</p>
</blockquote>
<h2 id="네임스페이스">네임스페이스</h2>
<p>네임스페이스는 <code>.</code>를 사용하여 구분하며 q에서는 컨텍스트라고 부릅니다. 예를 들어, <code>.jaxb.x</code>라는 변수는 사실 <code>.jaxb</code> 컨텍스트에 존재하는 <code>x</code> 입니다.</p>
<h3 id="컨텍스트">컨텍스트</h3>
<p>q의 네임스페이스는 사전으로 구현되어있습니다. 각 컨텍스트는 키가 네임스페이스의 심볼릭 이름의 사전입니다.</p>
<p>다음과 같이 <code>.variables</code> 컨텍스트에 변수를 할당하였다고 할때 <code>.variables</code>를 확인해봅시다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.variables.DATE_UNIT:`YEAR`MONTH`DAY</span><br><span class="line">.variables.TIME_UNIT:`HOUR`MINUTE_30`MINUTE_15`MINUTE_5`MINUTE</span><br><span class="line">.variables.DATETIME_UNIT:.variables.DATE_UNIT,.variables.TIME_UNIT</span><br><span class="line"></span><br><span class="line">.variables</span><br><span class="line"></span><br><span class="line">                      | ::</span><br><span class="line">DATE_UNIT             | `YEAR`MONTH`DAY</span><br><span class="line">TIME_UNIT             | `HOUR`MINUTE_30`MINUTE_15`MINUTE_5`MINUTE</span><br><span class="line">DATETIME_UNIT         | `YEAR`MONTH`DAY`HOUR`MINUTE_30`MINUTE_15`MINUTE_5`MINUTE</span><br></pre></td></tr></table></figure>
<blockquote>
<p>물론 컨텍스트 안에 컨텍스트로 구분할 수 있습니다.<br>
대신에 어떠한 값이 할당되어있으면 안됩니다.</p>
</blockquote>
<h3 id="컨텍스트-내-할당된-이름-목록">컨텍스트 내 할당된 이름 목록</h3>
<p>컨텍스트에 대하여 <code>key</code> 키워드를 사용하면 할당된 모든 이름을 나열할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="built_in">key</span> context</span><br><span class="line"><span class="built_in">key</span> `.</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> `.</span><br><span class="line"><span class="built_in">get</span> `.</span><br><span class="line"></span><br><span class="line">/ 중첩된 컨텍스트</span><br><span class="line"><span class="built_in">key</span> `.util</span><br><span class="line">`convert`validate</span><br></pre></td></tr></table></figure>
<h3 id="컨텍스트-내-할당된-이름-삭제">컨텍스트 내 할당된 이름 삭제</h3>
<p>컨텍스트는 사전이기 때문에 할당된 이름을 제거할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get</span> `.</span><br><span class="line"></span><br><span class="line">v          | +`name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line">k          | +(,`eid)!,<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span></span><br><span class="line">kv         | (+(,`eid)!,<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>)!+`name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> v, k <span class="keyword">from</span> `.</span><br><span class="line">kv         | (+(,`eid)!,<span class="number">1001</span> <span class="number">1002</span> <span class="number">1003</span>)!+`name`iq!(`Dent`Beeblebrox`Prefect;<span class="number">98</span> <span class="number">42</span> <span class="number">126</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>삭제하는 행위임을 명심하십시오.</p>
</blockquote>
<h3 id="컨텍스트-저장-및-불러오기">컨텍스트 저장 및 불러오기</h3>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ file_path <span class="built_in">set</span> <span class="built_in">get</span> context</span><br><span class="line">`:data/variables <span class="built_in">set</span> <span class="built_in">get</span> `.</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span> `:data/variables</span><br><span class="line"></span><br><span class="line">time   | +<span class="type">`date</span>`acc_test`acc_negative`acc_confirmed`acc_released`acc_deceased`new_test`new_negative`new_confirmed`new_released`new_deceased!(<span class="number">2020.01</span><span class="number">.20</span> <span class="number">2020.01</span><span class="number">.21</span> <span class="number">2020.01</span><span class="number">.22</span> <span class="number">2020.01</span><span class="number">.23</span> <span class="number">2020.01</span><span class="number">.24</span> <span class="number">2.</span>.</span><br><span class="line">patient| (+(,`id)!,<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span> <span class="number">49</span> <span class="number">50</span> <span class="number">51</span> <span class="number">52</span> <span class="number">53</span> <span class="number">54</span> <span class="number">55</span> <span class="number">56</span> <span class="number">57</span> <span class="number">58</span> <span class="number">59</span> <span class="number">60</span> <span class="number">61</span> <span class="number">62</span> <span class="number">6.</span>.</span><br><span class="line">route  | +`id<span class="type">`date</span>`province`city`visit`latitude`longitude!(<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">10</span> <span class="number">11</span> <span class="number">11</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12.</span>.</span><br></pre></td></tr></table></figure>
<p>반대로 파일에 저장된 컨텍스트 정보를 가져와 다시 덮어쓸수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`.varibales <span class="built_in">set</span> <span class="built_in">get</span> `:data/varibales</span><br></pre></td></tr></table></figure>
<h2 id="KDB-네임스페이스">KDB+ 네임스페이스</h2>
<p>KDB+가 기본으로 제공하는 네임스페이스는 다음과 같습니다.</p>
<h3 id="j">.j</h3>
<p>이 네임스페이스에는 사전을 JSON으로 변환하는 함수를 포함하고 있습니다.</p>
<h4 id="Serialize">Serialize</h4>
<p>테이블을 JSON으로 직렬화할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ .j.j x</span><br><span class="line">.j.j <span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> birth_year &gt;= <span class="number">1992</span></span><br><span class="line"></span><br><span class="line"><span class="string">"[&#123;\"id\":9,\"sex\":\"female\",\"birth_year\":1992,\"country\":\"Korea\",\"region\":\"capital area\",\"group\":\"\",\"infection_reason\":\"contact with patient\",\"infection_order\":2,\"infected_by..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`:data/patient.json 0: enlist .j.j select from patient where birth_year &gt;= 1992</span></span><br></pre></td></tr></table></figure>
<h4 id="Deserialize">Deserialize</h4>
<p>JSON으로 직렬화하여 저장한 것을 다시 역직렬화할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ json_string: <span class="built_in">read0</span> `:data/patient.json</span><br><span class="line">/ json_flat: <span class="built_in">raze</span> json_string</span><br><span class="line"></span><br><span class="line">.j.k <span class="built_in">raze</span> <span class="built_in">read0</span> `:data/patient.json</span><br></pre></td></tr></table></figure>
<h3 id="h">.h</h3>
<p>.h 네임스페이스는 문자열을 HTML로 마크업하거나 데이터를 다양한 형식으로 변환, HTTP 응답 내용을 만드는 함수를 포함합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ .h.hu x</span><br><span class="line">.h.hu <span class="string">"http://www.naver.com"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"http%3a%2f%2fwww.naver.com"</span></span><br><span class="line"></span><br><span class="line">/ .h.hy</span><br><span class="line">`:data/response.txt <span class="number">0</span>: <span class="built_in">enlist</span> .h.hy[`json] .j.j .<span class="built_in">system</span>.info</span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: <span class="number">180</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"operating_system"</span>:<span class="string">"l32"</span>,<span class="string">"core"</span>:<span class="number">2</span>,<span class="string">"proccess_id"</span>:<span class="number">7</span>,<span class="string">"quiet_mode"</span>:true,<span class="string">"version"</span>:<span class="number">3.6</span>,<span class="string">"init_script"</span>:<span class="string">"/root/_startup.q"</span>,<span class="string">"host"</span>:<span class="string">"172.17.0.1"</span>,<span class="string">"timestamp"</span>:<span class="string">"2020-03-07T03:25:45.029869000"</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="기본-웹-서버">기본 웹 서버</h4>
<p>KDB+는 기본적으로 웹 서버를 제공합니다. 브라우저로 <a href="http://localhost:5600/%EB%A1%9C" target="_blank" rel="noopener">http://localhost:5600/로</a> 접속해보면 사용자 인증 후 간단하게 현재 컨텍스트 정보를 확인할 수 있는 페이지를 응답합니다.</p>
<p><img data-src="/images/2020/kdb-web.PNG" alt=""></p>
<h3 id="Q">.Q</h3>
<p>.Q 네임스페이스는 유용한 유틸리티 함수가 포함되어있습니다.</p>
<p>다음은 메모리 사용량 통계를 보고 가비지 콜렉션을 수행하는 예제입니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ memory stats</span><br><span class="line">.Q.w[]</span><br><span class="line"></span><br><span class="line">used| <span class="number">1315280</span></span><br><span class="line">heap| <span class="number">67108864</span></span><br><span class="line">peak| <span class="number">67108864</span></span><br><span class="line">wmax| <span class="number">0</span></span><br><span class="line">mmap| <span class="number">0</span></span><br><span class="line">mphy| <span class="number">2085904384</span></span><br><span class="line">syms| <span class="number">1328</span></span><br><span class="line">symw| <span class="number">47056</span></span><br><span class="line"></span><br><span class="line">/ garbage collect</span><br><span class="line">.Q.gc[]</span><br></pre></td></tr></table></figure>
<h3 id="z">.z</h3>
<p>.z 네임스페이스에는 시스템 정보 또는 통신 콜백 함수가 포함되어있습니다.</p>
<p>몇가지만 사용해보겠습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">system</span>.host: .Q.host .z.a</span><br><span class="line">.<span class="built_in">system</span>.info: `operating_system`core`proccess_id`quiet_mode`version`init_script`host<span class="type">`timestamp</span>!(.z.o;.z.c;.z.i;.z.q;.z.K;.z.f;.<span class="built_in">system</span>.host;.z.p)</span><br><span class="line"></span><br><span class="line">operating_system| `l32</span><br><span class="line">core            | <span class="number">2</span>i</span><br><span class="line">proccess_id     | <span class="number">7</span>i</span><br><span class="line">quiet_mode      | <span class="number">1</span>b</span><br><span class="line">version         | <span class="number">3.6</span></span><br><span class="line">init_script     | `/root/_startup.q</span><br><span class="line">host            | `<span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">timestamp       | <span class="number">2020.03</span><span class="number">.07</span>D03:<span class="number">25</span>:<span class="number">45.029869000</span></span><br></pre></td></tr></table></figure>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://code.kx.com/q4m3/12_Workspace_Organization/" target="_blank" rel="noopener">Q Motals - Workspace Organization</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - Q-SQL</title>
    <url>/database/kdb/kdb-tutorial/q-sql/</url>
    <content><![CDATA[<ol>
<li><a href="../install-and-connection">KDB 튜토리얼 - 설치 및 접속</a></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><strong>KDB 튜토리얼 - Q-SQL</strong></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>이번 글에서는 일반적인 데이터베이스에서 사용하는 SQL 구문을 사용할 수 있도록 KDB+가 지원하는 q-sql에 대해서 알아봅니다.</p>
<p>알아보기 전에 필요한 데이터를 준비하기 위하여 국내에 COVID-19 확산으로 인해 발생한 정보를 CSV로 구성한 <a href="https://github.com/jihoo-kim/Coronavirus-Dataset" target="_blank" rel="noopener">Coronavirus-Dataset</a>를 불러오도록 하겠습니다.</p>
<h3 id="데이터-불러오기">데이터 불러오기</h3>
<p>CSV 파일에 저장된 데이터를 테이블로 불러오는 것은 파일을 다루는 챕터에서 알아볼 내용이지만 우선 데이터를 불러오도록 하겠습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">patient: `id` <span class="built_in">xkey</span> (<span class="string">"isissssiiiddds"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/patient.<span class="built_in">csv</span></span><br><span class="line">route: `id <span class="built_in">xkey</span> (<span class="string">"idsssff"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/route.<span class="built_in">csv</span></span><br><span class="line">time: (<span class="string">"diiiiiiiiii"</span>;<span class="built_in">enlist</span><span class="string">","</span>) <span class="number">0</span>: `:data/dataset/time.<span class="built_in">csv</span></span><br></pre></td></tr></table></figure>
<p>네 데이터를 불러오는 것은 끝났습니다.</p>
<p>간단하게 설명하자면 <code>xkey</code>로 테이블에 대한 키를 지정하였고 isissssiiiddds와 같이 데이터의 형식을 지정하였으며 CSV로 구성되었기에 ,를 구분자로 사용했습니다.</p>
<p>이제 Q-SQL을 배우러 가보실까요?</p>
<h2 id="Q-SQL">Q-SQL</h2>
<p>Q-SQL 표현식은 종속절, <code>by</code>, <code>from</code> 그리고 <code>where</code>과 같은 고유 문법 규칙이 있습니다.</p>
<p>컬럼에 대한 구분은 콤마(,)입니다.</p>
<h3 id="SELECT">SELECT</h3>
<p>SELECT는 테이블의 컬럼을 선택할 수 있습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ <span class="keyword">select</span> [<span class="built_in">cols</span>] [<span class="keyword">by</span> groups] <span class="keyword">from</span> t [<span class="built_in">where</span> filters]</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient</span><br></pre></td></tr></table></figure>
<blockquote>
<p>KDB+는 모든 컬럼을 선택할 때 와일드카드를 사용하지 않습니다.</p>
</blockquote>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sex, infection_order, infection_reason, confirmed_date, released_date, deceased_date <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">sex    infection_order infection_reason                  confirmed_date released_date deceased_date</span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line">female <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.26</span>     <span class="number">2020.02</span><span class="number">.12</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.27</span>     <span class="number">2020.02</span><span class="number">.09</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.03</span><span class="number">.02</span>                 </span><br><span class="line">male   <span class="number">2</span>               contact with patient              <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.19</span>                 </span><br><span class="line">male   <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.15</span>                 </span><br><span class="line">female <span class="number">1</span>               visit to Wuhan                    <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.12</span></span><br></pre></td></tr></table></figure>
<h3 id="WHERE">WHERE</h3>
<p>WHERE는 여러가지 조건절을 표현할 수 있습니다.</p>
<h4 id="">=</h4>
<p><code>=</code>는 가장 일반적인 비교입니다.</p>
<p>코로나 바이러스로 인해 사망한 여성을 구분하고자 하면 다음과 같습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> sex = `female, state = `deceased</span><br><span class="line"></span><br><span class="line">id  | sex    birth_year country region           <span class="built_in">group</span>                    infection_reason     infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">----| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">38</span>  | female <span class="number">1963</span>       Korea   Daegu                                                                                                     <span class="number">2020.02</span><span class="number">.18</span>                   <span class="number">2020.02</span><span class="number">.23</span>    deceased</span><br><span class="line"><span class="number">205</span> | female <span class="number">1965</span>       Korea   Gyeongsangbuk-<span class="keyword">do</span> Cheongdo Daenam Hospital                                                                 <span class="number">2020.02</span><span class="number">.22</span>                   <span class="number">2020.02</span><span class="number">.21</span>    deceased</span><br><span class="line"><span class="number">925</span> | female <span class="number">1951</span>       Korea   Gyeongsangbuk-<span class="keyword">do</span> Shincheonji Church       contact with patient                                            <span class="number">2020.02</span><span class="number">.25</span>                   <span class="number">2020.02</span><span class="number">.24</span>    deceased</span><br><span class="line"><span class="number">2614</span>| female <span class="number">1943</span>       Korea   Daegu                                                                                                     <span class="number">2020.02</span><span class="number">.29</span>                   <span class="number">2020.03</span><span class="number">.01</span>    deceased</span><br><span class="line"><span class="number">2769</span>| female <span class="number">1934</span>       Korea   Daegu                                                                                                     <span class="number">2020.02</span><span class="number">.29</span>                   <span class="number">2020.03</span><span class="number">.02</span>    deceased</span><br><span class="line"><span class="number">4046</span>| female <span class="number">1962</span>       Korea   Daegu                                                                                                     <span class="number">2020.03</span><span class="number">.01</span>                   <span class="number">2020.03</span><span class="number">.01</span>    deceased</span><br></pre></td></tr></table></figure>
<h4 id="in">in</h4>
<p><code>in</code> 키워드는 컬럼의 데이터가 조건을 포함하는 것을 표현합니다.</p>
<p>국내 확진자 중 중국 국적인 사람을 찾고 싶다면 다음과 같이 사용합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> country in `China</span><br><span class="line"></span><br><span class="line">id | sex    birth_year country region              <span class="built_in">group</span>                         infection_reason              infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">---| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span>  | female <span class="number">1984</span>       China   filtered at airport                               visit to Wuhan                <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">12</span> | male   <span class="number">1971</span>       China   capital area                                      contact with patient in Japan <span class="number">2</span>                           <span class="number">422</span>            <span class="number">2020.02</span><span class="number">.01</span>     <span class="number">2020.02</span><span class="number">.18</span>                  released</span><br><span class="line"><span class="number">14</span> | female <span class="number">1980</span>       China   capital area                                      contact with patient          <span class="number">3</span>               <span class="number">12</span>          <span class="number">3</span>              <span class="number">2020.02</span><span class="number">.02</span>     <span class="number">2020.02</span><span class="number">.18</span>                  released</span><br><span class="line"><span class="number">23</span> | female <span class="number">1962</span>       China   capital area                                      visit to Wuhan                <span class="number">1</span>                           <span class="number">23</span>             <span class="number">2020.02</span><span class="number">.06</span>     <span class="number">2020.02</span><span class="number">.29</span>                  released</span><br><span class="line"><span class="number">27</span> | female <span class="number">1982</span>       China   capital area                                      visit to China                <span class="number">1</span>                           <span class="number">40</span>             <span class="number">2020.02</span><span class="number">.09</span>                                 isolated</span><br><span class="line"><span class="number">28</span> | female <span class="number">1989</span>       China   capital area                                      contact with patient          <span class="number">2</span>               <span class="number">3</span>           <span class="number">1</span>              <span class="number">2020.02</span><span class="number">.10</span>     <span class="number">2020.02</span><span class="number">.17</span>                  released</span><br><span class="line"><span class="number">755</span>| male   <span class="number">1954</span>       China   capital area        Eunpyeong St. Mary's Hospital                                                                          <span class="number">2020.02</span><span class="number">.24</span>                                 isolated</span><br><span class="line"><span class="number">924</span>| female <span class="number">1945</span>       China   capital area                                      visit to China                                                           <span class="number">2020.02</span><span class="number">.25</span>                                 isolated</span><br></pre></td></tr></table></figure>
<blockquote>
<p>country는 심볼 데이터 유형입니다.</p>
</blockquote>
<h4 id="like">like</h4>
<p><code>like</code> 키워드는 패턴 매칭을 제공합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ x like y</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> infection_reason like <span class="string">"*Wuhan*"</span></span><br><span class="line"></span><br><span class="line">id| sex    birth_year country region              <span class="built_in">group</span> infection_reason   infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> | female <span class="number">1984</span>       China   filtered at airport       visit to Wuhan     <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">2</span> | male   <span class="number">1964</span>       Korea   filtered at airport       visit to Wuhan     <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"><span class="number">3</span> | male   <span class="number">1966</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">16</span>             <span class="number">2020.01</span><span class="number">.26</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br><span class="line"><span class="number">4</span> | male   <span class="number">1964</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">95</span>             <span class="number">2020.01</span><span class="number">.27</span>     <span class="number">2020.02</span><span class="number">.09</span>                  released</span><br><span class="line"><span class="number">5</span> | male   <span class="number">1987</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">31</span>             <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.03</span><span class="number">.02</span>                  released</span><br><span class="line"><span class="number">7</span> | male   <span class="number">1991</span>       Korea   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">9</span>              <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.15</span>                  released</span><br><span class="line"><span class="number">8</span> | female <span class="number">1957</span>       Korea   Jeollabuk-<span class="keyword">do</span>              visit to Wuhan     <span class="number">1</span>                           <span class="number">113</span>            <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br><span class="line"><span class="number">13</span>| male   <span class="number">1992</span>       Korea   filtered at airport       residence in Wuhan <span class="number">1</span>                           <span class="number">0</span>              <span class="number">2020.02</span><span class="number">.02</span>     <span class="number">2020.02</span><span class="number">.24</span>                  released</span><br><span class="line"><span class="number">23</span>| female <span class="number">1962</span>       China   capital area              visit to Wuhan     <span class="number">1</span>                           <span class="number">23</span>             <span class="number">2020.02</span><span class="number">.06</span>     <span class="number">2020.02</span><span class="number">.29</span>                  released</span><br><span class="line"><span class="number">24</span>| male   <span class="number">1992</span>       Korea   filtered at airport       residence in Wuhan <span class="number">1</span>                           <span class="number">0</span>              <span class="number">2020.02</span><span class="number">.06</span>     <span class="number">2020.02</span><span class="number">.27</span>                  released</span><br></pre></td></tr></table></figure>
<h4 id="within">within</h4>
<p><code>within</code>은 범위에 포함되는 것을 표현합니다.</p>
<p>예를 들어, 2020년 1월 확진자 중에 2차 이후 감염자를 찾으려면 다음과 같습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> patient <span class="built_in">where</span> confirmed_date within (<span class="number">2020.01</span><span class="number">.01</span>;<span class="number">2020.01</span><span class="number">.31</span>), infection_order &gt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">id| sex    birth_year country region       <span class="built_in">group</span> infection_reason     infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| ----------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">6</span> | male   <span class="number">1964</span>       Korea   capital area       contact with patient <span class="number">2</span>               <span class="number">3</span>           <span class="number">17</span>             <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.02</span><span class="number">.19</span>                  released</span><br><span class="line"><span class="number">9</span> | female <span class="number">1992</span>       Korea   capital area       contact with patient <span class="number">2</span>               <span class="number">5</span>           <span class="number">2</span>              <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.24</span>                  released</span><br><span class="line"><span class="number">10</span>| female <span class="number">1966</span>       Korea   capital area       contact with patient <span class="number">3</span>               <span class="number">6</span>           <span class="number">43</span>             <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.19</span>                  released</span><br><span class="line"><span class="number">11</span>| male   <span class="number">1995</span>       Korea   capital area       contact with patient <span class="number">3</span>               <span class="number">6</span>           <span class="number">0</span>              <span class="number">2020.01</span><span class="number">.31</span>     <span class="number">2020.02</span><span class="number">.10</span>                  released</span><br></pre></td></tr></table></figure>
<h3 id="ORDER-BY">ORDER BY</h3>
<p>SELECT 결과를 정렬하기 위해서는 <code>xasc</code> 또는 <code>xdesc</code> 키워드를 사용합니다.</p>
<p>예를 들어, 접촉자 수(contact_number)가 많은 수로 정렬하면 다음과 같습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">`contact_number <span class="built_in">xdesc</span> <span class="keyword">select</span> <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">id  | sex    birth_year country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">----| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">31</span>  | female <span class="number">1959</span>       Korea   Daegu               Shincheonji Church                                                                     <span class="number">1160</span>           <span class="number">2020.02</span><span class="number">.18</span>                                 isolated</span><br><span class="line"><span class="number">16</span>  | female <span class="number">1977</span>       Korea   Gwangju                                      visit to Thailand                 <span class="number">1</span>                           <span class="number">450</span>            <span class="number">2020.02</span><span class="number">.04</span>     <span class="number">2020.02</span><span class="number">.19</span>                  released</span><br><span class="line"><span class="number">12</span>  | male   <span class="number">1971</span>       China   capital area                                 contact with patient in Japan     <span class="number">2</span>                           <span class="number">422</span>            <span class="number">2020.02</span><span class="number">.01</span>     <span class="number">2020.02</span><span class="number">.18</span>                  released</span><br><span class="line"><span class="number">17</span>  | male   <span class="number">1982</span>       Korea   capital area                                 contact with patient in Singapore <span class="number">2</span>                           <span class="number">290</span>            <span class="number">2020.02</span><span class="number">.05</span>     <span class="number">2020.02</span><span class="number">.12</span>                  released</span><br></pre></td></tr></table></figure>
<h3 id="DELETE">DELETE</h3>
<p>DELETE 키워드는 데이터 또는 항목을 제거합니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> patient <span class="built_in">where</span> released_date &lt; <span class="number">2020.03</span><span class="number">.01</span></span><br><span class="line"></span><br><span class="line">id| sex  birth_year country region       <span class="built_in">group</span> infection_reason     infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| --------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">5</span> | male <span class="number">1987</span>       Korea   capital area       visit to Wuhan       <span class="number">1</span>                           <span class="number">31</span>             <span class="number">2020.01</span><span class="number">.30</span>     <span class="number">2020.03</span><span class="number">.02</span>                  released</span><br><span class="line"><span class="number">83</span>| male <span class="number">1944</span>       Korea   capital area       contact with patient <span class="number">3</span>               <span class="number">6</span>                          <span class="number">2020.02</span><span class="number">.20</span>     <span class="number">2020.03</span><span class="number">.01</span>                  released</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> birth_year <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">id| sex    country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">--| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1</span> | female China   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line"><span class="number">2</span> | male   Korea   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> id <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">sex    birth_year country region              <span class="built_in">group</span>                    infection_reason                  infection_order infected_by contact_number confirmed_date released_date deceased_date state   </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">female <span class="number">1984</span>       China   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">45</span>             <span class="number">2020.01</span><span class="number">.20</span>     <span class="number">2020.02</span><span class="number">.06</span>                  released</span><br><span class="line">male   <span class="number">1964</span>       Korea   filtered at airport                          visit to Wuhan                    <span class="number">1</span>                           <span class="number">75</span>             <span class="number">2020.01</span><span class="number">.24</span>     <span class="number">2020.02</span><span class="number">.05</span>                  released</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> patient</span><br><span class="line"></span><br><span class="line">id| sex birth_year country region <span class="built_in">group</span> infection_reason infection_order infected_by contact_number confirmed_date released_date deceased_date state</span><br><span class="line">--| ------------------------------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<blockquote>
<p>patient 테이블에 결과를 할당해야 반영됩니다.</p>
</blockquote>
<p>다음 시간에는 그룹핑과 집계에 대해 알아볼 것입니다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://code.kx.com/q/basics/qsql/" target="_blank" rel="noopener">Reference - Q-SQL</a></li>
<li><a href="https://code.kx.com/q4m3/9_Queries_q-sql/#90-overview" target="_blank" rel="noopener">Q Mortals - Queries</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB 튜토리얼 - 설치 및 접속</title>
    <url>/database/kdb/kdb-tutorial/install-and-connection/</url>
    <content><![CDATA[<ol>
<li><strong>KDB 튜토리얼 - 설치 및 접속</strong></li>
<li><a href="../assign-variables-and-tables">KDB 튜토리얼 - 변수 할당 및 테이블 생성</a></li>
<li><a href="../q-sql">KDB 튜토리얼 - Q-SQL</a></li>
<li><a href="../grouping-and-aggregation">KDB 튜토리얼 - 그룹핑과 집계</a></li>
<li><a href="../file">KDB 튜토리얼 - 파일 다루기</a></li>
<li><a href="../namespace">KDB 튜토리얼 - 네임스페이스</a></li>
<li><a href="../function">KDB 튜토리얼 - 함수</a></li>
<li><a href="../java-client">KDB 튜토리얼 - 자바 클라이언트</a></li>
</ol>
<h2 id="들어가며">들어가며</h2>
<p>KDB+는 KxSystems에서 만든 시계열 데이터베이스입니다.</p>
<ul>
<li>고성능의 시계열 컬럼 데이터베이스</li>
<li>인-메모리 엔진</li>
<li>실시간 스트리밍 프로세서</li>
<li>표현 쿼리 및 프로그래밍 언어 <code>q</code></li>
</ul>
<blockquote>
<p>KDB+를 다루기 위해서 q라는 프로그래밍 언어에 대해서 배워야합니다.</p>
</blockquote>
<h3 id="HDB-그리고-RDB">HDB 그리고 RDB</h3>
<p>KDB+는 현재날짜의 이전 데이터는 HDB(Historical Database)으로 디스크에 저장하고 현재 데이터는 RDB(Reatime Database)으로 메모리에 저장합니다.</p>
<p><img data-src="https://code.kx.com/q/img/wstree.png" alt=""></p>
<blockquote>
<p>Kx 공식 레퍼런스에 따르면 RDB 머신이 최소 할당할 수 있는 메모리의 크기를 하루에 저장되는 데이터의 크기의 4배 이상으로 할당하는 것을 추천합니다.</p>
</blockquote>
<h2 id="설치-및-접속">설치 및 접속</h2>
<p>Kx에서 <a href="https://kx.com/connect-with-us/download/" target="_blank" rel="noopener">직접 다운로드</a> 링크를 받거나 도커 이미지를 통해 설치할 수 있습니다. 저는 간단하게 도커를 이용하여 KDB+를 설치하고 실행해보도록 하겠습니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kdb+ 이미지 다운로드</span></span><br><span class="line">docker pull kysely/kdbq</span><br><span class="line"></span><br><span class="line"><span class="comment"># kdb+ 컨테이너 실행</span></span><br><span class="line">docker run --name kdb -p 5000:5000 -v <span class="string">"c:\q/data"</span>:/root/data -e AUTH=<span class="string">"kdev:kdev"</span> -d kysely/kdbq</span><br></pre></td></tr></table></figure>
<p><strong>Dockerfile</strong><br>
위 이미지는 다음과 같이 구성되어 있습니다.</p>
<blockquote>
<p><a href="https://github.com/kysely/kdbq-server/blob/oligarch/Dockerfile" target="_blank" rel="noopener">https://github.com/kysely/kdbq-server/blob/oligarch/Dockerfile</a></p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile license: MIT, see LICENSE file</span></span><br><span class="line"><span class="comment"># kdb+ 32-bit Personal Edition license: see https://kx.com/download/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> debian:<span class="number">8.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"maintainer"</span>=<span class="string">"Radek Kysely &lt;radek@kysely.org&gt;"</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"kdb+ license"</span>=<span class="string">"No Fee, Non-Commercial Use &lt;https://kx.com/download/&gt;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PORT=<span class="number">5000</span></span><br><span class="line"><span class="keyword">ENV</span> ON_STARTUP=<span class="string">"-1\"Fresh startup\";"</span></span><br><span class="line"><span class="keyword">ENV</span> AUTH=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">    unzip=6.0* \</span></span><br><span class="line"><span class="bash">    lib32z1=1:1.2.8* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> https://kx.com/347_d0szre-fr8917_llrsT4Yle-5839sdX/3.6/linuxx86.zip \</span></span><br><span class="line"><span class="bash">    /root/kdbq.zip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip /root/kdbq.zip -x q/q.q q/README.txt -d /root/ &amp;&amp; rm /root/kdbq.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $PORT</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> docker-entrypoint.sh <span class="string">"<span class="variable">$PORT</span>"</span> <span class="string">"<span class="variable">$ON_STARTUP</span>"</span> <span class="string">"<span class="variable">$AUTH</span>"</span></span></span><br></pre></td></tr></table></figure>
<h3 id="접속하기">접속하기</h3>
<p>KDB+로 접속하는 방법은 여러가지가 있습니다.</p>
<ul>
<li><a href="https://code.kx.com/developer/" target="_blank" rel="noopener">Kx Developer</a></li>
<li><a href="https://github.com/CharlesSkelton/studio" target="_blank" rel="noopener">Studio for kdb+</a></li>
<li><a href="http://www.timestored.com/qstudio/" target="_blank" rel="noopener">qStudio</a></li>
<li><a href="https://gitlab.com/shupakabras/kdb-intellij-plugin" target="_blank" rel="noopener">KDB+ Studio plugin for IntelliJ IDEA</a></li>
<li><a href="https://atom.io/packages/connect-kdb-q" target="_blank" rel="noopener">connect-kdb-q for Atom</a></li>
<li><a href="https://packagecontrol.io/packages/q%20KDB" target="_blank" rel="noopener">Sublime-q</a> ✅</li>
</ul>
<p>이 중에서 저는 서브라임 텍스트 에디터의 <code>Sublime-q</code> 패키지가 가장 사용하기 편리한 것 같습니다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#host:port:user:password</span></span><br><span class="line"><span class="comment">#localhost:port</span></span><br><span class="line">localhost:5600:kdev:kdev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>컨테이너 실행 시 -e AUTH=&quot;:&quot; 로 옵션을 지정하는 경우 사용자 및 비밀번호를 사용하지 않고 접속할 수 있습니다.</p>
</blockquote>
<p>정상적으로 접속된 경우 서브라임 텍스트 하단에 다음과 같이 OK 로그가 출력됩니다.</p>
<p><img data-src="/images/2020/kdb-connection-sublime-q.png" alt=""></p>
<p>짝짝짝! 접속까지 성공하였습니다.</p>
<h3 id="명령어-실행">명령어 실행</h3>
<p>간단한 몇가지 명령어를 실행해보도록 하겠습니다.</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">/ 포트 확인</span><br><span class="line">\p</span><br><span class="line"></span><br><span class="line">/ 현재 사용자</span><br><span class="line">.z.u</span><br><span class="line"></span><br><span class="line">/ OS</span><br><span class="line">.z.o</span><br><span class="line"></span><br><span class="line">/ 현재 시간</span><br><span class="line">.z.</span><br><span class="line"></span><br><span class="line">/ 프로세스 아이디</span><br><span class="line">.z.i</span><br><span class="line"></span><br><span class="line">/ 코어 수</span><br><span class="line">.z.c</span><br><span class="line"></span><br><span class="line">/ 가비지 컬렉션 호출</span><br><span class="line">.Q.gc[]</span><br><span class="line"></span><br><span class="line">/ 메모리 사용량 통계</span><br><span class="line">.Q.w[]</span><br><span class="line"></span><br><span class="line">/ 파일 또는 데이터 로드</span><br><span class="line">.Q.l</span><br><span class="line"></span><br><span class="line">/ 누락 HDB 테이블 저장</span><br><span class="line">.Q.chk</span><br><span class="line"></span><br><span class="line">/ 테이블 저장</span><br><span class="line">.Q.dpft</span><br></pre></td></tr></table></figure>
<p>다음에는 변수 할당 및 테이블 생성에 대해서 다루겠습니다.</p>
<h2 id="참고">참고</h2>
<ul>
<li><a href="https://code.kx.com/" target="_blank" rel="noopener">Kdb+ and q documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>개발 이야기</category>
      </categories>
      <tags>
        <tag>KDB</tag>
        <tag>Q</tag>
      </tags>
  </entry>
</search>
